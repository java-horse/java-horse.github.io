<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git基础操作命令</title>
    <url>/post/7884.html</url>
    <content><![CDATA[<h1 id="Git基础操作命令"><a href="#Git基础操作命令" class="headerlink" title="Git基础操作命令"></a>Git基础操作命令</h1><blockquote>
<p>项目一般会有两个分支，例如：</p>
<ul>
<li>master(main) 主分支：用于保存发布的项目代码</li>
<li>dev 开发分支： 用于保存开发过程中的代码，所有的组员将自己开发的代码提交到该分支上</li>
</ul>
</blockquote>
<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><blockquote>
<ol>
<li><code>mkdir [工作目录]</code>：windows命令创建工作目录（看起来就高大上）</li>
<li><code>git init</code>：初始化当前文件</li>
<li><code>git add .</code>：将所有文件添加到暂存区</li>
<li><code>git commit -m "[提交说明]"</code>：将暂存区文件上传到本地仓库</li>
<li><code>git remote add origin [你的github/gitee的仓库地址]</code>：添加远程仓库</li>
<li><code>git checkout -b dev</code>：创建并切换到dev分支</li>
<li><code>git push origin dev -u</code>： 推送项目文件到远程创库的dev分支上（如果推送不成功，可以考虑添加 <code>-f</code> 参数，执行强制推送）</li>
</ol>
</blockquote>
<p>Git的常用命令远远不止于此，需要我们不断的学习，同时可以配置Git可视化工具【GitKraken】，提高工作效率。</p>
<h2 id="Git版本切换"><a href="#Git版本切换" class="headerlink" title="Git版本切换"></a>Git版本切换</h2><blockquote>
<p>主要命令：</p>
<ul>
<li><code>git reset --hard [版本号]</code>：根据具体版本号进行版本切换</li>
<li><code>git reflog</code>： 查看操作记录（用于查询<code>git log</code> 命令找不到的版本号）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> F:\git_test   master </span><br><span class="line"><span class="comment">// 当前已经提交过项目的两个版本</span></span><br><span class="line">$ git log</span><br><span class="line"><span class="function">commit <span class="title">f33ec4acb3dd5373d4d064c3288e473c9833654a</span> <span class="params">(HEAD -&gt; master)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:43:01 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">commit f71a3fd8a586d8b41f709ef989477af2d87f069e</span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:40:29 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 切换为版本1</span></span></span><br><span class="line"><span class="function"><span class="comment">// HEAD^表示当前版本的前一个版本，HEAD^^表示当前版本的前前个版本，推荐使用HEAD~1表示当前版本的前一个版本，HEAD~100表示当前版本的前100版本。</span></span></span><br><span class="line"><span class="function">$ git reset --hard HEAD~1</span></span><br><span class="line"><span class="function">HEAD is now at f71a3fd version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 版本1的内容只用1句话</span></span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 查看log提交日志，发现版本2的记录消失</span></span></span><br><span class="line"><span class="function">$ git log</span></span><br><span class="line"><span class="function">commit <span class="title">f71a3fd8a586d8b41f709ef989477af2d87f069e</span> <span class="params">(HEAD -&gt; master)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:40:29 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 查看所有的操作记录，可以找到版本2的版本号，可以进行版本切换</span></span></span><br><span class="line"><span class="function">$ git reflog</span></span><br><span class="line"><span class="function"><span class="title">f71a3fd</span> <span class="params">(HEAD -&gt; master)</span> HEAD@</span>{<span class="number">0</span>}: reset: moving to HEAD~<span class="number">1</span></span><br><span class="line">f33ec4a HEAD@{<span class="number">1</span>}: reset: moving to f33ec4acb3dd5373d4d064c3288e473c9833654a</span><br><span class="line">f71a3fd (HEAD -&gt; master) HEAD@{<span class="number">2</span>}: reset: moving to HEAD</span><br><span class="line">f71a3fd (HEAD -&gt; master) HEAD@{<span class="number">3</span>}: reset: moving to HEAD~<span class="number">1</span></span><br><span class="line">f33ec4a HEAD@{<span class="number">4</span>}: commit: version <span class="number">2</span></span><br><span class="line">f71a3fd (HEAD -&gt; master) HEAD@{<span class="number">5</span>}: commit (initial): version <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> F:\git_test   master </span><br><span class="line"><span class="comment">// 切换为版本2</span></span><br><span class="line">$ git reset --hard f33ec4a</span><br><span class="line">HEAD is now at f33ec4a version <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> F:\git_test   master </span><br><span class="line"><span class="comment">// 版本2内容有2句话</span></span><br><span class="line">$ cat code.txt</span><br><span class="line">杭州绿之居有限公司</span><br><span class="line"></span><br><span class="line">郑州大学</span><br><span class="line"></span><br><span class="line"> F:\git_test   master </span><br><span class="line">$</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git文件修改撤销"><a href="#Git文件修改撤销" class="headerlink" title="Git文件修改撤销"></a>Git文件修改撤销</h2><blockquote>
<p>管理文件常见场景：</p>
<ul>
<li>场景1：当修改了工作区的某个文件的内容时，但是没有执行<code>git add .</code>命令前，发现修改的不好，想直接丢弃当前自己在工作区的修改时，使用命令<code>git checkout -- [文件名称]</code>直接回退文件内容至初始</li>
<li>场景2：当修改了工作区的内容后，但是已经执行<code>git add .</code>命令，想要丢弃修改时，需要执行两个命令步骤：<ul>
<li>先执行<code>git reset HEAD – [文件名称]</code>命令</li>
<li>再执行<code>git checkout -- [文件名称]</code>命令</li>
</ul>
</li>
<li>场景3：当修改的工作内容已经执行<code>git commit -m "commit info"</code>命令提交到本地仓库后，想要撤销修改操作，那就只能执行版本回退操作啦<code>git reset --hard HEAD~x</code>(回退到某个版本,丢弃工作区代码)，或者使用<code>git reset --soft HEAD~x</code>（回退到某个版本,保留工作区代码）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> F:\git_test   master ± </span><br><span class="line"><span class="comment">// 添加一句内容</span></span><br><span class="line">$ cat code.txt</span><br><span class="line">杭州绿之居有限公司</span><br><span class="line"></span><br><span class="line">郑州大学</span><br><span class="line"></span><br><span class="line">郑州工业学院</span><br><span class="line"></span><br><span class="line"> F:\git_test   master ± </span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line">        modified:   code.txt</span><br><span class="line"></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function"><span class="comment">// 回退内容，直接丢弃修改内容</span></span></span><br><span class="line"><span class="function">$ git checkout -- code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">//  内容回退成功</span></span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州工业应用技术学院</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span></span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span></span></span><br><span class="line"><span class="function">        modified:   code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git add .</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">Changes to be committed:</span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)</span></span></span><br><span class="line"><span class="function">        modified:   code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git reset HEAD code.txt</span></span><br><span class="line"><span class="function">Unstaged changes after reset:</span></span><br><span class="line"><span class="function">M       code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州工业应用技术学院</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span></span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span></span></span><br><span class="line"><span class="function">        modified:   code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git checkout -- code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">nothing to commit, working tree clean</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git分支创建合并"><a href="#Git分支创建合并" class="headerlink" title="Git分支创建合并"></a>Git分支创建合并</h2><blockquote>
<p>分支的创建合并基本命令如下：</p>
<ul>
<li>查看分支：<code>git branch</code></li>
<li>创建并切换到新分支： <code>git checkout -b dev</code></li>
<li>合并某指定分支到当前分支：<code>git merge dev</code></li>
<li>删除分支：<code>git branch -d dev</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"> F:\git_test   dev ± </span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"> F:\git_test   dev ± </span><br><span class="line">$ git commit -m <span class="string">"dev分支 version 1"</span></span><br><span class="line">[dev aeb86d5] dev分支 version <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">3</span> insertions(+)</span><br><span class="line"></span><br><span class="line"> F:\git_test   dev </span><br><span class="line">$ git log</span><br><span class="line"><span class="function">commit <span class="title">aeb86d5a3906a88b249a47bdb8d80e4a05ea8953</span> <span class="params">(HEAD -&gt; dev)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 11:26:30 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    dev分支 version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">commit <span class="title">f33ec4acb3dd5373d4d064c3288e473c9833654a</span> <span class="params">(master)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:43:01 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">commit f71a3fd8a586d8b41f709ef989477af2d87f069e</span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:40:29 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   dev </span></span><br><span class="line"><span class="function">$ git checkout master</span></span><br><span class="line"><span class="function">Switched to branch 'master'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git checkout dev</span></span><br><span class="line"><span class="function">Switched to branch 'dev'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   dev </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">我是dev分支下创建的内容...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   dev </span></span><br><span class="line"><span class="function">$ git checkout master</span></span><br><span class="line"><span class="function">Switched to branch 'master'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git merge dev</span></span><br><span class="line"><span class="function">Updating f33ec4a..aeb86d5</span></span><br><span class="line"><span class="function">Fast-forward</span></span><br><span class="line"><span class="function"> code.txt | 3 +++</span></span><br><span class="line"><span class="function"> 1 file changed, 3 <span class="title">insertions</span><span class="params">(+)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">我是dev分支下创建的内容...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git branch -d dev</span></span><br><span class="line"><span class="function">Deleted branch <span class="title">dev</span> <span class="params">(was aeb86d5)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git branch</span></span><br><span class="line"><span class="function">* master</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git branch -a</span></span><br><span class="line"><span class="function">* master</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git分支文件冲突解决"><a href="#Git分支文件冲突解决" class="headerlink" title="Git分支文件冲突解决"></a>Git分支文件冲突解决</h2><blockquote>
<ul>
<li>产生原因：当master分支和dev分支都操作了同一份文件，并且都进来commit提交操作，这时进行文件的merge操作，就是产生文件冲突。</li>
<li>解决方法： 手动删除冲突的地方，然后重新执行暂存、提交操作。</li>
</ul>
</blockquote>
<h2 id="Git其他命令"><a href="#Git其他命令" class="headerlink" title="Git其他命令"></a>Git其他命令</h2><blockquote>
<ul>
<li>禁用fast forward合并方式： <code>git merge --no-ff -m "禁用fast forward方式并重新合并提交" dev</code></li>
<li>修改commit信息（最新版本（HEAD）的commit信息）： <code>git commit --amend -m "update commit info version 6"</code></li>
<li>暂时存储工作区文件：<code>git stash</code></li>
<li>释放存储的工作区文件：<code>git stash pop</code></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo提示框</title>
    <url>/post/46526.html</url>
    <content><![CDATA[<h2 id="有图标的提示框"><a href="#有图标的提示框" class="headerlink" title="有图标的提示框"></a>有图标的提示框</h2><div class="note default flat"><p>default 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note default %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note primary flat"><p>primary 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note primary %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success flat"><p>success 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note success %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info flat"><p>info 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note info %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note warning flat"><p>warning 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note warning %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger flat"><p>danger 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note danger %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="不带图标的提示框"><a href="#不带图标的提示框" class="headerlink" title="不带图标的提示框"></a>不带图标的提示框</h2><ul>
<li>不带图标的写法和上述写法一致只是再代码中加入 <code>no-icon</code> 即可</li>
<li>栗子 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note info no-icon %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<div class="note default no-icon flat"><p>default 提示块标签</p>
</div>
<div class="note primary no-icon flat"><p>primary 提示块标签</p>
</div>
<div class="note success no-icon flat"><p>success 提示块标签</p>
</div>
<div class="note info no-icon flat"><p>info 提示块标签</p>
</div>
<div class="note warning no-icon flat"><p>warning 提示块标签</p>
</div>
<div class="note danger no-icon flat"><p>danger 提示块标签</p>
</div>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>DFA算法实现敏感词过滤</title>
    <url>/post/6430.html</url>
    <content><![CDATA[<h2 id="DFA算法实现敏感词过滤"><a href="#DFA算法实现敏感词过滤" class="headerlink" title="DFA算法实现敏感词过滤"></a>DFA算法实现敏感词过滤</h2><h3 id="引入敏感词文件"><a href="#引入敏感词文件" class="headerlink" title="引入敏感词文件"></a>引入敏感词文件</h3><blockquote>
<p>将敏感词库文件<code>sensitive-words.txt</code>放到<code>resources</code>目录下,文件太大，在这里就象征性引入一下。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">回民吃猪肉</span><br><span class="line">习近平</span><br><span class="line">TMD</span><br><span class="line">毛民进党</span><br><span class="line">机吧</span><br><span class="line">联国</span><br><span class="line"><span class="number">1989</span>六四</span><br><span class="line">性爱电影</span><br><span class="line">李红智</span><br><span class="line">梁光烈</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建节点实例"><a href="#创建节点实例" class="headerlink" title="创建节点实例"></a>创建节点实例</h3><blockquote>
<p>创建敏感词过滤前缀树的节点实例<code>TrieNode</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler.sensitive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 敏感词过滤前缀树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/31 8:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤的关键词结束标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isKeyWordEnd = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, TrieNode&gt; subNodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isKeyWordEnd</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> isKeyWordEnd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyWordEnd</span><span class="params">(<span class="keyword">boolean</span> keyWordEnd)</span> </span>{</span><br><span class="line">        isKeyWordEnd = keyWordEnd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> character</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSubNode</span><span class="params">(Character character, TrieNode node)</span> </span>{</span><br><span class="line">        subNodes.put(character, node);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> character</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">getSubNode</span><span class="params">(Character character)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> subNodes.get(character);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="初始化加载词库"><a href="#初始化加载词库" class="headerlink" title="初始化加载词库"></a>初始化加载词库</h3><blockquote>
<p>使用<code>CommandLineRunner</code>操作：服务启动过程中异步加载敏感词到前缀树,组建敏感词库</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.handler.sensitive.SensitiveFilterHandler;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.util.ThreadUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 初始化敏感词库: 服务启动过程中,加载敏感词到前缀树,逐渐敏感词库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/31 9:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordInit</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SensitiveFilterHandler sensitiveFilterHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ThreadUtils.executor.execute(<span class="keyword">new</span> KeyWordsInit());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">KeyWordsInit</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">            watch.start();</span><br><span class="line">            log.info(<span class="string">" ==&gt; 开始初始化敏感词库..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 加载敏感词文件</span></span><br><span class="line">                InputStream resource = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"sensitive-words.txt"</span>);</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(resource));</span><br><span class="line">                <span class="comment">// 异步加载敏感词文件并主键词库</span></span><br><span class="line">                String keyWord;</span><br><span class="line">                <span class="keyword">while</span> ((keyWord = reader.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                    sensitiveFilterHandler.addKeyWord(keyWord);</span><br><span class="line">                }</span><br><span class="line">                watch.stop();</span><br><span class="line">                log.info(<span class="string">" ==&gt; 初始化敏感词库共耗时: {}ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                log.error(<span class="string">" ==&gt; 敏感词库初始化异常: {}"</span>, e.getMessage());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="ThreadUtils线程池工具类"><a href="#ThreadUtils线程池工具类" class="headerlink" title="ThreadUtils线程池工具类"></a>ThreadUtils线程池工具类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义线程池工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/10 14:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建基于guava开源类库的线程工厂(这种创建线程池的方式可以自定义线程名,比较方便且安全)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"SystemThreadPool-%d"</span>).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建线程池(利用自定义的线程工厂)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">30</span>), threadFactory);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="敏感词过滤处理实现"><a href="#敏感词过滤处理实现" class="headerlink" title="敏感词过滤处理实现"></a>敏感词过滤处理实现</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler.sensitive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.constants.BlogConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.CharUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 敏感词过滤处理实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/31 8:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilterHandler</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode rootNode = <span class="keyword">new</span> TrieNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个敏感词添加到前缀树节点中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addKeyWord</span><span class="params">(String keyWord)</span> </span>{</span><br><span class="line">        TrieNode tempNode = rootNode;</span><br><span class="line">        <span class="keyword">int</span> length = keyWord.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">char</span> ch = keyWord.charAt(i);</span><br><span class="line">            TrieNode subNode = tempNode.getSubNode(ch);</span><br><span class="line">            <span class="keyword">if</span> (subNode == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">// 初始化节点: 设置子节点</span></span><br><span class="line">                subNode = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                tempNode.addSubNode(ch, subNode);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 设置subNode指向下一个子节点,进入下一轮循环</span></span><br><span class="line">            tempNode = subNode;</span><br><span class="line">            <span class="comment">// 设置结束标识</span></span><br><span class="line">            <span class="keyword">if</span> (i == length - <span class="number">1</span>) {</span><br><span class="line">                tempNode.setKeyWordEnd(<span class="keyword">true</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为符号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymbol</span><span class="params">(Character c)</span> </span>{</span><br><span class="line">        <span class="comment">// 0x2E80~0x9FFF 是东亚文字范围</span></span><br><span class="line">        <span class="keyword">return</span> !CharUtils.isAsciiAlphanumeric(c) &amp;&amp; (c &lt; <span class="number">0x2E80</span> || c &gt; <span class="number">0x9FFF</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤敏感词</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterSensitiveWord</span><span class="params">(String text)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//指针1</span></span><br><span class="line">        TrieNode tempNode = rootNode;</span><br><span class="line">        <span class="comment">//指针2</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//指针3</span></span><br><span class="line">        <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//结果</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (position &lt; text.length()) {</span><br><span class="line">            <span class="keyword">char</span> c = text.charAt(position);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	跳过符号</span></span><br><span class="line"><span class="comment">            	情况一：符号在敏感词前面，将符号写入结果，如 ☆敏感词</span></span><br><span class="line"><span class="comment">            	情况二：符号在敏感词中间，则将符号与敏感词一起替换，如敏☆感☆词</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (isSymbol(c)) {</span><br><span class="line">                <span class="comment">//若指针1处于根节点，对应情况一，将符号计入结果，让指针2向下走一步</span></span><br><span class="line">                <span class="keyword">if</span> (tempNode == rootNode) {</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                    begin++;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//无论符号在开头还是敏感词中间，指针3都向下走一步</span></span><br><span class="line">                position++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//检查下级节点</span></span><br><span class="line">            tempNode = tempNode.getSubNode(c);</span><br><span class="line">            <span class="keyword">if</span> (tempNode == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">//以begin开头的的字符串不是敏感词</span></span><br><span class="line">                sb.append(text.charAt(begin));</span><br><span class="line">                <span class="comment">//指针2和指针3共同指向指针2的下一个位置</span></span><br><span class="line">                position = ++begin;</span><br><span class="line">                <span class="comment">//指针1重新指向根节点</span></span><br><span class="line">                tempNode = rootNode;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (tempNode.isKeyWordEnd()) {</span><br><span class="line">                <span class="comment">//发现敏感词，将begin~position字符串替换: ***</span></span><br><span class="line">                sb.append(BlogConstants.REPLACEMENT);</span><br><span class="line">                <span class="comment">//进入下一个位置</span></span><br><span class="line">                begin = ++position;</span><br><span class="line">                <span class="comment">//指针1重新指向根节点</span></span><br><span class="line">                tempNode = rootNode;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//检查下一个字符</span></span><br><span class="line">                position++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将最后一批字符计入结果</span></span><br><span class="line">        sb.append(text.substring(begin));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试结果：very nice!</p>
<p><img src="https://i.loli.net/2021/05/24/uSjR24PvBDkomGg.gif" alt="燥起来"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
        <tag>DFA</tag>
      </tags>
  </entry>
  <entry>
    <title>File文件上传简单测试</title>
    <url>/post/53122.html</url>
    <content><![CDATA[<h2 id="File文件上传简单测试"><a href="#File文件上传简单测试" class="headerlink" title="File文件上传简单测试"></a>File文件上传简单测试</h2><h3 id="内容要点"><a href="#内容要点" class="headerlink" title="内容要点"></a>内容要点</h3><blockquote>
<ul>
<li>字节流文件上传（BIO）</li>
<li>直接缓冲流文件上传（BIO）</li>
<li>Channel管道文件上传（NIO） ==&gt; <code>最快</code></li>
<li>NIO的Files工具类文件上传（NIO）</li>
</ul>
</blockquote>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><blockquote>
<p>代码中主要用到HuTool工具类，运行前，请先引入HuTool依赖</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>  关于关闭流的简单写法：</p>
<ul>
<li>try-with-resources语句包含了两个用分号隔开的声明：inputStream 和 outputStream， 当代码块中代码终止，不管是正常还是异常，inputStream 和 outputStream 对象的 close方法 都会自动按声明的 相反顺序 调用。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String inner_file_path = <span class="string">"C:\\Users\\administered\\Pictures\\Saved Pictures\\2052675.20211018.jpg"</span>;</span><br><span class="line">      String out_file_path = <span class="string">"C:\\Users\\administered\\Pictures\\Camera Roll\\file.jpg"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// try-with-resources语句包含了两个用分号隔开的声明：inputStream 和 outputStream。</span></span><br><span class="line">      <span class="comment">// 当代码块中代码终止，不管是正常还是异常，inputStream 和 outputStream 对象的 close方法 都会自动按声明的 相反顺序 调用。</span></span><br><span class="line">      <span class="keyword">try</span> (</span><br><span class="line">              FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(inner_file_path));</span><br><span class="line">              FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(out_file_path));</span><br><span class="line">              ) {</span><br><span class="line">          <span class="comment">// 操作数据流</span></span><br><span class="line">          log.info(<span class="string">"&gt;&gt;&gt; inputStream流大小：{}KB"</span>, inputStream.available() &gt;&gt; <span class="number">10</span>);</span><br><span class="line">          IoUtil.copy(inputStream, outputStream);</span><br><span class="line">      } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"流关闭异常："</span> + e.getMessage());</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>文件流的基本使用</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/29 15:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoStreamTestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(IoStreamTestController.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String dirPath = <span class="string">"D:/file/upload/"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节流读取效率较慢一点(BIO)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/simple/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleFileUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 校验文件名称,类型,内容等信息</span></span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">            <span class="comment">// 输出位置(路径不存在,自动创建)</span></span><br><span class="line">            outputStream = FileUtil.getOutputStream(<span class="keyword">new</span> File(dirPath.concat(<span class="string">"simple.mp4"</span>)));</span><br><span class="line">            IoUtil.copy(inputStream, outputStream, IoUtil.DEFAULT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"字节流文件上传耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.error(<span class="string">"文件上传异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">            IoUtil.close(outputStream);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节缓冲流读取效率更高(BIO)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/buffer/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferFileUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            InputStream inputStream = file.getInputStream();</span><br><span class="line">            bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">            <span class="comment">// 输出位置(路径不存在,自动创建)</span></span><br><span class="line">            bufferedOutputStream = FileUtil.getOutputStream(<span class="keyword">new</span> File(dirPath.concat(<span class="string">"buffer.mp4"</span>)));</span><br><span class="line"></span><br><span class="line">            IoUtil.copy(bufferedInputStream, bufferedOutputStream, IoUtil.DEFAULT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"字节缓冲流文件上传耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">"文件传输异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(bufferedInputStream);</span><br><span class="line">            IoUtil.close(bufferedOutputStream);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NIO方式的管道传输: 速度最快,主要是和文件传输时定义的缓冲块大小有关</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/channel/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nioChannelUploadFile</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line"></span><br><span class="line">        FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 自动创建文件夹</span></span><br><span class="line">            FileUtil.mkdir(<span class="keyword">new</span> File(dirPath));</span><br><span class="line">            <span class="comment">// 获取输入输出流</span></span><br><span class="line">            inputStream = (FileInputStream) file.getInputStream();</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(dirPath.concat(<span class="string">"nioChannel.mp4"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取输入输出通道</span></span><br><span class="line">            inChannel = inputStream.getChannel();</span><br><span class="line">            outChannel = outputStream.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义缓冲块: 不同场景,需要定义不同大小的缓冲块,当前缓冲块为: 1M</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">2</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">while</span> (inChannel.read(buffer) != IoUtil.EOF) {</span><br><span class="line">                <span class="comment">// 切换为读取数据模式(将缓冲区的界限设置为当前位置,并将当前位置置为0)</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="comment">// 将缓冲区数据写入输出通道中</span></span><br><span class="line">                outChannel.write(buffer);</span><br><span class="line">                <span class="comment">// 清空缓冲区: 继续循环读取数据</span></span><br><span class="line">                buffer.clear();</span><br><span class="line">            }</span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"NIO方式的管道传输文件耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">"文件传输异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(outputStream);</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">            IoUtil.close(inChannel);</span><br><span class="line">            IoUtil.close(outChannel);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NIO工具类Files 进行的文件传输(速度和buffer差不多,小文件几乎没差别)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/files/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nioFilesUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 文件校验(省略...)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路径不存在,直接创建</span></span><br><span class="line">            FileUtil.mkdir(<span class="keyword">new</span> File(dirPath));</span><br><span class="line">            <span class="comment">// 设置并获取文件路径</span></span><br><span class="line">            Path path = Paths.get(dirPath.concat(<span class="string">"nioFiles.mp4"</span>));</span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">            Files.copy(inputStream, path, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"NIO工具类Files文件上传耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">"文件传输异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行速度日志：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">31</span>:<span class="number">45.299</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">1</span>] c.h.u.controller.IoStreamTestController  : 字节流文件上传耗时: <span class="number">68</span> ms</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">31</span>:<span class="number">54.249</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">4</span>] c.h.u.controller.IoStreamTestController  : 字节缓冲流文件上传耗时: <span class="number">62</span> ms</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">32</span>:<span class="number">11.656</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">5</span>] c.h.u.controller.IoStreamTestController  : NIO方式的管道传输文件耗时: <span class="number">29</span> ms</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">32</span>:<span class="number">19.062</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">3</span>] c.h.u.controller.IoStreamTestController  : NIO工具类Files文件上传耗时: <span class="number">67</span> ms</span><br></pre></td></tr></tbody></table></figure>
<h2 id="各种流的转换"><a href="#各种流的转换" class="headerlink" title="各种流的转换"></a>各种流的转换</h2><blockquote>
<p><code>OutputStream</code> ==&gt; <code>InputStream</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OutputStream 转 InputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> out 输出流对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> inputStream对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">outConvertInput</span><span class="params">(OutputStream out)</span> </span>{</span><br><span class="line">    ByteArrayOutputStream byteArrayOutputStream = (ByteArrayOutputStream) out;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>InputStream</code> &lt;==&gt;  <code>String</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * inputStream 转 String 原理: 先写入OutputStream后,再进行转化String</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">inputConvertStr</span><span class="params">(InputStream inputStream)</span> </span>{</span><br><span class="line">    ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> outputStream.toString();</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            inputStream.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 转 InputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">strConvertInput</span><span class="params">(String string)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>String</code> ==&gt; <code>OutputStream</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 写入 OutputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OutputStream <span class="title">strConvertOut</span><span class="params">(String string)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    OutputStream outputStream = System.out;</span><br><span class="line">    outputStream.write(string.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    <span class="keyword">return</span> outputStream;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://i.loli.net/2021/05/24/uSjR24PvBDkomGg.gif" alt="燥起来"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>File</tag>
      </tags>
  </entry>
  <entry>
    <title>GitKraken配置使用</title>
    <url>/post/25166.html</url>
    <content><![CDATA[<h2 id="GitKraken配置使用"><a href="#GitKraken配置使用" class="headerlink" title="GitKraken配置使用"></a>GitKraken配置使用</h2><p><code>美图欣赏</code></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210414212031.png" alt="美好事务"></p>
<h3 id="1-软件介绍"><a href="#1-软件介绍" class="headerlink" title="1. 软件介绍"></a>1. 软件介绍</h3><p>Git是现在最流行的版本管理工具，应用范围非常广泛。推荐一款git的可视化工具，这款 工具特别方便 它的官方如下：<a href="https://www.gitkraken.com/">GitKraken官网</a></p>
<p>注意：该Git工具最后一个免费版本为6.5.1，下载链接如下：<a href="https://release.axocdn.com/win64/GitKrakenSetup-6.5.1.exe">GitKraken 6.5.1下载</a></p>
<h3 id="2-下载安装"><a href="#2-下载安装" class="headerlink" title="2. 下载安装"></a>2. 下载安装</h3><p>直接点击GitKrakenSetup-6.5.1.exe安装，本过程无法自定义安装位置（让人麻头皮😅😅😅）</p>
<h3 id="3-快速配置"><a href="#3-快速配置" class="headerlink" title="3. 快速配置"></a>3. 快速配置</h3><p>打开GitKraken，找到 File —&gt; Preferences —&gt; Authentication  配置当前公私钥，当前账户公私钥需要和git/github导入的一致。</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210414212529.png" alt="image-20210414212520739"></p>
<blockquote>
<p>注意事项：</p>
<ul>
<li>检查自己公私钥 是否配置正确，账户是否匹配。</li>
<li>检查 当前配置路径 中是否包含 <code>中文</code> ，如果包含会报错！</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitKraken</tag>
      </tags>
  </entry>
  <entry>
    <title>Java客户端请求简单实现</title>
    <url>/post/38160.html</url>
    <content><![CDATA[<h1 id="HttpClient示例如下："><a href="#HttpClient示例如下：" class="headerlink" title="HttpClient示例如下："></a>HttpClient示例如下：</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// httpClient的使用</span></span><br><span class="line"><span class="comment">// 普通get请求</span></span><br><span class="line">String url = <span class="string">"http://www.horsemuzi.top"</span>;</span><br><span class="line"><span class="comment">// 获取httpClient客户端</span></span><br><span class="line">CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"><span class="comment">// 设置代理服务器地址和端口</span></span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"><span class="comment">// 超时设置(单位:ms)</span></span><br><span class="line">RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">        .setConnectTimeout(<span class="number">5000</span>) <span class="comment">// 设置连接超时时间</span></span><br><span class="line">        .setConnectionRequestTimeout(<span class="number">5000</span>) <span class="comment">// 设置请求超时时间</span></span><br><span class="line">        .setSocketTimeout(<span class="number">10000</span>) <span class="comment">// 设置socket读写超时时间</span></span><br><span class="line">        .setRedirectsEnabled(<span class="keyword">true</span>) <span class="comment">// 是否允许重定向(默认为true)</span></span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 将配置加载到这个GET请求中</span></span><br><span class="line">httpGet.setConfig(requestConfig);</span><br><span class="line">CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 客户端发起get请求</span></span><br><span class="line">    response = httpClient.execute(httpGet);</span><br><span class="line">    <span class="comment">// 获取响应实体</span></span><br><span class="line">    HttpEntity responseEntity = response.getEntity();</span><br><span class="line">    <span class="comment">// 获取响应状态</span></span><br><span class="line">    System.out.println(<span class="string">"响应状态:"</span> + response.getStatusLine().getStatusCode());</span><br><span class="line">    <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) {</span><br><span class="line">        System.out.println(<span class="string">"响应内容长度:"</span> + responseEntity.getContentLength() + <span class="string">"==响应内容类型:"</span> + responseEntity.getContentType());</span><br><span class="line">        System.out.println(<span class="string">"相应内容:"</span> + EntityUtils.toString(responseEntity, StandardCharsets.UTF_8));</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) {</span><br><span class="line">            httpClient.close();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (response != <span class="keyword">null</span>) {</span><br><span class="line">            response.close();</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="HuTool工具类HttpUtil示例如下："><a href="#HuTool工具类HttpUtil示例如下：" class="headerlink" title="HuTool工具类HttpUtil示例如下："></a>HuTool工具类HttpUtil示例如下：</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String url = <span class="string">"http://www.horsemuzi.top"</span>;</span><br><span class="line">        <span class="comment">// 发送自定义请求策略</span></span><br><span class="line">        HttpResponse response = HttpRequest.get(url)</span><br><span class="line">                .charset(StandardCharsets.UTF_8)</span><br><span class="line">                .timeout(<span class="number">5000</span>)</span><br><span class="line">                .execute();</span><br><span class="line">        System.out.println(<span class="string">"响应状态码:"</span> + response.getStatus());</span><br><span class="line">        System.out.println(<span class="string">"cookies集合:"</span> + response.getCookies());</span><br><span class="line">        System.out.println(<span class="string">"响应内容:"</span> + response.body());</span><br><span class="line">        response.close();</span><br></pre></td></tr></tbody></table></figure>
<p><strong>其他方式的请求，基本都一样，HuTool工具类相对来说，操作更加简单</strong></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Interceptor拦截器和Filter过滤器基操</title>
    <url>/post/36074.html</url>
    <content><![CDATA[<h2 id="Interceptor拦截器和Filter过滤器基操"><a href="#Interceptor拦截器和Filter过滤器基操" class="headerlink" title="Interceptor拦截器和Filter过滤器基操"></a>Interceptor拦截器和Filter过滤器基操</h2><h3 id="整体图示"><a href="#整体图示" class="headerlink" title="整体图示"></a>整体图示</h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210713103820.jpg" alt="整体图示"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210713103854.jpg" alt="执行流程"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210713104126.jpg" alt="详细图示"></p>
<blockquote>
<p>简析：</p>
<ul>
<li><p>过滤器（Filter） ：可以拿到原始的http请求，但是拿不到你请求的控制器和请求控制器中的方法的信息。</p>
</li>
<li><p>拦截器（Interceptor）：可以拿到你请求的控制器和方法，却拿不到请求方法的参数。</p>
</li>
<li><p>切片（Aspect）: 可以拿到方法的参数，但是却拿不到http请求和响应的对象</p>
</li>
</ul>
</blockquote>
<h3 id="Interceptor拦截器"><a href="#Interceptor拦截器" class="headerlink" title="Interceptor拦截器"></a>Interceptor拦截器</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><blockquote>
<ol>
<li>类要实现Spring 的HandlerInterceptor 接口</li>
<li>类继承实现了HandlerInterceptor 接口的类，例如 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter</li>
</ol>
</blockquote>
<h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><blockquote>
<ul>
<li>preHandle：在业务处理器处理请求之前被调用。预处理，可以进行编码、安全控制、权限校验等处理；</li>
<li>postHandle：在业务处理器处理请求执行完成后，生成视图之前执行。后处理（调用了Service并返回ModelAndView，但未进行页面渲染），有机会修改ModelAndView （这个博主就基本不怎么用了）；</li>
<li>afterCompletion：在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。返回处理（已经渲染了页面）；</li>
</ul>
</blockquote>
<h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><blockquote>
<p>这里选择实现HandlerInterceptor 接口</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/18 11:52</span></span><br><span class="line"><span class="comment"> * 配置请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResultInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESPONSE_PACK_FLAG = <span class="string">"RESPONSE_PACK_FLAG"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) {</span><br><span class="line">            <span class="keyword">final</span> HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            <span class="comment">// 获取类对象和请求方法</span></span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; clazz = handlerMethod.getBeanType();</span><br><span class="line">            <span class="keyword">final</span> Method method = handlerMethod.getMethod();</span><br><span class="line">            <span class="comment">// 判断类对象或者请求方法上是否又注解</span></span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(ResponseResult.class)) {</span><br><span class="line">                <span class="comment">// 在请求返回体的加入标志,往下传递,在ResponseBodyAdvice接口实现类中进一步的判断和包装</span></span><br><span class="line">                request.setAttribute(RESPONSE_PACK_FLAG, clazz.getAnnotation(ResponseResult.class));</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (method.isAnnotationPresent(ResponseResult.class)) {</span><br><span class="line">                request.setAttribute(RESPONSE_PACK_FLAG, method.getAnnotation(ResponseResult.class));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h4><blockquote>
<p>其实以前都是继承WebMvcConfigurerAdapter类 不过springBoot2.0以上 WebMvcConfigurerAdapter 方法过时，有两种替代方案：</p>
<ol>
<li>继承WebMvcConfigurationSupport类</li>
<li>实现WebMvcConfigurer接口</li>
</ol>
<p>但是继承WebMvcConfigurationSupport会让Spring-boot对mvc的自动配置失效。根据项目情况选择。现在大多数项目是前后端分离，并没有对静态资源有自动配置的需求所以继承WebMvcConfigurationSupport也未尝不可，一般我们都选择实现WebMvcConfigurer接口。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/18 13:11</span></span><br><span class="line"><span class="comment"> * 注册拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResponseResultInterceptor resultInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">// 注册自定义拦截器和拦截路径 [拦截全部路径的请求]</span></span><br><span class="line">        registry.addInterceptor(resultInterceptor).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote>
<p>拦截器本质上是面向切面编程（AOP），符合横切关注点的功能都可以放在拦截器中来实现，主要的应用场景包括：</p>
<ul>
<li>登录验证，判断用户是否登录。</li>
<li>权限验证，判断用户是否有权限访问资源，如校验token</li>
<li>日志记录，记录请求操作日志（用户ip，访问时间等），以便统计请求访问量。</li>
<li>处理cookie、本地化、国际化、主题等。</li>
<li>性能监控，监控请求处理时长等。</li>
<li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个处理器都需要的即可使用拦截器实现）</li>
</ul>
</blockquote>
<h3 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h3><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><blockquote>
<ol>
<li>使用spring boot提供的<code>FilterRegistrationBean</code>注册Filter</li>
<li>使用原生servlet的<code>ServletComponentScan</code>注解定义Filter</li>
<li>两种方式的本质都是一样的，都是去FilterRegistrationBean注册自定义Filter。只是实现方式不同而已</li>
</ol>
</blockquote>
<h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><h5 id="配置Filter"><a href="#配置Filter" class="headerlink" title="配置Filter"></a>配置Filter</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.constants.BlogConstants;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.MDC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用过滤器完成日志链路ID, 此次使用spring boot提供的FilterRegistrationBean注册Filter</span></span><br><span class="line"><span class="comment"> *              此链路日志目前不适用于微服务,因为微服务之间存在跨服务调用,MDC的值需要进行做传递操作,当前并未实现.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/12 20:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">        log.info(<span class="string">"====&gt; 初始化全局过滤器..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ServletException </span>{</span><br><span class="line">        <span class="comment">// 设置链路日志ID唯一标识(缺点: 只局限于当前线程,若产生子线程,这子线程的日志将缺失唯一标识)</span></span><br><span class="line">        MDC.put(BlogConstants.TRACE_ID, IdUtil.fastSimpleUUID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行前: do something</span></span><br><span class="line">        log.info(<span class="string">"111"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行后,数据还未响应到页面: do something</span></span><br><span class="line">        log.info(<span class="string">"222"</span>);</span><br><span class="line">        <span class="comment">// 响应返回页面前,清楚表示,避免内存资源浪费</span></span><br><span class="line">        MDC.remove(BlogConstants.TRACE_ID);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="注册Filter"><a href="#注册Filter" class="headerlink" title="注册Filter"></a>注册Filter</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;GlobalFilter&gt; <span class="title">registrationBean</span><span class="params">()</span> </span>{</span><br><span class="line">        FilterRegistrationBean&lt;GlobalFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> GlobalFilter());</span><br><span class="line">        filterRegistrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line">        filterRegistrationBean.setName(<span class="string">"globalFilter"</span>);</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><h5 id="配置Filter-1"><a href="#配置Filter-1" class="headerlink" title="配置Filter"></a>配置Filter</h5><blockquote>
<p>使用<code>@WebFilter</code>注解进行Filter的配置，包括名称和过滤的路径等。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = "globalFilter", urlPatterns = "/*")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">        log.info(<span class="string">"====&gt; 初始化全局过滤器..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ServletException </span>{</span><br><span class="line">        <span class="comment">// 设置链路日志ID唯一标识(缺点: 只局限于当前线程,若产生子线程,这子线程的日志将缺失唯一标识)</span></span><br><span class="line">        MDC.put(BlogConstants.TRACE_ID, IdUtil.fastSimpleUUID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行前: do something</span></span><br><span class="line">        log.info(<span class="string">"111"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行后,数据还未响应到页面: do something</span></span><br><span class="line">        log.info(<span class="string">"222"</span>);</span><br><span class="line">        <span class="comment">// 响应返回页面前,清楚表示,避免内存资源浪费</span></span><br><span class="line">        MDC.remove(BlogConstants.TRACE_ID);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="扫描Filter"><a href="#扫描Filter" class="headerlink" title="扫描Filter"></a>扫描Filter</h5><blockquote>
<p>在启动类上使用<code>@ServletComponentScan</code>注解配置扫描即可。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(basePackages={"com.horse.service.base.filter"})</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBlogApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(ServiceBlogApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8新特性Optional简单使用</title>
    <url>/post/60013.html</url>
    <content><![CDATA[<h2 id="Optional类Api基本使用"><a href="#Optional类Api基本使用" class="headerlink" title="Optional类Api基本使用"></a>Optional类Api基本使用</h2><blockquote>
<p>Optional主要用于对单个对象的操作,如果像集合,数组之类的对象,建议使用Stream处理</p>
</blockquote>
<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><blockquote>
<p>把指定的值封装为Optional对象，如果指定的值为null，则抛出NullPointerException</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把指定的值封装为Optional对象，如果指定的值为null，则抛出NullPointerException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ofTest</span><span class="params">()</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不会抛异常</span></span><br><span class="line">    Optional&lt;String&gt; topsun = Optional.of(<span class="string">"topsun"</span>);</span><br><span class="line">    <span class="comment">// 抛出空指针异常</span></span><br><span class="line">    Optional&lt;String&gt; green = Optional.of(<span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</span><br><span class="line">	at java.util.Objects.requireNonNull(Objects.java:<span class="number">203</span>)</span><br><span class="line">	at java.util.Optional.&lt;init&gt;(Optional.java:<span class="number">96</span>)</span><br><span class="line">	at java.util.Optional.of(Optional.java:<span class="number">108</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.ofTest(OptionalApi.java:<span class="number">21</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.main(OptionalApi.java:<span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h3><blockquote>
<p>把指定的值封装为Optional对象，如果指定的值为null，则创建一个空的Optional对象</p>
</blockquote>
<figure class="highlight java"><table><tbo