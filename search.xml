<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo提示框</title>
    <url>/Hexo/HexoNode/</url>
    <content><![CDATA[<h2 id="有图标的提示框"><a href="#有图标的提示框" class="headerlink" title="有图标的提示框"></a>有图标的提示框</h2><div class="note default flat"><p>default 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note default %}</span><br><span class="line">default 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note primary flat"><p>primary 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note primary %}</span><br><span class="line">primary 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note success flat"><p>success 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note success %}</span><br><span class="line">success 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note info flat"><p>info 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note info %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note warning flat"><p>warning 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note warning %}</span><br><span class="line">warning 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger flat"><p>danger 提示块标签</p>
</div>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note danger %}</span><br><span class="line">danger 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="不带图标的提示框"><a href="#不带图标的提示框" class="headerlink" title="不带图标的提示框"></a>不带图标的提示框</h2><ul>
<li>不带图标的写法和上述写法一致只是再代码中加入 <code>no-icon</code> 即可</li>
<li>栗子 <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% note info no-icon %}</span><br><span class="line">info 提示块标签</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<div class="note default no-icon flat"><p>default 提示块标签</p>
</div>
<div class="note primary no-icon flat"><p>primary 提示块标签</p>
</div>
<div class="note success no-icon flat"><p>success 提示块标签</p>
</div>
<div class="note info no-icon flat"><p>info 提示块标签</p>
</div>
<div class="note warning no-icon flat"><p>warning 提示块标签</p>
</div>
<div class="note danger no-icon flat"><p>danger 提示块标签</p>
</div>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础操作命令</title>
    <url>/Git/Git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git基础操作命令"><a href="#Git基础操作命令" class="headerlink" title="Git基础操作命令"></a>Git基础操作命令</h1><blockquote>
<p>项目一般会有两个分支，例如：</p>
<ul>
<li>master(main) 主分支：用于保存发布的项目代码</li>
<li>dev 开发分支： 用于保存开发过程中的代码，所有的组员将自己开发的代码提交到该分支上</li>
</ul>
</blockquote>
<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><blockquote>
<ol>
<li><code>mkdir [工作目录]</code>：windows命令创建工作目录（看起来就高大上）</li>
<li><code>git init</code>：初始化当前文件</li>
<li><code>git add .</code>：将所有文件添加到暂存区</li>
<li><code>git commit -m "[提交说明]"</code>：将暂存区文件上传到本地仓库</li>
<li><code>git remote add origin [你的github/gitee的仓库地址]</code>：添加远程仓库</li>
<li><code>git checkout -b dev</code>：创建并切换到dev分支</li>
<li><code>git push origin dev -u</code>： 推送项目文件到远程创库的dev分支上（如果推送不成功，可以考虑添加 <code>-f</code> 参数，执行强制推送）</li>
</ol>
</blockquote>
<p>Git的常用命令远远不止于此，需要我们不断的学习，同时可以配置Git可视化工具【GitKraken】，提高工作效率。</p>
<h2 id="Git版本切换"><a href="#Git版本切换" class="headerlink" title="Git版本切换"></a>Git版本切换</h2><blockquote>
<p>主要命令：</p>
<ul>
<li><code>git reset --hard [版本号]</code>：根据具体版本号进行版本切换</li>
<li><code>git reflog</code>： 查看操作记录（用于查询<code>git log</code> 命令找不到的版本号）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> F:\git_test   master </span><br><span class="line"><span class="comment">// 当前已经提交过项目的两个版本</span></span><br><span class="line">$ git log</span><br><span class="line"><span class="function">commit <span class="title">f33ec4acb3dd5373d4d064c3288e473c9833654a</span> <span class="params">(HEAD -&gt; master)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:43:01 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">commit f71a3fd8a586d8b41f709ef989477af2d87f069e</span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:40:29 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 切换为版本1</span></span></span><br><span class="line"><span class="function"><span class="comment">// HEAD^表示当前版本的前一个版本，HEAD^^表示当前版本的前前个版本，推荐使用HEAD~1表示当前版本的前一个版本，HEAD~100表示当前版本的前100版本。</span></span></span><br><span class="line"><span class="function">$ git reset --hard HEAD~1</span></span><br><span class="line"><span class="function">HEAD is now at f71a3fd version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 版本1的内容只用1句话</span></span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 查看log提交日志，发现版本2的记录消失</span></span></span><br><span class="line"><span class="function">$ git log</span></span><br><span class="line"><span class="function">commit <span class="title">f71a3fd8a586d8b41f709ef989477af2d87f069e</span> <span class="params">(HEAD -&gt; master)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:40:29 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">// 查看所有的操作记录，可以找到版本2的版本号，可以进行版本切换</span></span></span><br><span class="line"><span class="function">$ git reflog</span></span><br><span class="line"><span class="function"><span class="title">f71a3fd</span> <span class="params">(HEAD -&gt; master)</span> HEAD@</span>{<span class="number">0</span>}: reset: moving to HEAD~<span class="number">1</span></span><br><span class="line">f33ec4a HEAD@{<span class="number">1</span>}: reset: moving to f33ec4acb3dd5373d4d064c3288e473c9833654a</span><br><span class="line">f71a3fd (HEAD -&gt; master) HEAD@{<span class="number">2</span>}: reset: moving to HEAD</span><br><span class="line">f71a3fd (HEAD -&gt; master) HEAD@{<span class="number">3</span>}: reset: moving to HEAD~<span class="number">1</span></span><br><span class="line">f33ec4a HEAD@{<span class="number">4</span>}: commit: version <span class="number">2</span></span><br><span class="line">f71a3fd (HEAD -&gt; master) HEAD@{<span class="number">5</span>}: commit (initial): version <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> F:\git_test   master </span><br><span class="line"><span class="comment">// 切换为版本2</span></span><br><span class="line">$ git reset --hard f33ec4a</span><br><span class="line">HEAD is now at f33ec4a version <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> F:\git_test   master </span><br><span class="line"><span class="comment">// 版本2内容有2句话</span></span><br><span class="line">$ cat code.txt</span><br><span class="line">杭州绿之居有限公司</span><br><span class="line"></span><br><span class="line">郑州大学</span><br><span class="line"></span><br><span class="line"> F:\git_test   master </span><br><span class="line">$</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git文件修改撤销"><a href="#Git文件修改撤销" class="headerlink" title="Git文件修改撤销"></a>Git文件修改撤销</h2><blockquote>
<p>管理文件常见场景：</p>
<ul>
<li>场景1：当修改了工作区的某个文件的内容时，但是没有执行<code>git add .</code>命令前，发现修改的不好，想直接丢弃当前自己在工作区的修改时，使用命令<code>git checkout -- [文件名称]</code>直接回退文件内容至初始</li>
<li>场景2：当修改了工作区的内容后，但是已经执行<code>git add .</code>命令，想要丢弃修改时，需要执行两个命令步骤：<ul>
<li>先执行<code>git reset HEAD – [文件名称]</code>命令</li>
<li>再执行<code>git checkout -- [文件名称]</code>命令</li>
</ul>
</li>
<li>场景3：当修改的工作内容已经执行<code>git commit -m "commit info"</code>命令提交到本地仓库后，想要撤销修改操作，那就只能执行版本回退操作啦<code>git reset --hard HEAD~x</code>(回退到某个版本,丢弃工作区代码)，或者使用<code>git reset --soft HEAD~x</code>（回退到某个版本,保留工作区代码）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> F:\git_test   master ± </span><br><span class="line"><span class="comment">// 添加一句内容</span></span><br><span class="line">$ cat code.txt</span><br><span class="line">杭州绿之居有限公司</span><br><span class="line"></span><br><span class="line">郑州大学</span><br><span class="line"></span><br><span class="line">郑州工业学院</span><br><span class="line"></span><br><span class="line"> F:\git_test   master ± </span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span><br><span class="line">        modified:   code.txt</span><br><span class="line"></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function"><span class="comment">// 回退内容，直接丢弃修改内容</span></span></span><br><span class="line"><span class="function">$ git checkout -- code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function"><span class="comment">//  内容回退成功</span></span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州工业应用技术学院</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span></span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span></span></span><br><span class="line"><span class="function">        modified:   code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git add .</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">Changes to be committed:</span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git restore --staged &lt;file&gt;..."</span> to unstage)</span></span></span><br><span class="line"><span class="function">        modified:   code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git reset HEAD code.txt</span></span><br><span class="line"><span class="function">Unstaged changes after reset:</span></span><br><span class="line"><span class="function">M       code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州工业应用技术学院</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">Changes not staged <span class="keyword">for</span> commit:</span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span></span></span><br><span class="line"><span class="function">  <span class="params">(use <span class="string">"git restore &lt;file&gt;..."</span> to discard changes in working directory)</span></span></span><br><span class="line"><span class="function">        modified:   code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master ± </span></span><br><span class="line"><span class="function">$ git checkout -- code.txt</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git status</span></span><br><span class="line"><span class="function">On branch master</span></span><br><span class="line"><span class="function">nothing to commit, working tree clean</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git分支创建合并"><a href="#Git分支创建合并" class="headerlink" title="Git分支创建合并"></a>Git分支创建合并</h2><blockquote>
<p>分支的创建合并基本命令如下：</p>
<ul>
<li>查看分支：<code>git branch</code></li>
<li>创建并切换到新分支： <code>git checkout -b dev</code></li>
<li>合并某指定分支到当前分支：<code>git merge dev</code></li>
<li>删除分支：<code>git branch -d dev</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"> F:\git_test   dev ± </span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"> F:\git_test   dev ± </span><br><span class="line">$ git commit -m <span class="string">"dev分支 version 1"</span></span><br><span class="line">[dev aeb86d5] dev分支 version <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">3</span> insertions(+)</span><br><span class="line"></span><br><span class="line"> F:\git_test   dev </span><br><span class="line">$ git log</span><br><span class="line"><span class="function">commit <span class="title">aeb86d5a3906a88b249a47bdb8d80e4a05ea8953</span> <span class="params">(HEAD -&gt; dev)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 11:26:30 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    dev分支 version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">commit <span class="title">f33ec4acb3dd5373d4d064c3288e473c9833654a</span> <span class="params">(master)</span></span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:43:01 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 2</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">commit f71a3fd8a586d8b41f709ef989477af2d87f069e</span></span><br><span class="line"><span class="function">Author: 马滨 &lt;3468449362@qq.com&gt;</span></span><br><span class="line"><span class="function">Date:   Fri May 7 10:40:29 2021 +0800</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    version 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   dev </span></span><br><span class="line"><span class="function">$ git checkout master</span></span><br><span class="line"><span class="function">Switched to branch 'master'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git checkout dev</span></span><br><span class="line"><span class="function">Switched to branch 'dev'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   dev </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">我是dev分支下创建的内容...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   dev </span></span><br><span class="line"><span class="function">$ git checkout master</span></span><br><span class="line"><span class="function">Switched to branch 'master'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git merge dev</span></span><br><span class="line"><span class="function">Updating f33ec4a..aeb86d5</span></span><br><span class="line"><span class="function">Fast-forward</span></span><br><span class="line"><span class="function"> code.txt | 3 +++</span></span><br><span class="line"><span class="function"> 1 file changed, 3 <span class="title">insertions</span><span class="params">(+)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ cat code.txt</span></span><br><span class="line"><span class="function">杭州绿之居有限公司</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">郑州大学</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">我是dev分支下创建的内容...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git branch -d dev</span></span><br><span class="line"><span class="function">Deleted branch <span class="title">dev</span> <span class="params">(was aeb86d5)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git branch</span></span><br><span class="line"><span class="function">* master</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$ git branch -a</span></span><br><span class="line"><span class="function">* master</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> F:\git_test   master </span></span><br><span class="line"><span class="function">$</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Git分支文件冲突解决"><a href="#Git分支文件冲突解决" class="headerlink" title="Git分支文件冲突解决"></a>Git分支文件冲突解决</h2><blockquote>
<ul>
<li>产生原因：当master分支和dev分支都操作了同一份文件，并且都进来commit提交操作，这时进行文件的merge操作，就是产生文件冲突。</li>
<li>解决方法： 手动删除冲突的地方，然后重新执行暂存、提交操作。</li>
</ul>
</blockquote>
<h2 id="Git其他命令"><a href="#Git其他命令" class="headerlink" title="Git其他命令"></a>Git其他命令</h2><blockquote>
<ul>
<li>禁用fast forward合并方式： <code>git merge --no-ff -m "禁用fast forward方式并重新合并提交" dev</code></li>
<li>修改commit信息（最新版本（HEAD）的commit信息）： <code>git commit --amend -m "update commit info version 6"</code></li>
<li>暂时存储工作区文件：<code>git stash</code></li>
<li>释放存储的工作区文件：<code>git stash pop</code></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>File文件上传简单测试</title>
    <url>/JAVA/File%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="File文件上传简单测试"><a href="#File文件上传简单测试" class="headerlink" title="File文件上传简单测试"></a>File文件上传简单测试</h2><h3 id="内容要点"><a href="#内容要点" class="headerlink" title="内容要点"></a>内容要点</h3><blockquote>
<ul>
<li>字节流文件上传（BIO）</li>
<li>直接缓冲流文件上传（BIO）</li>
<li>Channel管道文件上传（NIO） ==&gt; <code>最快</code></li>
<li>NIO的Files工具类文件上传（NIO）</li>
</ul>
</blockquote>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><blockquote>
<p>代码中主要用到HuTool工具类，运行前，请先引入HuTool依赖</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>  关于关闭流的简单写法：</p>
<ul>
<li>try-with-resources语句包含了两个用分号隔开的声明：inputStream 和 outputStream， 当代码块中代码终止，不管是正常还是异常，inputStream 和 outputStream 对象的 close方法 都会自动按声明的 相反顺序 调用。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String inner_file_path = <span class="string">"C:\\Users\\administered\\Pictures\\Saved Pictures\\2052675.20211018.jpg"</span>;</span><br><span class="line">      String out_file_path = <span class="string">"C:\\Users\\administered\\Pictures\\Camera Roll\\file.jpg"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// try-with-resources语句包含了两个用分号隔开的声明：inputStream 和 outputStream。</span></span><br><span class="line">      <span class="comment">// 当代码块中代码终止，不管是正常还是异常，inputStream 和 outputStream 对象的 close方法 都会自动按声明的 相反顺序 调用。</span></span><br><span class="line">      <span class="keyword">try</span> (</span><br><span class="line">              FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(inner_file_path));</span><br><span class="line">              FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(out_file_path));</span><br><span class="line">              ) {</span><br><span class="line">          <span class="comment">// 操作数据流</span></span><br><span class="line">          log.info(<span class="string">"&gt;&gt;&gt; inputStream流大小：{}KB"</span>, inputStream.available() &gt;&gt; <span class="number">10</span>);</span><br><span class="line">          IoUtil.copy(inputStream, outputStream);</span><br><span class="line">      } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"流关闭异常："</span> + e.getMessage());</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>文件流的基本使用</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.StandardCopyOption;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/29 15:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IoStreamTestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(IoStreamTestController.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String dirPath = <span class="string">"D:/file/upload/"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节流读取效率较慢一点(BIO)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/simple/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleFileUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 校验文件名称,类型,内容等信息</span></span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">            <span class="comment">// 输出位置(路径不存在,自动创建)</span></span><br><span class="line">            outputStream = FileUtil.getOutputStream(<span class="keyword">new</span> File(dirPath.concat(<span class="string">"simple.mp4"</span>)));</span><br><span class="line">            IoUtil.copy(inputStream, outputStream, IoUtil.DEFAULT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"字节流文件上传耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.error(<span class="string">"文件上传异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">            IoUtil.close(outputStream);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节缓冲流读取效率更高(BIO)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/buffer/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferFileUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        BufferedInputStream bufferedInputStream = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            InputStream inputStream = file.getInputStream();</span><br><span class="line">            bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">            <span class="comment">// 输出位置(路径不存在,自动创建)</span></span><br><span class="line">            bufferedOutputStream = FileUtil.getOutputStream(<span class="keyword">new</span> File(dirPath.concat(<span class="string">"buffer.mp4"</span>)));</span><br><span class="line"></span><br><span class="line">            IoUtil.copy(bufferedInputStream, bufferedOutputStream, IoUtil.DEFAULT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"字节缓冲流文件上传耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">"文件传输异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(bufferedInputStream);</span><br><span class="line">            IoUtil.close(bufferedOutputStream);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NIO方式的管道传输: 速度最快,主要是和文件传输时定义的缓冲块大小有关</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/channel/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nioChannelUploadFile</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line"></span><br><span class="line">        FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel inChannel = <span class="keyword">null</span>;</span><br><span class="line">        FileChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 自动创建文件夹</span></span><br><span class="line">            FileUtil.mkdir(<span class="keyword">new</span> File(dirPath));</span><br><span class="line">            <span class="comment">// 获取输入输出流</span></span><br><span class="line">            inputStream = (FileInputStream) file.getInputStream();</span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(dirPath.concat(<span class="string">"nioChannel.mp4"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取输入输出通道</span></span><br><span class="line">            inChannel = inputStream.getChannel();</span><br><span class="line">            outChannel = outputStream.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义缓冲块: 不同场景,需要定义不同大小的缓冲块,当前缓冲块为: 1M</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">2</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">while</span> (inChannel.read(buffer) != IoUtil.EOF) {</span><br><span class="line">                <span class="comment">// 切换为读取数据模式(将缓冲区的界限设置为当前位置,并将当前位置置为0)</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="comment">// 将缓冲区数据写入输出通道中</span></span><br><span class="line">                outChannel.write(buffer);</span><br><span class="line">                <span class="comment">// 清空缓冲区: 继续循环读取数据</span></span><br><span class="line">                buffer.clear();</span><br><span class="line">            }</span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"NIO方式的管道传输文件耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">"文件传输异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(outputStream);</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">            IoUtil.close(inChannel);</span><br><span class="line">            IoUtil.close(outChannel);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NIO工具类Files 进行的文件传输(速度和buffer差不多,小文件几乎没差别)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/files/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nioFilesUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> </span>{</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 文件校验(省略...)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路径不存在,直接创建</span></span><br><span class="line">            FileUtil.mkdir(<span class="keyword">new</span> File(dirPath));</span><br><span class="line">            <span class="comment">// 设置并获取文件路径</span></span><br><span class="line">            Path path = Paths.get(dirPath.concat(<span class="string">"nioFiles.mp4"</span>));</span><br><span class="line">            inputStream = file.getInputStream();</span><br><span class="line">            Files.copy(inputStream, path, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line"></span><br><span class="line">            watch.stop();</span><br><span class="line">            logger.info(<span class="string">"NIO工具类Files文件上传耗时: {} ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">"文件传输异常:{}"</span>, e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行速度日志：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">31</span>:<span class="number">45.299</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">1</span>] c.h.u.controller.IoStreamTestController  : 字节流文件上传耗时: <span class="number">68</span> ms</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">31</span>:<span class="number">54.249</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">4</span>] c.h.u.controller.IoStreamTestController  : 字节缓冲流文件上传耗时: <span class="number">62</span> ms</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">32</span>:<span class="number">11.656</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">5</span>] c.h.u.controller.IoStreamTestController  : NIO方式的管道传输文件耗时: <span class="number">29</span> ms</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">28</span> <span class="number">14</span>:<span class="number">32</span>:<span class="number">19.062</span>  INFO <span class="number">9656</span> --- [nio-<span class="number">8099</span>-exec-<span class="number">3</span>] c.h.u.controller.IoStreamTestController  : NIO工具类Files文件上传耗时: <span class="number">67</span> ms</span><br></pre></td></tr></tbody></table></figure>
<h2 id="各种流的转换"><a href="#各种流的转换" class="headerlink" title="各种流的转换"></a>各种流的转换</h2><blockquote>
<p><code>OutputStream</code> ==&gt; <code>InputStream</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OutputStream 转 InputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> out 输出流对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> inputStream对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">outConvertInput</span><span class="params">(OutputStream out)</span> </span>{</span><br><span class="line">    ByteArrayOutputStream byteArrayOutputStream = (ByteArrayOutputStream) out;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>InputStream</code> &lt;==&gt;  <code>String</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * inputStream 转 String 原理: 先写入OutputStream后,再进行转化String</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">inputConvertStr</span><span class="params">(InputStream inputStream)</span> </span>{</span><br><span class="line">    ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> outputStream.toString();</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            inputStream.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 转 InputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">strConvertInput</span><span class="params">(String string)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>String</code> ==&gt; <code>OutputStream</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 写入 OutputStream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OutputStream <span class="title">strConvertOut</span><span class="params">(String string)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    OutputStream outputStream = System.out;</span><br><span class="line">    outputStream.write(string.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    <span class="keyword">return</span> outputStream;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://i.loli.net/2021/05/24/uSjR24PvBDkomGg.gif" alt="燥起来"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>File</tag>
      </tags>
  </entry>
  <entry>
    <title>DFA算法实现敏感词过滤</title>
    <url>/JAVA/DFA%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<h2 id="DFA算法实现敏感词过滤"><a href="#DFA算法实现敏感词过滤" class="headerlink" title="DFA算法实现敏感词过滤"></a>DFA算法实现敏感词过滤</h2><h3 id="引入敏感词文件"><a href="#引入敏感词文件" class="headerlink" title="引入敏感词文件"></a>引入敏感词文件</h3><blockquote>
<p>将敏感词库文件<code>sensitive-words.txt</code>放到<code>resources</code>目录下,文件太大，在这里就象征性引入一下。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">回民吃猪肉</span><br><span class="line">习近平</span><br><span class="line">TMD</span><br><span class="line">毛民进党</span><br><span class="line">机吧</span><br><span class="line">联国</span><br><span class="line"><span class="number">1989</span>六四</span><br><span class="line">性爱电影</span><br><span class="line">李红智</span><br><span class="line">梁光烈</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建节点实例"><a href="#创建节点实例" class="headerlink" title="创建节点实例"></a>创建节点实例</h3><blockquote>
<p>创建敏感词过滤前缀树的节点实例<code>TrieNode</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler.sensitive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 敏感词过滤前缀树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/31 8:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤的关键词结束标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isKeyWordEnd = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, TrieNode&gt; subNodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isKeyWordEnd</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> isKeyWordEnd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyWordEnd</span><span class="params">(<span class="keyword">boolean</span> keyWordEnd)</span> </span>{</span><br><span class="line">        isKeyWordEnd = keyWordEnd;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> character</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSubNode</span><span class="params">(Character character, TrieNode node)</span> </span>{</span><br><span class="line">        subNodes.put(character, node);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> character</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">getSubNode</span><span class="params">(Character character)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> subNodes.get(character);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="初始化加载词库"><a href="#初始化加载词库" class="headerlink" title="初始化加载词库"></a>初始化加载词库</h3><blockquote>
<p>使用<code>CommandLineRunner</code>操作：服务启动过程中异步加载敏感词到前缀树,组建敏感词库</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.handler.sensitive.SensitiveFilterHandler;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.util.ThreadUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 初始化敏感词库: 服务启动过程中,加载敏感词到前缀树,逐渐敏感词库</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/31 9:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordInit</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SensitiveFilterHandler sensitiveFilterHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ThreadUtils.executor.execute(<span class="keyword">new</span> KeyWordsInit());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">KeyWordsInit</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">            watch.start();</span><br><span class="line">            log.info(<span class="string">" ==&gt; 开始初始化敏感词库..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 加载敏感词文件</span></span><br><span class="line">                InputStream resource = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">"sensitive-words.txt"</span>);</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(resource));</span><br><span class="line">                <span class="comment">// 异步加载敏感词文件并主键词库</span></span><br><span class="line">                String keyWord;</span><br><span class="line">                <span class="keyword">while</span> ((keyWord = reader.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                    sensitiveFilterHandler.addKeyWord(keyWord);</span><br><span class="line">                }</span><br><span class="line">                watch.stop();</span><br><span class="line">                log.info(<span class="string">" ==&gt; 初始化敏感词库共耗时: {}ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                log.error(<span class="string">" ==&gt; 敏感词库初始化异常: {}"</span>, e.getMessage());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="ThreadUtils线程池工具类"><a href="#ThreadUtils线程池工具类" class="headerlink" title="ThreadUtils线程池工具类"></a>ThreadUtils线程池工具类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义线程池工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/10 14:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建基于guava开源类库的线程工厂(这种创建线程池的方式可以自定义线程名,比较方便且安全)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"SystemThreadPool-%d"</span>).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建线程池(利用自定义的线程工厂)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">30</span>), threadFactory);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="敏感词过滤处理实现"><a href="#敏感词过滤处理实现" class="headerlink" title="敏感词过滤处理实现"></a>敏感词过滤处理实现</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler.sensitive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.constants.BlogConstants;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.CharUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 敏感词过滤处理实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/31 8:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveFilterHandler</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode rootNode = <span class="keyword">new</span> TrieNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个敏感词添加到前缀树节点中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWord</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addKeyWord</span><span class="params">(String keyWord)</span> </span>{</span><br><span class="line">        TrieNode tempNode = rootNode;</span><br><span class="line">        <span class="keyword">int</span> length = keyWord.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">char</span> ch = keyWord.charAt(i);</span><br><span class="line">            TrieNode subNode = tempNode.getSubNode(ch);</span><br><span class="line">            <span class="keyword">if</span> (subNode == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">// 初始化节点: 设置子节点</span></span><br><span class="line">                subNode = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                tempNode.addSubNode(ch, subNode);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 设置subNode指向下一个子节点,进入下一轮循环</span></span><br><span class="line">            tempNode = subNode;</span><br><span class="line">            <span class="comment">// 设置结束标识</span></span><br><span class="line">            <span class="keyword">if</span> (i == length - <span class="number">1</span>) {</span><br><span class="line">                tempNode.setKeyWordEnd(<span class="keyword">true</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为符号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymbol</span><span class="params">(Character c)</span> </span>{</span><br><span class="line">        <span class="comment">// 0x2E80~0x9FFF 是东亚文字范围</span></span><br><span class="line">        <span class="keyword">return</span> !CharUtils.isAsciiAlphanumeric(c) &amp;&amp; (c &lt; <span class="number">0x2E80</span> || c &gt; <span class="number">0x9FFF</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤敏感词</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterSensitiveWord</span><span class="params">(String text)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//指针1</span></span><br><span class="line">        TrieNode tempNode = rootNode;</span><br><span class="line">        <span class="comment">//指针2</span></span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//指针3</span></span><br><span class="line">        <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//结果</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (position &lt; text.length()) {</span><br><span class="line">            <span class="keyword">char</span> c = text.charAt(position);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	跳过符号</span></span><br><span class="line"><span class="comment">            	情况一：符号在敏感词前面，将符号写入结果，如 ☆敏感词</span></span><br><span class="line"><span class="comment">            	情况二：符号在敏感词中间，则将符号与敏感词一起替换，如敏☆感☆词</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (isSymbol(c)) {</span><br><span class="line">                <span class="comment">//若指针1处于根节点，对应情况一，将符号计入结果，让指针2向下走一步</span></span><br><span class="line">                <span class="keyword">if</span> (tempNode == rootNode) {</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                    begin++;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//无论符号在开头还是敏感词中间，指针3都向下走一步</span></span><br><span class="line">                position++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//检查下级节点</span></span><br><span class="line">            tempNode = tempNode.getSubNode(c);</span><br><span class="line">            <span class="keyword">if</span> (tempNode == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">//以begin开头的的字符串不是敏感词</span></span><br><span class="line">                sb.append(text.charAt(begin));</span><br><span class="line">                <span class="comment">//指针2和指针3共同指向指针2的下一个位置</span></span><br><span class="line">                position = ++begin;</span><br><span class="line">                <span class="comment">//指针1重新指向根节点</span></span><br><span class="line">                tempNode = rootNode;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (tempNode.isKeyWordEnd()) {</span><br><span class="line">                <span class="comment">//发现敏感词，将begin~position字符串替换: ***</span></span><br><span class="line">                sb.append(BlogConstants.REPLACEMENT);</span><br><span class="line">                <span class="comment">//进入下一个位置</span></span><br><span class="line">                begin = ++position;</span><br><span class="line">                <span class="comment">//指针1重新指向根节点</span></span><br><span class="line">                tempNode = rootNode;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//检查下一个字符</span></span><br><span class="line">                position++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将最后一批字符计入结果</span></span><br><span class="line">        sb.append(text.substring(begin));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>测试结果：very nice!</p>
<p><img src="https://i.loli.net/2021/05/24/uSjR24PvBDkomGg.gif" alt="燥起来"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
        <tag>DFA</tag>
      </tags>
  </entry>
  <entry>
    <title>GitKraken配置使用</title>
    <url>/JAVA/GitKraken%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="GitKraken配置使用"><a href="#GitKraken配置使用" class="headerlink" title="GitKraken配置使用"></a>GitKraken配置使用</h2><p><code>美图欣赏</code></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210414212031.png" alt="美好事务"></p>
<h3 id="1-软件介绍"><a href="#1-软件介绍" class="headerlink" title="1. 软件介绍"></a>1. 软件介绍</h3><p>Git是现在最流行的版本管理工具，应用范围非常广泛。推荐一款git的可视化工具，这款 工具特别方便 它的官方如下：<a href="https://www.gitkraken.com/">GitKraken官网</a></p>
<p>注意：该Git工具最后一个免费版本为6.5.1，下载链接如下：<a href="https://release.axocdn.com/win64/GitKrakenSetup-6.5.1.exe">GitKraken 6.5.1下载</a></p>
<h3 id="2-下载安装"><a href="#2-下载安装" class="headerlink" title="2. 下载安装"></a>2. 下载安装</h3><p>直接点击GitKrakenSetup-6.5.1.exe安装，本过程无法自定义安装位置（让人麻头皮😅😅😅）</p>
<h3 id="3-快速配置"><a href="#3-快速配置" class="headerlink" title="3. 快速配置"></a>3. 快速配置</h3><p>打开GitKraken，找到 File —&gt; Preferences —&gt; Authentication  配置当前公私钥，当前账户公私钥需要和git/github导入的一致。</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210414212529.png" alt="image-20210414212520739"></p>
<blockquote>
<p>注意事项：</p>
<ul>
<li>检查自己公私钥 是否配置正确，账户是否匹配。</li>
<li>检查 当前配置路径 中是否包含 <code>中文</code> ，如果包含会报错！</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitKraken</tag>
      </tags>
  </entry>
  <entry>
    <title>Java客户端请求简单实现</title>
    <url>/JAVA/HttpClient%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="HttpClient示例如下："><a href="#HttpClient示例如下：" class="headerlink" title="HttpClient示例如下："></a>HttpClient示例如下：</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// httpClient的使用</span></span><br><span class="line"><span class="comment">// 普通get请求</span></span><br><span class="line">String url = <span class="string">"http://www.horsemuzi.top"</span>;</span><br><span class="line"><span class="comment">// 获取httpClient客户端</span></span><br><span class="line">CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"><span class="comment">// 设置代理服务器地址和端口</span></span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"><span class="comment">// 超时设置(单位:ms)</span></span><br><span class="line">RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">        .setConnectTimeout(<span class="number">5000</span>) <span class="comment">// 设置连接超时时间</span></span><br><span class="line">        .setConnectionRequestTimeout(<span class="number">5000</span>) <span class="comment">// 设置请求超时时间</span></span><br><span class="line">        .setSocketTimeout(<span class="number">10000</span>) <span class="comment">// 设置socket读写超时时间</span></span><br><span class="line">        .setRedirectsEnabled(<span class="keyword">true</span>) <span class="comment">// 是否允许重定向(默认为true)</span></span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 将配置加载到这个GET请求中</span></span><br><span class="line">httpGet.setConfig(requestConfig);</span><br><span class="line">CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 客户端发起get请求</span></span><br><span class="line">    response = httpClient.execute(httpGet);</span><br><span class="line">    <span class="comment">// 获取响应实体</span></span><br><span class="line">    HttpEntity responseEntity = response.getEntity();</span><br><span class="line">    <span class="comment">// 获取响应状态</span></span><br><span class="line">    System.out.println(<span class="string">"响应状态:"</span> + response.getStatusLine().getStatusCode());</span><br><span class="line">    <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) {</span><br><span class="line">        System.out.println(<span class="string">"响应内容长度:"</span> + responseEntity.getContentLength() + <span class="string">"==响应内容类型:"</span> + responseEntity.getContentType());</span><br><span class="line">        System.out.println(<span class="string">"相应内容:"</span> + EntityUtils.toString(responseEntity, StandardCharsets.UTF_8));</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) {</span><br><span class="line">            httpClient.close();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (response != <span class="keyword">null</span>) {</span><br><span class="line">            response.close();</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="HuTool工具类HttpUtil示例如下："><a href="#HuTool工具类HttpUtil示例如下：" class="headerlink" title="HuTool工具类HttpUtil示例如下："></a>HuTool工具类HttpUtil示例如下：</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String url = <span class="string">"http://www.horsemuzi.top"</span>;</span><br><span class="line">        <span class="comment">// 发送自定义请求策略</span></span><br><span class="line">        HttpResponse response = HttpRequest.get(url)</span><br><span class="line">                .charset(StandardCharsets.UTF_8)</span><br><span class="line">                .timeout(<span class="number">5000</span>)</span><br><span class="line">                .execute();</span><br><span class="line">        System.out.println(<span class="string">"响应状态码:"</span> + response.getStatus());</span><br><span class="line">        System.out.println(<span class="string">"cookies集合:"</span> + response.getCookies());</span><br><span class="line">        System.out.println(<span class="string">"响应内容:"</span> + response.body());</span><br><span class="line">        response.close();</span><br></pre></td></tr></tbody></table></figure>
<p><strong>其他方式的请求，基本都一样，HuTool工具类相对来说，操作更加简单</strong></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>HttpClient</tag>
      </tags>
  </entry>
  <entry>
    <title>Interceptor拦截器和Filter过滤器基操</title>
    <url>/JAVA/Interceptor%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8CFilter%E8%BF%87%E6%BB%A4%E5%99%A8%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<h2 id="Interceptor拦截器和Filter过滤器基操"><a href="#Interceptor拦截器和Filter过滤器基操" class="headerlink" title="Interceptor拦截器和Filter过滤器基操"></a>Interceptor拦截器和Filter过滤器基操</h2><h3 id="整体图示"><a href="#整体图示" class="headerlink" title="整体图示"></a>整体图示</h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210713103820.jpg" alt="整体图示"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210713103854.jpg" alt="执行流程"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210713104126.jpg" alt="详细图示"></p>
<blockquote>
<p>简析：</p>
<ul>
<li><p>过滤器（Filter） ：可以拿到原始的http请求，但是拿不到你请求的控制器和请求控制器中的方法的信息。</p>
</li>
<li><p>拦截器（Interceptor）：可以拿到你请求的控制器和方法，却拿不到请求方法的参数。</p>
</li>
<li><p>切片（Aspect）: 可以拿到方法的参数，但是却拿不到http请求和响应的对象</p>
</li>
</ul>
</blockquote>
<h3 id="Interceptor拦截器"><a href="#Interceptor拦截器" class="headerlink" title="Interceptor拦截器"></a>Interceptor拦截器</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><blockquote>
<ol>
<li>类要实现Spring 的HandlerInterceptor 接口</li>
<li>类继承实现了HandlerInterceptor 接口的类，例如 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter</li>
</ol>
</blockquote>
<h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><blockquote>
<ul>
<li>preHandle：在业务处理器处理请求之前被调用。预处理，可以进行编码、安全控制、权限校验等处理；</li>
<li>postHandle：在业务处理器处理请求执行完成后，生成视图之前执行。后处理（调用了Service并返回ModelAndView，但未进行页面渲染），有机会修改ModelAndView （这个博主就基本不怎么用了）；</li>
<li>afterCompletion：在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。返回处理（已经渲染了页面）；</li>
</ul>
</blockquote>
<h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><blockquote>
<p>这里选择实现HandlerInterceptor 接口</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/18 11:52</span></span><br><span class="line"><span class="comment"> * 配置请求拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResultInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESPONSE_PACK_FLAG = <span class="string">"RESPONSE_PACK_FLAG"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) {</span><br><span class="line">            <span class="keyword">final</span> HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            <span class="comment">// 获取类对象和请求方法</span></span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; clazz = handlerMethod.getBeanType();</span><br><span class="line">            <span class="keyword">final</span> Method method = handlerMethod.getMethod();</span><br><span class="line">            <span class="comment">// 判断类对象或者请求方法上是否又注解</span></span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(ResponseResult.class)) {</span><br><span class="line">                <span class="comment">// 在请求返回体的加入标志,往下传递,在ResponseBodyAdvice接口实现类中进一步的判断和包装</span></span><br><span class="line">                request.setAttribute(RESPONSE_PACK_FLAG, clazz.getAnnotation(ResponseResult.class));</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (method.isAnnotationPresent(ResponseResult.class)) {</span><br><span class="line">                request.setAttribute(RESPONSE_PACK_FLAG, method.getAnnotation(ResponseResult.class));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h4><blockquote>
<p>其实以前都是继承WebMvcConfigurerAdapter类 不过springBoot2.0以上 WebMvcConfigurerAdapter 方法过时，有两种替代方案：</p>
<ol>
<li>继承WebMvcConfigurationSupport类</li>
<li>实现WebMvcConfigurer接口</li>
</ol>
<p>但是继承WebMvcConfigurationSupport会让Spring-boot对mvc的自动配置失效。根据项目情况选择。现在大多数项目是前后端分离，并没有对静态资源有自动配置的需求所以继承WebMvcConfigurationSupport也未尝不可，一般我们都选择实现WebMvcConfigurer接口。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/18 13:11</span></span><br><span class="line"><span class="comment"> * 注册拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResponseResultInterceptor resultInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">// 注册自定义拦截器和拦截路径 [拦截全部路径的请求]</span></span><br><span class="line">        registry.addInterceptor(resultInterceptor).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote>
<p>拦截器本质上是面向切面编程（AOP），符合横切关注点的功能都可以放在拦截器中来实现，主要的应用场景包括：</p>
<ul>
<li>登录验证，判断用户是否登录。</li>
<li>权限验证，判断用户是否有权限访问资源，如校验token</li>
<li>日志记录，记录请求操作日志（用户ip，访问时间等），以便统计请求访问量。</li>
<li>处理cookie、本地化、国际化、主题等。</li>
<li>性能监控，监控请求处理时长等。</li>
<li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个处理器都需要的即可使用拦截器实现）</li>
</ul>
</blockquote>
<h3 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h3><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><blockquote>
<ol>
<li>使用spring boot提供的<code>FilterRegistrationBean</code>注册Filter</li>
<li>使用原生servlet的<code>ServletComponentScan</code>注解定义Filter</li>
<li>两种方式的本质都是一样的，都是去FilterRegistrationBean注册自定义Filter。只是实现方式不同而已</li>
</ol>
</blockquote>
<h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><h5 id="配置Filter"><a href="#配置Filter" class="headerlink" title="配置Filter"></a>配置Filter</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.constants.BlogConstants;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.MDC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 使用过滤器完成日志链路ID, 此次使用spring boot提供的FilterRegistrationBean注册Filter</span></span><br><span class="line"><span class="comment"> *              此链路日志目前不适用于微服务,因为微服务之间存在跨服务调用,MDC的值需要进行做传递操作,当前并未实现.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/12 20:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">        log.info(<span class="string">"====&gt; 初始化全局过滤器..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ServletException </span>{</span><br><span class="line">        <span class="comment">// 设置链路日志ID唯一标识(缺点: 只局限于当前线程,若产生子线程,这子线程的日志将缺失唯一标识)</span></span><br><span class="line">        MDC.put(BlogConstants.TRACE_ID, IdUtil.fastSimpleUUID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行前: do something</span></span><br><span class="line">        log.info(<span class="string">"111"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行后,数据还未响应到页面: do something</span></span><br><span class="line">        log.info(<span class="string">"222"</span>);</span><br><span class="line">        <span class="comment">// 响应返回页面前,清楚表示,避免内存资源浪费</span></span><br><span class="line">        MDC.remove(BlogConstants.TRACE_ID);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="注册Filter"><a href="#注册Filter" class="headerlink" title="注册Filter"></a>注册Filter</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilterConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;GlobalFilter&gt; <span class="title">registrationBean</span><span class="params">()</span> </span>{</span><br><span class="line">        FilterRegistrationBean&lt;GlobalFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> GlobalFilter());</span><br><span class="line">        filterRegistrationBean.setOrder(<span class="number">1</span>);</span><br><span class="line">        filterRegistrationBean.setName(<span class="string">"globalFilter"</span>);</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><h5 id="配置Filter-1"><a href="#配置Filter-1" class="headerlink" title="配置Filter"></a>配置Filter</h5><blockquote>
<p>使用<code>@WebFilter</code>注解进行Filter的配置，包括名称和过滤的路径等。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = "globalFilter", urlPatterns = "/*")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">        log.info(<span class="string">"====&gt; 初始化全局过滤器..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">            ServletException </span>{</span><br><span class="line">        <span class="comment">// 设置链路日志ID唯一标识(缺点: 只局限于当前线程,若产生子线程,这子线程的日志将缺失唯一标识)</span></span><br><span class="line">        MDC.put(BlogConstants.TRACE_ID, IdUtil.fastSimpleUUID());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行前: do something</span></span><br><span class="line">        log.info(<span class="string">"111"</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行后,数据还未响应到页面: do something</span></span><br><span class="line">        log.info(<span class="string">"222"</span>);</span><br><span class="line">        <span class="comment">// 响应返回页面前,清楚表示,避免内存资源浪费</span></span><br><span class="line">        MDC.remove(BlogConstants.TRACE_ID);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="扫描Filter"><a href="#扫描Filter" class="headerlink" title="扫描Filter"></a>扫描Filter</h5><blockquote>
<p>在启动类上使用<code>@ServletComponentScan</code>注解配置扫描即可。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(basePackages={"com.horse.service.base.filter"})</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBlogApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(ServiceBlogApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8新特性Optional简单使用</title>
    <url>/JAVA/JDK1.8%20%E6%96%B0%E7%89%B9%E6%80%A7Optional/</url>
    <content><![CDATA[<h2 id="Optional类Api基本使用"><a href="#Optional类Api基本使用" class="headerlink" title="Optional类Api基本使用"></a>Optional类Api基本使用</h2><blockquote>
<p>Optional主要用于对单个对象的操作,如果像集合,数组之类的对象,建议使用Stream处理</p>
</blockquote>
<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><blockquote>
<p>把指定的值封装为Optional对象，如果指定的值为null，则抛出NullPointerException</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把指定的值封装为Optional对象，如果指定的值为null，则抛出NullPointerException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ofTest</span><span class="params">()</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不会抛异常</span></span><br><span class="line">    Optional&lt;String&gt; topsun = Optional.of(<span class="string">"topsun"</span>);</span><br><span class="line">    <span class="comment">// 抛出空指针异常</span></span><br><span class="line">    Optional&lt;String&gt; green = Optional.of(<span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NullPointerException</span><br><span class="line">	at java.util.Objects.requireNonNull(Objects.java:<span class="number">203</span>)</span><br><span class="line">	at java.util.Optional.&lt;init&gt;(Optional.java:<span class="number">96</span>)</span><br><span class="line">	at java.util.Optional.of(Optional.java:<span class="number">108</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.ofTest(OptionalApi.java:<span class="number">21</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.main(OptionalApi.java:<span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h3><blockquote>
<p>把指定的值封装为Optional对象，如果指定的值为null，则创建一个空的Optional对象</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为指定的值创建Optional对象，不管所传入的值为null不为null，创建的时候都不会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ofNullableTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; topsun = Optional.ofNullable(<span class="string">"topsun"</span>);</span><br><span class="line"></span><br><span class="line">    Optional&lt;Object&gt; green = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="enpty"><a href="#enpty" class="headerlink" title="enpty"></a>enpty</h3><blockquote>
<p>创建一个空的String类型的Optional对象</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个空的String类型的Optional对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">emptyTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><blockquote>
<p>如果我们创建的Optional对象中有值存在则返回此值，如果没有值存在，则会抛出<br>NoSuchElementException异常</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果我们创建的Optional对象中有值存在则返回此值，如果没有值存在，则会抛出</span></span><br><span class="line"><span class="comment"> * NoSuchElementException异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; top = Optional.of(<span class="string">"泰普森"</span>);</span><br><span class="line">    Optional&lt;String&gt; green = Optional.ofNullable(<span class="string">"绿之居"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line">    logger.info(<span class="string">"of ==&gt; {}"</span>, top.get());</span><br><span class="line">    logger.info(<span class="string">"ofNullable ==&gt; {}"</span>, green.get());</span><br><span class="line">    logger.info(<span class="string">"empty ==&gt; {}"</span>, empty.get());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">24</span>:<span class="number">39.639</span> [main] INFO com.topsun.optional.OptionalApi - of ==&gt; 泰普森</span><br><span class="line"><span class="number">11</span>:<span class="number">24</span>:<span class="number">39.642</span> [main] INFO com.topsun.optional.OptionalApi - ofNullable ==&gt; 绿之居</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.util.NoSuchElementException: No value present</span><br><span class="line">	at java.util.Optional.get(Optional.java:<span class="number">135</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.getTest(OptionalApi.java:<span class="number">62</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.main(OptionalApi.java:<span class="number">22</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h3><blockquote>
<p>如果创建的Optional中有值存在，则返回此值，否则返回一个默认值</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果创建的Optional中有值存在，则返回此值，否则返回一个默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">orElseTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.of(<span class="string">"休斯敦火箭队"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回已存在的值</span></span><br><span class="line">    logger.info(<span class="string">"返回已存在的值 ==&gt; {}"</span>, optional.orElse(<span class="string">"金州勇士队"</span>));</span><br><span class="line">    <span class="comment">// 返回默认值</span></span><br><span class="line">    logger.info(<span class="string">"返回默认值 ==&gt; {}"</span>, empty.orElse(<span class="string">"中国男篮"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">31</span>:<span class="number">06.502</span> [main] INFO com.topsun.optional.OptionalApi - 返回已存在的值 ==&gt; 休斯敦火箭队</span><br><span class="line"><span class="number">11</span>:<span class="number">31</span>:<span class="number">06.505</span> [main] INFO com.topsun.optional.OptionalApi - 返回默认值 ==&gt; 中国男篮</span><br></pre></td></tr></tbody></table></figure>
<h3 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h3><blockquote>
<p>如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">orElseGetTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.of(<span class="string">"休斯敦火箭队"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回已存在的值</span></span><br><span class="line">    logger.info(<span class="string">"返回已存在的值 ==&gt; {}"</span>, optional.orElseGet(() -&gt; <span class="string">"金州勇士队"</span>));</span><br><span class="line">    <span class="comment">// 返回默认值</span></span><br><span class="line">    logger.info(<span class="string">"返回默认值 ==&gt; {}"</span>, empty.orElseGet(() -&gt; <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">29.831</span> [main] INFO com.topsun.optional.OptionalApi - 返回已存在的值 ==&gt; 休斯敦火箭队</span><br><span class="line"><span class="number">13</span>:<span class="number">06</span>:<span class="number">29.835</span> [main] INFO com.topsun.optional.OptionalApi - 返回默认值 ==&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="orElseThrow"><a href="#orElseThrow" class="headerlink" title="orElseThrow"></a>orElseThrow</h3><blockquote>
<p>如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">orElseThrowTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.of(<span class="string">"休斯敦火箭队"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回已存在的值</span></span><br><span class="line">    logger.info(optional.orElseThrow(() -&gt; <span class="keyword">new</span> Exception(<span class="string">"dfs"</span>)));</span><br><span class="line">    <span class="comment">// 返回默认值</span></span><br><span class="line">    logger.info((String) empty.orElseThrow(() -&gt; <span class="keyword">new</span> Exception(<span class="string">"抛出异常"</span>)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">24</span>:<span class="number">40.207</span> [main] INFO com.topsun.optional.OptionalApi - 休斯敦火箭队</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.Exception: 抛出异常</span><br><span class="line">	at com.topsun.optional.OptionalApi.lambda$orElseThrowTest$<span class="number">3</span>(OptionalApi.java:<span class="number">100</span>)</span><br><span class="line">	at java.util.Optional.orElseThrow(Optional.java:<span class="number">290</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.orElseThrowTest(OptionalApi.java:<span class="number">100</span>)</span><br><span class="line">	at com.topsun.optional.OptionalApi.main(OptionalApi.java:<span class="number">24</span>)</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>结合使用，注意事项。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String trans_id = <span class="string">"100866666"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查询集合数据</span></span><br><span class="line">      <span class="comment">// 注意：查询数据集合，不能直接使用 Optional 判空抛异常，因为返回的结果不是 null，而是空集合，不会抛异常！</span></span><br><span class="line">      List&lt;Transportation&gt; transportationList = transportationService.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;Transportation&gt;()</span><br><span class="line">              .in(Transportation::getTrans_id, <span class="keyword">new</span> ArrayList&lt;&gt;(Collections.singletonList(trans_id))));</span><br><span class="line">      log.info(<span class="string">"&gt;&gt;&gt; transportationList: {}"</span>,transportationList);</span><br><span class="line">      Optional.ofNullable(transportationList).orElseThrow(() -&gt; <span class="keyword">new</span> BusinessException(<span class="string">"数据不存在！"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查询单条数据</span></span><br><span class="line">      Transportation transportation = transportationService.getById(trans_id);</span><br><span class="line">      log.info(<span class="string">"&gt;&gt;&gt; transportation: {}"</span>,transportation);</span><br><span class="line">      Optional.ofNullable(transportation).orElseThrow(() -&gt; <span class="keyword">new</span> BusinessException(<span class="string">"数据不存在！"</span>));</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 空集合，不会抛异常</span></span><br><span class="line">&gt;&gt;&gt; transportationList: []</span><br><span class="line"><span class="comment">// null值，抛异常</span></span><br><span class="line">&gt;&gt;&gt; transportation: <span class="keyword">null</span></span><br><span class="line">com.topsun.common.exception.BusinessException: 数据不存在！</span><br></pre></td></tr></tbody></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote>
<p>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象<br>注意: Optional中的filter方法和Stream中的filter方法是有点不一样的，Stream中的filter方法是对一堆元素进</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filterTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.of(<span class="string">"topsun"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未满足filter条件,继续执行orElse</span></span><br><span class="line">    logger.info(<span class="string">" ==&gt; {}"</span>, optional.filter(item -&gt; item.length() &lt; <span class="number">3</span>).orElse(<span class="string">"过滤后返回的值"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 满足filter条件,继续执行orElse</span></span><br><span class="line">    logger.info(<span class="string">" ==&gt; {}"</span>, optional.filter(item -&gt; item.length() &gt; <span class="number">3</span>).orElse(<span class="string">"过滤后返回的值"</span>));</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">" ==&gt; "</span> + empty.filter(item -&gt; String.valueOf(item).length() &gt; <span class="number">3</span>).orElse(<span class="string">"过滤后返回的值"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">38</span>:<span class="number">27.481</span> [main] INFO com.topsun.optional.OptionalApi -  ==&gt; 过滤后返回的值</span><br><span class="line"><span class="number">13</span>:<span class="number">38</span>:<span class="number">27.484</span> [main] INFO com.topsun.optional.OptionalApi -  ==&gt; topsun</span><br><span class="line"><span class="number">13</span>:<span class="number">38</span>:<span class="number">27.485</span> [main] INFO com.topsun.optional.OptionalApi -  ==&gt; 过滤后返回的值</span><br></pre></td></tr></tbody></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote>
<p>如果创建的Optional中的值存在，对该值执行提供的Function函数调用,返回一个被Optional包装的对象,如果值不存在,返回一个空的Optional对象</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果创建的Optional中的值存在，对该值执行提供的Function函数调用,返回一个被Optional包装的对象,如果值不存在,返回一个空的Optional对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.of(<span class="string">"topsun"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"==&gt; "</span> + optional.map(item -&gt; item.toUpperCase()).orElse(<span class="string">"失败"</span>));</span><br><span class="line">    logger.info(<span class="string">"==&gt; "</span> + empty.map(item -&gt; String.valueOf(item).toUpperCase()).orElse(<span class="string">"失败"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">36.295</span> [main] INFO com.topsun.optional.OptionalApi - ==&gt; TOPSUN</span><br><span class="line"><span class="number">13</span>:<span class="number">47</span>:<span class="number">36.297</span> [main] INFO com.topsun.optional.OptionalApi - ==&gt; 失败</span><br></pre></td></tr></tbody></table></figure>
<h3 id="isPresent和ifPresent"><a href="#isPresent和ifPresent" class="headerlink" title="isPresent和ifPresent"></a>isPresent和ifPresent</h3><blockquote>
<pre><code> isPresent: 如果创建的Optional中的值存在，返回true，否则返回false
 ifPresent: 如果创建的Optional中的值存在，则执行该方法的调用，否则什么也不做
</code></pre></blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * isPresent: 如果创建的Optional中的值存在，返回true，否则返回false</span></span><br><span class="line"><span class="comment"> * ifPresent: 如果创建的Optional中的值存在，则执行该方法的调用，否则什么也不做</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">presentTest</span><span class="params">()</span> </span>{</span><br><span class="line">    Optional&lt;String&gt; optional = Optional.of(<span class="string">"topsun"</span>);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"optional值是否存在 ==&gt; "</span> + optional.isPresent());</span><br><span class="line">    logger.info(<span class="string">"empty值是否存在 ==&gt; "</span> + empty.isPresent());</span><br><span class="line"></span><br><span class="line">    optional.ifPresent(item -&gt; logger.info(<span class="string">"执行调用 ==&gt; {}"</span>, item));</span><br><span class="line">    empty.ifPresent(item -&gt; logger.info(<span class="string">"==&gt; {}"</span>, item));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">59</span>:<span class="number">34.289</span> [main] INFO com.topsun.optional.OptionalApi - optional值是否存在 ==&gt; <span class="keyword">true</span></span><br><span class="line"><span class="number">13</span>:<span class="number">59</span>:<span class="number">34.291</span> [main] INFO com.topsun.optional.OptionalApi - empty值是否存在 ==&gt; <span class="keyword">false</span></span><br><span class="line"><span class="number">13</span>:<span class="number">59</span>:<span class="number">34.334</span> [main] INFO com.topsun.optional.OptionalApi - 执行调用 ==&gt; topsun</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JSR-303注解校验</title>
    <url>/JAVA/JSR-303%E6%B3%A8%E8%A7%A3%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="注解校验"><a href="#注解校验" class="headerlink" title="注解校验"></a>注解校验</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-使用规则"><a href="#2-使用规则" class="headerlink" title="2. 使用规则"></a>2. 使用规则</h3><blockquote>
<p>一般我们用来实体类属性的校验，里面的分组校验不太用得着，暂时不考虑。</p>
</blockquote>
<p>注解规则：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Null检查</span><br><span class="line"><span class="meta">@Null(message = "")</span>       验证对象是否为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@NotNull(message = "")</span>    验证对象是否不为<span class="keyword">null</span>, 无法查检长度为<span class="number">0</span>的字符串</span><br><span class="line"><span class="meta">@NotBlank(message = "")</span>   检查约束字符串是不是Null还有被Trim的长度是否大于<span class="number">0</span>,只对字符串,且会去掉前后空格.</span><br><span class="line"><span class="meta">@NotEmpty(message = "")</span>  检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line"></span><br><span class="line">Booelan检查</span><br><span class="line"><span class="meta">@AssertTrue(message = "")</span>     验证 Boolean 对象是否为 <span class="keyword">true</span>  </span><br><span class="line"><span class="meta">@AssertFalse(message = "")</span>    验证 Boolean 对象是否为 <span class="keyword">false</span>  </span><br><span class="line"></span><br><span class="line">长度检查</span><br><span class="line"><span class="meta">@Size(min=, max=,message = "")</span> 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line"><span class="meta">@Length(min=, max=,message = "")</span> 验证字符串长度是否在给定的范围之内</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line"><span class="meta">@Past(message = "")</span>           验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line"><span class="meta">@Future(message = "")</span>     	验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line"><span class="meta">@Pattern(regexp = "",message = "")</span>    	验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">数值检查</span><br><span class="line">	建议使用在包装类型（Integer这类），不建议使用在<span class="keyword">int</span>类型上，</span><br><span class="line">	因为表单值为“”时无法转换为<span class="keyword">int</span>，但可以转换为Stirng为<span class="string">""</span>,Integer为<span class="keyword">null</span></span><br><span class="line"><span class="meta">@Min(message = "")</span>     验证 Number 和 String 对象是否大等于指定的值  </span><br><span class="line"><span class="meta">@Max(message = "")</span>     验证 Number 和 String 对象是否小等于指定的值  </span><br><span class="line"><span class="meta">@DecimalMax(message = "")</span> 值不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</span><br><span class="line"><span class="meta">@DecimalMin(message = "")</span> 值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</span><br><span class="line"><span class="meta">@Digits(message = "")</span>     验证 Number 和 String 的构成是否合法  </span><br><span class="line"><span class="meta">@Digits(integer=,fraction=,message = "")</span> 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Range(min=, max=,message = "")</span> 检查数字是否介于min和max之间.</span><br><span class="line"></span><br><span class="line"><span class="meta">@Valid</span>  递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</span><br><span class="line"></span><br><span class="line"><span class="meta">@CreditCardNumber(message = "")</span> 信用卡验证</span><br><span class="line"><span class="meta">@Email(message = "")</span>  验证是否是邮件地址，如果为<span class="keyword">null</span>,不进行验证，算通过验证。</span><br><span class="line"><span class="meta">@ScriptAssert(lang= ,script=, alias=,message = "")</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@URL(protocol=,host=, port=,regexp=, flags=,message = "")</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3. 注意点"></a>3. 注意点</h3><blockquote>
<ul>
<li>@RequestBody注解校验一般在其旁边添加<code>@Valid</code>注解或者<code>@Valiated</code>注解即可</li>
<li>@RequestParam和@PathVariable注解参数校验，必须把<code>@Valiated</code>注解放到类上面，否则校验不生效</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/20 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Validated</span>  <span class="comment">// 注解一定要写在类上面，否则不生效。</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TestController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/valid")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">validParams</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@NotBlank(message = "name不能为空")</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam("name")</span> String name)</span> </span>{</span><br><span class="line">        logger.info(<span class="string">" ==&gt; name:{}"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson和Fastjson序列化基操</title>
    <url>/JAVA/Jackson%E5%92%8CFastjson%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<h1 id="Jackson和Fastjson序列化基操"><a href="#Jackson和Fastjson序列化基操" class="headerlink" title="Jackson和Fastjson序列化基操"></a>Jackson和Fastjson序列化基操</h1><h2 id="FastJson简析"><a href="#FastJson简析" class="headerlink" title="FastJson简析"></a>FastJson简析</h2><h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="基本测试"><a href="#基本测试" class="headerlink" title="基本测试"></a>基本测试</h3><p><code>Person</code>实体类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2609767654646984159L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(name = "username")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(ordinal = 2, serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(ordinal = 1)</span></span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(format = "yyyy-MM-dd HH:mm:ss.SSS", ordinal = 3)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>测试演示</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(FastJsonDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"泰普森先生"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * JavaBean和Json字符串的相互转换</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        String personJson = JSON.toJSONString(person, <span class="keyword">true</span>);</span><br><span class="line">        logger.info(<span class="string">"bean转json ==&gt; {}"</span>, personJson);</span><br><span class="line">        Person personBean = JSON.parseObject(personJson, Person.class);</span><br><span class="line">        logger.info(<span class="string">"json转bean ==&gt; {}"</span>, personBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * JavaBean和JsonObject(底层是Map的数据结构)的转换和相关操作</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        String personJsonObject = JSONObject.toJSONString(person, <span class="keyword">true</span>);</span><br><span class="line">        logger.info(<span class="string">"bean转json ==&gt; {}"</span>, personJsonObject);</span><br><span class="line">        JSONObject personBeanObject = JSONObject.parseObject(personJsonObject);</span><br><span class="line">        logger.info(<span class="string">"json转JSONObject ==&gt; {}"</span>, personBeanObject);</span><br><span class="line">        personBeanObject.put(<span class="string">"age"</span>, <span class="number">303</span>);</span><br><span class="line">        logger.info(<span class="string">"==&gt; {}"</span>, personBeanObject.get(<span class="string">"username"</span>));</span><br><span class="line">        logger.info(<span class="string">"==&gt; {}"</span>, personBeanObject.get(<span class="string">"age"</span>));</span><br><span class="line">        logger.info(<span class="string">"==&gt; {}"</span>, personBeanObject.get(<span class="string">"money"</span>));</span><br><span class="line">        logger.info(<span class="string">"==&gt; {}"</span>, personBeanObject.get(<span class="string">"birthday"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *list和json的相互转换</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"泰普森先生1"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"泰普森先生2"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"泰普森先生3"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"泰普森先生4"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        List&lt;Person&gt; list = JSON.parseArray(JSON.toJSONString(personList, <span class="keyword">true</span>), Person.class);</span><br><span class="line">        logger.info(<span class="string">"json转list ==&gt; {}"</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * map对应json字符串转成JSONObject,以及对应值转成JavaBean</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">"person1"</span>, <span class="keyword">new</span> Person(<span class="string">"泰普森先生1"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        map.put(<span class="string">"person2"</span>, <span class="keyword">new</span> Person(<span class="string">"泰普森先生2"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        map.put(<span class="string">"person3"</span>, <span class="keyword">new</span> Person(<span class="string">"泰普森先生3"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        map.put(<span class="string">"person4"</span>, <span class="keyword">new</span> Person(<span class="string">"泰普森先生4"</span>, <span class="number">30</span>, <span class="number">7324.5432</span>, <span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line">        JSONObject resultMap = JSONObject.parseObject(JSON.toJSONString(map));</span><br><span class="line">        logger.info(<span class="string">"json转map ==&gt; {}"</span>, resultMap);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : resultMap.entrySet()) {</span><br><span class="line">            <span class="keyword">if</span> (entry.getValue() <span class="keyword">instanceof</span> JSONObject) {</span><br><span class="line">                logger.info(<span class="string">"map中Object类型转换后实际类型是: JSONObject"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// map类型字符转转换成JSONObject后,其中对应的Object参数转换位JavaBean</span></span><br><span class="line">            Person p = JSON.parseObject(JSON.toJSONString(entry.getValue()), Person.class);</span><br><span class="line">            logger.info(<span class="string">"key:{} &lt;==&gt; value:{}"</span>, entry.getKey(), p);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>演示结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.680</span> [main] INFO com.topsun.json.FastJsonDemo - bean转json ==&gt; {</span><br><span class="line">	<span class="string">"username"</span>:<span class="string">"泰普森先生"</span>,</span><br><span class="line">	<span class="string">"money"</span>:<span class="number">7324.5432</span>,</span><br><span class="line">	<span class="string">"age"</span>:<span class="number">30</span>,</span><br><span class="line">	<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.559"</span></span><br><span class="line">}</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.702</span> [main] INFO com.topsun.json.FastJsonDemo - json转bean ==&gt; Person(name=泰普森先生, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>)</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.705</span> [main] INFO com.topsun.json.FastJsonDemo - bean转json ==&gt; {</span><br><span class="line">	<span class="string">"username"</span>:<span class="string">"泰普森先生"</span>,</span><br><span class="line">	<span class="string">"money"</span>:<span class="number">7324.5432</span>,</span><br><span class="line">	<span class="string">"age"</span>:<span class="number">30</span>,</span><br><span class="line">	<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.559"</span></span><br><span class="line">}</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.706</span> [main] INFO com.topsun.json.FastJsonDemo - json转JSONObject ==&gt; {<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.559"</span>,<span class="string">"money"</span>:<span class="number">7324.5432</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"username"</span>:<span class="string">"泰普森先生"</span>}</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.707</span> [main] INFO com.topsun.json.FastJsonDemo - ==&gt; 泰普森先生</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.707</span> [main] INFO com.topsun.json.FastJsonDemo - ==&gt; <span class="number">303</span></span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.707</span> [main] INFO com.topsun.json.FastJsonDemo - ==&gt; <span class="number">7324.5432</span></span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.707</span> [main] INFO com.topsun.json.FastJsonDemo - ==&gt; <span class="number">2021</span>-<span class="number">06</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20.559</span></span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.709</span> [main] INFO com.topsun.json.FastJsonDemo - json转list ==&gt; [Person(name=泰普森先生<span class="number">1</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>), Person(name=泰普森先生<span class="number">2</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>), Person(name=泰普森先生<span class="number">3</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>), Person(name=泰普森先生<span class="number">4</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>)]</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.710</span> [main] INFO com.topsun.json.FastJsonDemo - json转map ==&gt; {<span class="string">"person4"</span>:{<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.709"</span>,<span class="string">"money"</span>:<span class="number">7324.5432</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"username"</span>:<span class="string">"泰普森先生4"</span>},<span class="string">"person3"</span>:{<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.709"</span>,<span class="string">"money"</span>:<span class="number">7324.5432</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"username"</span>:<span class="string">"泰普森先生3"</span>},<span class="string">"person2"</span>:{<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.709"</span>,<span class="string">"money"</span>:<span class="number">7324.5432</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"username"</span>:<span class="string">"泰普森先生2"</span>},<span class="string">"person1"</span>:{<span class="string">"birthday"</span>:<span class="string">"2021-06-17 14:04:20.709"</span>,<span class="string">"money"</span>:<span class="number">7324.5432</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"username"</span>:<span class="string">"泰普森先生1"</span>}}</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.710</span> [main] INFO com.topsun.json.FastJsonDemo - 类型是: JSONObject</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.713</span> [main] INFO com.topsun.json.FastJsonDemo - key:person4 &lt;==&gt; value:Person(name=泰普森先生<span class="number">4</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>)</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.713</span> [main] INFO com.topsun.json.FastJsonDemo - 类型是: JSONObject</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.714</span> [main] INFO com.topsun.json.FastJsonDemo - key:person3 &lt;==&gt; value:Person(name=泰普森先生<span class="number">3</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>)</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.714</span> [main] INFO com.topsun.json.FastJsonDemo - 类型是: JSONObject</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.714</span> [main] INFO com.topsun.json.FastJsonDemo - key:person2 &lt;==&gt; value:Person(name=泰普森先生<span class="number">2</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>)</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.714</span> [main] INFO com.topsun.json.FastJsonDemo - 类型是: JSONObject</span><br><span class="line"><span class="number">14</span>:<span class="number">04</span>:<span class="number">20.714</span> [main] INFO com.topsun.json.FastJsonDemo - key:person1 &lt;==&gt; value:Person(name=泰普森先生<span class="number">1</span>, age=<span class="number">30</span>, money=<span class="number">7324.5432</span>, birthday=Thu Jun <span class="number">17</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">20</span> CST <span class="number">2021</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="封装工具"><a href="#封装工具" class="headerlink" title="封装工具"></a>封装工具</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.common.util.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 基于fastjson封装工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/8 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastjsonUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(FastjsonUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exceptionMsg</span><span class="params">(String methodName, Exception e)</span> </span>{</span><br><span class="line">        log.error(<span class="string">"FastjsonUtils工具类的[{}]方法调用异常: {}"</span>, methodName, e.getMessage());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基本序列化配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SerializeConfig CONFIG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        CONFIG = <span class="keyword">new</span> SerializeConfig();</span><br><span class="line">        <span class="comment">// 使用和json-lib兼容的日期输出格式</span></span><br><span class="line">        CONFIG.put(java.util.Date.class, <span class="keyword">new</span> JSONLibDataFormatSerializer());</span><br><span class="line">        <span class="comment">// 使用和json-lib兼容的日期输出格式</span></span><br><span class="line">        CONFIG.put(java.sql.Date.class, <span class="keyword">new</span> JSONLibDataFormatSerializer());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义属性序列化特征</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SerializerFeature[] FEATURES = {</span><br><span class="line">            <span class="comment">//打开循环引用检测，JSONField(serialize = false)不循环</span></span><br><span class="line">            SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">            <span class="comment">//默认使用系统默认 格式日期格式化</span></span><br><span class="line">            SerializerFeature.WriteDateUseDateFormat,</span><br><span class="line">            <span class="comment">//输出空置字段</span></span><br><span class="line">            SerializerFeature.WriteMapNullValue,</span><br><span class="line">            <span class="comment">//list字段如果为null，输出为[]，而不是null</span></span><br><span class="line">            SerializerFeature.WriteNullListAsEmpty,</span><br><span class="line">            <span class="comment">// 数值字段如果为null，输出为0，而不是null</span></span><br><span class="line">            SerializerFeature.WriteNullNumberAsZero,</span><br><span class="line">            <span class="comment">//Boolean字段如果为null，输出为false，而不是null</span></span><br><span class="line">            SerializerFeature.WriteNullBooleanAsFalse,</span><br><span class="line">            <span class="comment">//字符类型字段如果为null，输出为""，而不是null</span></span><br><span class="line">            SerializerFeature.WriteNullStringAsEmpty</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象转为具有自定义属性特征的json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toFeaturesJson</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(obj, CONFIG, FEATURES);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toFeaturesJson"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象转为格式化输出的json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toPrettyJson</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(obj, <span class="keyword">true</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toPrettyJson"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象转json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJson</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(obj, CONFIG);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toJson"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串转指定类型对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toObj</span><span class="params">(String jsonString, Class&lt;T&gt; clazz)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(jsonString, clazz);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toObj"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json字符串转为Object实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">toObj</span><span class="params">(String jsonString)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSON.parse(jsonString);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toObj"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串转Map对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">toMap</span><span class="params">(String jsonString)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(jsonString, Map.class);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toMap"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从json字符串获取指定key的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValueFromJson</span><span class="params">(String jsonString, String key)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isAnyBlank(jsonString, key)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(jsonString).get(key);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"getValueFromJson"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串转List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(String jsonString, Class&lt;T&gt; clazz)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSONArray.parseArray(jsonString, clazz);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toList"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串转换成List&lt;Map&lt;String, Object&gt;&gt;类型对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; toListMap(String jsonString) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(jsonString, <span class="keyword">new</span> TypeReference&lt;List&lt;Map&lt;String, Object&gt;&gt;&gt;() {</span><br><span class="line">            });</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            exceptionMsg(<span class="string">"toListMap"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Jackson简析"><a href="#Jackson简析" class="headerlink" title="Jackson简析"></a>Jackson简析</h2><blockquote>
<p>springboot框架默认序列化工具，无须引入pom文件</p>
</blockquote>
<h3 id="封装工具-1"><a href="#封装工具-1" class="headerlink" title="封装工具"></a>封装工具</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.common.util.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> To0To0/10/17 1To:ToTo</span></span><br><span class="line"><span class="comment"> * jackson序列化工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper OBJECTMAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">// 统一日期格式yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        OBJECTMAPPER.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置解析遇到未知属性时不失败</span></span><br><span class="line">        OBJECTMAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">objToString</span><span class="params">(T obj)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> String ? (String) obj : OBJECTMAPPER.writeValueAsString(obj);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">"Parse object to String error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">objToStringPretty</span><span class="params">(T obj)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> String ? (String) obj :</span><br><span class="line">                    OBJECTMAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(obj);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">"Parse object to String error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">stringToObj</span><span class="params">(String str, Class&lt;T&gt; clazz)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(str) || clazz == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> clazz.equals(String.class) ? (T) str : OBJECTMAPPER.readValue(str, clazz);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.error(<span class="string">"Parse String to Object error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">stringToObj</span><span class="params">(String str, TypeReference&lt;T&gt; typeReference)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(str) || typeReference == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> (T) (typeReference.getType().equals(String.class) ? str : OBJECTMAPPER.readValue(str,</span><br><span class="line">                    typeReference));</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.error(<span class="string">"Parse String to Object error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">stringToObj</span><span class="params">(String str, Class&lt;?&gt; collectionClass, Class&lt;?&gt;... clazz)</span> </span>{</span><br><span class="line">        JavaType javaType = OBJECTMAPPER.getTypeFactory().constructParametricType(collectionClass, clazz);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> OBJECTMAPPER.readValue(str, javaType);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.error(<span class="string">"Parse String to Object error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8集合数据去重示例</title>
    <url>/JAVA/Java8%E9%9B%86%E5%90%88%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="Java8集合数据去重示例"><a href="#Java8集合数据去重示例" class="headerlink" title="Java8集合数据去重示例"></a>Java8集合数据去重示例</h2><blockquote>
<p>基于Java8 Stream流的去重操作,主要包括下面几种方式：</p>
<ul>
<li>distinct 按照对象去重(实现 hashCode()和 equals()方法)</li>
<li>filter 按照对象属性去重(不需要实现 hashCode()和 equals()方法)</li>
<li>利用stream的collectingAndThen+TreeSet去重</li>
</ul>
</blockquote>
<h3 id="去重实例对象"><a href="#去重实例对象" class="headerlink" title="去重实例对象"></a>去重实例对象</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/5 10:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8170834275910515552L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean sex;</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * distinct 按照对象去重(实现 hashCode()和 equals()方法)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distinctHandleRepeat</span><span class="params">(List&lt;Student&gt; students)</span> </span>{</span><br><span class="line">    students.stream().distinct().collect(Collectors.toList()).forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter 按照对象属性去重(不需要实现 hashCode()和 equals()方法)</span></span><br><span class="line"><span class="comment"> * 单属性去重</span></span><br><span class="line"><span class="comment"> * 多属性去重(例如: 根据age去重后,再根据sex再次进行去重)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterHandleRepeat</span><span class="params">(List&lt;Student&gt; students)</span> </span>{</span><br><span class="line">    students.stream()</span><br><span class="line">            .filter(filterByKey(Student::getAge))</span><br><span class="line">            .filter(filterByKey(Student::getSex))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * putIfAbsent(): key存在时不添加到map并返回value，不存在时则添加返回null</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyExtractor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">filterByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ?&gt; keyExtractor)</span> </span>{</span><br><span class="line">    Map&lt;Object, Boolean&gt; seen = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="TreeSet-推荐"><a href="#TreeSet-推荐" class="headerlink" title="TreeSet(推荐)"></a>TreeSet(推荐)</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用stream的collectingAndThen+TreeSet去重</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> students</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collectingAndThenHandleRepeat</span><span class="params">(List&lt;Student&gt; students)</span> </span>{</span><br><span class="line">    students.stream()</span><br><span class="line">            .collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(Student::getAge))), ArrayList::<span class="keyword">new</span>))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">// distinct去重</span></span><br><span class="line">    distinctHandleRepeat(getStudents());</span><br><span class="line">    System.out.println(<span class="string">"================================================"</span>);</span><br><span class="line">    <span class="comment">// filter去重</span></span><br><span class="line">    filterHandleRepeat(getStudents());</span><br><span class="line">    System.out.println(<span class="string">"================================================"</span>);</span><br><span class="line">    <span class="comment">// collectingAndThen+TreeSet去重</span></span><br><span class="line">    collectingAndThenHandleRepeat(getStudents());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于Java8 Stream流的去重操作,主要包括下面几种方式:</span></span><br><span class="line">    <span class="comment">// distinct 按照对象去重(实现 hashCode()和 equals()方法)</span></span><br><span class="line">    <span class="comment">// filter 按照对象属性去重(不需要实现 hashCode()和 equals()方法)</span></span><br><span class="line">    <span class="comment">// 利用stream的collectingAndThen+TreeSet去重</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    students.add(<span class="keyword">new</span> Student(<span class="string">"Tom"</span>, <span class="number">25</span>, Boolean.TRUE));</span><br><span class="line">    students.add(<span class="keyword">new</span> Student(<span class="string">"Jack"</span>, <span class="number">23</span>, Boolean.TRUE));</span><br><span class="line">    students.add(<span class="keyword">new</span> Student(<span class="string">"Top"</span>, <span class="number">22</span>, Boolean.FALSE));</span><br><span class="line">    students.add(<span class="keyword">new</span> Student(<span class="string">"Gao"</span>, <span class="number">22</span>, Boolean.FALSE));</span><br><span class="line">    students.add(<span class="keyword">new</span> Student(<span class="string">"Top"</span>, <span class="number">22</span>, Boolean.FALSE));</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Student(name=Tom, age=<span class="number">25</span>, sex=<span class="keyword">true</span>)</span><br><span class="line">Student(name=Jack, age=<span class="number">23</span>, sex=<span class="keyword">true</span>)</span><br><span class="line">Student(name=Top, age=<span class="number">22</span>, sex=<span class="keyword">false</span>)</span><br><span class="line">Student(name=Gao, age=<span class="number">22</span>, sex=<span class="keyword">false</span>)</span><br><span class="line">================================================</span><br><span class="line">Student(name=Tom, age=<span class="number">25</span>, sex=<span class="keyword">true</span>)</span><br><span class="line">Student(name=Top, age=<span class="number">22</span>, sex=<span class="keyword">false</span>)</span><br><span class="line">================================================</span><br><span class="line">Student(name=Top, age=<span class="number">22</span>, sex=<span class="keyword">false</span>)</span><br><span class="line">Student(name=Jack, age=<span class="number">23</span>, sex=<span class="keyword">true</span>)</span><br><span class="line">Student(name=Tom, age=<span class="number">25</span>, sex=<span class="keyword">true</span>)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalDateTime和Date转化</title>
    <url>/JAVA/LocalDateTime%E4%BA%92%E8%BD%ACDate/</url>
    <content><![CDATA[<h2 id="LocalDateTime和Date互相转化"><a href="#LocalDateTime和Date互相转化" class="headerlink" title="LocalDateTime和Date互相转化"></a>LocalDateTime和Date互相转化</h2><h3 id="示例如下："><a href="#示例如下：" class="headerlink" title="示例如下："></a>示例如下：</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Date =&gt; LocalDateTime(默认时区为 东8区)</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">LocalDateTime dateTime1 = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());</span><br><span class="line">System.out.println(<span class="string">"LocalDateTime:"</span> + dateTime1);</span><br><span class="line"></span><br><span class="line">LocalDateTime dateTime2 = LocalDateTime.ofInstant(Instant.ofEpochMilli(date.getTime()), ZoneId.systemDefault());</span><br><span class="line">System.out.println(<span class="string">"LocalDateTime:"</span> + dateTime2);</span><br><span class="line"></span><br><span class="line">LocalDateTime dateTime3 = date.toInstant().atOffset(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDateTime();</span><br><span class="line">System.out.println(<span class="string">"LocalDateTime:"</span> + dateTime3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime =&gt;Date(默认时区为 东8区)</span></span><br><span class="line">LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line">Date date1 = Date.from(dateTime.atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line"></span><br><span class="line">Date date2 = Date.from(dateTime.toInstant(ZoneOffset.of(<span class="string">"+8"</span>)));</span><br><span class="line"></span><br><span class="line">Date date3 = Date.from(dateTime.toInstant(ZoneOffset.ofHours(<span class="number">8</span>)));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Date:"</span> + date1);</span><br><span class="line">System.out.println(<span class="string">"Date:"</span> + date2);</span><br><span class="line">System.out.println(<span class="string">"Date:"</span> + date3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime 转毫秒值和秒值</span></span><br><span class="line"><span class="keyword">long</span> milli = dateTime.toInstant(ZoneOffset.ofHours(<span class="number">8</span>)).toEpochMilli();</span><br><span class="line"><span class="keyword">long</span> second = dateTime.toEpochSecond(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// LocalDateTime 计算时间差</span></span><br><span class="line">LocalDateTime startTime = LocalDateTime.of(LocalDate.of(<span class="number">2021</span>, <span class="number">3</span>, <span class="number">25</span>), LocalTime.of(<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>));</span><br><span class="line">LocalDateTime endTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duration工具类</span></span><br><span class="line">Duration duration = Duration.between(startTime, endTime);</span><br><span class="line">System.out.println(<span class="string">"相差天数:"</span> + duration.toDays());</span><br><span class="line">System.out.println(<span class="string">"相差小时:"</span> + duration.toHours());</span><br><span class="line">System.out.println(<span class="string">"相差分钟:"</span> + duration.toMinutes());</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LocalDateTime</tag>
      </tags>
  </entry>
  <entry>
    <title>开启MybatisPlus批量插入</title>
    <url>/JAVA/MP%E5%BC%80%E5%90%AF%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="开启MP批量插入"><a href="#开启MP批量插入" class="headerlink" title="开启MP批量插入"></a>开启MP批量插入</h2><h3 id="1-批量方法注入"><a href="#1-批量方法注入" class="headerlink" title="1. 批量方法注入"></a>1. 批量方法注入</h3><blockquote>
<p>继承<code>DefaultSqlInjector</code>: MP方法扩展配置注射器(支持自定义数据方法注入)</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.AbstractMethod;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.DefaultSqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.injector.methods.InsertBatchSomeColumn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: MP方法扩展配置注射器(支持自定义数据方法注入)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/7 13:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass)</span> </span>{</span><br><span class="line">        <span class="comment">// 防止父类方法不可使用,所有要返回父类方法并添加自定义扩展方法</span></span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="keyword">super</span>.getMethodList(mapperClass);</span><br><span class="line">        <span class="comment">// 增加扩展的方法(存在于源码,但作者没有内置,有一定的bug)</span></span><br><span class="line">        methodList.add(<span class="keyword">new</span> InsertBatchSomeColumn());</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-自定义扩展方法接口"><a href="#2-自定义扩展方法接口" class="headerlink" title="2. 自定义扩展方法接口"></a>2. 自定义扩展方法接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 基于MP自定义扩展方法接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/7 13:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExpandMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入 仅使用于mysql,方法名必须是这个,(基于MP的源码中的规定)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实例列表结合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">insertBatchSomeColumn</span><span class="params">(List&lt;T&gt; entityList)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-改造业务扩展接口"><a href="#3-改造业务扩展接口" class="headerlink" title="3. 改造业务扩展接口"></a>3. 改造业务扩展接口</h3><blockquote>
<p>让业务接口继承我们上面自定义的<code>ExpanMapper</code>接口，就可以使用批量插入方法。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.horse.service.blog.entity.Song;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 歌曲信息表 Mapper 接口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-02-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SongMapper</span> <span class="keyword">extends</span> <span class="title">ExpandMapper</span>&lt;<span class="title">Song</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除重复歌曲</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeRepeatSong</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-实现批量插入"><a href="#4-实现批量插入" class="headerlink" title="4. 实现批量插入"></a>4. 实现批量插入</h3><blockquote>
<p>注意点：</p>
<ul>
<li>数据库中配置有默认值的，这里批量插入时不会生效，需要在这里显式的赋值；</li>
<li>Mybatis-Plus设置的自动填充字段不受影响，例如：gmt_create字段；</li>
<li>可能存在一定的bug，谨慎使用，不过效率挺快。在严谨的前提下，最好使用mybatis的动态SQL进行批量插入操作；</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SongServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SongMapper</span>, <span class="title">Song</span>&gt; <span class="keyword">implements</span> <span class="title">SongService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存网易云歌曲信息(定时任务处理重复的歌曲)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> songList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSong</span><span class="params">(List&lt;Song&gt; songList)</span> </span>{</span><br><span class="line">        <span class="comment">// 源码注意: 这是自选字段 insert !!,如果个别字段在 entity 里为 null 但是数据库中有配置默认值, insert 后数据库字段是为 null 而不是默认值</span></span><br><span class="line">        <span class="comment">// 所以这里entity中的所有字段值都不能为空(除了自动填充的字段)</span></span><br><span class="line">        songList.forEach(song -&gt; song.setCopyright(BlogConstants.MUSIC_COPYRIGHT.UNCERTAIN.getCopyrightInfo())</span><br><span class="line">                .setDeleted(Boolean.TRUE));</span><br><span class="line">        baseMapper.insertBatchSomeColumn(songList);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL and Redis 碎片清理</title>
    <url>/JAVA/MySQL%20and%20Redis%20%E7%A2%8E%E7%89%87%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<h1 id="MySQL-and-Redis-碎片清理"><a href="#MySQL-and-Redis-碎片清理" class="headerlink" title="MySQL and Redis 碎片清理"></a>MySQL and Redis 碎片清理</h1><h3 id="MySQL磁盘碎片清理"><a href="#MySQL磁盘碎片清理" class="headerlink" title="MySQL磁盘碎片清理"></a>MySQL磁盘碎片清理</h3><p>磁盘碎片产生的原因？？？</p>
<p>为什么会产生磁盘碎片？那是因为某一个表如果经常插入数据和删除数据，必然会产生很多未使用的空白空间，这些空白空间就是不连续的碎片，这样久而久之，这个表就会占用很大空间，但实际上表里面的记录数却很少，这样不但会浪费空间，并且查询速度也更慢。</p>
<blockquote>
<p>查看除系统表外磁盘碎片占用空间[date_free]大于0的所有表信息</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看除系统表外 data_free值大于0 的所有表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    concat(TABLE_SCHEMA,<span class="string">'.'</span>,TABLE_NAME)                                         <span class="keyword">AS</span> database_name,</span><br><span class="line">    concat(<span class="keyword">TRUNCATE</span>(<span class="built_in">SUM</span>(DATA_LENGTH<span class="operator">+</span>DATA_FREE<span class="operator">+</span>INDEX_LENGTH)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>) <span class="keyword">AS</span> total_size,</span><br><span class="line">    concat(<span class="keyword">TRUNCATE</span>(<span class="built_in">SUM</span>(DATA_LENGTH)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>)                        <span class="keyword">AS</span> data_size,</span><br><span class="line">    concat(<span class="keyword">TRUNCATE</span>(<span class="built_in">SUM</span>(DATA_FREE)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>,<span class="number">2</span>),<span class="string">' MB'</span>)                          <span class="keyword">AS</span> data_free,</span><br><span class="line">    concat(<span class="keyword">TRUNCATE</span>(<span class="built_in">SUM</span>(INDEX_LENGTH)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>,<span class="number">2</span>),<span class="string">'MB'</span>)                        <span class="keyword">AS</span> index_size,</span><br><span class="line">    ENGINE</span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'information_schema'</span>,</span><br><span class="line">                           <span class="string">'mysql'</span>)</span><br><span class="line">    <span class="keyword">AND</span> data_free<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    TABLE_NAME,</span><br><span class="line">    TABLE_SCHEMA,</span><br><span class="line">    ENGINE</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    data_free <span class="keyword">DESC</span></span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>清理磁盘碎片的两种方式</p>
</blockquote>
<ul>
<li><code>OPTIMIZE TABLE 表名;</code></li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- OPTIMIZE TABLE只对MyISAM、BDB和InnoDB表起作用</span></span><br><span class="line">OPTIMIZE <span class="keyword">TABLE</span> tb_task_log;</span><br></pre></td></tr></tbody></table></figure>
<p>执行结果会出现 “Table does not support optimize, doing recreate + analyze instead”，这个其实无妨，实际上磁盘碎片已经被清除掉了。</p>
<ul>
<li><code>ALTER TABLE 表名 ENGINE = Innodb;</code>（只是<code>InnoDB</code>的表可以这么做</li>
</ul>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_operational_log engine<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意！<code>OPTIMIZE</code>操作会暂时锁住表,而且数据量越大,耗费的时间也越长,它毕竟不是简单查询操作。</strong>所以把<code>OPTIMIZE</code>命令放在程序中是不妥当的,不管设置的命中率多低,当访问量增大的时候,整体命中率也会上升,这样肯定会对程序的运行效率造成很大影响。比较好的方式就是做个shell,定期检查mysql中 <code>information_schema</code>.<code>TABLES</code>字段,查看<code>DATA_FREE</code>字段,大于0的话,就表示有碎片，然后启动脚本。</p>
<hr>
<h3 id="Redis磁盘碎片清理"><a href="#Redis磁盘碎片清理" class="headerlink" title="Redis磁盘碎片清理"></a>Redis磁盘碎片清理</h3><p>内存碎片产生的原因？？？</p>
<p>当Redis中清理了大量的Key之后原先Redis申请的内存（used_memory_rss）将继续持有而不会释放，此时查看内存信息将会看到存在大量的内存碎片。</p>
<p>内存分析(当前演示的redis服务内存碎片率并不高)</p>
<blockquote>
<p>在理想情况下， <code>used_memory_rss</code>的值应该只比<code>used_memory</code>高一点点。当 rss &gt; used ，且两者的值相差较大时，表示存在（内部或外部的）内存碎片。当 used &gt; rss 时，表示 redis的部分内存被操作系统换出到交换空间了，在这种情况下，操作可能会产生明显的延迟</p>
<p>内存碎片的比率可以通过<code>mem_fragmentation_ratio</code>的值看出。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&gt; info memory</span><br><span class="line"># Memory</span><br><span class="line">used_memory:872168  # 由redis分配器分配的内存总量，单位：字节（byte）</span><br><span class="line">used_memory_human:851.73K # 以人类可读的格式返回 Redis 分配的内存总量</span><br><span class="line">used_memory_rss:2912256 # 从操作系统的角度，返回 Redis 已分配的内存总量</span><br><span class="line">used_memory_rss_human:<span class="number">2.</span>78M</span><br><span class="line">used_memory_peak:913800 # Redis 的内存消耗峰值（以字节为单位）</span><br><span class="line">used_memory_peak_human:<span class="number">892.</span>38K</span><br><span class="line">used_memory_peak_perc:<span class="number">95.44</span>%</span><br><span class="line">used_memory_overhead:<span class="number">830616</span></span><br><span class="line">used_memory_startup:<span class="number">810120</span></span><br><span class="line">used_memory_dataset:<span class="number">41552</span></span><br><span class="line">used_memory_dataset_perc:<span class="number">66.97</span>%</span><br><span class="line">allocator_allocated:<span class="number">958056</span></span><br><span class="line">allocator_active:<span class="number">1265664</span></span><br><span class="line">allocator_resident:<span class="number">3502080</span></span><br><span class="line">total_system_memory:<span class="number">1927168000</span></span><br><span class="line">total_system_memory_human:<span class="number">1.</span>79G</span><br><span class="line">used_memory_lua:37888 # Lua 引擎所使用的内存大小（以字节为单位）</span><br><span class="line">used_memory_lua_human:<span class="number">37.</span>00K</span><br><span class="line">used_memory_scripts:<span class="number">0</span></span><br><span class="line">used_memory_scripts_human:0B</span><br><span class="line">number_of_cached_scripts:<span class="number">0</span></span><br><span class="line">maxmemory:<span class="number">268435456</span></span><br><span class="line">maxmemory_human:<span class="number">256.</span>00M</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:<span class="number">1.32</span></span><br><span class="line">allocator_frag_bytes:<span class="number">307608</span></span><br><span class="line">allocator_rss_ratio:<span class="number">2.77</span></span><br><span class="line">allocator_rss_bytes:<span class="number">2236416</span></span><br><span class="line">rss_overhead_ratio:<span class="number">0.83</span></span><br><span class="line">rss_overhead_bytes:-<span class="number">589824</span></span><br><span class="line">mem_fragmentation_ratio:3.50 # used_memory_rss 和 used_memory 之间的比率</span><br><span class="line">mem_fragmentation_bytes:<span class="number">2081112</span></span><br><span class="line">mem_not_counted_for_evict:<span class="number">0</span></span><br><span class="line">mem_replication_backlog:<span class="number">0</span></span><br><span class="line">mem_clients_slaves:<span class="number">0</span></span><br><span class="line">mem_clients_normal:<span class="number">20496</span></span><br><span class="line">mem_aof_buffer:<span class="number">0</span></span><br><span class="line">mem_allocator:jemalloc-<span class="number">5.1</span><span class="number">.0</span></span><br><span class="line">active_defrag_running:<span class="number">0</span></span><br><span class="line">lazyfree_pending_objects:<span class="number">0</span></span><br><span class="line">lazyfreed_objects:<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>清理内存碎片</p>
<p>开启redis自动清理</p>
<blockquote>
<p>默认情况下，redis的自动清理内存碎片的参数是关闭的</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询开关状态</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> config get activedefrag</span></span><br><span class="line">activedefrag</span><br><span class="line">no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动开启</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> config <span class="built_in">set</span> activedefrag yes</span></span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>手动清理</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 手动清理</span></span><br><span class="line">&gt; memory purge</span><br><span class="line">OK</span><br></pre></td></tr></tbody></table></figure>
<p>相关参数配置</p>
<blockquote>
<p>内存清理相关参数如下，可以使用config get的方式查看对应的值</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Enabled active defragmentation</span></span><br><span class="line"><span class="comment"># 碎片整理总开关</span></span><br><span class="line"><span class="comment">#activedefrag yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimum amount of fragmentation waste to start active defrag</span></span><br><span class="line"><span class="comment"># 内存碎片达到多少的时候开启整理</span></span><br><span class="line">active-defrag-ignore-bytes 100mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimum percentage of fragmentation to start active defrag</span></span><br><span class="line"><span class="comment"># 碎片率达到百分之多少开启整理</span></span><br><span class="line">active-defrag-threshold-lower 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum percentage of fragmentation at which we use maximum effort</span></span><br><span class="line"><span class="comment"># 碎片率小余多少百分比开启整理</span></span><br><span class="line">active-defrag-threshold-upper 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimal effort for defrag in CPU percentage</span></span><br><span class="line">active-defrag-cycle-min 25</span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximal effort for defrag in CPU percentage</span></span><br><span class="line">active-defrag-cycle-max 75</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MapStruct属性转换简单使用</title>
    <url>/JAVA/MapStruct%E5%B1%9E%E6%80%A7%E8%BD%AC%E6%8D%A2%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="MapStruct属性转换简单使用"><a href="#MapStruct属性转换简单使用" class="headerlink" title="MapStruct属性转换简单使用"></a>MapStruct属性转换简单使用</h2><blockquote>
<p>其实这个玩意，也就仅仅限于属性的复制，其他的复杂功能，没有必要使用，增加代码复杂程度。</p>
</blockquote>
<h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><blockquote>
<p>我这里引入引入了<code>mapstruct</code>和<code>lombok</code>两个依赖，没有报冲突，但是在博客项目使用中，不知道为什么报错啦，至今未解决。</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="编写映射接口"><a href="#编写映射接口" class="headerlink" title="编写映射接口"></a>编写映射接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.topsun.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mapstruct.BeanMapping;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mappings;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/7 9:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarStructMapper</span> </span>{</span><br><span class="line"></span><br><span class="line">    CarStructMapper INSTANCE = Mappers.getMapper(CarStructMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例映射配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeanMapping(ignoreByDefault = true)</span></span><br><span class="line">    <span class="meta">@Mappings({</span></span><br><span class="line"><span class="meta">            @Mapping(source = "car.name", target = "carName"),</span></span><br><span class="line"><span class="meta">            @Mapping(source = "car.brand", target = "brand"),</span></span><br><span class="line"><span class="meta">            @Mapping(source = "car.price", target = "price"),</span></span><br><span class="line"><span class="meta">            @Mapping(source = "carAddress.address", target = "address")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="function">CarDTO <span class="title">carToCarDto</span><span class="params">(Car car, CarAddress carAddress)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h3><p><code>Car</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>CarAddress</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarAddress</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>CarDTO</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarDTO</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String carName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"朗逸"</span>, <span class="string">"上海大众"</span>, <span class="number">99999.99</span>);</span><br><span class="line">        CarAddress carAddress = <span class="keyword">new</span> CarAddress(<span class="string">"浙江杭州"</span>);</span><br><span class="line">        CarDTO carDTO = CarStructMapper.INSTANCE.carToCarDto(car, carAddress);</span><br><span class="line">        System.out.println(<span class="string">"carDTO: "</span> + carDTO);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">carDTO: CarDTO(carName=朗逸, brand=上海大众, price=<span class="number">99999.99</span>, address=浙江杭州)</span><br></pre></td></tr></tbody></table></figure>
<p>还是不要轻易使用的为好，<code>BeanUtils工具类</code>就挺好的。。。</p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
        <tag>MapStruct</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常规操作</title>
    <url>/JAVA/MySQL%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="MySQL常规操作"><a href="#MySQL常规操作" class="headerlink" title="MySQL常规操作"></a>MySQL常规操作</h2><blockquote>
<p>主要5.7版本写法，可能会穿插8.x版本的写法</p>
</blockquote>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="1-查询结果行转列"><a href="#1-查询结果行转列" class="headerlink" title="1.查询结果行转列"></a>1.查询结果行转列</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tt.user_id                             <span class="keyword">AS</span> userId,</span><br><span class="line">       <span class="built_in">sum</span>(if(tt.pay_type <span class="operator">=</span> <span class="number">0</span>, tt.amount, <span class="number">0</span>)) <span class="keyword">AS</span> alipayAmount,</span><br><span class="line">       <span class="built_in">sum</span>(if(tt.pay_type <span class="operator">=</span> <span class="number">1</span>, tt.amount, <span class="number">0</span>)) <span class="keyword">AS</span> weChatAmount,</span><br><span class="line">       <span class="built_in">sum</span>(tt.amount)                         <span class="keyword">AS</span> totalAmount</span><br><span class="line"><span class="keyword">FROM</span> tb_trade tt</span><br><span class="line"><span class="keyword">WHERE</span> tt.is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">AND</span> tt.trade_status <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tt.user_id</span><br></pre></td></tr></tbody></table></figure>
<p>查询结果</p>
<p><img src="https://i.loli.net/2021/06/21/VjiZLWb1wO72KRI.png" alt="image-20210621092620291"></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="1-删除重复记录"><a href="#1-删除重复记录" class="headerlink" title="1. 删除重复记录"></a>1. 删除重复记录</h4><blockquote>
<p>删除重复记录，保留id最小的</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 不能根据本表的查询结果来更新本表的数据（mysql只能这样写）</span></span><br><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	tb_student </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	email <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> email <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> email <span class="keyword">FROM</span> tb_student <span class="keyword">GROUP</span> <span class="keyword">BY</span> email <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>( <span class="number">1</span> )<span class="operator">&gt;</span> <span class="number">1</span> ) sheet1 ) </span><br><span class="line">	<span class="keyword">AND</span> `<span class="keyword">no</span>` <span class="keyword">NOT</span> <span class="keyword">IN</span> ( <span class="keyword">SELECT</span> `twoNo` <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> <span class="built_in">MIN</span>( `<span class="keyword">no</span>` ) <span class="keyword">AS</span> `twoNo` <span class="keyword">FROM</span> tb_student <span class="keyword">GROUP</span> <span class="keyword">BY</span> email <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>( <span class="number">1</span> )<span class="operator">&gt;</span> <span class="number">1</span> ) sheet2 );</span><br></pre></td></tr></tbody></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>email</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>汤姆</td>
<td>3468449362@qq.com</td>
</tr>
<tr>
<td>2</td>
<td>杰瑞</td>
<td>mabin142804@163.com</td>
</tr>
<tr>
<td>3</td>
<td>高飞</td>
<td>3468449362@qq.com</td>
</tr>
</tbody>
</table>
</div>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><h4 id="1-基本插入操作"><a href="#1-基本插入操作" class="headerlink" title="1. 基本插入操作"></a>1. 基本插入操作</h4><blockquote>
<p>操作须知：</p>
<ol>
<li>如果插入全数据字段，可直接省略，否则，需要对应插入数据书写对应字段</li>
<li>插入字段和待插入数据的数量和类型必须对应</li>
</ol>
</blockquote>
<p>方式1：单条插入</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> tb_student <span class="keyword">value</span>(<span class="string">'66'</span>,<span class="string">'小妮'</span>,<span class="string">'1998-10-04'</span>,<span class="string">'女'</span>); <span class="comment">-- 全字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> tb_student(s_id,s_name,s_birth) <span class="keyword">value</span>(<span class="string">'66'</span>,<span class="string">'小妮'</span>,<span class="string">'1998-10-04'</span>); <span class="comment">-- 指定字段</span></span><br></pre></td></tr></tbody></table></figure>
<p>方式2：批量插入</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">INSERT into tb_student values</span><br><span class="line">('66','小妮1','1998-10-04','女'),</span><br><span class="line">('67','小妮2','1998-10-04','女'),</span><br><span class="line">('68','小妮3','1998-10-04','女'); -- 全字段</span><br><span class="line"></span><br><span class="line">INSERT into tb_student(s_id,s_name,s_birth) values</span><br><span class="line">('66','小妮1','1998-10-04'),</span><br><span class="line">('67','小妮2','1998-10-04'),</span><br><span class="line">('68','小妮3','1998-10-04'); -- 指定字段</span><br></pre></td></tr></tbody></table></figure>
<p>方式3：查询并插入数据（格式：INSERT INTO … SELECT …）</p>
<blockquote>
<p>注意：目标表（tb_student）必须存在，否则，系统会提示系统无效！</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> tb_student <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_student <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="string">'66'</span>; <span class="comment">-- 全字段（自表数据）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">INTO</span> tb_student(s_id,s_name,s_birth) </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">IF(s_id<span class="operator">=</span><span class="string">'66'</span>,<span class="string">'99'</span>,s_id),</span><br><span class="line">s_name,</span><br><span class="line">s_birth </span><br><span class="line"><span class="keyword">from</span> tb_student <span class="keyword">WHERE</span> s_id <span class="operator">=</span> <span class="string">'66'</span>; <span class="comment">-- 指定字段（自表数据）</span></span><br></pre></td></tr></tbody></table></figure>
<p>方式4：[MySQL不支持] 批量查询插入并创建目标表（格式：SELECT … INTO . FROM .）</p>
<blockquote>
<p>注意：目标表（tb_student2）必须不存在，执行时，会自动建表并插入数据</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> tb_student2 <span class="keyword">FROM</span> tb_student <span class="keyword">WHERE</span> s_sex <span class="operator">=</span> <span class="string">'男'</span>;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="1-update刷数据"><a href="#1-update刷数据" class="headerlink" title="1. update刷数据"></a>1. update刷数据</h4><blockquote>
<p>update方式批量方式批量刷数据，几种方式如下：</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- update多表联刷数据</span></span><br><span class="line"></span><br><span class="line">UPDATE A </span><br><span class="line"><span class="keyword">SET</span> A.update_time <span class="operator">=</span> B.update_time </span><br><span class="line"><span class="keyword">FROM</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.order_bh <span class="operator">=</span> B.order_bh;</span><br><span class="line">	</span><br><span class="line">UPDATE A</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.order_bh <span class="operator">=</span> B.order_bh </span><br><span class="line"><span class="keyword">SET</span> A.update_time <span class="operator">=</span> B.update_time;</span><br><span class="line"></span><br><span class="line">UPDATE A </span><br><span class="line"><span class="keyword">SET</span> A.update_time <span class="operator">=</span> ( <span class="keyword">SELECT</span> B.update_time <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> A.order_bh <span class="operator">=</span> B.order_bh );</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><h4 id="1-COUNT-函数"><a href="#1-COUNT-函数" class="headerlink" title="1. COUNT()函数"></a>1. COUNT()函数</h4><blockquote>
<p>count函数中还可以写如函数表达式<code>express</code>。因为这个特性，我们可以更加方便的统计数据。</p>
<p>注意点：</p>
<ul>
<li>count的值是NULL是不统计数， count(‘任意内容’)都会统计出所有记录数。</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 和java中的or运算符类似：如果express为true,那么就不执行or后面的表达式，否则就执行,结果为NULL，不会进行统计计数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(tb.views <span class="operator">&gt;</span> <span class="number">100</span>) <span class="keyword">AS</span> <span class="string">'viewCount'</span></span><br><span class="line"><span class="keyword">FROM</span> tb_blog tb</span><br><span class="line"><span class="keyword">WHERE</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">结果：viewCount:<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(tb.views <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>) <span class="keyword">AS</span> <span class="string">'viewCount'</span></span><br><span class="line"><span class="keyword">FROM</span> tb_blog tb</span><br><span class="line"><span class="keyword">WHERE</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">结果：viewCount:<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 也可以使用if函数表达式进行判断是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(if(tb.views <span class="operator">&gt;</span> <span class="number">100</span>, <span class="string">'任意非NULL值'</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> <span class="string">'viewCount'</span></span><br><span class="line"><span class="keyword">FROM</span> tb_blog tb</span><br><span class="line"><span class="keyword">WHERE</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">结果：viewCount:<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="概念常识"><a href="#概念常识" class="headerlink" title="概念常识"></a>概念常识</h3><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ安装配置</title>
    <url>/JAVA/RabbitMQ%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="RabbitMQ安装配置"><a href="#RabbitMQ安装配置" class="headerlink" title="RabbitMQ安装配置"></a>RabbitMQ安装配置</h2><blockquote>
<p>因为RabbitMQ安装包进行安装比较复杂，容易出错，这里查用Docker镜像安装。</p>
</blockquote>
<h3 id="1-拉取镜像，启动容器"><a href="#1-拉取镜像，启动容器" class="headerlink" title="1. 拉取镜像，启动容器"></a>1. 拉取镜像，启动容器</h3><blockquote>
<p>进入Docker Hub，查找需要的惊险版本。</p>
</blockquote>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426204759.png" alt="Snipaste_2021-04-26_20-47-38"></p>
<p>执行命令：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.8.14-management</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG                 IMAGE ID       CREATED       SIZE</span><br><span class="line">rabbitmq     3.8.14-management   edd581f906b9   3 weeks ago   187MB</span><br></pre></td></tr></tbody></table></figure>
<p>启动容器：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name horse-rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.8.14-management</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND                  CREATED      STATUS      PORTS                                                                                                                                                 NAMES</span><br><span class="line">2d2dc97ed0f1   rabbitmq:3.8.14-management   <span class="string">"docker-entrypoint.s…"</span>   7 days ago   Up 2 days   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   horse-rabbitmq</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-可视化配置"><a href="#2-可视化配置" class="headerlink" title="2. 可视化配置"></a>2. 可视化配置</h3><h4 id="2-1-登录"><a href="#2-1-登录" class="headerlink" title="2.1 登录"></a>2.1 登录</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205228.png" alt="Snipaste_2021-04-26_20-51-24"></p>
<h4 id="2-2-添加用户"><a href="#2-2-添加用户" class="headerlink" title="2.2 添加用户"></a>2.2 添加用户</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205351.png" alt="image_2021-04-23_17-59-01"></p>
<h4 id="2-3-添加虚拟主机"><a href="#2-3-添加虚拟主机" class="headerlink" title="2.3 添加虚拟主机"></a>2.3 添加虚拟主机</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205409.png" alt="image_2021-04-23_18-00-36"></p>
<h4 id="2-4-绑定用户和虚拟主机"><a href="#2-4-绑定用户和虚拟主机" class="headerlink" title="2.4 绑定用户和虚拟主机"></a>2.4 绑定用户和虚拟主机</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205742.png" alt="Snipaste_2021-04-26_20-56-58"></p>
<p>配置完成后，使用配置的用户和密码登录即可。</p>
<h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><blockquote>
<p>如果简单的使用，配置到用户名、密码即可。</p>
</blockquote>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># rabbitMQ信息配置</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">*.*.*.*</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span>    <span class="comment"># 默认可省略</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/horse</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">***</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">***</span></span><br><span class="line">  <span class="comment"># 开启投递成功回调 P -&gt; Exchange</span></span><br><span class="line">  <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">  <span class="comment"># 开启投递消息到队列失败回调 Exchange -&gt; Queue</span></span><br><span class="line">  <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 开启手动ACK确认模式 Queue -&gt; C</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">simple:</span></span><br><span class="line">      <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 代表手动ACK确认</span></span><br><span class="line">      <span class="comment"># 一些基本参数的设置(也可以不设置,默认即可)</span></span><br><span class="line">      <span class="attr">concurrency:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">prefetch:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<p>之后，就是RabbitMQ消息投递，延时消息的使用啦。</p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos注册配置中心</title>
    <url>/JAVA/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="Nacos注册配置中心"><a href="#Nacos注册配置中心" class="headerlink" title="Nacos注册配置中心"></a>Nacos注册配置中心</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"># 父公车个需要引入的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 模块需要引入的依赖</span><br><span class="line">        # 注册中心依赖</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		# 配置中心依赖</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-nacos注册中心规则"><a href="#2-nacos注册中心规则" class="headerlink" title="2. nacos注册中心规则"></a>2. nacos注册中心规则</h3><blockquote>
<ul>
<li>每个模块必须配置<code>spring.application.name</code>选项的模块名<ul>
<li>因为它是构成Nacos配置中心DataId字段的一部分</li>
</ul>
</li>
<li>DataId完成公式：<code>${prefix}-${spring.profile.active}-${file-extension}</code><ul>
<li>prefix：默认是置<code>spring.application.name</code>的值，也可以通过<code>spring.cloud.nacos.config.prefix</code>项来配置</li>
<li>spring.profile.active：当前服务运行的环境：prod、dev、test等</li>
<li>file-extension：配置内容的数据格式，可以通过<code>spring.cloud.nacos.config.file-extension</code>项来配置，目前只支持yaml和propreties两种类型</li>
</ul>
</li>
<li>通过SpringCloud的原生注解<code>@RefreshScope</code>实现配置的自动更新<ul>
<li>一般将注解写在主启动类上即可</li>
</ul>
</li>
</ul>
</blockquote>
<p>配置命名空间</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426203335.png" alt="Snipaste_2021-04-26_20-29-47"></p>
<p>配置yaml类型或者properties类型文件</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426203405.png" alt="Snipaste_2021-04-26_20-32-28"></p>
<h3 id="3-工程配置文件"><a href="#3-工程配置文件" class="headerlink" title="3. 工程配置文件"></a>3. 工程配置文件</h3><blockquote>
<p>Nacos同SpringCloud Config一样,在项目初始化时,要保证先从配置中心进行配置拉取,拉取配置之后,才能保证项目的正常启动。</p>
<p>springboot中配置文件的加载是存在优先级顺序的, bootstrap.yml优先级高于application.yml。</p>
<p>一定不要忘记关闭<code>ClientWorker</code>的日志打印。</p>
</blockquote>
<p><code>bootstrap.yml</code></p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8110</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-blog</span> <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 激活环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">*.*.*.*:8848</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span>  <span class="comment"># 配置中心</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">${spring.cloud.nacos.discovery.server-addr}</span> <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span>    <span class="comment"># 配置文件后缀(和nacos客户端保持一致)</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">c0df1ff6-5f81-4f88-a41b-d23d2075f354</span>  <span class="comment"># 命名空间id</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">HORSE_VUE_BLOG_DEV</span>  <span class="comment"># 分组名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">******</span>  <span class="comment"># 登录nacos客户端的用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">******</span>  <span class="comment">#  登录nacos客户端的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于查看sql语句</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.horse.service.blog:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.alibaba.nacos.client.config.impl.ClientWorker:</span> <span class="string">error</span> <span class="comment"># 调整nacos的日志级别[减少日志打印]</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>application.yml</code>配置不配置都可以，没有严格要求。</p>
<h3 id="4-添加注解"><a href="#4-添加注解" class="headerlink" title="4. 添加注解"></a>4. 添加注解</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/8 11:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@RefreshScope # 配置文件动态刷新注解，也可作用于类上</span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = {"com.horse", "cn.hutool.extra.spring"})</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBlogApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(ServiceBlogApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>ResponseBodyAdvice接口拦截处理响应结果</title>
    <url>/JAVA/ResponseBodyAdvice%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%E5%80%BC/</url>
    <content><![CDATA[<h2 id="ResponseBodyAdvice接口处理响应结果"><a href="#ResponseBodyAdvice接口处理响应结果" class="headerlink" title="ResponseBodyAdvice接口处理响应结果"></a>ResponseBodyAdvice接口处理响应结果</h2><blockquote>
<p>ResponseBodyAdvice接口是在Controller执行return之后，在response返回给浏览器或者APP客户端之前，执行的对response的一些处理。可以实现对response数据的一些统一封装或者加密等操作。</p>
<p>一般使用方法： <strong>@ControllerAdvice注解和ResponseBodyAdvice接口结合使用</strong></p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/18 12:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResultHandler</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断请求是否包含标记,没有标记就返回false,不需要进行包装,否则返回true,继续执行beforeBodyWrite方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converterType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> </span>{</span><br><span class="line">        ServletRequestAttributes requestAttributes =</span><br><span class="line">                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line">        ResponseResult result = (ResponseResult) request.getAttribute(BlogConstants.RESPONSE_PACK_FLAG);</span><br><span class="line">        <span class="keyword">return</span> result != <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包装返回结果的处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body 接口方法返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectedContentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> selectedConverterType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object body, MethodParameter returnType, MediaType selectedContentType, Class&lt;?</span></span></span><br><span class="line"><span class="function"><span class="params">            extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ServerHttpResponse response)</span> </span>{</span><br><span class="line">        log.info(<span class="string">" ==&gt; 响应结果重写处理中 &lt;=="</span>);</span><br><span class="line">        <span class="comment">// 在全局异常处理中已经封装过,这里返回值属于R类,直接返回即可</span></span><br><span class="line">        <span class="keyword">if</span> (body <span class="keyword">instanceof</span> R) {</span><br><span class="line">            <span class="keyword">return</span> body;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">"item"</span>, body);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的zset数据结构场景应用（关注&amp;粉丝）</title>
    <url>/JAVA/Redis%E7%9A%84zset%E7%BB%93%E6%9E%84%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8(%E5%85%B3%E6%B3%A8%E7%B2%89%E4%B8%9D)/</url>
    <content><![CDATA[<h1 id="Redis的zset数据结构场景应用"><a href="#Redis的zset数据结构场景应用" class="headerlink" title="Redis的zset数据结构场景应用"></a>Redis的zset数据结构场景应用</h1><blockquote>
<p>功能实现：</p>
<ol>
<li>实现用户相互关注</li>
<li>实现用户可以查看自己的关注列表和粉丝列表</li>
<li>可扩展多个用户之间的共同关注，公共粉丝等</li>
</ol>
<p>原理：将数据以<code>zset</code>结构存储在<code>redis</code>中，根据zset的特性进行相关操作。</p>
<p><strong>注意：A 关注 B，那么表示：B会出现在A的关注列表中，A会出现在B的粉丝列表中</strong></p>
</blockquote>
<h2 id="1-公共信息"><a href="#1-公共信息" class="headerlink" title="1. 公共信息"></a>1. 公共信息</h2><blockquote>
<p>接收参数的实体类<code>FollowVo</code>，<strong>注意注释说明和属性名称，容易混淆</strong>。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/30 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowVo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "被关注用户的id不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "被关注用户的id")</span></span><br><span class="line">    <span class="keyword">private</span> String followedId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "粉丝用户的id不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "关注他人,成为粉丝的用户的id")</span></span><br><span class="line">    <span class="keyword">private</span> String fansId;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>存储Redis的公共KEY</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我的关注 KEY 模板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FOLLOW_USER = <span class="string">"follow:%s"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FANS_USER = <span class="string">"fans:%s"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FOLLOW = <span class="string">"FOLLOW"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String FANS = <span class="string">"FANS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String INTERSECTION_DEST_KEY = <span class="string">"intersection:%s"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String UNION_DEST_KEY = <span class="string">"union:%s"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String INTERSECTION = <span class="string">"intersection"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String UNION = <span class="string">"union"</span>;</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>关注或粉丝列表响应实例信息<code>ResponseFollowVo</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/30 14:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseFollowVo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>关注或粉丝交并集响应实例信息<code>FollowOrFansDto</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowOrFansDto</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8409057262225157803L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交集或并集数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交集或并集结果列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MyFollowDto&gt; result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-封装处理类"><a href="#2-封装处理类" class="headerlink" title="2. 封装处理类"></a>2. 封装处理类</h2><blockquote>
<p>对基本的ZSet方法进行封装，直接就可以在controller层进行调用</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Redis的ZSet机构进行 关注/粉丝 的基本操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/30 11:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisFollowHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fansId 成为他人粉丝,同时也是关注者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 我的关注的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFollowUserKey</span><span class="params">(String fansId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> String.format(BlogConstants.FOLLOW_USER, fansId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followedId 被关注者id,同时拥有自己的粉丝</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 我的粉丝key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getFansUserKey</span><span class="params">(String followedId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> String.format(BlogConstants.FANS_USER, followedId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">currentTime</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关注: 是否已关注,自己不能关注自己,</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> follow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toFollow</span><span class="params">(FollowVo follow)</span> </span>{</span><br><span class="line">        String fansId = follow.getFansId();</span><br><span class="line">        String followedId = follow.getFollowedId();</span><br><span class="line">        <span class="keyword">double</span> score = currentTime();</span><br><span class="line">        <span class="comment">// 判断是否是自己(前端已做控制,后端再校验一次)</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.equals(followedId, fansId)) {</span><br><span class="line">            <span class="comment">// 是否已关注过</span></span><br><span class="line">            Double exist = isFollow(fansId, followedId);</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isEmpty(exist)) {</span><br><span class="line">                <span class="comment">// 将对方id添加到自己的关注列表中</span></span><br><span class="line">                redisTemplate.opsForZSet().add(getFollowUserKey(fansId), followedId, score);</span><br><span class="line">                <span class="comment">// 将自己的id添加到对方的粉丝列表中</span></span><br><span class="line">                redisTemplate.opsForZSet().add(getFansUserKey(followedId), fansId, score);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否关注</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fansId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followedId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">isFollow</span><span class="params">(String fansId, String followedId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(getFollowUserKey(fansId), followedId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消关注: 是否已关注,自己不能关注自己</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> follow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelFollow</span><span class="params">(FollowVo follow)</span> </span>{</span><br><span class="line">        String fansId = follow.getFansId();</span><br><span class="line">        String followedId = follow.getFollowedId();</span><br><span class="line">        Double exist = isFollow(fansId, followedId);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isNotEmpty(exist)) {</span><br><span class="line">            <span class="comment">// 将对方id从自己的关注列表中移除</span></span><br><span class="line">            redisTemplate.opsForZSet().remove(getFollowUserKey(fansId), followedId);</span><br><span class="line">            <span class="comment">// 将自己的id从对方的粉丝列表中移除</span></span><br><span class="line">            redisTemplate.opsForZSet().remove(getFansUserKey(followedId), fansId);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取我的关注列表或者粉丝列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MyFollowDto&gt; <span class="title">getFollowOrFansRangeWithTimeDesc</span><span class="params">(String userId, String type)</span> </span>{</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; followList;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(BlogConstants.FOLLOW, type)) {</span><br><span class="line">            followList = redisTemplate.opsForZSet().reverseRangeWithScores(getFollowUserKey(userId), <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            followList = redisTemplate.opsForZSet().reverseRangeWithScores(getFansUserKey(userId), <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 格式化时间</span></span><br><span class="line">        <span class="keyword">return</span> convertZsetList(followList);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取我的关注数或者粉丝数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">followCount</span><span class="params">(String userId, String type)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(BlogConstants.FOLLOW, type)) {</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForZSet().zCard(getFollowUserKey(userId));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().zCard(getFansUserKey(userId));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个或多个用户的共同关注或共同粉丝(交集 或者 并集)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userIds             用户id集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type                关注或者粉丝类型 (follow/fans)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intersectionOrUnion 交集或者并集类型 (intersection/union)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FollowOrFansDto <span class="title">commonFollowOrFansCount</span><span class="params">(List&lt;String&gt; userIds, String type, String intersectionOrUnion)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(userIds)) {</span><br><span class="line">            FollowOrFansDto result = <span class="keyword">new</span> FollowOrFansDto();</span><br><span class="line">            <span class="keyword">int</span> defaultIndex = <span class="number">0</span>;</span><br><span class="line">            String firstKey;</span><br><span class="line"></span><br><span class="line">            List&lt;MyFollowDto&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Long count = <span class="number">0L</span>;</span><br><span class="line">            Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; range;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(BlogConstants.INTERSECTION, intersectionOrUnion)) {</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.equals(BlogConstants.FOLLOW, type)) {</span><br><span class="line">                    log.info(<span class="string">" ==&gt; 开始计算用户关注交集,userIds: {}"</span>, userIds);</span><br><span class="line">                    List&lt;String&gt; followList = <span class="keyword">this</span>.getFullKeyList(type, userIds);</span><br><span class="line">                    firstKey = followList.get(defaultIndex);</span><br><span class="line">                    followList.remove(defaultIndex);</span><br><span class="line">                    String destKey = String.format(BlogConstants.INTERSECTION_DEST_KEY, BlogConstants.FOLLOW);</span><br><span class="line">                    count = redisTemplate.opsForZSet().intersectAndStore(firstKey, followList, destKey);</span><br><span class="line">                    range = redisTemplate.opsForZSet().rangeWithScores(destKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    log.info(<span class="string">" ==&gt; 开始计算用户粉丝交集,userIds: {}"</span>, userIds);</span><br><span class="line">                    List&lt;String&gt; fansList = <span class="keyword">this</span>.getFullKeyList(type, userIds);</span><br><span class="line">                    firstKey = fansList.get(defaultIndex);</span><br><span class="line">                    fansList.remove(defaultIndex);</span><br><span class="line">                    String destKey = String.format(BlogConstants.INTERSECTION_DEST_KEY, BlogConstants.FANS);</span><br><span class="line">                    count = redisTemplate.opsForZSet().intersectAndStore(firstKey, fansList, destKey);</span><br><span class="line">                    range = redisTemplate.opsForZSet().rangeWithScores(destKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">                list = convertZsetList(range);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.equals(BlogConstants.UNION, intersectionOrUnion)) {</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.equals(BlogConstants.FOLLOW, type)) {</span><br><span class="line">                    log.info(<span class="string">" ==&gt; 开始计算用户关注并集,userIds: {}"</span>, userIds);</span><br><span class="line">                    List&lt;String&gt; followList = <span class="keyword">this</span>.getFullKeyList(type, userIds);</span><br><span class="line">                    firstKey = followList.get(defaultIndex);</span><br><span class="line">                    followList.remove(defaultIndex);</span><br><span class="line">                    String destKey = String.format(BlogConstants.UNION_DEST_KEY, BlogConstants.FOLLOW);</span><br><span class="line">                    count = redisTemplate.opsForZSet().unionAndStore(firstKey, followList, destKey);</span><br><span class="line">                    range = redisTemplate.opsForZSet().rangeWithScores(destKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    log.info(<span class="string">" ==&gt; 开始计算用户粉丝并集,userIds: {}"</span>, userIds);</span><br><span class="line">                    List&lt;String&gt; fansList = <span class="keyword">this</span>.getFullKeyList(type, userIds);</span><br><span class="line">                    firstKey = fansList.get(defaultIndex);</span><br><span class="line">                    fansList.remove(defaultIndex);</span><br><span class="line">                    String destKey = String.format(BlogConstants.UNION_DEST_KEY, BlogConstants.FANS);</span><br><span class="line">                    count = redisTemplate.opsForZSet().unionAndStore(firstKey, fansList, destKey);</span><br><span class="line">                    range = redisTemplate.opsForZSet().rangeWithScores(destKey, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">                }</span><br><span class="line">                list = convertZsetList(range);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            result.setCount(count);</span><br><span class="line">            result.setResult(list);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取完整key集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userIds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getFullKeyList</span><span class="params">(String type, List&lt;String&gt; userIds)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(BlogConstants.FOLLOW, type)) {</span><br><span class="line">            <span class="keyword">return</span> userIds.stream().map(<span class="keyword">this</span>::getFollowUserKey).collect(Collectors.toList());</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> userIds.stream().map(<span class="keyword">this</span>::getFansUserKey).collect(Collectors.toList());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> followList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;MyFollowDto&gt; <span class="title">convertZsetList</span><span class="params">(Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; followList)</span> </span>{</span><br><span class="line">        List&lt;MyFollowDto&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(followList)) {</span><br><span class="line">            <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;Object&gt; tuple : followList) {</span><br><span class="line">                MyFollowDto dto = <span class="keyword">new</span> MyFollowDto();</span><br><span class="line">                dto.setFollowedId(String.valueOf(tuple.getValue()));</span><br><span class="line">                Double score = tuple.getScore();</span><br><span class="line">                <span class="keyword">if</span> (ObjectUtils.isNotEmpty(score)) {</span><br><span class="line">                    dto.setFollowDate(DateUtil.date(Convert.toLong(score)));</span><br><span class="line">                }</span><br><span class="line">                list.add(dto);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h2><h3 id="3-1-controller接口"><a href="#3-1-controller接口" class="headerlink" title="3.1 controller接口"></a>3.1 controller接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/30 10:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = {"我的关注服务"})</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RequestMapping("/api/blog/follow")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiFollowController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisFollowHandler redisFollowHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FollowService followService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.ADD,operDesc = "发起关注")</span></span><br><span class="line">    <span class="meta">@PostMapping("/sure")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">sureFollow</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> FollowVo follow)</span> </span>{</span><br><span class="line">        redisFollowHandler.toFollow(follow);</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">"关注成功"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.REMOVE,operDesc = "取消关注")</span></span><br><span class="line">    <span class="meta">@PostMapping("/cancel")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">cancelFollow</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> FollowVo follow)</span> </span>{</span><br><span class="line">        redisFollowHandler.cancelFollow(follow);</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">"取消关注"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据type类型判断查询的是关注列表或者粉丝列表（他们的区别仅仅在于key不一样）</span></span><br><span class="line">    <span class="meta">@GetMapping("/list/{userId}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">queryFollowOrFansList</span><span class="params">(<span class="meta">@PathVariable("userId")</span> <span class="meta">@NotBlank(message = "用户id不能为空")</span> String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="meta">@RequestParam("type")</span> <span class="meta">@NotBlank(message = "类型type不能为空")</span> String type)</span> </span>{</span><br><span class="line">        List&lt;ResponseFollowVo&gt; follows = followService.queryFollowOrFansList(userId, type);</span><br><span class="line">        Long count = redisFollowHandler.followCount(userId, type);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">"items"</span>, follows).data(<span class="string">"count"</span>, count);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(value = "关注粉丝交并集", notes = "多用户之间的交集或并集数量和具体列表信息")</span></span><br><span class="line">    <span class="meta">@PostMapping("/intersection/or/union")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">queryInterOrUnion</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> QueryFollowOrFans query)</span> </span>{</span><br><span class="line">        FollowOrFansDto result = redisFollowHandler.commonFollowOrFansCount(query.getUserIds(), query.getType(), query.getIntersectionOrUnion());</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">"items"</span>, result);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-2-service服务"><a href="#3-2-service服务" class="headerlink" title="3.2 service服务"></a>3.2 service服务</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/30 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowServiceImpl</span> <span class="keyword">implements</span> <span class="title">FollowService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisFollowHandler redisFollowHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserPortalMapper userPortalMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据type类型查询关注列表或粉丝列表(组装粉丝的名称和头像等信息)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ResponseFollowVo&gt; <span class="title">queryFollowOrFansList</span><span class="params">(String userId, String type)</span> </span>{</span><br><span class="line">        List&lt;MyFollowDto&gt; temp = redisFollowHandler.getFollowOrFansRangeWithTimeDesc(userId, type);</span><br><span class="line">        List&lt;String&gt; userIds = temp.stream().map(MyFollowDto::getFollowedId).collect(Collectors.toList());</span><br><span class="line">        List&lt;ResponseFollowVo&gt; users = userPortalMapper.queryFollowOrFansList(userIds);</span><br><span class="line">        <span class="keyword">for</span> (ResponseFollowVo user : users) {</span><br><span class="line">            <span class="keyword">for</span> (MyFollowDto dto : temp) {</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.equals(dto.getFollowedId(), user.getId())) {</span><br><span class="line">                    user.setDate(dto.getFollowDate());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4. 测试结果"></a>4. 测试结果</h2><blockquote>
<p>基本实现了<code>相互关注</code>的功能，但是没有进行DB数据持久化，这个需要进行考虑考虑。。。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate配置正向代理</title>
    <url>/JAVA/RestTemplate%E9%85%8D%E7%BD%AE%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="RestTemplate配置正向代理"><a href="#RestTemplate配置正向代理" class="headerlink" title="RestTemplate配置正向代理"></a>RestTemplate配置正向代理</h2><blockquote>
<p><strong>正向代理原理</strong>：</p>
<p>当前服务直接访问另一个服务,如果出现访问速度过慢,无法访问等情况,这时,我们可以使用正向代理的方式。将当前请求发送到代理服务器,代理服务器再向目标服务器发起请求,获取响应数据,返回给我们。</p>
<p>通俗的讲,也就是当前服务器和代理服务器一起蒙骗目标服务器,这时,当前服务器是隐蔽的,不可见的,和反向代理刚好相反。</p>
</blockquote>
<ul>
<li>配置信息</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "proxy")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &nbsp; &nbsp; &nbsp;* 是否启用代理</span></span><br><span class="line"><span class="comment">     * &nbsp; &nbsp; &nbsp;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &nbsp; &nbsp; &nbsp;* 代理主机地址</span></span><br><span class="line"><span class="comment">     * &nbsp; &nbsp; &nbsp;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &nbsp; &nbsp; &nbsp;* 代理端口 &nbsp; &nbsp;</span></span><br><span class="line"><span class="comment">     * &nbsp; &nbsp; &nbsp;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>具体配置</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInitConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProxyConfig proxyConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>{</span><br><span class="line">        SimpleClientHttpRequestFactory requestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        </span><br><span class="line">        requestFactory.setConnectTimeout(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        requestFactory.setReadTimeout(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyConfig.getEnabled()) {</span><br><span class="line">            SocketAddress address = <span class="keyword">new</span> InetSocketAddress(proxyConfig.getHost(), proxyConfig.getPort());</span><br><span class="line">            Proxy proxy = <span class="keyword">new</span> Proxy(Proxy.Type.HTTP, address);</span><br><span class="line">            requestFactory.setProxy(proxy);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(requestFactory);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>RestTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中使用DelayQueue延时队列</title>
    <url>/JAVA/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8DelayQueue%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="SpringBoot中使用DelayQueue延时队列"><a href="#SpringBoot中使用DelayQueue延时队列" class="headerlink" title="SpringBoot中使用DelayQueue延时队列"></a>SpringBoot中使用DelayQueue延时队列</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><blockquote>
<p>DelayQueue是一个没有边界BlockingQueue实现，加入其中的元素必需实现Delayed接口。当生产者线程调用put之类的方法加入元素时，会触发Delayed接口中的compareTo方法进行排序，也就是说队列中元素的顺序是按到期时间排序的，而非它们进入队列的顺序。排在队列头部的元素是最早到期的，越往后到期时间赿晚。</p>
<p>消费者线程查看队列头部的元素，注意是查看不是取出。然后调用元素的getDelay方法，如果此方法返回的值小0或者等于0，则消费者线程会从队列中取出此元素，并进行处理。如果getDelay方法返回的值大于0，则消费者线程wait返回的时间值后，再从队列头部取出元素，此时元素应该已经到期。</p>
</blockquote>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><blockquote>
<p>缺点：</p>
<ul>
<li>因为此延时队列存在于内存中，如果服务器宕机，所有的延时任务将被丢弃。</li>
</ul>
<p>解决方法：</p>
<ul>
<li>创建<code>delayQueue</code>队列数据库，固化数据。</li>
<li>当项目启动时，检查库中所有延时任务，未失效的重新加入队列，失效的立即执行（或者直接丢弃，视业务逻辑而定）。</li>
</ul>
</blockquote>
<h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><blockquote>
<p>应用步骤：</p>
<ol>
<li>实现 <code>Delayed</code> 接口，创建延时任务实例</li>
<li>创建延时任务管理实例，并实现 <code>CommandLineRunner</code> 接口，项目启动时加载延时任务</li>
<li>创建延时队列数据库：封装延时任务的入队和出队方法</li>
</ol>
</blockquote>
<h3 id="延时任务实例"><a href="#延时任务实例" class="headerlink" title="延时任务实例"></a>延时任务实例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 延时任务构建实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/4 8:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayTask</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> String contentId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务延时时间,单位: s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Long expire;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> String taskType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建延时任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire    任务延时截止时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayTask</span><span class="params">(String contentId, Long expire, String taskType)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.contentId = contentId;</span><br><span class="line">        <span class="keyword">this</span>.expire = expire * <span class="number">1000</span> + System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.taskType = taskType;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取延迟时间: 过期时间 - 当前时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.expire - System.currentTimeMillis(), unit);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列内部比较排序: 当前的延迟时间 - 比较对象的延迟时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Convert.toInt(<span class="keyword">this</span>.getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder().append(<span class="string">"[data: "</span>)</span><br><span class="line">                .append(contentId)</span><br><span class="line">                .append(<span class="string">", expire: "</span>)</span><br><span class="line">                .append(DateUtil.format(<span class="keyword">new</span> Date(expire), DatePattern.NORM_DATETIME_PATTERN))</span><br><span class="line">                .append(<span class="string">", taskType: "</span>)</span><br><span class="line">                .append(taskType)</span><br><span class="line">                .append(<span class="string">"]"</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> DelayTask) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.contentId.equals(((DelayTask) obj).getContentId());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="延时管理实例"><a href="#延时管理实例" class="headerlink" title="延时管理实例"></a>延时管理实例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 延时任务管理实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/4 9:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(4)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "delay.queue", name = "enable", havingValue = "true")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueueManager</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;DelayTask&gt; delayQueue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DelayTaskLogService delayTaskLogService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlogService blogService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(DelayTask task)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"加入延时任务: {}"</span>, task);</span><br><span class="line">        delayQueue.offer(task);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(DelayTask task)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"取消延时任务: {}"</span>, task);</span><br><span class="line">        <span class="keyword">return</span> delayQueue.remove(task);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(String contentId)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"取消延时任务: {}"</span>, contentId);</span><br><span class="line">        <span class="keyword">return</span> delayQueue.remove(<span class="keyword">new</span> DelayTask(contentId, <span class="number">0L</span>, <span class="keyword">null</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时任务执行线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeThread</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                DelayTask task = delayQueue.take();</span><br><span class="line">                log.info(<span class="string">"开始执行延时任务: {}"</span>, task);</span><br><span class="line">                <span class="comment">// 异步执行延时任务</span></span><br><span class="line">                ThreadUtils.executor.execute(() -&gt; {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        processTask(task.getContentId(), task.getTaskType());</span><br><span class="line">                    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                        log.error(<span class="string">"#######【执行延时任务异常提示】#######提示内容=&gt;{} #######"</span>, e.getMessage());</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理延时任务: 后续添加延时任务,只需要在这里添加标识和调用业务逻辑即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTask</span><span class="params">(String contentId, String taskType)</span> </span>{</span><br><span class="line">        <span class="keyword">switch</span> (taskType) {</span><br><span class="line">            <span class="keyword">case</span> BlogConstants.DELAY_TASK_TYPE.BLOG_DELAY_TIME:</span><br><span class="line">                <span class="comment">// 在这里调用相应的延时任务处理逻辑方法 </span></span><br><span class="line">                </span><br><span class="line">                log.info(<span class="string">"####### 延时任务执行成功 #######"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BlogConstants.DELAY_TASK_TYPE.POST_DELAY_TIME:</span><br><span class="line">                log.info(<span class="string">"####### 延时任务执行成功 #######"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                log.info(<span class="string">"未匹配到延时任务类型: {}"</span>, taskType);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        log.info(<span class="string">"初始化延时队列开始..."</span>);</span><br><span class="line"></span><br><span class="line">        AtomicInteger delayOkCount = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        AtomicInteger delayVoidCount = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询数据库中的延时任务信息</span></span><br><span class="line">        List&lt;DelayTaskLog&gt; delayList = delayTaskLogService.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;DelayTaskLog&gt;().eq(DelayTaskLog::getExecStatus, Boolean.FALSE));</span><br><span class="line">        <span class="keyword">if</span> (PublicUtil.isNotEmpty(delayList)) {</span><br><span class="line">            delayList.forEach(delay -&gt; {</span><br><span class="line">                <span class="comment">// 计算延时队列是否失效</span></span><br><span class="line">                <span class="keyword">long</span> diffTime = DateUtil.between(<span class="keyword">new</span> Date(), delay.getEndTime(), DateUnit.SECOND, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">if</span> (diffTime &gt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// 延时队列延续</span></span><br><span class="line">                    <span class="keyword">this</span>.put(<span class="keyword">new</span> DelayTask(delay.getContentId(), diffTime, delay.getTaskType()));</span><br><span class="line">                    delayOkCount.getAndIncrement();</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 延时队列失效(任务失效,就立即执行)</span></span><br><span class="line">                    <span class="keyword">this</span>.processTask(delay.getContentId(), delay.getTaskType());</span><br><span class="line">                    delayVoidCount.getAndIncrement();</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">        log.info(<span class="string">"#######【初始化延时队列完成】#######延续队列数=&gt;{},#######失效队列数=&gt;{} #######"</span>, delayOkCount, delayVoidCount);</span><br><span class="line">        <span class="comment">// 开启延时任务执行线程</span></span><br><span class="line">        ThreadUtils.executor.execute(<span class="keyword">this</span>::executeThread);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="延时队列封装"><a href="#延时队列封装" class="headerlink" title="延时队列封装"></a>延时队列封装</h3><h4 id="SQL脚本"><a href="#SQL脚本" class="headerlink" title="SQL脚本"></a>SQL脚本</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- auto-generated definition</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_delay_task_log</span><br><span class="line">(</span><br><span class="line">    id           <span class="type">CHAR</span>(<span class="number">19</span>)                     <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    content_id   <span class="type">CHAR</span>(<span class="number">19</span>)                     <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'延时项id：文章/帖子/用户...'</span>,</span><br><span class="line">    task_type    <span class="type">VARCHAR</span>(<span class="number">50</span>)                  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'任务类型：和系统配置表信息对应'</span>,</span><br><span class="line">    start_time   DATETIME                     <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'开始时间'</span>,</span><br><span class="line">    end_time     DATETIME                     <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'结束时间'</span>,</span><br><span class="line">    duration     <span class="type">BIGINT</span> UNSIGNED              <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'时长,默认单位：s'</span>,</span><br><span class="line">    exec_status  BIT             <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'任务执行状态，0-未执行，1-已完成'</span>,</span><br><span class="line">    gmt_create   DATETIME                     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    gmt_modified DATETIME                     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    version      <span class="type">BIGINT</span> UNSIGNED <span class="keyword">DEFAULT</span> <span class="number">0</span>    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    is_deleted   BIT             <span class="keyword">DEFAULT</span> b<span class="string">'1'</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br><span class="line">    COMMENT <span class="string">'延时任务日志'</span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="延时方法封装"><a href="#延时方法封装" class="headerlink" title="延时方法封装"></a>延时方法封装</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/8/4 10:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "delay.queue", name = "enable", havingValue = "true")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayTaskServiceImpl</span> <span class="keyword">implements</span> <span class="title">DelayTaskService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigInfoServiceImpl configInfoService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DelayQueueManager delayQueueManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AsyncProvider asyncProvider;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加延时任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(String contentId, String taskType)</span> </span>{</span><br><span class="line">        <span class="comment">// 校验参数</span></span><br><span class="line">        <span class="keyword">if</span> (PublicUtil.isEmpty(contentId) || PublicUtil.isEmpty(taskType)) {</span><br><span class="line">            log.warn(<span class="string">"#######【新增延时任务失败】#######"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 组装参数,添加任务</span></span><br><span class="line">        Long expire = Convert.toLong(configInfoService.queryConfValueByKey(taskType));</span><br><span class="line">        <span class="keyword">if</span> (expire != <span class="number">0</span>) {</span><br><span class="line">            delayQueueManager.put(<span class="keyword">new</span> DelayTask(contentId, expire, taskType));</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.warn(<span class="string">"#######【新增延时任务失败】#######"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 异步添加延时任务日志</span></span><br><span class="line">        asyncProvider.asyncAddDelayLog(contentId, taskType, expire);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭延时任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeQueue</span><span class="params">(String contentId)</span> </span>{</span><br><span class="line">        <span class="comment">// 校验参数</span></span><br><span class="line">        <span class="keyword">if</span> (PublicUtil.isEmpty(contentId)) {</span><br><span class="line">            log.info(<span class="string">"#######【延时任务关闭异常,内容为空: contentId: {}】#######"</span>, contentId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 移除延时任务</span></span><br><span class="line">        delayQueueManager.remove(contentId);</span><br><span class="line">        <span class="comment">// 更新延时任务状态</span></span><br><span class="line">        asyncProvider.asyncUpdateDelayTaskStatus(contentId);</span><br><span class="line">        log.info(<span class="string">"#######【延时任务关闭成功】#######"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="异步日志方法"><a href="#异步日志方法" class="headerlink" title="异步日志方法"></a>异步日志方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加延时任务日志记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> taskType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Async("customAsync")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncAddDelayLog</span><span class="params">(String contentId, String taskType, Long expire)</span> </span>{</span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">// 毫秒级别的时间戳转换</span></span><br><span class="line">        Date endTime = DateUtil.date(startTime.getTime() + expire * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        DelayTaskLog taskLog = <span class="keyword">new</span> DelayTaskLog();</span><br><span class="line">        taskLog.setContentId(contentId)</span><br><span class="line">                .setTaskType(taskType)</span><br><span class="line">                .setStartTime(startTime)</span><br><span class="line">                .setEndTime(endTime)</span><br><span class="line">                .setDuration(expire)</span><br><span class="line">                .setExecStatus(Boolean.FALSE);</span><br><span class="line">        delayTaskLogMapper.insert(taskLog);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新延时任务状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Async("customAsync")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncUpdateDelayTaskStatus</span><span class="params">(String contentId)</span> </span>{</span><br><span class="line">        DelayTaskLog taskLog = Optional.ofNullable(delayTaskLogMapper.selectOne(<span class="keyword">new</span> LambdaQueryWrapper&lt;DelayTaskLog&gt;()</span><br><span class="line">                .eq(PublicUtil.isNotEmpty(contentId), DelayTaskLog::getContentId, contentId)</span><br><span class="line">                .eq(DelayTaskLog::getExecStatus, Boolean.FALSE)))</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> BlogException(ResultCodeEnum.DATA_NOT_EXIST));</span><br><span class="line">        delayTaskLogMapper.updateById(taskLog.setExecStatus(Boolean.TRUE));</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h2><h3 id="开关配置"><a href="#开关配置" class="headerlink" title="开关配置"></a>开关配置</h3><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 本地延时队列开关</span></span><br><span class="line"><span class="attr">delay:</span></span><br><span class="line">  <span class="attr">queue:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 默认false：关闭状态</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="延时信息配置"><a href="#延时信息配置" class="headerlink" title="延时信息配置"></a>延时信息配置</h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210912150505.png" alt="延时信息配置"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>DelayQueue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot事件监听简析</title>
    <url>/JAVA/SpringBoot%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<h2 id="SpringBoot事件监听"><a href="#SpringBoot事件监听" class="headerlink" title="SpringBoot事件监听"></a>SpringBoot事件监听</h2><h3 id="1-spring内置事件"><a href="#1-spring内置事件" class="headerlink" title="1. spring内置事件"></a>1. spring内置事件</h3><p>事件是spring中非常重要的一种异步通知机制，在spring框架中就内置了容器事件，如ContextStartedEvent（启动） 、ContextStoppedEvent（停止）、<code>ContextRefreshedEvent</code>（刷新）、ContextClosedEvent（关闭），它们都继承自ApplicationEvent对象，我们编写的事件监听器类时需要实现ApplicationListener 接口，然后重写onApplicationEvent(event)方法即可。</p>
<blockquote>
<p>ContextRefreshedEvent 事件比较常用，下面示例直接使用@EventListener`注解进行事件监听配置</p>
</blockquote>
<p><code>ContextRefreshedEvent</code>示例如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 注解监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/15 17:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"==&gt; ContextRefreshedEvent &lt;=="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-SpringBoot内置事件"><a href="#2-SpringBoot内置事件" class="headerlink" title="2. SpringBoot内置事件"></a>2. SpringBoot内置事件</h3><p>　spring boot在启动过程中增加事件监听机制，为用户功能拓展提供极大的便利，sptingboot支持的事件类型有以下五种:</p>
<ul>
<li>ApplicationStartingEvent</li>
<li>ApplicationFailedEvent</li>
<li>ApplicationPreparedEvent</li>
<li>ApplicationReadyEvent</li>
<li>ApplicationEnvironmentPreparedEvent</li>
</ul>
<blockquote>
<p>ApplicationReadyEvent事件比较常用。下面示例直接使用@EventListener`注解进行事件监听配置</p>
</blockquote>
<p>ApplicationReadyEvent示例如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 注解监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/15 17:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readyEvent</span><span class="params">(ApplicationReadyEvent event)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"==&gt; ApplicationReadyEvent &lt;=="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-自定义事件"><a href="#3-自定义事件" class="headerlink" title="3. 自定义事件"></a>3. 自定义事件</h3><h4 id="3-1-创建自定义事件"><a href="#3-1-创建自定义事件" class="headerlink" title="3.1 创建自定义事件"></a>3.1 创建自定义事件</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/15 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyEvent.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        logger.info(<span class="string">"触发监听事件 ==&gt; "</span> + message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>编程式写法</code></p>
<h4 id="3-2-自定义事件监听器"><a href="#3-2-自定义事件监听器" class="headerlink" title="3.2 自定义事件监听器"></a>3.2 自定义事件监听器</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义事件监听器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/15 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这里必须注入Spring容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>{</span><br><span class="line">        event.printMsg(<span class="string">"编程式监听器"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-3-发布事件"><a href="#3-3-发布事件" class="headerlink" title="3.3 发布事件"></a>3.3 发布事件</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTestApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(SimpleTestApplication.class);</span><br><span class="line">        ConfigurableApplicationContext context = application.run(args);</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">new</span> Object()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>注解式写法</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eventListener</span><span class="params">(MyEvent event)</span> </span>{</span><br><span class="line">        event.printMsg(<span class="string">"注解监听器"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中使用LocalDateTime参数作为入参解析异常问题</title>
    <url>/JAVA/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8LocalDateTime%E5%8F%82%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%85%A5%E5%8F%82%E8%A7%A3%E6%9E%90%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="SpringBoot中使用LocalDateTime参数作为入参解析异常问题"><a href="#SpringBoot中使用LocalDateTime参数作为入参解析异常问题" class="headerlink" title="SpringBoot中使用LocalDateTime参数作为入参解析异常问题"></a>SpringBoot中使用LocalDateTime参数作为入参解析异常问题</h2><blockquote>
<p>抛出问题：</p>
<ul>
<li>当LocalDateTime作为RequestParam或者PathVariable的入参时的接收转化异常问题</li>
<li>当LocalDateTime作为RequestBody的json形式数据的入参时的序列化异常问题</li>
</ul>
<p>解决方法:</p>
<ul>
<li>配置Converter转换器(解决问题1)</li>
<li>配置Jackson工具的序列化(解决问题2)</li>
</ul>
</blockquote>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote>
<p>在项目中添加此文件,可以解决LocalDateTime参数的接收和响应异常的问题</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.*;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/9 9:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(DateConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认日期时间格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DATE_TIME_FORMAT = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认日期格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DATE_FORMAT = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认时间格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_TIME_FORMAT = <span class="string">"HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*=================================转换@RequestParam和PathVariable时间类型参数================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = "localDateConverter")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, LocalDate&gt; <span class="title">localDateConverter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, LocalDate&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDate <span class="title">convert</span><span class="params">(String source)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = "localDateTimeConverter")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, LocalDateTime&gt; <span class="title">localDateTimeConverter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, LocalDateTime&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">convert</span><span class="params">(String source)</span> </span>{</span><br><span class="line">                <span class="keyword">switch</span> (source.length()) {</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                        source += <span class="string">"00:00:00"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                        source += <span class="string">":00:00"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                        source += <span class="string">":00"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = "localTimeConverter")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, LocalTime&gt; <span class="title">localTimeConverter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, LocalTime&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> LocalTime <span class="title">convert</span><span class="params">(String source)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> LocalTime.parse(source, DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT));</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = "dateConverter")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Converter&lt;String, Date&gt; <span class="title">dateConverter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Converter&lt;String, Date&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>{</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(DEFAULT_DATE_TIME_FORMAT).parse(source);</span><br><span class="line">                } <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">                    log.error(<span class="string">"Date转换器异常: {}"</span>, e.getMessage());</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*=================================转换@RequestBody时间类型参数================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>{</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 禁用属性</span></span><br><span class="line">        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        objectMapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置未知属性解析不报错</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置转Json格式时将Date转换成指定格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(DEFAULT_DATE_TIME_FORMAT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LocalDateTime系列序列化和反序列化模块，继承自jsr310，我们在这里修改了日期格式</span></span><br><span class="line">        JavaTimeModule javaTimeModule = <span class="keyword">new</span> JavaTimeModule();</span><br><span class="line">        javaTimeModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)));</span><br><span class="line">        javaTimeModule.addSerializer(LocalDate.class, <span class="keyword">new</span> LocalDateSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)));</span><br><span class="line">        javaTimeModule.addSerializer(LocalTime.class, <span class="keyword">new</span> LocalTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDateTime.class, <span class="keyword">new</span> LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDate.class, <span class="keyword">new</span> LocalDateDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalTime.class, <span class="keyword">new</span> LocalTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Date序列化和反序列化</span></span><br><span class="line">        javaTimeModule.addSerializer(Date.class, <span class="keyword">new</span> JsonSerializer&lt;Date&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">                jsonGenerator.writeString(<span class="keyword">new</span> SimpleDateFormat(DEFAULT_DATE_TIME_FORMAT).format(date));</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        javaTimeModule.addDeserializer(Date.class, <span class="keyword">new</span> JsonDeserializer&lt;Date&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Date <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(DEFAULT_DATE_TIME_FORMAT).parse(jsonParser.getText());</span><br><span class="line">                } <span class="keyword">catch</span> (ParseException e) {</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        objectMapper.registerModule(javaTimeModule);</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>LocalDateTime</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot全局异常的处理</title>
    <url>/JAVA/SpringBoot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="SpringBoot全局异常的处理"><a href="#SpringBoot全局异常的处理" class="headerlink" title="SpringBoot全局异常的处理"></a>SpringBoot全局异常的处理</h2><h3 id="1-自定义异常类"><a href="#1-自定义异常类" class="headerlink" title="1. 自定义异常类"></a>1. 自定义异常类</h3><blockquote>
<p>一般可以继承RuntimeException运行时异常类</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7683466324584252019L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受状态码和消息，并且默认的是否成功的结果为false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlogException</span><span class="params">(Integer code, String message)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code=code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收枚举类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCodeEnum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlogException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">this</span>.code = resultCodeEnum.getCode();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toString方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BlogException{"</span> +</span><br><span class="line">                <span class="string">"code="</span> + code +</span><br><span class="line">                <span class="string">"message="</span> + <span class="keyword">this</span>.getMessage() +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-全局异常处理"><a href="#2-全局异常处理" class="headerlink" title="2.全局异常处理"></a>2.全局异常处理</h3><blockquote>
<p>原理：当系统捕获到异常时，会匹配最接近的异常方法，例如BadSqlGrammarException.class，如果没有匹配到，就直接定位到Exception.class的异常方法。</p>
<p>操作：<code>@RestControllerAdvice</code>注解</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(Exception e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特定异常处理:sql语句错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BadSqlGrammarException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(BadSqlGrammarException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.BAD_SQL_GRAMMAR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特定异常处理：json解析异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(HttpMessageNotReadableException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.JSON_PARSE_ERROR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(MethodArgumentNotValidException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常处理：最方便灵活的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BlogException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(BlogException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.error().message(e.getMessage()).code(e.getCode());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringAOP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置文件属性赋值</title>
    <url>/JAVA/SpringBoot%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h2 id="SpringBoot配置文件属性赋值"><a href="#SpringBoot配置文件属性赋值" class="headerlink" title="SpringBoot配置文件属性赋值"></a>SpringBoot配置文件属性赋值</h2><h3 id="1-yml配置文件规则"><a href="#1-yml配置文件规则" class="headerlink" title="1. yml配置文件规则"></a>1. yml配置文件规则</h3><blockquote>
<p>字符串默认<strong>不需要</strong>加上<strong>单引号</strong>或<strong>双引号</strong></p>
</blockquote>
<h4 id="1-1-yml示例："><a href="#1-1-yml示例：" class="headerlink" title="1.1 yml示例："></a>1.1 yml示例：</h4><blockquote>
<p>注意：</p>
<ul>
<li>读取list，map类型，尽量使用<code>@ConfigurationProperties</code>注解批量读取，使用<code>@Value</code>注解适合简单类型的值。</li>
</ul>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">springboot</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br><span class="line">  <span class="attr">list:</span>  <span class="comment"># List&lt;String&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">one</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">two</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">three</span></span><br><span class="line">  <span class="attr">again:</span> <span class="string">one,tow,three</span> <span class="comment"># list行内写法,或者  again: [one,thwo,three]</span></span><br><span class="line">  <span class="attr">map:</span> <span class="comment">#  Map&lt;String,String&gt;</span></span><br><span class="line">    <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">two:</span> {<span class="attr">k1:</span> <span class="string">'v1'</span>,<span class="attr">k2:</span> <span class="string">'v2'</span>} <span class="comment"># map行内写法</span></span><br><span class="line">  <span class="attr">nested:</span>  <span class="comment"># Map&lt;String,List&lt;String&gt;&gt;</span></span><br><span class="line">    <span class="attr">key11:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t3</span></span><br><span class="line">    <span class="attr">key22:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t11</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t22</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">t33</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2-配置文件加载顺序："><a href="#1-2-配置文件加载顺序：" class="headerlink" title="1.2 配置文件加载顺序："></a>1.2 配置文件加载顺序：</h4><blockquote>
<p>springboot启动过程中加载配置文件的顺序</p>
<ol>
<li><strong>file:./config/</strong>    [当前项目路径config目录下]</li>
<li><strong>file:./</strong>   [当前项目路径下]</li>
<li><strong>classpath:/config/</strong>    [类路径（resources）的config目录下]</li>
<li><strong>classpath:/</strong>   [类路径（resources）目录下, ==一般我们的配置文件都写在这里==]</li>
</ol>
</blockquote>
<h3 id="2-Value注解"><a href="#2-Value注解" class="headerlink" title="2. @Value注解"></a>2. @Value注解</h3><blockquote>
<p>该对象必须在已经被注入Spring容器的bean中使用</p>
</blockquote>
<h4 id="2-1-正常使用"><a href="#2-1-正常使用" class="headerlink" title="2.1 正常使用"></a>2.1 正常使用</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">@Value("${person.name}")</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value("${person.age}")</span></span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Value获取list属性赋值的最正确的方式</span></span><br><span class="line">   <span class="meta">@Value("#{'${person.list}'.empty() ? null : '${person.list}'.split(',')}")</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;String&gt; list;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2-静态变量赋值"><a href="#2-2-静态变量赋值" class="headerlink" title="2.2 静态变量赋值"></a>2.2 静态变量赋值</h4><blockquote>
<p>在处理静态变量时候，使用上面的@Value的用法是无法获取到配置文件中的数据的，只能获取到null。解决方法如下：</p>
<ol>
<li>生成该静态变量的set方法，然后<strong>删除该方法的static修饰</strong></li>
<li>将注解@Value写在set函数上面</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value("${person.age}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>{</span><br><span class="line">    SimpleTestApplicationTests.age = age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3-不注bean的使用方法"><a href="#2-3-不注bean的使用方法" class="headerlink" title="2.3 不注bean的使用方法"></a>2.3 不注bean的使用方法</h4><p>一般在工具类中，我们不会把工具类注入Spring容器，所以，如果还想继续使用这样方式赋值的话。可以在springboot启动时使用监听事件或者CommandLineRunner类进行启动时赋值。</p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ElasticSearch分布式搜索引擎</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88ElasticSearch%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h2 id="SpringBoot整合ElasticSearch分布式搜索引擎"><a href="#SpringBoot整合ElasticSearch分布式搜索引擎" class="headerlink" title="SpringBoot整合ElasticSearch分布式搜索引擎"></a>SpringBoot整合ElasticSearch分布式搜索引擎</h2><h3 id="引入pom"><a href="#引入pom" class="headerlink" title="引入pom"></a>引入pom</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注意事项：</p>
<ul>
<li>springboot和elasticsearch的版本一定要相互兼容</li>
<li>本项目采用<code>2.3.2.RELEASE</code> 版本，对应elacticsearch版本为 <code>7.6.2</code></li>
<li><img src="https://i.loli.net/2021/06/26/rsQHehiqUCxnEfz.png" alt="版本对照图"></li>
</ul>
</blockquote>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><blockquote>
<p>配置对应的host（192.168.71.129）地址和port（9200）端口</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.config.AbstractElasticsearchConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 初始化ElasticSearch高级客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/23 9:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "elasticsearch")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> <span class="keyword">extends</span> <span class="title">AbstractElasticsearchConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ElasticSearch高级客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">elasticsearchClient</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(<span class="keyword">new</span> HttpHost(host, port)));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="初始化存储对象"><a href="#初始化存储对象" class="headerlink" title="初始化存储对象"></a>初始化存储对象</h3><blockquote>
<p>配置注解，进行索引设置和规则映射设置</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/22 14:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="comment">// 设置索引/分片和副本值</span></span><br><span class="line"><span class="meta">@Document(indexName = "blogs", replicas = 0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexSearchBlog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6710699909610548088L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置属性映射,自定义分词器为ik分词器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = "ik_max_word"</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Text, index = false)</span></span><br><span class="line"><span class="meta">    private String picture;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String flag;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Long, index = false)</span></span><br><span class="line"><span class="meta">    private Long views;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Text, analyzer = "ik_max_word")</span></span><br><span class="line"><span class="meta">    private String description;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Boolean, index = false)</span></span><br><span class="line"><span class="meta">    private Boolean comment;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Boolean, index = false)</span></span><br><span class="line"><span class="meta">    private Boolean appreciation;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Boolean, index = false)</span></span><br><span class="line"><span class="meta">    private Boolean recommend;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Boolean, index = false)</span></span><br><span class="line"><span class="meta">    private Boolean share;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Long, index = false)</span></span><br><span class="line"><span class="meta">    private Long wordCount;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Boolean, index = false)</span></span><br><span class="line"><span class="meta">    private Boolean markdown;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String categoryId;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String categoryName;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String userId;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String nickname;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private String avatar;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    private List&lt;Tag&gt; tags;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    // 为了避免Date类型转换解析保错，这里直接设置层Text类型存储</span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Text, index = false)</span></span><br><span class="line"><span class="meta">    private Date gmtCreate;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Long, index = false)</span></span><br><span class="line"><span class="meta">    private Long commentCount;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    @Field(type = FieldType.Long, index = false)</span></span><br><span class="line"><span class="meta">    private Long likeCount;</span></span><br><span class="line"><span class="meta">}</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6656419195498399499L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="ElasticSearchTemplate简单使用"><a href="#ElasticSearchTemplate简单使用" class="headerlink" title="ElasticSearchTemplate简单使用"></a>ElasticSearchTemplate简单使用</h3><blockquote>
<p>演示示例：</p>
<ul>
<li>批量导入或更新</li>
<li>批量删除</li>
<li>分页高亮检索</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.horse.common.util.result.R;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.elastic.base.IndexSearchBlog;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.elastic.mapper.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.elastic.service.ElasticService;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.lang.Collections;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.MatchQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.MultiMatchQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.FieldSortBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.IndexOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.query.NativeSearchQuery;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/22 10:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticServiceImpl</span> <span class="keyword">implements</span> <span class="title">ElasticService</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier("elasticsearchTemplate")</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchOperations restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlogMapper blogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高亮检索字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"title"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"description"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CATEGORY_NAME = <span class="string">"categoryName"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高级客户端封装的tTemplate模板: 批量导入或更新ElasticSearch数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blogs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importTemplateSearchBlog</span><span class="params">(List&lt;IndexSearchBlog&gt; blogs)</span> </span>{</span><br><span class="line">        <span class="comment">// 判断索引是否存在</span></span><br><span class="line">        IndexOperations index = restTemplate.indexOps(IndexSearchBlog.class);</span><br><span class="line">        <span class="comment">// 索引不存在,则直接创建索引和映射规则</span></span><br><span class="line">        <span class="keyword">if</span> (!index.exists()) {</span><br><span class="line">            index.create();</span><br><span class="line">            index.createMapping();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 批量插入或更新数据</span></span><br><span class="line">        Iterable&lt;IndexSearchBlog&gt; indexSearchBlogs = blogMapper.saveAll(blogs);</span><br><span class="line">        <span class="comment">// 遍历输出保存的所有实体</span></span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        indexSearchBlogs.forEach(blog -&gt; log.info(<span class="string">"==&gt; 保存第【{}】条数据: 【{}】"</span>, count.getAndIncrement(), blog));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ElasticSearch数据删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blogIds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSearchBlog</span><span class="params">(List&lt;String&gt; blogIds)</span> </span>{</span><br><span class="line">        List&lt;IndexSearchBlog&gt; blogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        blogIds.forEach(blogId -&gt; {</span><br><span class="line">            IndexSearchBlog blog = <span class="keyword">new</span> IndexSearchBlog();</span><br><span class="line">            blog.setId(blogId);</span><br><span class="line">            blogs.add(blog);</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">// 批量删除数据</span></span><br><span class="line">        blogMapper.deleteAll(blogs);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于ElasticSearch根据文章标题进行全文高亮检索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> search</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">highlightSearchBlog</span><span class="params">(String search, Long page, Long limit)</span> </span>{</span><br><span class="line">        log.info(<span class="string">" ==&gt; ElasticSearch开始检索关键词: {}"</span>, search);</span><br><span class="line">        <span class="comment">// 组装分页参数: 第一页是 0</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page.intValue() - <span class="number">1</span>, limit.intValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加查询条件</span></span><br><span class="line">        MultiMatchQueryBuilder matchQuery =</span><br><span class="line">                QueryBuilders.multiMatchQuery(search, TITLE, DESCRIPTION, CATEGORY_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加排序条件</span></span><br><span class="line">        FieldSortBuilder sortBuilder = SortBuilders.fieldSort(<span class="string">"views"</span>)</span><br><span class="line">                .order(SortOrder.DESC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建高亮参数</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(TITLE).field(DESCRIPTION).field(CATEGORY_NAME)</span><br><span class="line">                .preTags(<span class="string">"&lt;font color='red'&gt;"</span>).postTags(<span class="string">"&lt;/font&gt;"</span>);</span><br><span class="line">        <span class="comment">// 构建检索对象</span></span><br><span class="line">        NativeSearchQuery searchQueryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(matchQuery)</span><br><span class="line">                .withPageable(pageRequest)</span><br><span class="line">                .withSort(sortBuilder)</span><br><span class="line">                .withHighlightBuilder(highlightBuilder)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 查询匹配数据</span></span><br><span class="line">        SearchHits&lt;IndexSearchBlog&gt; searchHits = restTemplate.search(searchQueryBuilder, IndexSearchBlog.class);</span><br><span class="line">        log.info(<span class="string">"==&gt; 共检索到【{}】条数据"</span>, searchHits.getTotalHits());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 高亮词替换</span></span><br><span class="line">        List&lt;IndexSearchBlog&gt; searchBlogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        searchHits.forEach(searchHit -&gt; {</span><br><span class="line">            IndexSearchBlog blog = searchHit.getContent();</span><br><span class="line">            <span class="comment">// 获取高亮字段结果并替换</span></span><br><span class="line">            List&lt;String&gt; titleList = searchHit.getHighlightField(TITLE);</span><br><span class="line">            List&lt;String&gt; descriptionList = searchHit.getHighlightField(DESCRIPTION);</span><br><span class="line">            List&lt;String&gt; categories = searchHit.getHighlightField(CATEGORY_NAME);</span><br><span class="line">            <span class="keyword">if</span> (!Collections.isEmpty(titleList)) {</span><br><span class="line">                blog.setTitle(titleList.get(<span class="number">0</span>));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!Collections.isEmpty(descriptionList)) {</span><br><span class="line">                blog.setDescription(descriptionList.get(<span class="number">0</span>));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!Collections.isEmpty(categories)) {</span><br><span class="line">                blog.setCategoryName(categories.get(<span class="number">0</span>));</span><br><span class="line">            }</span><br><span class="line">            searchBlogs.add(blog);</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">"rows"</span>, searchBlogs).data(<span class="string">"total"</span>, searchHits.getTotalHits());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="高亮检索测试"><a href="#高亮检索测试" class="headerlink" title="高亮检索测试"></a>高亮检索测试</h3><blockquote>
<p>检索关键词：SpringBoot</p>
</blockquote>
<h4 id="检索效果图"><a href="#检索效果图" class="headerlink" title="检索效果图"></a>检索效果图</h4><p><img src="https://i.loli.net/2021/06/26/DmC2qZJB8px647M.png" alt="高亮检索效果图"></p>
<h4 id="Kibana检索效果"><a href="#Kibana检索效果" class="headerlink" title="Kibana检索效果"></a>Kibana检索效果</h4><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"took"</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span> : {</span><br><span class="line">    <span class="attr">"total"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"successful"</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"skipped"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span> : <span class="number">0</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"hits"</span> : {</span><br><span class="line">    <span class="attr">"total"</span> : {</span><br><span class="line">      <span class="attr">"value"</span> : <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"relation"</span> : <span class="string">"eq"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"max_score"</span> : <span class="number">2.5516207</span>,</span><br><span class="line">    <span class="attr">"hits"</span> : [</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"blogs"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1379775100554858498"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">2.5516207</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : {</span><br><span class="line">          <span class="attr">"_class"</span> : <span class="string">"com.horse.service.elastic.base.IndexSearchBlog"</span>,</span><br><span class="line">          <span class="attr">"id"</span> : <span class="string">"1379775100554858498"</span>,</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"Springboot整合Shiro"</span>,</span><br><span class="line">          <span class="attr">"picture"</span> : <span class="string">"http://h1.ioliu.cn/bing/BFBadger_PT-BR10164748033_1920x1080.jpg?imageslim"</span>,</span><br><span class="line">          <span class="attr">"flag"</span> : <span class="string">"原创"</span>,</span><br><span class="line">          <span class="attr">"views"</span> : <span class="number">5</span>,</span><br><span class="line">          <span class="attr">"description"</span> : <span class="string">"shiro作为比较轻量级的权限控制框架，简单易上手。Springboot整合Shiro(MD5盐值加密)，非前后端分离的版本。"</span>,</span><br><span class="line">          <span class="attr">"comment"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"appreciation"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"recommend"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"share"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"wordCount"</span> : <span class="number">12513</span>,</span><br><span class="line">          <span class="attr">"markdown"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"categoryId"</span> : <span class="string">"1304674926594215938"</span>,</span><br><span class="line">          <span class="attr">"categoryName"</span> : <span class="string">"流行框架"</span>,</span><br><span class="line">          <span class="attr">"nickname"</span> : <span class="string">"小麋鹿"</span>,</span><br><span class="line">          <span class="attr">"avatar"</span> : <span class="string">"http://mabin.horsemuzi.top/7338ad388e9940f091a8533b22328ffe.gif"</span>,</span><br><span class="line">          <span class="attr">"tags"</span> : [</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1366670150710870018"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"Java"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1379776002334412801"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"Apache Shiro"</span></span><br><span class="line">            }</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"gmtCreate"</span> : <span class="number">1617798994000</span>,</span><br><span class="line">          <span class="attr">"commentCount"</span> : <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"blogs"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1386210456728793090"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.9496658</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : {</span><br><span class="line">          <span class="attr">"_class"</span> : <span class="string">"com.horse.service.elastic.base.IndexSearchBlog"</span>,</span><br><span class="line">          <span class="attr">"id"</span> : <span class="string">"1386210456728793090"</span>,</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"SpringBoot全局异常的处理"</span>,</span><br><span class="line">          <span class="attr">"picture"</span> : <span class="string">"http://h1.ioliu.cn/bing/ImaginePeace_EN-AU12572046001_1920x1080.jpg?imageslim"</span>,</span><br><span class="line">          <span class="attr">"flag"</span> : <span class="string">"原创"</span>,</span><br><span class="line">          <span class="attr">"views"</span> : <span class="number">57</span>,</span><br><span class="line">          <span class="attr">"description"</span> : <span class="string">"在SpringBoot全局异常的处理，主要用于异常的统一捕获和处理方面。"</span>,</span><br><span class="line">          <span class="attr">"comment"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"appreciation"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"recommend"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"share"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"wordCount"</span> : <span class="number">3913</span>,</span><br><span class="line">          <span class="attr">"markdown"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"categoryId"</span> : <span class="string">"1304674926594215938"</span>,</span><br><span class="line">          <span class="attr">"categoryName"</span> : <span class="string">"流行框架"</span>,</span><br><span class="line">          <span class="attr">"nickname"</span> : <span class="string">"小麋鹿"</span>,</span><br><span class="line">          <span class="attr">"avatar"</span> : <span class="string">"http://mabin.horsemuzi.top/7338ad388e9940f091a8533b22328ffe.gif"</span>,</span><br><span class="line">          <span class="attr">"tags"</span> : [</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1304300802713620481"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"SpringBoot"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1379416868611280898"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"Spring"</span></span><br><span class="line">            }</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"gmtCreate"</span> : <span class="number">1619333302000</span>,</span><br><span class="line">          <span class="attr">"commentCount"</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"likeCount"</span> : <span class="number">2</span></span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"_index"</span> : <span class="string">"blogs"</span>,</span><br><span class="line">        <span class="attr">"_type"</span> : <span class="string">"_doc"</span>,</span><br><span class="line">        <span class="attr">"_id"</span> : <span class="string">"1386220171676381186"</span>,</span><br><span class="line">        <span class="attr">"_score"</span> : <span class="number">1.8410828</span>,</span><br><span class="line">        <span class="attr">"_source"</span> : {</span><br><span class="line">          <span class="attr">"_class"</span> : <span class="string">"com.horse.service.elastic.base.IndexSearchBlog"</span>,</span><br><span class="line">          <span class="attr">"id"</span> : <span class="string">"1386220171676381186"</span>,</span><br><span class="line">          <span class="attr">"title"</span> : <span class="string">"SpringBoot配置文件属性赋值"</span>,</span><br><span class="line">          <span class="attr">"picture"</span> : <span class="string">"http://shp.qpic.cn/ishow/2735040813/1586324882_84828260_15556_sProdImgNo_6.jpg/0"</span>,</span><br><span class="line">          <span class="attr">"flag"</span> : <span class="string">"原创"</span>,</span><br><span class="line">          <span class="attr">"views"</span> : <span class="number">295</span>,</span><br><span class="line">          <span class="attr">"description"</span> : <span class="string">""</span><span class="string">"1. 读取list，map类型，尽量使用`@ConfigurationProperties`注解批量读取，使用`@Value`注解适合简单类型的值</span></span><br><span class="line"><span class="string">2. 在处理静态变量时候，使用上面的@Value的用法是无法获取到配置文件中的数据的，只能获取到null（解决方法：生成该静态变量的set方法，然后删除该方法的static修饰 ，将注解@Value写在set函数上面即可获取到值）"</span><span class="string">""</span>,</span><br><span class="line">          <span class="attr">"comment"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"appreciation"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"recommend"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"share"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"wordCount"</span> : <span class="number">2849</span>,</span><br><span class="line">          <span class="attr">"markdown"</span> : <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"categoryId"</span> : <span class="string">"1304674926594215938"</span>,</span><br><span class="line">          <span class="attr">"categoryName"</span> : <span class="string">"流行框架"</span>,</span><br><span class="line">          <span class="attr">"nickname"</span> : <span class="string">"小麋鹿"</span>,</span><br><span class="line">          <span class="attr">"avatar"</span> : <span class="string">"http://mabin.horsemuzi.top/7338ad388e9940f091a8533b22328ffe.gif"</span>,</span><br><span class="line">          <span class="attr">"tags"</span> : [</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1304300802713620481"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"SpringBoot"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1304781819060740097"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"SpringMVC"</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              <span class="attr">"id"</span> : <span class="string">"1379416868611280898"</span>,</span><br><span class="line">              <span class="attr">"name"</span> : <span class="string">"Spring"</span></span><br><span class="line">            }</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"gmtCreate"</span> : <span class="number">1619335618000</span>,</span><br><span class="line">          <span class="attr">"commentCount"</span> : <span class="number">9</span>,</span><br><span class="line">          <span class="attr">"likeCount"</span> : <span class="number">2</span></span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>还有很多复杂的查询操作，后面业务用到再深入研究…..</p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Email发送</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88Email%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<h2 id="SpringBoot整合Email发送"><a href="#SpringBoot整合Email发送" class="headerlink" title="SpringBoot整合Email发送"></a>SpringBoot整合Email发送</h2><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot-mail--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置邮件信息-QQ邮箱"><a href="#配置邮件信息-QQ邮箱" class="headerlink" title="配置邮件信息(QQ邮箱)"></a>配置邮件信息(QQ邮箱)</h3><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#配置mail发送的基本信息</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">3468449362</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="comment">#邮箱授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">x*********</span></span><br><span class="line">    <span class="comment">#主机发送邮件服务器（这里使用的是QQ邮箱，一般写法是固定的）</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment">#开启安全服务</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="邮件发送工具类"><a href="#邮件发送工具类" class="headerlink" title="邮件发送工具类"></a>邮件发送工具类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/9 15:11</span></span><br><span class="line"><span class="comment"> * 发送邮件工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${spring.mail.username}")</span></span><br><span class="line">    <span class="keyword">private</span> String sendUsername;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送html模板邮件:接收网页参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendTo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 发送状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendHtmlMail</span><span class="params">(String title, String[] sendTo, String html)</span> <span class="keyword">throws</span> MessagingException </span>{</span><br><span class="line">        MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//设置发件人邮箱</span></span><br><span class="line">        helper.setFrom(sendUsername);</span><br><span class="line">        <span class="comment">//设置收件人邮箱（可以是字符串数组）</span></span><br><span class="line">        helper.setTo(sendTo);</span><br><span class="line">        <span class="comment">//设置邮件标题</span></span><br><span class="line">        helper.setSubject(title);</span><br><span class="line">        <span class="comment">//设置邮件正文</span></span><br><span class="line">        helper.setText(html, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//开始发送</span></span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">        log.info(<span class="string">" ==&gt; 邮件发送成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送本地附件邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendTo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 本地资源路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendLocalAttachMail</span><span class="params">(String title, String[] sendTo, String html, String filePath)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper mailHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">            mailHelper.setFrom(sendUsername);</span><br><span class="line">            mailHelper.setTo(sendTo);</span><br><span class="line">            mailHelper.setSubject(title);</span><br><span class="line">            mailHelper.setText(html, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 携带附件(本地图片附件)</span></span><br><span class="line">            FileSystemResource file = <span class="keyword">new</span> FileSystemResource(filePath);</span><br><span class="line">            String fileName = filePath.substring(filePath.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">            mailHelper.addAttachment(fileName, file);</span><br><span class="line">            javaMailSender.send(mimeMessage);</span><br><span class="line">            log.info(<span class="string">" ==&gt; 邮件发送成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (MessagingException e) {</span><br><span class="line">            log.error(<span class="string">" ==&gt; 邮件发送异常: {}"</span>, e.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送文件流附件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendTo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendWebAttachMail</span><span class="params">(String title, String[] sendTo, String html, String fileName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  InputStream inputStream)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper mailHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">            mailHelper.setFrom(sendUsername);</span><br><span class="line">            mailHelper.setTo(sendTo);</span><br><span class="line">            mailHelper.setSubject(title);</span><br><span class="line">            mailHelper.setText(html, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 携带附件(文件流附件)</span></span><br><span class="line">            <span class="comment">// 对于内存中生成的文件，可以使用ByteArrayResource。只需使用Apache Commons中的IOUtils转换您的InputStream对象</span></span><br><span class="line">            mailHelper.addAttachment(fileName, <span class="keyword">new</span> ByteArrayResource(IOUtils.toByteArray(inputStream)));</span><br><span class="line">            javaMailSender.send(mimeMessage);</span><br><span class="line">            log.info(<span class="string">" ==&gt; 邮件发送成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">" ==&gt; 邮件发送异常: {}"</span>, e.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>页面表单发送测试，完美成功。。。</p>
<p><img src="https://i.loli.net/2021/05/24/uSjR24PvBDkomGg.gif" alt="燥起来"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Email</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Mybatis多数据源动态切换</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88Mybatis%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="SpringBoot整合Mybatis多数据源动态切换"><a href="#SpringBoot整合Mybatis多数据源动态切换" class="headerlink" title="SpringBoot整合Mybatis多数据源动态切换"></a>SpringBoot整合Mybatis多数据源动态切换</h2><blockquote>
<p>简介：SpringBoot整合Mybatis实现数据源动态切换（动态加载：<a href="http://www.horsemuzi.top/JAVA/MybatisPlus动态添加切换数据源/">MybatisPlus 动态添加切换数据源 | 小马博客</a>）</p>
<p>要点：</p>
<ul>
<li>结合Spring AOP和ThreadLocal实现数据源唯一标识key的获取和数据源的切换</li>
<li>主要使用<code>AbstractRoutingDataSource</code>抽象类</li>
<li>Druid数据源</li>
</ul>
</blockquote>
<h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h3><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatis-dynamic</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 数据源实例配置信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">****</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://****:3306/dynamic_master?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">****</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://****:3306/dynamic_slave?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.horse.dynamic.mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="公共实例"><a href="#公共实例" class="headerlink" title="公共实例"></a>公共实例</h3><p><code>DataSourceConstants</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConstants</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源名称标识: 配置文件可以无限添加,这里同步添加即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MASTER = <span class="string">"master"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLAVE = <span class="string">"slave"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>User</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="动态数据源配置"><a href="#动态数据源配置" class="headerlink" title="动态数据源配置"></a>动态数据源配置</h3><blockquote>
<ol>
<li>加载yml的配置信息，初始化DruidDataSource数据源</li>
<li>继承<code>AbstractRoutingDataSource</code>抽象类，实现数据源动态切换</li>
</ol>
</blockquote>
<p><code>DynamicDataSourceConfig</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.dynamic.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> com.horse.dynamic.common.DataSourceConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/1 14:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 动态配置数据源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = "spring.datasource.druid.master")</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dynamicMasterDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = "spring.datasource.druid.slave")</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dynamicSlaveDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicDataSource <span class="title">dataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 组装备用数据源: 还有数据源,向targetDataSources中继续添加即可</span></span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        targetDataSources.put(DataSourceConstants.MASTER, dynamicMasterDataSource());</span><br><span class="line">        targetDataSources.put(DataSourceConstants.SLAVE, dynamicSlaveDataSource());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSource(dynamicMasterDataSource(), targetDataSources);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>DynamicDataSource</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.dynamic.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/1 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">(DataSource dynamicMasterDataSource, Map&lt;Object, Object&gt; targetDataSources)</span> </span>{</span><br><span class="line">        <span class="comment">// 调用父类方法: 设置默认数据源</span></span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(dynamicMasterDataSource);</span><br><span class="line">        <span class="comment">// 设置备用数据源集合</span></span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="comment">// 这个一定要写,不写会报错(未追究其原因)</span></span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从ThreadLocal线程局部变量中获取决定当前使用那个数据源对应的key标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>{</span><br><span class="line">        String dataSource = getDataSource();</span><br><span class="line">        log.info(<span class="string">"数据源 ==&gt; {} &lt;== 切换成功"</span>, dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AOP的环绕通知调用此方法: 将数据源对应的key设置进ThreadLocal线程局部变量中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSource)</span> </span>{</span><br><span class="line">        CONTEXT_HOLDER.set(dataSource);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AOP环绕通知: 方法执行完毕,释放线程局部变量的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        CONTEXT_HOLDER.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="AOP注解配置"><a href="#AOP注解配置" class="headerlink" title="AOP注解配置"></a>AOP注解配置</h3><blockquote>
<ol>
<li>编写自定义注解</li>
<li>编写AOP自定义切面方法</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target({ElementType.METHOD, ElementType.TYPE})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源标识名称,默认值: master主数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> DataSourceConstants.MASTER</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.dynamic.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.dynamic.annotation.DataSource;</span><br><span class="line"><span class="keyword">import</span> com.horse.dynamic.common.DataSourceConstants;</span><br><span class="line"><span class="keyword">import</span> com.horse.dynamic.config.DynamicDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/1 15:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.horse.dynamic.annotation.DataSource)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataSourcePointCut</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around("dataSourcePointCut()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">dataSourceAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>{</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line"></span><br><span class="line">        DataSource dataSource = method.getAnnotation(DataSource.class);</span><br><span class="line">        <span class="comment">// 如果方法上没有写注解,默认使用主数据源,否则按照注解值动态切换</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(dataSource)) {</span><br><span class="line">            DynamicDataSource.setDataSource(DataSourceConstants.MASTER);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            DynamicDataSource.setDataSource(dataSource.value());</span><br><span class="line">        }</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            proceed = joinPoint.proceed();</span><br><span class="line">        } <span class="keyword">catch</span> (Throwable throwable) {</span><br><span class="line">            log.error(<span class="string">" ==&gt; mybatis动态数据源切换异常: {}"</span>, throwable.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">// 释放线程局部变量值</span></span><br><span class="line">            DynamicDataSource.clearDataSource();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="主启动类配置"><a href="#主启动类配置" class="headerlink" title="主启动类配置"></a>主启动类配置</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Import({DynamicDataSourceConfig.class})</span> <span class="comment">// 引入配置类,但是高版本的好像不引入也不会报错</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = "com.horse.dynamic.mapper")</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span> <span class="comment">// 排除自动数据源自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootMybatisDynamicApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringbootMybatisDynamicApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h3><blockquote>
<p>controller层进行调用测试：</p>
<ul>
<li>insert方法使用<code>默认主数据源</code></li>
<li>select方法使用<code>手动指定从数据源</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/dynamic")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataSource</span></span><br><span class="line">    <span class="meta">@PostMapping("/insert")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicInsertUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = userMapper.dynamicInsertUserInfo(user);</span><br><span class="line">        System.out.println(<span class="string">"count: "</span> + count);</span><br><span class="line">        System.out.println(<span class="string">"主键ID: "</span> + user.getId());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataSource(DataSourceConstants.SLAVE)</span></span><br><span class="line">    <span class="meta">@GetMapping("/select")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicSelectUserInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;User&gt; users = userMapper.dynamicSelectUserInfo();</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.horse.dynamic.model.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Options;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.ResultType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/1 15:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("INSERT INTO tb_user(name) VALUES (#{name})")</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = "id")</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dynamicInsertUserInfo</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select("SELECT * FROM tb_user")</span></span><br><span class="line">    <span class="meta">@ResultType(User.class)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">dynamicSelectUserInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>简要日志</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"># 从数据源查询</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">25.672</span>  INFO <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">1</span>] c.h.dynamic.config.DynamicDataSource     : 数据源 ==&gt; slave &lt;== 切换成功</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">25.696</span>  INFO <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">1</span>] com.alibaba.druid.pool.DruidDataSource   : {dataSource-<span class="number">1</span>} inited</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">25.927</span> DEBUG <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">1</span>] c.h.d.m.U.dynamicSelectUserInfo          : ==&gt;  Preparing: SELECT * FROM tb_user</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">25.938</span> DEBUG <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">1</span>] c.h.d.m.U.dynamicSelectUserInfo          : ==&gt; Parameters: </span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">25.957</span> DEBUG <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">1</span>] c.h.d.m.U.dynamicSelectUserInfo          : &lt;==      Total: <span class="number">2</span></span><br><span class="line">User(id=<span class="number">1</span>, name=马滨)</span><br><span class="line">User(id=<span class="number">2</span>, name=成龙)</span><br><span class="line"></span><br><span class="line"># 主数据源插入操作</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">46.552</span>  INFO <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">2</span>] c.h.dynamic.config.DynamicDataSource     : 数据源 ==&gt; master &lt;== 切换成功</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">46.553</span>  INFO <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">2</span>] com.alibaba.druid.pool.DruidDataSource   : {dataSource-<span class="number">2</span>} inited</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">46.837</span> DEBUG <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">2</span>] c.h.d.m.U.dynamicInsertUserInfo          : ==&gt;  Preparing: <span class="function">INSERT INTO <span class="title">tb_user</span><span class="params">(name)</span> <span class="title">VALUES</span> <span class="params">(?)</span></span></span><br><span class="line"><span class="function">2021-06-01 16:19:46.837 DEBUG 15884 --- [nio-8888-exec-2] c.h.d.m.U.dynamicInsertUserInfo          : </span>==&gt; Parameters: xxl-job-admin(String)</span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">46.896</span> DEBUG <span class="number">15884</span> --- [nio-<span class="number">8888</span>-exec-<span class="number">2</span>] c.h.d.m.U.dynamicInsertUserInfo          : &lt;==    Updates: <span class="number">1</span></span><br><span class="line">count: <span class="number">1</span></span><br><span class="line">主键ID: <span class="number">6</span></span><br></pre></td></tr></tbody></table></figure>
<p>Mybatis数据源的动态切换的思想和多租户平台的差不多，看另一篇博客即可！</p>
<p><a href="http://www.horsemuzi.top/JAVA/MybatisPlus动态添加切换数据源/">MybatisPlus 动态添加切换数据源 | 小马博客</a></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis使用注解缓存</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><blockquote>
<p>CacheManager === Cache 缓存组件会实际项目中引入的缓存组件，进行数据的缓存。</p>
<p><strong>我们可以对<code>redisCacheManager</code>缓存管理器进行一定的配置</strong></p>
<ol>
<li>引入redis的starter，容器中保存的是RedisCacheManager</li>
<li>RedisCacheManager 帮我们创建RedisCache 来作为缓存组件，RedisCache通过操作redis来缓存数据</li>
<li>默认保存数据 K -V 都是通过序列化来保存的</li>
</ol>
<p><strong>注意事项：</strong></p>
<ul>
<li><strong>需要被序列化缓存的实例，必须实现<code>Serializater</code>选项</strong></li>
</ul>
</blockquote>
<h2 id="Redis缓存配置"><a href="#Redis缓存配置" class="headerlink" title="Redis缓存配置"></a>Redis缓存配置</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/10 17:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启基于注解的缓存</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义json序列化器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入数据源</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 序列化时将对象全类名一起保存下来</span></span><br><span class="line">        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key-value结构序列化数据结构</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash数据结构序列化方式,必须这样否则存hash 就是基于jdk序列化的</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 启用默认序列化方式</span></span><br><span class="line">        redisTemplate.setEnableDefaultSerializer(<span class="keyword">true</span>);</span><br><span class="line">        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        redisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解缓存信息配置(如果不配置，使用的注解患处全部都是默认属性，一般会在这里进行简单配置)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> </span>{</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                <span class="comment">//过期时间600秒:600秒后会重新进行数据库查询</span></span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                <span class="comment">// 配置序列化</span></span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(connectionFactory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="核心注解简析"><a href="#核心注解简析" class="headerlink" title="核心注解简析"></a>核心注解简析</h2><h3 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h3><blockquote>
<p>作用在项目启动类或者某个配置类上使用此注解，表示：<strong>允许使用注解的方式进行缓存操作</strong></p>
<p>注意：此【类】必须是Spring容器中的，否则注解不会生效</p>
</blockquote>
<h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h3><blockquote>
<p>作用目标：类或者方法上</p>
<p>缓存效果：在目标方法执行前，会根据key先去缓存中查询看是否有数据，有就直接<br>                         返回缓存中的key对应的value值。不再执行目标方法；无则执行目标方法，并将方法的返回值<br>                         作为value，并以键值对的形式存入缓存</p>
</blockquote>
<h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h3><blockquote>
<p>作用目标：类或者方法上</p>
<p>缓存效果：触发缓存更新操作，添加该注解后总是会执行方法体，并且使用返回的结果更新缓存</p>
</blockquote>
<h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h3><blockquote>
<p>作用目标：类或者方法上</p>
<p>缓存效果：在执行完目标方法后，清除缓存中对应key的数据(如果缓存中有对应key的数据缓存的话)</p>
</blockquote>
<h3 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig"></a>@CacheConfig</h3><blockquote>
<p>作用目标：一般作用与类上</p>
<p>效果：@Cacheable、@CacheEvict、@CachePut这三个注解的cacheNames属性是必 填项(或value属性是必填项,因为value属性是cacheNames的别名属性)；如果上述三种注解都用的是同一个cacheNames的话，那么在每此都写cacheNames的话，就会显得麻烦。如将@CacheConfig注解就是来配置一些公共属性(如：cacheNames，keyGenerator等)的值。</p>
</blockquote>
<p>主要属性：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>缓存的名称，必须指定一个，相当于nacos配置中的命名空间（不同的value中，可以有相同的key）</td>
</tr>
<tr>
<td>key</td>
<td>缓存的key值，分为三类：默认的、keyGenerator生成的、主动指定的</td>
</tr>
<tr>
<td>condition</td>
<td>在激活注解功能前，进行condition验证，如果condition结果为true，则表明验证通过，缓存注解生效；否则缓存注解不生效</td>
</tr>
<tr>
<td>unless</td>
<td>是否令注解（在方法执行后的功能）不生效；若unless的结果为true，则(方法执行后的功能)不生效；若unless的结果为false，则(方法执行后的)功能生效</td>
</tr>
</tbody>
</table>
</div>
<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><blockquote>
<p>注意 key 的实际写法，需要用<code>单引号</code>包裹</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页推荐列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = "index",key = "'recommend'")</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Blog&gt; <span class="title">queryRecommendList</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;Blog&gt;()</span><br><span class="line">            .select(Blog::getId, Blog::getTitle, Blog::getViews)</span><br><span class="line">            .eq(Blog::getRecommend, <span class="keyword">true</span>)</span><br><span class="line">            .orderByDesc(Blog::getViews)</span><br><span class="line">            .last(<span class="string">"LIMIT 10"</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 博客首页轮播图数据(文章浏览量的前6名)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = "index",key = "'bigCollapse'")</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;IndexCollapseInfo&gt; <span class="title">queryIndexCollapse</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> baseMapper.queryIndexCollapse();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot根据Maven中Profiles标签动态配置编译选项</title>
    <url>/JAVA/SpringBoot%E6%A0%B9%E6%8D%AEMaven%E4%B8%ADProfiles%E6%A0%87%E7%AD%BE%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="SpringBoot根据Maven中Profiles标签动态配置编译选项"><a href="#SpringBoot根据Maven中Profiles标签动态配置编译选项" class="headerlink" title="SpringBoot根据Maven中Profiles标签动态配置编译选项"></a>SpringBoot根据Maven中Profiles标签动态配置编译选项</h2><h3 id="Profile简介"><a href="#Profile简介" class="headerlink" title="Profile简介"></a>Profile简介</h3><blockquote>
<p>profile可以让我们定义一系列的配置信息，然后指定其激活条件。这样我们就可以定义多个profile，然后每个profile对应不同的激活条件和配置信息，从而达到不同环境使用不同配置信息的效果。</p>
</blockquote>
<h4 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--如果不设置resource 会导致application.yaml中的@@符号找不到pom文件中的配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--如果不设置resource 会导致application.yaml中的@@符号找不到pom文件中的配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 环境配置唯一标识 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 以下全部是自定义属性配置，标签名随便写，但最好见名知义--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--各微服务模块端口号--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">gateWay.port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">gateWay.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">blog.port</span>&gt;</span>8110<span class="tag">&lt;/<span class="name">blog.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">oss.port</span>&gt;</span>8120<span class="tag">&lt;/<span class="name">oss.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sms.port</span>&gt;</span>8130<span class="tag">&lt;/<span class="name">sms.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.port</span>&gt;</span>8140<span class="tag">&lt;/<span class="name">mongo.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">elastic.port</span>&gt;</span>8150<span class="tag">&lt;/<span class="name">elastic.port</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--各微服务模块名称--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">gateWay.name</span>&gt;</span>service-gateway<span class="tag">&lt;/<span class="name">gateWay.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">blog.name</span>&gt;</span>service-blog<span class="tag">&lt;/<span class="name">blog.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">oss.name</span>&gt;</span>service-oss<span class="tag">&lt;/<span class="name">oss.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sms.name</span>&gt;</span>service-sms<span class="tag">&lt;/<span class="name">sms.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.name</span>&gt;</span>service-mongo<span class="tag">&lt;/<span class="name">mongo.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">elastic.name</span>&gt;</span>service-elastic<span class="tag">&lt;/<span class="name">elastic.name</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  MySQL信息  --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.port</span>&gt;</span>3306<span class="tag">&lt;/<span class="name">db.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.url</span>&gt;</span>121.5.168.31<span class="tag">&lt;/<span class="name">db.url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">db.username</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">db.password</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.databaseName</span>&gt;</span>horse_vue_blog<span class="tag">&lt;/<span class="name">db.databaseName</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  redis信息  --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.port</span>&gt;</span>6379<span class="tag">&lt;/<span class="name">redis.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.host</span>&gt;</span>121.5.168.31<span class="tag">&lt;/<span class="name">redis.host</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.database</span>&gt;</span>1<span class="tag">&lt;/<span class="name">redis.database</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">redis.password</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  MongoDB信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.port</span>&gt;</span>27017<span class="tag">&lt;/<span class="name">mongo.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.host</span>&gt;</span>121.5.168.31<span class="tag">&lt;/<span class="name">mongo.host</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.database</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">mongo.database</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">mongo.username</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">mongo.password</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--nacos信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.addr</span>&gt;</span>121.5.168.31:8848<span class="tag">&lt;/<span class="name">nacos.addr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.username</span>&gt;</span>nacos<span class="tag">&lt;/<span class="name">nacos.username</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">nacos.password</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.file-extension</span>&gt;</span>yml<span class="tag">&lt;/<span class="name">nacos.file-extension</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--ElasticSearch信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">elasticsearch.host</span>&gt;</span>192.168.71.129<span class="tag">&lt;/<span class="name">elasticsearch.host</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">elasticsearch.port</span>&gt;</span>9200<span class="tag">&lt;/<span class="name">elasticsearch.port</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--设置为 默认激活此id=dev的配置信息--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--激活环境--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">profileActive</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profileActive</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--各微服务模块端口号--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">gateWay.port</span>&gt;</span>9001<span class="tag">&lt;/<span class="name">gateWay.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">blog.port</span>&gt;</span>8110<span class="tag">&lt;/<span class="name">blog.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">oss.port</span>&gt;</span>8120<span class="tag">&lt;/<span class="name">oss.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sms.port</span>&gt;</span>8130<span class="tag">&lt;/<span class="name">sms.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.port</span>&gt;</span>8140<span class="tag">&lt;/<span class="name">mongo.port</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--各微服务模块名称--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">gateWay.name</span>&gt;</span>service-gateway<span class="tag">&lt;/<span class="name">gateWay.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">blog.name</span>&gt;</span>service-blog<span class="tag">&lt;/<span class="name">blog.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">oss.name</span>&gt;</span>service-oss<span class="tag">&lt;/<span class="name">oss.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">sms.name</span>&gt;</span>service-sms<span class="tag">&lt;/<span class="name">sms.name</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.name</span>&gt;</span>service-mongo<span class="tag">&lt;/<span class="name">mongo.name</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  MySQL信息  --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.port</span>&gt;</span>3306<span class="tag">&lt;/<span class="name">db.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.url</span>&gt;</span>121.5.168.31<span class="tag">&lt;/<span class="name">db.url</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">db.username</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">db.password</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">db.databaseName</span>&gt;</span>horse_vue_blog<span class="tag">&lt;/<span class="name">db.databaseName</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  redis信息  --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.port</span>&gt;</span>6379<span class="tag">&lt;/<span class="name">redis.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.host</span>&gt;</span>121.5.168.31<span class="tag">&lt;/<span class="name">redis.host</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.database</span>&gt;</span>1<span class="tag">&lt;/<span class="name">redis.database</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">redis.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">redis.password</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--  MongoDB信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.port</span>&gt;</span>27017<span class="tag">&lt;/<span class="name">mongo.port</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.host</span>&gt;</span>121.5.168.31<span class="tag">&lt;/<span class="name">mongo.host</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.database</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">mongo.database</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">mongo.username</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mongo.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">mongo.password</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--nacos信息--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.addr</span>&gt;</span>121.5.168.31:8848<span class="tag">&lt;/<span class="name">nacos.addr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.username</span>&gt;</span>nacos<span class="tag">&lt;/<span class="name">nacos.username</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.password</span>&gt;</span>***<span class="tag">&lt;/<span class="name">nacos.password</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">nacos.file-extension</span>&gt;</span>yml<span class="tag">&lt;/<span class="name">nacos.file-extension</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="引用配置示例"><a href="#引用配置示例" class="headerlink" title="引用配置示例"></a>引用配置示例</h4><blockquote>
<p>注意：nacos远程配置中心的yaml文件，不能使用这种方式进行配置，无法读取到值。</p>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">@blog.port@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@blog.name@</span> <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profileActive@</span> <span class="comment"># 激活环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">@nacos.addr@</span> <span class="comment"># 注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span>  <span class="comment"># 配置中心</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">@nacos.addr@</span> <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">@nacos.file-extension@</span>    <span class="comment"># 配置文件后缀(和nacos客户端保持一致)</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">c0df1ff6-5f81-4f88-a41b-d23d2075f354</span>  <span class="comment"># 命名空间id</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">HORSE_VUE_BLOG_DEV</span>  <span class="comment"># 分组名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">@nacos.username@</span>  <span class="comment"># 登录nacos客户端的用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">@nacos.password@</span>  <span class="comment">#  登录nacos客户端的密码</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="IDEA的可视化界面"><a href="#IDEA的可视化界面" class="headerlink" title="IDEA的可视化界面"></a>IDEA的可视化界面</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210622204000.png" alt="手动切换环境配置"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot简单实现PDF文件导出</title>
    <url>/JAVA/SpringBoot%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0PDF%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h2 id="SpringBoot简单实现PDF文件导出"><a href="#SpringBoot简单实现PDF文件导出" class="headerlink" title="SpringBoot简单实现PDF文件导出"></a>SpringBoot简单实现PDF文件导出</h2><h3 id="引入pom"><a href="#引入pom" class="headerlink" title="引入pom"></a>引入pom</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--itext pdf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itextpdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><blockquote>
<p>生产环境的文件路径，需要进行修改。</p>
</blockquote>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># pdf文件导出路径</span></span><br><span class="line"><span class="attr">report:</span></span><br><span class="line">  <span class="attr">pdf:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:/file/pdf/</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="上干货"><a href="#上干货" class="headerlink" title="上干货"></a>上干货</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: PDF文件导出处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/26 16:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdfReportHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${report.pdf.path}")</span></span><br><span class="line">    <span class="keyword">private</span> String reportPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出登录日志PDF文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> logs     日志数据集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pdfLoginLogReport</span><span class="params">(List&lt;LoginLog&gt; logs, String fileName)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 设置文件生成位置(文件夹不存在就创建)</span></span><br><span class="line">            FileUtil.mkdir(<span class="keyword">new</span> File(reportPath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置文件绝对路径</span></span><br><span class="line">            String realPath = reportPath.concat(fileName).concat(<span class="string">".pdf"</span>);</span><br><span class="line">            <span class="comment">// 创建输出流</span></span><br><span class="line">            FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(realPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建字体</span></span><br><span class="line">            BaseFont bf = BaseFont.createFont(<span class="string">"STSong-Light"</span>, <span class="string">"UniGB-UCS2-H"</span>, BaseFont.NOT_EMBEDDED);</span><br><span class="line">            Font contentFont = <span class="keyword">new</span> Font(bf, <span class="number">12</span>);</span><br><span class="line">            Font headFont = <span class="keyword">new</span> Font(bf, <span class="number">14</span>, Font.BOLD);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置文档规格和页面布局参数,页面背景色</span></span><br><span class="line">            Rectangle rect = <span class="keyword">new</span> Rectangle(PageSize.A4);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// rect.setBackgroundColor(BaseColor.GRAY);</span></span><br><span class="line"></span><br><span class="line">            Document document = <span class="keyword">new</span> Document(rect, <span class="number">2.5f</span>, <span class="number">2.5f</span>, <span class="number">2.5f</span>, <span class="number">2.5f</span>);</span><br><span class="line">            PdfWriter writer = PdfWriter.getInstance(document, outputStream);</span><br><span class="line">            <span class="comment">// PDF版本</span></span><br><span class="line">            writer.setPdfVersion(PdfWriter.PDF_VERSION_1_7);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文档加密: 使用两个密码均可以打开文件,但是使用 "horse" 打开文件只具有有限的功能(不常用)</span></span><br><span class="line">            <span class="comment">// writer.setEncryption("horse".getBytes(), "horse123".getBytes(), PdfWriter.ALLOW_SCREENREADERS, PdfWriter.ENCRYPTION_AES_128);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 文档属性</span></span><br><span class="line">            document.addTitle(<span class="string">"Login log title"</span>);</span><br><span class="line">            document.addSubject(<span class="string">"Login log subject title"</span>);</span><br><span class="line">            document.addAuthor(<span class="string">"Mr.Horse"</span>);</span><br><span class="line">            document.addCreationDate();</span><br><span class="line"></span><br><span class="line">            document.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置表格格式内容(调用签判空)</span></span><br><span class="line">            <span class="comment">// 创建一个 8 列的表格</span></span><br><span class="line">            PdfPTable table = <span class="keyword">new</span> PdfPTable(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(fileName, headFont));</span><br><span class="line">            <span class="comment">// 占几行几列</span></span><br><span class="line">            cell.setRowspan(<span class="number">3</span>);</span><br><span class="line">            cell.setColspan(<span class="number">8</span>);</span><br><span class="line">            <span class="comment">// 水平垂直居中</span></span><br><span class="line">            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);</span><br><span class="line">            cell.setHorizontalAlignment(Element.ALIGN_CENTER);</span><br><span class="line">            <span class="comment">// 固定行高</span></span><br><span class="line">            cell.setFixedHeight(<span class="number">25</span>);</span><br><span class="line">            table.addCell(cell);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第二行表头设置</span></span><br><span class="line">            PdfPCell cell1 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"登录用户"</span>, contentFont));</span><br><span class="line">            setStyle(cell1);</span><br><span class="line">            table.addCell(cell1);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell2 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"用户行为"</span>, contentFont));</span><br><span class="line">            setStyle(cell2);</span><br><span class="line">            table.addCell(cell2);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell3 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"IP地址"</span>, contentFont));</span><br><span class="line">            setStyle(cell3);</span><br><span class="line">            table.addCell(cell3);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell5 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"系统OS"</span>, contentFont));</span><br><span class="line">            setStyle(cell5);</span><br><span class="line">            table.addCell(cell5);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell6 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"浏览器OS"</span>, contentFont));</span><br><span class="line">            setStyle(cell6);</span><br><span class="line">            table.addCell(cell6);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell7 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"状态"</span>, contentFont));</span><br><span class="line">            setStyle(cell7);</span><br><span class="line">            table.addCell(cell7);</span><br><span class="line"></span><br><span class="line">            PdfPCell cell8 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(<span class="string">"操作时间"</span>, contentFont));</span><br><span class="line">            cell8.setRowspan(<span class="number">2</span>);</span><br><span class="line">            cell8.setColspan(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">this</span>.setCommonStyle(cell8);</span><br><span class="line">            table.addCell(cell8);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置表格内容</span></span><br><span class="line">            <span class="keyword">int</span> size = logs.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                LoginLog log = logs.get(i);</span><br><span class="line"></span><br><span class="line">                PdfPCell cell_1 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(log.getUsername(), contentFont));</span><br><span class="line">                setContentStyle(cell_1);</span><br><span class="line">                table.addCell(cell_1);</span><br><span class="line">                PdfPCell cell_2 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(BlogConstants.LOGIN.equals(log.getOperType()) ? <span class="string">"登录"</span> : <span class="string">"退出"</span>, contentFont));</span><br><span class="line">                setContentStyle(cell_2);</span><br><span class="line">                table.addCell(cell_2);</span><br><span class="line">                PdfPCell cell_3 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(log.getLoginIp(), contentFont));</span><br><span class="line">                setContentStyle(cell_3);</span><br><span class="line">                table.addCell(cell_3);</span><br><span class="line">                PdfPCell cell_4 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(log.getLoginComputerOs(), contentFont));</span><br><span class="line">                setContentStyle(cell_4);</span><br><span class="line">                table.addCell(cell_4);</span><br><span class="line">                PdfPCell cell_5 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(log.getLoginBrowser(), contentFont));</span><br><span class="line">                setContentStyle(cell_5);</span><br><span class="line">                table.addCell(cell_5);</span><br><span class="line">                PdfPCell cell_6 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(log.getSuccess() ? <span class="string">"成功"</span> : <span class="string">"失败"</span>, contentFont));</span><br><span class="line">                setContentStyle(cell_6);</span><br><span class="line">                table.addCell(cell_6);</span><br><span class="line">                PdfPCell cell_7 = <span class="keyword">new</span> PdfPCell(<span class="keyword">new</span> Phrase(DateUtil.format(log.getGmtCreate(), DatePattern.NORM_DATETIME_PATTERN), contentFont));</span><br><span class="line">                <span class="comment">// 占几列</span></span><br><span class="line">                cell_7.setColspan(<span class="number">2</span>);</span><br><span class="line">                <span class="comment">// 水平垂直居中</span></span><br><span class="line">                <span class="keyword">this</span>.setCommonStyle(cell_7);</span><br><span class="line">                table.addCell(cell_7);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//  添加表格</span></span><br><span class="line">            document.add(table);</span><br><span class="line">            document.close();</span><br><span class="line">            log.info(<span class="string">" ==&gt; pdf文件导出成功,文件路径: {}"</span>, realPath);</span><br><span class="line">            <span class="keyword">return</span> realPath;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">" ==&gt; pdf文件导出异常: {}"</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.EXCEL_DATA_EXPORT_ERROR);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置页面文字水印(暂未生效,不太理解)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> realPath     PDF文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream PDF新的输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waterMark    水印文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> DocumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPageTextWatermark</span><span class="params">(String realPath, FileOutputStream outputStream, String waterMark)</span> <span class="keyword">throws</span> IOException, DocumentException </span>{</span><br><span class="line">        <span class="comment">// 重新读取生成的pdf文件,设置水印后,再重新导出pdf</span></span><br><span class="line">        PdfReader reader = <span class="keyword">new</span> PdfReader(realPath);</span><br><span class="line">        PdfStamper stamper = <span class="keyword">new</span> PdfStamper(reader, outputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加文字水印</span></span><br><span class="line">        PdfContentByte over = stamper.getOverContent(<span class="number">1</span>);</span><br><span class="line">        over.beginText();</span><br><span class="line">        BaseFont overBf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI,</span><br><span class="line">                BaseFont.EMBEDDED);</span><br><span class="line">        over.setFontAndSize(overBf, <span class="number">26</span>);</span><br><span class="line">        over.setTextMatrix(<span class="number">30f</span>, <span class="number">30f</span>);</span><br><span class="line">        over.showTextAligned(Element.ALIGN_LEFT, waterMark, <span class="number">230</span>, <span class="number">430</span>, <span class="number">45</span>);</span><br><span class="line">        over.endText();</span><br><span class="line"></span><br><span class="line">        reader.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置头部标题单元格格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setStyle</span><span class="params">(PdfPCell cell)</span> </span>{</span><br><span class="line">        <span class="comment">// 占几行几列</span></span><br><span class="line">        cell.setRowspan(<span class="number">2</span>);</span><br><span class="line">        cell.setColspan(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.setCommonStyle(cell);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容单元格格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContentStyle</span><span class="params">(PdfPCell cell)</span> </span>{</span><br><span class="line">        <span class="comment">// 占几列</span></span><br><span class="line">        cell.setColspan(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.setCommonStyle(cell);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置通用单元格格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCommonStyle</span><span class="params">(PdfPCell cell)</span> </span>{</span><br><span class="line">        <span class="comment">// 水平垂直居中</span></span><br><span class="line">        cell.setVerticalAlignment(Element.ALIGN_CENTER);</span><br><span class="line">        cell.setHorizontalAlignment(Element.ALIGN_CENTER);</span><br><span class="line">        <span class="comment">// 固定行高</span></span><br><span class="line">        cell.setFixedHeight(<span class="number">20</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://i.loli.net/2021/05/24/uSjR24PvBDkomGg.gif" alt="燥起来"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义注解</title>
    <url>/JAVA/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="SpringBoot自定义注解"><a href="#SpringBoot自定义注解" class="headerlink" title="SpringBoot自定义注解"></a>SpringBoot自定义注解</h2><blockquote>
<p>主要是要学会并理解注解对象中的几个注解的含义</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.METHOD, ElementType.TYPE})</span>  <span class="comment">// 注解放置的目标位置</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">// 注解在哪个阶段执行</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperatingLog {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">operType</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">operDesc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><blockquote>
<p>注解的作用目标</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span>——接口、类、枚举、注解</span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span>——字段、枚举的常量</span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>——方法</span><br><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span>——方法参数</span><br><span class="line"><span class="meta">@Target(ElementType.CONSTRUCTOR)</span>&nbsp;——构造函数</span><br><span class="line"><span class="meta">@Target(ElementType.LOCAL_VARIABLE)</span>——局部变量</span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span>——注解</span><br><span class="line"><span class="meta">@Target(ElementType.PACKAGE)</span>——包</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><blockquote>
<p>注解的保留位置</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">RetentionPolicy.SOURCE:这种类型的Annotations只在源代码级别保留,编译时就会被忽略,在<span class="class"><span class="keyword">class</span>字节码文件中不包含。</span></span><br><span class="line">RetentionPolicy.CLASS:这种类型的Annotations编译时被保留,默认的保留策略,在class文件中存在,但JVM将会忽略,运行时无法获得。</span><br><span class="line">RetentionPolicy.RUNTIME:这种类型的Annotations将被JVM保留,所以他们能在运行时被JVM或其他使用反射机制的代码所读取和使用。(一般来说，使用这种类型)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h3><blockquote>
<p>说明该注解将被包含在<code>javadoc</code>中,也就是鼠标放上去出现的解释说明中</p>
</blockquote>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><blockquote>
<p>说明子类可以继承父类中的该注解 （一般不使用）</p>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot整合Shiro(MD5盐值加密)</title>
    <url>/JAVA/Springboot%E6%95%B4%E5%90%88Shiro(MD5%E7%9B%90%E5%80%BC%E5%8A%A0%E5%AF%86)/</url>
    <content><![CDATA[<h2 id="Springboot整合Shiro-MD5盐值加密"><a href="#Springboot整合Shiro-MD5盐值加密" class="headerlink" title="Springboot整合Shiro(MD5盐值加密)"></a>Springboot整合Shiro(MD5盐值加密)</h2><ol>
<li>引入pom依赖<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引入thymeleaf和shiro整合的部分依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--shiro整合ehcache缓存(和启动器中的同名依赖不一样)--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>编写配置类MyShiroConfig<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">		<span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码匹配凭证管理器（shiro的内置MD5+salt盐值加密）</span></span><br><span class="line"><span class="comment">     * MD5算法：算法不可逆，如果内容相同，无论做多少次MD5算法生成的结果始终一致，多用于加密和签名校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "hashedCredentialsMatcher")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>{</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//指定加密方式</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        <span class="comment">//设置加密次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//设置编码方式：true:hex编码，false:base64编码</span></span><br><span class="line">        credentialsMatcher.setStoredCredentialsHexEncoded(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存管理器（最简单的，全部按照默认配置，没有做自定义的一些缓存逻辑）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "ehCacheManager")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">ehCacheManager</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建自定义realm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashedCredentialsMatcher</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "myShiroRealm")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyShiroRealm <span class="title">myShiroRealm</span><span class="params">(<span class="meta">@Qualifier("hashedCredentialsMatcher")</span> HashedCredentialsMatcher hashedCredentialsMatcher,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@Qualifier("ehCacheManager")</span> EhCacheManager ehCacheManager)</span> </span>{</span><br><span class="line">        MyShiroRealm myShiroRealm = <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">        <span class="comment">//设置密码校验匹配器</span></span><br><span class="line">        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher);</span><br><span class="line">        <span class="comment">//开启shiro的缓存管理:开启之后，当页面遇到授权的校验时，就不会再走一遍MyShiroRealm中的授权方法，否则每次都要走，耗费资源</span></span><br><span class="line">        myShiroRealm.setCacheManager(ehCacheManager);</span><br><span class="line">        myShiroRealm.setCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//下面的写不写都行（主要用于与shiro-ehcache.xml配置文件搭配）</span></span><br><span class="line">        myShiroRealm.setAuthenticationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        myShiroRealm.setAuthenticationCacheName(<span class="string">"authenticationCache"</span>);</span><br><span class="line">        myShiroRealm.setAuthorizationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        myShiroRealm.setAuthorizationCacheName(<span class="string">"authorizationCache"</span>);</span><br><span class="line">        <span class="keyword">return</span> myShiroRealm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建安全管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> myShiroRealm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "defaultWebSecurityManager")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier("myShiroRealm")</span> MyShiroRealm myShiroRealm)</span> </span>{</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//给安全管理器设置自定义realm</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(myShiroRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier("defaultWebSecurityManager")</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>{</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置允许访问(后续会添加...)</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//用户注册</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/registered"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//异步请求路径验证</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/login/checkUser"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/login/checkPass"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/echarts"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//权限控制放行</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/category"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/tags"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/comments"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/link"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//异步请求发送验证码</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/code"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//管理员权限限定（后续添加普通用户的权限限定）</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/category/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/tags/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/comments/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/link/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        <span class="comment">//限制系统应用访问</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/swagger"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/access"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/druid"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/user"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/excel"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/logExcel"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/logs"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        <span class="comment">//设置权限认证路径</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">//登录页面访问路径</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/admin"</span>);</span><br><span class="line">        <span class="comment">//访问受限：未授权跳转路径</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/admin/unauthorized"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 整合ShiroDialect：避免整合thymeleaf和shiro报错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>编写认证授权规则类MyShiroRealm<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">		<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录授权（后续增加权限控制）</span></span><br><span class="line"><span class="comment">     * 当用户访问需要权限才能访问的路径时，调用此方法为用户设置相关的权限，若权限不够，则跳转到401.html页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>{</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//获取当前认证用户的信息（从认证哪里传递过来的用户信息）</span></span><br><span class="line">        User currentUser = (User) principals.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//授予当前用户(管理员)相关权限[user:admin]</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>{</span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line">        User currentUser = userMapper.selectOne(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">"username"</span>, userToken.getUsername()));</span><br><span class="line">        <span class="comment">//返回null,shiro会自动响应异常</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//当前用户信息存入session(用于前端调用)</span></span><br><span class="line">        SecurityUtils.getSubject().getSession().setAttribute(<span class="string">"loginUser"</span>, currentUser);</span><br><span class="line">        <span class="comment">//自定义盐值(将用户名作为盐值)</span></span><br><span class="line">        ByteSource salt = ByteSource.Util.bytes(currentUser.getUsername());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * currentUser:将用户信息传递给后面的授权操作</span></span><br><span class="line"><span class="comment">        * currentUser.getPassword():密码Shiro框架自己认证,（MyShiroConfig配置类中自定义传入MD5加密）</span></span><br><span class="line"><span class="comment">        * salt:传入自定义的盐值</span></span><br><span class="line"><span class="comment">        * this.getRealm():此自定义realm的唯一标识符，一般是固定的，没有特别的意义</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(currentUser, currentUser.getPassword(), salt, <span class="keyword">this</span>.getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>MD5盐值加密工具(utils)<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5ShiroUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成MD5密码：用于登录验证</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> username:用于作为随即盐salt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MD5Code</span><span class="params">(String username, String password)</span> </span>{</span><br><span class="line">      String hashAlgorithName = <span class="string">"MD5"</span>;</span><br><span class="line">      <span class="keyword">int</span> hashInteractions = <span class="number">1024</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SimpleHash(hashAlgorithName,password, ByteSource.Util.bytes(username),hashInteractions).toHex();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></li>
<li>login登录验证<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = "/login")</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam("username")</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="meta">@RequestParam("password")</span> String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                      RedirectAttributes redirectAttributes, Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                      HttpServletRequest request)</span> </span>{</span><br><span class="line">      <span class="comment">/*获取当前用户的信息并封装*/</span></span><br><span class="line">      UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">      Subject subject = SecurityUtils.getSubject();</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">          subject.login(token);</span><br><span class="line">          <span class="comment">//登录后首先进行验证码验证</span></span><br><span class="line">          model.addAttribute(<span class="string">"image"</span>, avatar);</span><br><span class="line">          <span class="keyword">if</span> (!KaptchaUtils.checkVerifyCode(request)) {</span><br><span class="line">              redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"验证码错误"</span>);</span><br><span class="line">              <span class="keyword">return</span> <span class="string">"redirect:/admin"</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"admin/index"</span>;</span><br><span class="line">      } <span class="keyword">catch</span> (UnknownAccountException e) { <span class="comment">//注意：下面如果是重定向，这里不适用Model，而是使用RedirectAttribute</span></span><br><span class="line">          redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"用户名不存在"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"redirect:/admin"</span>;</span><br><span class="line">      } <span class="keyword">catch</span> (IncorrectCredentialsException e) {</span><br><span class="line">          redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"redirect:/admin"</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<strong>到此基本简单配置成功…</strong></li>
</ol>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring开启@Async异步调用</title>
    <url>/JAVA/Spring%E5%BC%80%E5%90%AF@Async%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Spring开启-Async异步调用"><a href="#Spring开启-Async异步调用" class="headerlink" title="Spring开启@Async异步调用"></a>Spring开启@Async异步调用</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote>
<p>开启<code>@EanableAsync</code>注解: 在主启动类上或者配置类上开启都可以</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步调用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAsyncApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringbootAsyncApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><blockquote>
<p>@Async注解的异步调用，使用的是默认的线程池，但是我们可以自定义，指定线程池的各项参数</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义<span class="doctag">@Async</span>异步方法的线程池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/26 11:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorConfig</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("customAsync")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">customAsync</span><span class="params">()</span> </span>{</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// 核心线程数: 线程池创建时候初始化的线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 线程池最大的线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 缓冲队列</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 允许线程的空闲时间60秒：当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">// 线程池的前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"AsyncExecutor-"</span>);</span><br><span class="line">        <span class="comment">// 线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建基于-Async的异步方法"><a href="#创建基于-Async的异步方法" class="headerlink" title="创建基于@Async的异步方法"></a>创建基于@Async的异步方法</h3><blockquote>
<p>只需要在<code>@Async</code>注解上指定自定义线程池的名称，就可以使用刚刚创建的线程池</p>
</blockquote>
<h4 id="基于-Async无返回值调用"><a href="#基于-Async无返回值调用" class="headerlink" title="基于@Async无返回值调用"></a>基于@Async无返回值调用</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于<span class="doctag">@Async</span>无返回值调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Async("customAsync")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncVoidReturnType</span><span class="params">()</span> </span>{</span><br><span class="line">    String currentThreadName = Thread.currentThread().getName();</span><br><span class="line">    StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    watch.start();</span><br><span class="line">    logger.info(<span class="string">" ==&gt; 当前线程 {} 开始执行无返回值调用"</span>, currentThreadName);</span><br><span class="line">    <span class="comment">// 模拟休眠</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) {</span><br><span class="line">        sum += i;</span><br><span class="line">    }</span><br><span class="line">    watch.stop();</span><br><span class="line">    logger.info(<span class="string">" ==&gt; 执行耗时: {}ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="基于-Async有返回值调用"><a href="#基于-Async有返回值调用" class="headerlink" title="基于@Async有返回值调用"></a>基于@Async有返回值调用</h4><blockquote>
<p>返回的数据类型为<code>Future</code>类型，其为一个接口。具体的结果类型为<code>AsyncResult</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于<span class="doctag">@Async</span>有返回值调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Async("customAsync")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;Object&gt; <span class="title">asyncWithReturnType</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        String currentThreadName = Thread.currentThread().getName();</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 当前线程 {} 开始执行有返回值调用"</span>, currentThreadName);</span><br><span class="line">        <span class="comment">// 休眠2秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        watch.stop();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 执行耗时: {}ms"</span>, watch.getTotalTimeSeconds());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"welcome to hangzhou!"</span>);</span><br><span class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        logger.error(<span class="string">" ==&gt; 方法调用异常: {}"</span>, e.getMessage());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/26 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/async")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumeController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ConsumeController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncProvider asyncProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/void")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeVoid</span><span class="params">()</span> </span>{</span><br><span class="line">        String currentThreadName = Thread.currentThread().getName();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 当前线程: {}"</span>, currentThreadName);</span><br><span class="line">        asyncProvider.asyncVoidReturnType();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/with")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeWith</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String currentThreadName = Thread.currentThread().getName();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 当前线程: {}"</span>, currentThreadName);</span><br><span class="line">        Future&lt;Object&gt; result = asyncProvider.asyncWithReturnType();</span><br><span class="line">        <span class="comment">// 循环读取: 判断异步线程是否执行完毕,并获取返回结果</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (result.isDone()) {</span><br><span class="line">                System.out.println(<span class="string">"异步结果返回: "</span> + result.get());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">无返回值的调用<span class="number">1</span>次</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">21.489</span>  INFO <span class="number">13476</span> --- [nio-<span class="number">8999</span>-exec-<span class="number">3</span>] c.h.async.controller.ConsumeController   :  ==&gt; 当前线程: http-nio-<span class="number">8999</span>-exec-<span class="number">3</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">21.491</span>  INFO <span class="number">13476</span> --- [AsyncExecutor-<span class="number">3</span>] com.horse.async.service.AsyncProvider    :  ==&gt; 当前线程 AsyncExecutor-<span class="number">3</span> 开始执行无返回值调用</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">21.492</span>  INFO <span class="number">13476</span> --- [AsyncExecutor-<span class="number">3</span>] com.horse.async.service.AsyncProvider    :  ==&gt; 执行耗时: 1ms</span><br><span class="line"></span><br><span class="line">有返回值的调用<span class="number">2</span>次</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">23.331</span>  INFO <span class="number">13476</span> --- [nio-<span class="number">8999</span>-exec-<span class="number">4</span>] c.h.async.controller.ConsumeController   :  ==&gt; 当前线程: http-nio-<span class="number">8999</span>-exec-<span class="number">4</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">23.331</span>  INFO <span class="number">13476</span> --- [AsyncExecutor-<span class="number">4</span>] com.horse.async.service.AsyncProvider    :  ==&gt; 当前线程 AsyncExecutor-<span class="number">4</span> 开始执行有返回值调用</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">25.347</span>  INFO <span class="number">13476</span> --- [AsyncExecutor-<span class="number">4</span>] com.horse.async.service.AsyncProvider    :  ==&gt; 执行耗时: <span class="number">2.</span>0148967ms</span><br><span class="line">异步结果返回: welcome to hangzhou!</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">30.737</span>  INFO <span class="number">13476</span> --- [nio-<span class="number">8999</span>-exec-<span class="number">6</span>] c.h.async.controller.ConsumeController   :  ==&gt; 当前线程: http-nio-<span class="number">8999</span>-exec-<span class="number">6</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">30.738</span>  INFO <span class="number">13476</span> --- [AsyncExecutor-<span class="number">5</span>] com.horse.async.service.AsyncProvider    :  ==&gt; 当前线程 AsyncExecutor-<span class="number">5</span> 开始执行有返回值调用</span><br><span class="line"><span class="number">2021</span>-<span class="number">05</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">32.746</span>  INFO <span class="number">13476</span> --- [AsyncExecutor-<span class="number">5</span>] com.horse.async.service.AsyncProvider    :  ==&gt; 执行耗时: <span class="number">2.</span>0086615ms</span><br><span class="line">异步结果返回: welcome to hangzhou!</span><br></pre></td></tr></tbody></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p><code>@Async</code>注解失效问题注意点：</p>
<ul>
<li>查看是否开启<code>EnableAsync</code>注解服务</li>
<li>注解的方法必须是public方法，不能是static</li>
<li>在定义异步方法的同一个类中，调用带有<code>@Async</code>注解方法，该方法则无法异步执行<ul>
<li>原因：没有走Spring的代理类。因为@Transactional和@Async注解的实现都是基于Spring的AOP，而AOP的实现是基于动态代理模式实现的。那么注解失效的原因就很明显了，有可能因为调用方法的是对象本身而不是代理对象，因为没有经过Spring容器管理。</li>
</ul>
</li>
</ul>
<p><code>@Async</code>中的事务失效问题处理</p>
<p>解决方法：可以将需要事务管理操作的方法放置到异步方法内部，在内部被调用的方法上添加@Transactional</p>
<p>例如：</p>
<ul>
<li>方法A，同时使用了@Async和@Transactional来标注，但是无法产生事务控制的目的</li>
<li><strong>方法B，使用了@Async来标注，  B中调用了C、D，C/D抽离封装出来，分别使用@Transactional做了标注，则可实现事务控制的目的</strong></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Async</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal的基本使用</title>
    <url>/JAVA/ThreadLocal%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="ThreadLocal的基本使用"><a href="#ThreadLocal的基本使用" class="headerlink" title="ThreadLocal的基本使用"></a>ThreadLocal的基本使用</h2><blockquote>
<p>主要是用于线程值传递和多线程中变量不共享控制</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 使用ThreadLocal线程局部变量来传递程序执行时间变量: startTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/26 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyInterceptor.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建线程局部变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 程序开始执行,startTime: {}"</span>, startTime);</span><br><span class="line">        <span class="comment">// 设置线程局部变量的值</span></span><br><span class="line">        threadLocal.set(startTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 通过ThreadLocal局部变量获取程序执行开始时间: startTime</span></span><br><span class="line">        <span class="keyword">long</span> startTime = (<span class="keyword">long</span>) threadLocal.get();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 程序执行结束,startTime: {}"</span>, startTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 程序执行耗时: {}ms"</span>, endTime - startTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程使用完毕后,手动清除,避免内存泄露</span></span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>ThreadLocal</tag>
      </tags>
  </entry>
  <entry>
    <title>java常见关键字简析</title>
    <url>/JAVA/java%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<h2 id="java常见关键字简析"><a href="#java常见关键字简析" class="headerlink" title="java常见关键字简析"></a>java常见关键字简析</h2><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><blockquote>
<p>final关键字，意思是最终的、不可修改的，最见不得变化 ，用来修饰类、方法和变量</p>
</blockquote>
<ol>
<li><p>final修饰的类不能被继承，final类中的所有成员方法都会被隐式的指定为final方法；</p>
</li>
<li><p>final修饰的方法不能被重写；</p>
</li>
<li><p>final修饰的变量是常量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能让其指向另一个对象。</p>
</li>
</ol>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SuperClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperClass</span><span class="params">(Integer score)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        logger.info(<span class="string">"父类有参构造函数执行 ==&gt; "</span> + score);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customFunc</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            score += i;</span><br><span class="line">        }</span><br><span class="line">        logger.info(<span class="string">"score ==&gt; "</span> + score);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Item().itemFunc();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">SuperClass</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// 在之类的构造函数中调用父类的构造函数,该语句必须处于构造器的首行，否则编译器会报错</span></span><br><span class="line">            <span class="keyword">super</span>(<span class="number">200</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 测试在子类中使用 super关键字 访问父类的成员变量和方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">itemFunc</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>.score = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">super</span>.customFunc();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">12</span>:<span class="number">10.573</span> [main] INFO com.topsun.keyword.SuperClass - 父类有参构造函数执行 ==&gt; <span class="number">200</span></span><br><span class="line"><span class="number">15</span>:<span class="number">12</span>:<span class="number">10.576</span> [main] INFO com.topsun.keyword.SuperClass - score ==&gt; <span class="number">5150</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><blockquote>
<p>实例化对象执行顺序: 静态代码块 —&gt; 非静态代码块 —&gt; 构造函数<br>静态代码块: 只要这个类被使用或者被实例化的时候就会执行,但是只执行一次 [主动执行]<br>非静态代码块: 对象被实例化多少次,就被调用多少次 [被动执行]</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticClass</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(StaticClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticClass</span><span class="params">()</span> </span>{</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 默认构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    {</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 非静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        StaticClass.func();</span><br><span class="line">        StaticClass.func();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>{</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 静态方法中的内容"</span>);</span><br><span class="line">        {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 静态方法中的非静态代码块"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">40</span>:<span class="number">58.094</span> [main] INFO com.topsun.keyword.StaticClass -  ==&gt; 静态代码块  <span class="comment">// 只被执行一次</span></span><br><span class="line"><span class="number">15</span>:<span class="number">40</span>:<span class="number">58.096</span> [main] INFO com.topsun.keyword.StaticClass -  ==&gt; 非静态代码块</span><br><span class="line"><span class="number">15</span>:<span class="number">40</span>:<span class="number">58.096</span> [main] INFO com.topsun.keyword.StaticClass -  ==&gt; 默认构造方法</span><br><span class="line"><span class="number">15</span>:<span class="number">40</span>:<span class="number">58.096</span> [main] INFO com.topsun.keyword.StaticClass -  ==&gt; 非静态代码块</span><br><span class="line"><span class="number">15</span>:<span class="number">40</span>:<span class="number">58.096</span> [main] INFO com.topsun.keyword.StaticClass -  ==&gt; 默认构造方法</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>logback-spring.xml动态读取yml文件日志路径</title>
    <url>/JAVA/logback-spring.xml%E5%8A%A8%E6%80%81%E8%AF%BB%E5%8F%96yml%E6%96%87%E4%BB%B6%E6%97%A5%E5%BF%97%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="SpringBoot中logback-spring-xml动态读取yml文件日志路径"><a href="#SpringBoot中logback-spring-xml动态读取yml文件日志路径" class="headerlink" title="SpringBoot中logback-spring.xml动态读取yml文件日志路径"></a>SpringBoot中logback-spring.xml动态读取yml文件日志路径</h1><blockquote>
<p>注意事项：</p>
<ul>
<li>logback.xml的加载顺序早于springboot的application.yml ，所以按照官方的建议，文件名命名为<code>logback-spring.xml</code></li>
<li>需要使用spring官方提供的标签<code>&lt;springProperty&gt; &lt;/springProperty&gt;</code></li>
<li>source属性不需要 <code>${}</code>符号，直接写yml文件中的配置名称即可</li>
</ul>
</blockquote>
<p>yml配置信息</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># logback-spring.xml配置动态日志路径</span></span><br><span class="line"><span class="attr">logback:</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">    <span class="attr">dev:</span> <span class="string">E:/HorseVueBlog/horse_vue_blog/horse_vue_blog/service/blog_service/src/log</span></span><br><span class="line">    <span class="attr">prod:</span> <span class="string">/home/play/logs</span></span><br></pre></td></tr></tbody></table></figure>
<p>logback-spring.xml配置</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--动态配置日志输出路径: 从yml配置文件读取--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dev环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">source</span>=<span class="string">"logback.path.dev"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--prod环境--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;springProperty scope="context" name="log.path" source="logback.path.prod"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台日志格式：彩色日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件日志格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%date{yyyy-MM-dd HH:mm:ss} |%-5level |%thread |%file:%line |%logger |%msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ENCODING"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--自定义：日志级别--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>${CONSOLE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志字符集--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志过滤器：此日志文件只记录INFO级别的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${FILE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志过滤器：此日志文件只记录WARN级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${FILE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志过滤器：此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${FILE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以灵活设置此处，从而控制日志的输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>try catch finally语句中含有return语句的执行情况</title>
    <url>/JAVA/try%20catch%20finally%E8%AF%AD%E5%8F%A5%E4%B8%AD%E5%90%AB%E6%9C%89return%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h1 id="try-catch-finally语句中含有return语句的执行情况"><a href="#try-catch-finally语句中含有return语句的执行情况" class="headerlink" title="try catch finally语句中含有return语句的执行情况"></a>try catch finally语句中含有return语句的执行情况</h1><h2 id="try和finally中均有return"><a href="#try和finally中均有return" class="headerlink" title="try和finally中均有return"></a>try和finally中均有return</h2><blockquote>
<p>分析：try中的return语句执行后面的表达式后，会把值暂时存储起来，接着去执行finall中的语句，如果finally中存在return语句，那么将会覆盖掉try的return语句，所以官网不推荐在finally中执行return语句。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryFinallyReturnTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TryFinallyReturnTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = TryFinallyReturnTest.test01();</span><br><span class="line">        logger.info(<span class="string">"count:{}"</span>, count);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * try和finally中都存在return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test01</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行try"</span>);</span><br><span class="line">            <span class="keyword">return</span> count += <span class="number">90</span>;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行catch"</span>);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行finally"</span>);</span><br><span class="line">            count = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">27</span>:<span class="number">45.149</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest -  ==&gt; 执行<span class="keyword">try</span></span><br><span class="line"><span class="number">21</span>:<span class="number">27</span>:<span class="number">45.151</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest -  ==&gt; 执行<span class="keyword">finally</span></span><br><span class="line"><span class="number">21</span>:<span class="number">27</span>:<span class="number">45.151</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest - count:<span class="number">200</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="finally中改变返回基本数据类型值"><a href="#finally中改变返回基本数据类型值" class="headerlink" title="finally中改变返回基本数据类型值"></a>finally中改变返回基本数据类型值</h2><blockquote>
<p>分析：如果return的数据是基本数据类型，则在finally中对该基本数据的改变不起作用，try中的return语句依然会返回进入finally块之前保留的值。</p>
<p>内存解释：<code>return count+90</code> 语句其实是在栈里新开辟了一块空间，然后把<code>count</code>的值赋给了新开辟的空间，所以赋值完毕后，<code>count</code>的值怎么变不影响返回值。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryFinallyReturnTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TryFinallyReturnTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = TryFinallyReturnTest.test02();</span><br><span class="line">        logger.info(<span class="string">"count:{}"</span>, count);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在finally中给count重新赋值,测试能不能改变count的值,答案是否定的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test02</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行try"</span>);</span><br><span class="line">            <span class="keyword">return</span> count + <span class="number">90</span>;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行catch"</span>);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行finally,只改变值,不return"</span>);</span><br><span class="line">            count = <span class="number">200</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">51</span>:<span class="number">27.864</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest -  ==&gt; 执行<span class="keyword">try</span></span><br><span class="line"><span class="number">21</span>:<span class="number">51</span>:<span class="number">27.866</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest -  ==&gt; 执行<span class="keyword">finally</span>,只改变值,不<span class="keyword">return</span></span><br><span class="line"><span class="number">21</span>:<span class="number">51</span>:<span class="number">27.866</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest - count:<span class="number">100</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="finally中改变返回引用数据类型值"><a href="#finally中改变返回引用数据类型值" class="headerlink" title="finally中改变返回引用数据类型值"></a>finally中改变返回引用数据类型值</h2><blockquote>
<p><strong>测试的时候，需要考虑引用数据类型（Integer）和基本数据类型(int)的自动拆箱操作。</strong></p>
<p>分析：如果return的数据是引用数据类型，而在finally中对该引用数据类型的属性值的改变起作用，try中的return语句返回的就是在finally中改变后的该属性的值。</p>
<p>内存解释：return语句会新开辟一个空间，将值赋给新开辟的新开辟的空间。但是<code>builder</code>是引用类型，finally中是对<code>builder</code>指向的对象进行操作，那么肯定会影响到返回值，因为他们指向同一块内存空间。所以可以改变引用数据类型的值。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryFinallyReturnTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(TryFinallyReturnTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        StringBuilder count = TryFinallyReturnTest.test03();</span><br><span class="line">        logger.info(<span class="string">"count:{}"</span>, count);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">test03</span><span class="params">()</span> </span>{</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"ab"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行try"</span>);</span><br><span class="line">            <span class="keyword">return</span> builder.append(<span class="string">"ef"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行catch"</span>);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 执行finally,只改变值,不return"</span>);</span><br><span class="line">            builder.append(<span class="string">"cd"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">52.649</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest -  ==&gt; 执行<span class="keyword">try</span></span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">52.651</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest -  ==&gt; 执行<span class="keyword">finally</span>,只改变值,不<span class="keyword">return</span></span><br><span class="line"><span class="number">21</span>:<span class="number">55</span>:<span class="number">52.651</span> [main] INFO com.topsun.runOrder.TryFinallyReturnTest - count:abefcd</span><br></pre></td></tr></tbody></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ul>
<li>函数执行到try里面的内容，一定会执行finally里面的语句块，除非try里面有类似System.exit(0)的方法</li>
<li>try语句在返回前，将其他所有的操作执行完，保留好要返回的值，而后转入执行finally中的语句，而后分为以下三种情况：<ul>
<li>情况一：如果finally中有return语句，则会将try中的return语句”覆盖“掉，直接执行finally中的return语句，得到返回值，这样便无法得到try之前保留好的返回值。</li>
<li>情况二：如果finally中没有return语句，也没有改变要返回值，则执行完finally中的语句后，会接着执行try中的return语句，返回之前保留的值。</li>
<li>情况三：如果finally中没有return语句，<code>但是改变了要返回的值</code>，这里有点类似与引用传递和值传递的区别，分以下两种情况：<ul>
<li>如果return的数据是基本数据类型或文本字符串，则在finally中对该<code>基本数据</code>的改变不起作用，try中的return语句依然会返回进入finally块之前保留的值。</li>
<li>如果return的数据是引用数据类型，而在finally中对该<code>引用数据类型</code>的属性值的改变起作用，try中的return语句返回的就是在finally中改变后的该属性的值。</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>项目响应策略</title>
    <url>/JAVA/%E7%BB%9F%E4%B8%80%E5%93%8D%E5%BA%94%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="具体步骤如下所示："><a href="#具体步骤如下所示：" class="headerlink" title="具体步骤如下所示："></a>具体步骤如下所示：</h2><blockquote>
<p>创建返回结果枚举类ResultCodeEnum</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCodeEnum</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 状态码和响应消息根据业务来进行定制</span></span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="keyword">true</span>, <span class="number">20000</span>,<span class="string">"成功"</span>),</span><br><span class="line">    UNKNOWN_REASON(<span class="keyword">false</span>, <span class="number">20001</span>, <span class="string">"未知错误"</span>),</span><br><span class="line"></span><br><span class="line">    BAD_SQL_GRAMMAR(<span class="keyword">false</span>, <span class="number">21001</span>, <span class="string">"sql语法错误"</span>),</span><br><span class="line">    JSON_PARSE_ERROR(<span class="keyword">false</span>, <span class="number">21002</span>, <span class="string">"json解析异常"</span>),</span><br><span class="line">    PARAM_ERROR(<span class="keyword">false</span>, <span class="number">21003</span>, <span class="string">"参数不正确"</span>),</span><br><span class="line"></span><br><span class="line">    FILE_UPLOAD_ERROR(<span class="keyword">false</span>, <span class="number">21004</span>, <span class="string">"文件上传错误"</span>),</span><br><span class="line">    FILE_DELETE_ERROR(<span class="keyword">false</span>, <span class="number">21005</span>, <span class="string">"文件刪除错误"</span>),</span><br><span class="line">    EXCEL_DATA_IMPORT_ERROR(<span class="keyword">false</span>, <span class="number">21006</span>, <span class="string">"Excel数据导入错误"</span>),</span><br><span class="line"></span><br><span class="line">    VIDEO_UPLOAD_ALIYUN_ERROR(<span class="keyword">false</span>, <span class="number">22001</span>, <span class="string">"视频上传至阿里云失败"</span>),</span><br><span class="line">    VIDEO_UPLOAD_TOMCAT_ERROR(<span class="keyword">false</span>, <span class="number">22002</span>, <span class="string">"视频上传至业务服务器失败"</span>),</span><br><span class="line">    VIDEO_DELETE_ALIYUN_ERROR(<span class="keyword">false</span>, <span class="number">22003</span>, <span class="string">"阿里云视频文件删除失败"</span>),</span><br><span class="line">    FETCH_VIDEO_UPLOADAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22004</span>, <span class="string">"获取上传地址和凭证失败"</span>),</span><br><span class="line">    REFRESH_VIDEO_UPLOADAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22005</span>, <span class="string">"刷新上传地址和凭证失败"</span>),</span><br><span class="line">    FETCH_PLAYAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22006</span>, <span class="string">"获取播放凭证失败"</span>),</span><br><span class="line"></span><br><span class="line">    URL_ENCODE_ERROR(<span class="keyword">false</span>, <span class="number">23001</span>, <span class="string">"URL编码失败"</span>),</span><br><span class="line">    ILLEGAL_CALLBACK_REQUEST_ERROR(<span class="keyword">false</span>, <span class="number">23002</span>, <span class="string">"非法回调请求"</span>),</span><br><span class="line">    FETCH_ACCESSTOKEN_FAILD(<span class="keyword">false</span>, <span class="number">23003</span>, <span class="string">"获取accessToken失败"</span>),</span><br><span class="line">    FETCH_USERINFO_ERROR(<span class="keyword">false</span>, <span class="number">23004</span>, <span class="string">"获取用户信息失败"</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="keyword">false</span>, <span class="number">23005</span>, <span class="string">"登录失败"</span>),</span><br><span class="line"></span><br><span class="line">    COMMENT_EMPTY(<span class="keyword">false</span>, <span class="number">24006</span>, <span class="string">"评论内容必须填写"</span>),</span><br><span class="line"></span><br><span class="line">    PAY_RUN(<span class="keyword">false</span>, <span class="number">25000</span>, <span class="string">"支付中"</span>),</span><br><span class="line">    PAY_UNIFIEDORDER_ERROR(<span class="keyword">false</span>, <span class="number">25001</span>, <span class="string">"统一下单错误"</span>),</span><br><span class="line">    PAY_ORDERQUERY_ERROR(<span class="keyword">false</span>, <span class="number">25002</span>, <span class="string">"查询支付结果错误"</span>),</span><br><span class="line"></span><br><span class="line">    ORDER_EXIST_ERROR(<span class="keyword">false</span>, <span class="number">25003</span>, <span class="string">"课程已购买"</span>),</span><br><span class="line"></span><br><span class="line">    GATEWAY_ERROR(<span class="keyword">false</span>, <span class="number">26000</span>, <span class="string">"服务不能访问"</span>),</span><br><span class="line"></span><br><span class="line">    CODE_ERROR(<span class="keyword">false</span>, <span class="number">28000</span>, <span class="string">"验证码错误"</span>),</span><br><span class="line"></span><br><span class="line">    LOGIN_PHONE_ERROR(<span class="keyword">false</span>, <span class="number">28009</span>, <span class="string">"手机号码不正确"</span>),</span><br><span class="line">    LOGIN_MOBILE_ERROR(<span class="keyword">false</span>, <span class="number">28001</span>, <span class="string">"账号不正确"</span>),</span><br><span class="line">    LOGIN_PASSWORD_ERROR(<span class="keyword">false</span>, <span class="number">28008</span>, <span class="string">"密码不正确"</span>),</span><br><span class="line">    LOGIN_DISABLED_ERROR(<span class="keyword">false</span>, <span class="number">28002</span>, <span class="string">"该用户已被禁用"</span>),</span><br><span class="line">    REGISTER_MOBLE_ERROR(<span class="keyword">false</span>, <span class="number">28003</span>, <span class="string">"手机号已被注册"</span>),</span><br><span class="line">    REQUEST_TOKEN_ERROR(<span class="keyword">false</span>, <span class="number">28008</span>, <span class="string">"请求token失败"</span>),</span><br><span class="line">    LOGIN_AUTH(<span class="keyword">false</span>, <span class="number">28004</span>, <span class="string">"需要登录"</span>),</span><br><span class="line">    LOGIN_ACL(<span class="keyword">false</span>, <span class="number">28005</span>, <span class="string">"没有权限"</span>),</span><br><span class="line">    SMS_SEND_ERROR(<span class="keyword">false</span>, <span class="number">28006</span>, <span class="string">"短信发送失败"</span>),</span><br><span class="line">    SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL(<span class="keyword">false</span>, <span class="number">28007</span>, <span class="string">"短信发送过于频繁"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(Boolean success, Integer code, String message) {</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>创建返回结果实体类R.class</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = "全局统一返回结果")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "是否成功")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回码")</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回消息")</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回数据")</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功:无数据返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R对象:可以链式调用此类的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">()</span></span>{</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.SUCCESS.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.SUCCESS.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误:无数据返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span></span>{</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.UNKNOWN_REASON.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.UNKNOWN_REASON.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.UNKNOWN_REASON.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功:响应枚举类自定义的状态码和消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCodeEnum  自定义枚举类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">setResult</span><span class="params">(ResultCodeEnum resultCodeEnum)</span></span>{</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(resultCodeEnum.getSuccess());</span><br><span class="line">        r.setCode(resultCodeEnum.getCode());</span><br><span class="line">        r.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">success</span><span class="params">(Boolean success)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">message</span><span class="params">(String message)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">code</span><span class="params">(Integer code)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(String key, Object value)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重载map类型的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>使用实例</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Api("后台管理讲师API")</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span>  <span class="comment">// 响应json类型数据</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin/edu/teacher")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("获取讲师列表")</span></span><br><span class="line">    <span class="meta">@GetMapping("/list")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;Teacher&gt; teachers = teacherService.list();</span><br><span class="line">        <span class="keyword">boolean</span> empty = CollectionUtils.isEmpty(teachers);</span><br><span class="line">        <span class="keyword">return</span> empty ? R.error().message(<span class="string">"资源未找到"</span>) : R.ok().data(<span class="string">"items"</span>, teachers);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩有趣API</title>
    <url>/JAVA/%E5%A5%BD%E7%8E%A9%E6%9C%89%E8%B6%A3API%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="API接口"><a href="#API接口" class="headerlink" title="API接口"></a>API接口</h2><h3 id="获取IP地理位置接口"><a href="#获取IP地理位置接口" class="headerlink" title="获取IP地理位置接口"></a>获取IP地理位置接口</h3><div class="table-container">
<table>
<thead>
<tr>
<th>请求类型</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td><a href="http://ip.geo.iqiyi.com/cityjson?format=json&amp;ip=121.5.168.31">http://ip.geo.iqiyi.com/cityjson?format=json&amp;ip=121.5.168.31</a></td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"code"</span>: <span class="string">"A00000"</span>,</span><br><span class="line"><span class="attr">"data"</span>: {</span><br><span class="line"><span class="attr">"country"</span>: <span class="string">"中国"</span>,</span><br><span class="line"><span class="attr">"province"</span>: <span class="string">"吉林"</span>,</span><br><span class="line"><span class="attr">"city"</span>: <span class="string">"长春"</span>,</span><br><span class="line"><span class="attr">"country_id"</span>: <span class="number">48</span>,</span><br><span class="line"><span class="attr">"province_id"</span>: <span class="number">21</span>,</span><br><span class="line"><span class="attr">"city_id"</span>: <span class="number">21001</span>,</span><br><span class="line"><span class="attr">"location_id"</span>: <span class="number">30021001</span>,</span><br><span class="line"><span class="attr">"isp_id"</span>: <span class="number">30</span>,</span><br><span class="line"><span class="attr">"isp"</span>: <span class="string">"方正宽带"</span>,</span><br><span class="line"><span class="attr">"longitude"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"latitude"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"ip"</span>: <span class="string">"121.5.168.31"</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>效率工具</category>
      </categories>
      <tags>
        <tag>Api</tag>
      </tags>
  </entry>
  <entry>
    <title>超好用Orika属性映射工具</title>
    <url>/JAVA/%E8%B6%85%E5%A5%BD%E7%94%A8Orika%E5%B1%9E%E6%80%A7%E6%98%A0%E5%B0%84%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="Orika属性映射工具"><a href="#Orika属性映射工具" class="headerlink" title="Orika属性映射工具"></a>Orika属性映射工具</h2><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--orika实例映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ma.glasnost.orika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="上干货"><a href="#上干货" class="headerlink" title="上干货"></a>上干货</h3><blockquote>
<p>封装的工具类：<code>OriUtils</code></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ma.glasnost.orika.MapperFacade;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.MapperFactory;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.impl.DefaultMapperFactory;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.metadata.ClassMapBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Orika封装的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/7/2 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrikaUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFactory FACTORY = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存实例集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MapperFacade&gt; cacheMapper = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MapperFacade mapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrikaUtils</span><span class="params">(MapperFacade mapper)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.mapper = mapper;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换实体函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceEntity 源实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass  目标类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> refMap       配置源类与目标类不同字段名映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;          源泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;          目标泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">T <span class="title">convert</span><span class="params">(S sourceEntity, Class&lt;T&gt; targetClass, Map&lt;String, String&gt; refMap)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (sourceEntity == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> classMap(sourceEntity.getClass(), targetClass, refMap).map(sourceEntity, targetClass);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换实体函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceEntity 源实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass  目标类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;          源泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;          目标泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">T <span class="title">convert</span><span class="params">(S sourceEntity, Class&lt;T&gt; targetClass)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> convert(sourceEntity, targetClass, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换实体集合函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceEntityList 源实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass      目标类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> refMap           配置源类与目标类不同字段名映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;              源泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;              目标泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标实体集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">List&lt;T&gt; <span class="title">convertList</span><span class="params">(List&lt;S&gt; sourceEntityList, Class&lt;T&gt; targetClass, Map&lt;String, String&gt; refMap)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (sourceEntityList == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (sourceEntityList.size() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> classMap(sourceEntityList.get(<span class="number">0</span>).getClass(), targetClass, refMap).mapAsList(sourceEntityList, targetClass);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换实体集合函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceEntityList 源实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass      目标类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;S&gt;              源泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;              目标泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标实体集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">List&lt;T&gt; <span class="title">convertList</span><span class="params">(List&lt;S&gt; sourceEntityList, Class&lt;T&gt; targetClass)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> convertList(sourceEntityList, targetClass, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; <span class="function">OrikaUtils <span class="title">classMap</span><span class="params">(Class&lt;V&gt; source, Class&lt;P&gt; target)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> classMap(source, target, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性名称一致可用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> &lt;V, P&gt; <span class="function">OrikaUtils <span class="title">classMap</span><span class="params">(Class&lt;V&gt; source, Class&lt;P&gt; target, Map&lt;String, String&gt; refMap)</span> </span>{</span><br><span class="line">        String key = source.getCanonicalName() + <span class="string">":"</span> + target.getCanonicalName();</span><br><span class="line">        <span class="keyword">if</span> (cacheMapper.containsKey(key)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OrikaUtils(cacheMapper.get(key));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(refMap)) {</span><br><span class="line">            FACTORY.classMap(source, target).byDefault().register();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            ClassMapBuilder&lt;V, P&gt; classMapBuilder = FACTORY.classMap(source, target);</span><br><span class="line">            refMap.forEach(classMapBuilder::field);</span><br><span class="line">            classMapBuilder.byDefault().register();</span><br><span class="line">        }</span><br><span class="line">        MapperFacade mapperFacade = FACTORY.getMapperFacade();</span><br><span class="line">        cacheMapper.put(key, mapperFacade);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrikaUtils(mapperFacade);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V, P&gt; <span class="function">P <span class="title">map</span><span class="params">(V source, Class&lt;P&gt; target)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> mapper.map(source, target);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制List</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;V, P&gt; <span class="function">List&lt;P&gt; <span class="title">mapAsList</span><span class="params">(List&lt;V&gt; source, Class&lt;P&gt; target)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.isEmpty(source) ? Collections.emptyList() : mapper.mapAsList(source, target);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>演示示例：</p>
<ul>
<li>单个对象属性映射</li>
<li>List集合属性映射</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">      <span class="comment">// 单个对象属性映射</span></span><br><span class="line">      Map&lt;String, String&gt; refMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 属性名的对应关系（属性名不一致的情况下使用）</span></span><br><span class="line">      refMap.put(<span class="string">"postId"</span>, <span class="string">"blogId"</span>);</span><br><span class="line">      Comment com = OrikaUtils.convert(comment, Comment.class, refMap);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询话题简单列表(按照评论量排序)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> desc 0-直接加载全部话题,1-加载帖子数量前10的话题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ResponseSimpleTopic&gt; <span class="title">queryTopicList</span><span class="params">(Integer desc)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (desc.equals(<span class="number">1</span>)) {</span><br><span class="line">        <span class="keyword">return</span> baseMapper.queryTopicList();</span><br><span class="line">    }</span><br><span class="line">    LambdaQueryWrapper&lt;Topic&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.select(Topic::getId, Topic::getTopicName);</span><br><span class="line">    List&lt;Topic&gt; topics = <span class="keyword">this</span>.list(queryWrapper);</span><br><span class="line">    <span class="comment">// // List集合属性映射</span></span><br><span class="line">    <span class="keyword">return</span> OrikaUtils.classMap(Topic.class, ResponseSimpleTopic.class)</span><br><span class="line">            .mapAsList(topics, ResponseSimpleTopic.class);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Orika</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合WebSocket实现简单聊天室</title>
    <url>/JAVA/%F0%9F%98%80SpringBoot%E6%95%B4%E5%90%88WebSocket%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    <content><![CDATA[<h2 id="SpringBoot整合WebSocket实现简单聊天室"><a href="#SpringBoot整合WebSocket实现简单聊天室" class="headerlink" title="SpringBoot整合WebSocket实现简单聊天室"></a>SpringBoot整合WebSocket实现简单聊天室</h2><blockquote>
<p>未完待续……</p>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合微信沙箱支付</title>
    <url>/JAVA/%F0%9F%98%80SpringBoot%E6%95%B4%E5%90%88%E5%BE%AE%E4%BF%A1%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h2 id="SpringBoot整合微信沙箱支付"><a href="#SpringBoot整合微信沙箱支付" class="headerlink" title="SpringBoot整合微信沙箱支付"></a>SpringBoot整合微信沙箱支付</h2>]]></content>
      <categories>
        <category>支付对接</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>weChat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境安装Docker</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<h2 id="Linux环境安装Docker"><a href="#Linux环境安装Docker" class="headerlink" title="Linux环境安装Docker"></a>Linux环境安装Docker</h2><blockquote>
<p>本次采用<code>yum</code>的方式安装Docker工具</p>
</blockquote>
<h3 id="1-安装系统工具"><a href="#1-安装系统工具" class="headerlink" title="1. 安装系统工具"></a>1. 安装系统工具</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-添加软件源"><a href="#2-添加软件源" class="headerlink" title="2. 添加软件源"></a>2. 添加软件源</h3><blockquote>
<p>安装软件源为：阿里云仓库，速度较快</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-更新yum缓存"><a href="#3-更新yum缓存" class="headerlink" title="3. 更新yum缓存"></a>3. 更新yum缓存</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-安装Docker-ce"><a href="#4-安装Docker-ce" class="headerlink" title="4. 安装Docker-ce"></a>4. 安装Docker-ce</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-启动Docker"><a href="#5-启动Docker" class="headerlink" title="5. 启动Docker"></a>5. 启动Docker</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure>
<p>到此结束，安装成功！拉取镜像，快乐玩耍。</p>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境安装MySQL 5.7</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85MySQL%205.7/</url>
    <content><![CDATA[<h2 id="Linux环境安装MySQL-5-7"><a href="#Linux环境安装MySQL-5-7" class="headerlink" title="Linux环境安装MySQL 5.7"></a>Linux环境安装MySQL 5.7</h2><blockquote>
<p>资源下载：</p>
<ul>
<li><p>官网：<a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads">点击下载MySQL 5.7</a></p>
</li>
<li><p>选项：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210418175130.png" alt="image-20210418175121139"></p>
</li>
</ul>
</blockquote>
<h3 id="1-创建文件夹"><a href="#1-创建文件夹" class="headerlink" title="1. 创建文件夹"></a>1. 创建文件夹</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos <span class="built_in">local</span>]<span class="comment"># mkdir mysql</span></span><br><span class="line">[root@VM-0-4-centos <span class="built_in">local</span>]<span class="comment"># ll</span></span><br><span class="line">total 52</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Aug  5  2020 bin</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 etc</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 games</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 include</span><br><span class="line">drwxr-xr-x   3 root root 4096 Apr 18 17:13 jdk</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 lib</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 lib64</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 libexec</span><br><span class="line">drwxr-xr-x   2 root root 4096 Apr 18 17:45 mysql  <span class="comment"># 创建成功</span></span><br><span class="line">drwxr-xr-x  13 root root 4096 Apr 18 15:42 qcloud</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 sbin</span><br><span class="line">drwxr-xr-x.  5 root root 4096 Mar  7  2019 share</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Apr 11  2018 src</span><br><span class="line">srwxrwxrwx   1 root root    0 Apr 18 16:10 yd.socket.server</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-传输文件"><a href="#2-传输文件" class="headerlink" title="2. 传输文件"></a>2. 传输文件</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos mysql]<span class="comment"># ll</span></span><br><span class="line">total 646220</span><br><span class="line">-rw-r--r-- 1 root root 661718255 Apr 18 18:11 mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-1-解压文件"><a href="#2-1-解压文件" class="headerlink" title="2.1 解压文件"></a>2.1 解压文件</h4><blockquote>
<p>注意：解压文件，并修改加压后的目录名为mysql</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">tar -xvzf mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz -C /usr/<span class="built_in">local</span>/mysql/</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-创建mysql用户"><a href="#3-创建mysql用户" class="headerlink" title="3. 创建mysql用户"></a>3. 创建mysql用户</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-1创建数据目录并授权"><a href="#3-1创建数据目录并授权" class="headerlink" title="3.1创建数据目录并授权"></a>3.1创建数据目录并授权</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p  data             <span class="comment">#在mysql目录下创建data目录</span></span><br><span class="line">chown mysql:mysql -R data  <span class="comment">#赋予权限</span></span><br><span class="line"></span><br><span class="line">[root@VM-0-4-centos mysql]<span class="comment"># ll</span></span><br><span class="line">total 646500</span><br><span class="line">drwxr-xr-x  2 root  root       4096 Apr 18 18:12 bin</span><br><span class="line">drwxr-xr-x  5 mysql mysql      4096 Apr 18 18:58 data  <span class="comment"># 创建的data目录</span></span><br><span class="line">drwxr-xr-x  2 root  root       4096 Apr 18 18:12 docs</span><br><span class="line">drwxr-xr-x  3 root  root       4096 Apr 18 18:12 include</span><br><span class="line">drwxr-xr-x  5 root  root       4096 Apr 18 18:12 lib</span><br><span class="line">-rw-r--r--  1  7161 31415    250129 Dec 10 11:01 LICENSE</span><br><span class="line">drwxr-xr-x  4 root  root       4096 Apr 18 18:12 man</span><br><span class="line">-rw-r--r--  1 root  root  661718255 Apr 18 18:11 mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">-rw-r--r--  1  7161 31415       566 Dec 10 11:01 README</span><br><span class="line">drwxr-xr-x 28 root  root       4096 Apr 18 18:12 share</span><br><span class="line">drwxr-xr-x  2 root  root       4096 Apr 18 18:12 support-files</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos mysql]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># base config</span></span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line"><span class="comment"># 解除group by 限制（根据项目需要进行配置）</span></span><br><span class="line">sql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"><span class="comment"># 基本路径</span></span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line"><span class="comment"># 数据存储路径：可以写绝对路径，也可以写相对与basedir路径 /data</span></span><br><span class="line">datadir=/usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line"><span class="comment"># 必须这样写，否则报错</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"><span class="comment"># mysql错误日志等信息输出路径</span></span><br><span class="line">log-error=/usr/<span class="built_in">local</span>/mysql/data/mysql.err</span><br><span class="line">pid-file=/usr/<span class="built_in">local</span>/mysql/data/mysql.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># character config</span></span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">symbolic-links=0</span><br><span class="line">explicit_defaults_for_timestamp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================非必要不配置项（影响性能）=======================</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 开启慢SQL日志</span></span><br><span class="line"> slow_query_log=1</span><br><span class="line"> <span class="comment"># 慢SQL日志文件的输出目录</span></span><br><span class="line"> slow_query_log_file=/usr/<span class="built_in">local</span>/mysql/data/horse-slow.log</span><br><span class="line"> <span class="comment"># 定义慢SQL的时间阈值</span></span><br><span class="line"> long_query_time=2</span><br><span class="line"> log_output=FILE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 开启binlog日志</span></span><br><span class="line"> <span class="comment"># binlog日志的基本路径和文件名，后面会追加标识来表示每一个文件</span></span><br><span class="line"> log_bin=/usr/<span class="built_in">local</span>/mysql/binlog/horse-bin</span><br><span class="line"> <span class="comment"># 指定binlog文件的索引文件，这个文件管理了所有的binlog文件的目录（需要提前在指定文件夹内创建 horse-bin.index 文件，重新赋予mysql用户组和用户权限）</span></span><br><span class="line"> log_bin_index=/usr/<span class="built_in">local</span>/mysql/binlog/horse-bin.index</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 随便指定一个服务id,防止开启binlog日志后重启报错（集群模式不能随意指定）</span></span><br><span class="line"> server-id=142804</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!includedir /etc/my.cnf.d</span><br><span class="line"></span><br><span class="line">~                                                                                                                          </span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-初始化数据库"><a href="#5-初始化数据库" class="headerlink" title="5. 初始化数据库"></a>5. 初始化数据库</h3><blockquote>
<p>进入 <code>usr/local/mysql/bin</code>目录</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos bin]<span class="comment"># ./mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --user=mysql --initialize</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>查看文件： <code>data/mysql.err</code></p>
<p>初始密码：ISocfpU5)Q05</p>
<blockquote>
<p><strong>注意：有些时候不会生成<code>mysql.err</code>文件，而是在进行初始化数据库的时候，就会打印出来初始密码，注意留意观察。</strong></p>
</blockquote>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos data]<span class="comment"># cat mysql.err</span></span><br><span class="line">2021-05-25T07:44:00.830896Z 0 [Warning] InnoDB: New <span class="built_in">log</span> files created, LSN=45790</span><br><span class="line">2021-05-25T07:44:00.887685Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.</span><br><span class="line">2021-05-25T07:44:00.953891Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: f874ad02-bd2c-11eb-aad9-525400aeab38.</span><br><span class="line">2021-05-25T07:44:00.956852Z 0 [Warning] Gtid table is not ready to be used. Table <span class="string">'mysql.gtid_executed'</span> cannot be opened.</span><br><span class="line">2021-05-25T07:44:02.455187Z 0 [Warning] CA certificate ca.pem is self signed.</span><br><span class="line">2021-05-25T07:44:02.679717Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: ISocfpU5)Q05</span><br></pre></td></tr></tbody></table></figure>
<h3 id="6-启动mysql服务"><a href="#6-启动mysql服务" class="headerlink" title="6. 启动mysql服务"></a>6. 启动mysql服务</h3><blockquote>
<p>先将mysql.server放置到/etc/init.d/mysql中，执行<code>service mysql start</code>启动服务</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos support-files]<span class="comment"># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span></span><br><span class="line"></span><br><span class="line">[root@VM-0-4-centos support-files]<span class="comment"># service mysql start</span></span><br><span class="line">Starting MySQL. SUCCESS! </span><br><span class="line">[root@VM-0-4-centos support-files]<span class="comment"># ps -ef | grep mysql</span></span><br><span class="line">root     30343     1  0 19:08 pts/0    00:00:00 /bin/sh /usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe --datadir=/usr/<span class="built_in">local</span>/mysql/data --pid-file=/usr/<span class="built_in">local</span>/mysql/data/mysql.pid</span><br><span class="line">mysql    30558 30343  2 19:08 pts/0    00:00:00 /usr/<span class="built_in">local</span>/mysql/bin/mysqld --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/data --plugin-dir=/usr/<span class="built_in">local</span>/mysql/lib/plugin --user=mysql --log-error=/usr/<span class="built_in">local</span>/mysql/data/mysql.err --pid-file=/usr/<span class="built_in">local</span>/mysql/data/mysql.pid --socket=/tmp/mysql.sock --port=3306</span><br><span class="line">root     30616  9420  0 19:08 pts/0    00:00:00 grep --color=auto mysql</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="7-修改密码"><a href="#7-修改密码" class="headerlink" title="7. 修改密码"></a>7. 修改密码</h3><blockquote>
<p>在<code>/bin</code>目录下，登录mysql</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos bin]<span class="comment"># ./mysql -u root -p</span></span><br><span class="line">Enter password: 刚刚的随机生成的密码 </span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>修改密码：执行下面操作后，<code>exit</code>退出，重新登录。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> password = password(<span class="string">'密码'</span>)</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> password expire never;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>
<p>或者下面的方式修改密码</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'密码'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="8-配置远程链接"><a href="#8-配置远程链接" class="headerlink" title="8. 配置远程链接"></a>8. 配置远程链接</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mysql&gt; use mysql  <span class="comment"># 切换mysql数据库</span></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> host=<span class="string">'%'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;  <span class="comment"># 设置root用户允许任何host连接访问</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges <span class="comment"># 刷新权限</span></span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="9-设置mysql自启动"><a href="#9-设置mysql自启动" class="headerlink" title="9. 设置mysql自启动"></a>9. 设置mysql自启动</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这一步，上面第6步已经执行过啦，所以这里无所谓啦</span></span><br><span class="line"><span class="comment">#&nbsp;cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span></span><br><span class="line"></span><br><span class="line">&nbsp;<span class="comment"># chkconfig --add mysql</span></span><br><span class="line"></span><br><span class="line">&nbsp;<span class="comment"># chkconfig --level 2345 mysql on</span></span><br><span class="line">&nbsp;</span><br><span class="line">&nbsp;<span class="comment"># 重启mysql服务</span></span><br><span class="line">&nbsp;<span class="comment"># service mysql restart</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="10-添加环境变量"><a href="#10-添加环境变量" class="headerlink" title="10. 添加环境变量"></a>10. 添加环境变量</h3><blockquote>
<p>添加环境变量后，才能使用在任何地方使用mysql -uroot -p等mysql命令</p>
<p>执行命令： <code>vim /etc/profile</code>，编辑后执行刷新命令：<code>souce /etc/profile</code></p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MYSQL_HOME</span>/bin</span><br></pre></td></tr></tbody></table></figure>
<p>安装到此结束，远程连接，尽情享用吧。</p>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装MongoDB 4.x</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85MondoDB/</url>
    <content><![CDATA[<h2 id="Linux环境下安装MongoDB-4-x"><a href="#Linux环境下安装MongoDB-4-x" class="headerlink" title="Linux环境下安装MongoDB 4.x"></a>Linux环境下安装MongoDB 4.x</h2><h3 id="1-配置yum源"><a href="#1-配置yum源" class="headerlink" title="1. 配置yum源"></a>1. 配置yum源</h3><blockquote>
<p>在<code>/etc/yum.repos.d/</code>目录下，创建<code>mongodb-org-4.2.repo</code>文件</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vim mongodb-org-4.2.repo</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-1-添加内容"><a href="#1-1-添加内容" class="headerlink" title="1.1 添加内容"></a>1.1 添加内容</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[mongodb-org-4.2]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/4.2/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-创建默认目录"><a href="#3-创建默认目录" class="headerlink" title="3. 创建默认目录"></a>3. 创建默认目录</h3><blockquote>
<p>mongo配置文件中默认配置的有数据目录<code>/var/lib/mongo</code>和日志目录<code>/var/log/mongodb</code>，但是yum方式安装并不会自动创建，所以，需要手动创建文件夹。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /var/lib/mongo</span><br><span class="line">mkdir -p /var/<span class="built_in">log</span>/mongodb</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-基本命令"><a href="#4-基本命令" class="headerlink" title="4. 基本命令"></a>4. 基本命令</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart mongod</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-远程连接"><a href="#5-远程连接" class="headerlink" title="5. 远程连接"></a>5. 远程连接</h3><blockquote>
<p>查看mongodb的安装目录，找到<code>mongod.conf</code>配置文件，进行基本配置</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># whereis  mongod</span></span><br><span class="line">mongod: /usr/bin/mongod /etc/mongod.conf /usr/share/man/man1/mongod.1</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>编辑<code>/etc/mongod.conf</code>配置文件</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># vim /etc/mongod.conf </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for documentation of all options, see:</span></span><br><span class="line"><span class="comment">#   http://docs.mongodb.org/manual/reference/configuration-options/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># where to write logging data</span></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file <span class="comment"># 输出日志类型为：文件</span></span><br><span class="line">  logAppend: <span class="literal">true</span> <span class="comment"># 以追加的方式输出日志</span></span><br><span class="line">  path: /var/<span class="built_in">log</span>/mongodb/mongod.log <span class="comment"># 日志文件输出路径</span></span><br><span class="line">  quiet: <span class="literal">true</span> <span class="comment"># 开启这个选项：可以有效减少一些日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where and how to store data.</span></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /var/lib/mongo <span class="comment"># 数据存储路径</span></span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line"><span class="comment">#  engine:</span></span><br><span class="line"><span class="comment">#  wiredTiger:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># how the process runs</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span>  <span class="comment"># fork and run in background</span></span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod.pid  <span class="comment"># location of pidfile</span></span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># network interfaces</span></span><br><span class="line"><span class="comment"># 修改绑定IP为：0.0.0.0，远程任何设备都可连接</span></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动权限认证</span></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled <span class="comment"># MondoDB认证功能</span></span><br><span class="line">  javascriptEnabled: <span class="literal">false</span> <span class="comment"># 是否允许执行JavaScript脚本</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注意点：</p>
<ul>
<li>防火墙是否关闭，或者此端口是否被放行</li>
<li>开放云服务器安全组端口27017</li>
</ul>
</blockquote>
<p>centos 7关闭防火墙命令：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service  <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service  <span class="comment">#禁止firewall开机启动</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="6-卸载方法"><a href="#6-卸载方法" class="headerlink" title="6. 卸载方法"></a>6. 卸载方法</h3><blockquote>
<p>如果安装有问题，可以卸载后重新安装。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除依赖包</span></span><br><span class="line">yum erase $(rpm -qa | grep mongodb-org)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据和日志目录</span></span><br><span class="line">sudo rm -rf /var/<span class="built_in">log</span>/mongodb</span><br><span class="line">sudo rm -rf /var/lib/mongo</span><br></pre></td></tr></tbody></table></figure>
<p>到此结束，安装完毕！</p>
<blockquote>
<p>一般来说，需要配置mongodb的内存占用，但是鉴于我这小服务器，能跑起来就很不错啦。<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
</blockquote>
<h3 id="7-信息配置"><a href="#7-信息配置" class="headerlink" title="7. 信息配置"></a>7. 信息配置</h3><blockquote>
<p>执行<code>mongo</code>命令，设置用户角色权限和密码</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse /]<span class="comment"># mongo</span></span><br><span class="line">MongoDB shell version v4.2.14</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session { <span class="string">"id"</span> : UUID(<span class="string">"04441842-9937-4462-a3ed-ebc7254f2e9c"</span>) }</span><br><span class="line">MongoDB server version: 4.2.14</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.createUser({user:<span class="string">"root"</span>,<span class="built_in">pwd</span>:<span class="string">"*****"</span>,roles:[{role:<span class="string">"root"</span>,db:<span class="string">"admin"</span>}]})</span><br></pre></td></tr></tbody></table></figure>
<p>配置完成后，直接使用可视化工具连接即可！！！</p>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境安装Nacos 2.0.0</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85Nacos%202.0.0/</url>
    <content><![CDATA[<h2 id="Linux环境安装Nacos-2-0-0"><a href="#Linux环境安装Nacos-2-0-0" class="headerlink" title="Linux环境安装Nacos 2.0.0"></a>Linux环境安装Nacos 2.0.0</h2><h3 id="1-解压安装"><a href="#1-解压安装" class="headerlink" title="1. 解压安装"></a>1. 解压安装</h3><blockquote>
<p>nacos资源压缩包官网下载即可，在<code>/usr/local/</code>目录下创建<code>nacos</code>目录，压缩包上传到此目录下，解压重命名为nacos</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse nacos]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nacos</span><br><span class="line">[root@horse nacos]<span class="comment"># tar -zxvf nacos-server-2.0.0.tar.gz -C /usr/local/nacos/</span></span><br><span class="line">[root@horse nacos]<span class="comment"># ll</span></span><br><span class="line">total 89868</span><br><span class="line">drwxr-xr-x 5 root root      4096 Apr 19 13:31 bin</span><br><span class="line">drwxr-xr-x 2  502 games     4096 Apr 20 12:13 conf</span><br><span class="line">drwxr-xr-x 8 root root      4096 Apr 20 09:23 data</span><br><span class="line">-rw-r--r-- 1  502 games    16583 Mar 18 11:36 LICENSE</span><br><span class="line">drwxr-xr-x 2 root root      4096 Apr 20 10:35 logs</span><br><span class="line">-rw-r--r-- 1 root root  91974414 Apr 19 09:15 nacos-server-2.0.0.tar.gz</span><br><span class="line">-rw-r--r-- 1  502 games     1305 May 14  2020 NOTICE</span><br><span class="line">drwxr-xr-x 2 root root      4096 Apr 19 10:45 target</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-创建nacos数据库"><a href="#2-创建nacos数据库" class="headerlink" title="2. 创建nacos数据库"></a>2. 创建nacos数据库</h3><blockquote>
<p>一般来说，nacos的配置文件，我们都可以自己掌握，前提是，我们按照nacos的规则创建数据库，配置连接即可。</p>
<p>==如果想要默认处理，直接进入第4步：启动nacos 即可==</p>
</blockquote>
<h4 id="2-1-导入sql文件"><a href="#2-1-导入sql文件" class="headerlink" title="2.1 导入sql文件"></a>2.1 导入sql文件</h4><blockquote>
<p>找到<code>/usr/local/nacos/conf/nacos-mysql.sql</code>sql脚本文件，导入执行即可</p>
</blockquote>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210420211103.png" alt="Snipaste_2021-04-20_21-10-18"></p>
<h3 id="3-配置nacos"><a href="#3-配置nacos" class="headerlink" title="3. 配置nacos"></a>3. 配置nacos</h3><blockquote>
<p>创建nacos数据库,配置数据库连接，和java的配置数据源一模一样！！！</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认访问路径</span></span><br><span class="line">server.servlet.contextPath=/nacos</span><br><span class="line"><span class="comment">### 默认端口号</span></span><br><span class="line">server.port=8848</span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Network Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If prefer hostname over ip for Nacos server addresses in cluster.conf:</span></span><br><span class="line"><span class="comment"># nacos.inetutils.prefer-hostname-over-ip=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Specify local server's IP:</span></span><br><span class="line"><span class="comment"># nacos.inetutils.ip-address=</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### 数据库类型配置为Mysql</span></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">### 单机模式：数据库数量为1</span></span><br><span class="line">db.num=1</span><br><span class="line"></span><br><span class="line"><span class="comment">### naocs和mysql处于同一个服务器，相对nacos,数据库所在的地址IP就是：localhost,不需要再写为公网IP，从外面绕一圈再回来，浪费资源</span></span><br><span class="line">db.url.0=jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=UTC</span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line">db.user.0=***</span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line">db.password.0=***</span><br><span class="line"></span><br><span class="line"><span class="comment">### Connection pool configuration: hikariCP</span></span><br><span class="line"><span class="comment"># 连接池配置默认值就好</span></span><br><span class="line">db.pool.config.connectionTimeout=30000</span><br><span class="line">db.pool.config.validationTimeout=10000</span><br><span class="line">db.pool.config.maximumPoolSize=20</span><br><span class="line">db.pool.config.minimumIdle=2</span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Naming Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Data dispatch task execution period in milliseconds:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.taskDispatchPeriod=200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Data count of batch sync task:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.batchSyncKeyCount=1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Retry delay in milliseconds if sync task failed:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.syncRetryDelay=5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If enable data warmup. If set to false, the server would accept request without local data preparation:</span></span><br><span class="line"><span class="comment"># nacos.naming.data.warmup=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If enable the instance auto expiration, kind like of health check of instance:</span></span><br><span class="line"><span class="comment"># nacos.naming.expireInstance=true</span></span><br><span class="line"></span><br><span class="line">nacos.naming.empty-service.auto-clean=<span class="literal">true</span></span><br><span class="line">nacos.naming.empty-service.clean.initial-delay-ms=50000</span><br><span class="line">nacos.naming.empty-service.clean.period-time-ms=30000</span><br><span class="line"></span><br><span class="line"><span class="comment">### Add in 2.0.0</span></span><br><span class="line"><span class="comment">### The interval to clean empty service</span></span><br><span class="line"><span class="comment"># nacos.naming.clean.empty-service.interval=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The expired time to clean empty service</span></span><br><span class="line"><span class="comment"># nacos.naming.clean.empty-service.expired-time=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval to clean expired metadata</span></span><br><span class="line"><span class="comment"># nacos.naming.clean.expired-metadata.interval=5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The expired time to clean metadata</span></span><br><span class="line"><span class="comment"># nacos.naming.clean.expired-metadata.expired-time=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** CMDB Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### The interval to dump external CMDB in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.dumpTaskInterval=3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval of polling data change event in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.eventTaskInterval=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval of loading labels in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.labelTaskInterval=300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If turn on data loading task:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.loadDataAtStart=false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Metrics Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Metrics for prometheus</span></span><br><span class="line"><span class="comment">#management.endpoints.web.exposure.include=*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Metrics for elastic search</span></span><br><span class="line">management.metrics.export.elastic.enabled=<span class="literal">false</span></span><br><span class="line"><span class="comment">#management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Metrics for influx</span></span><br><span class="line">management.metrics.export.influx.enabled=<span class="literal">false</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.db=springboot</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.uri=http://localhost:8086</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.auto-create-db=true</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.consistency=one</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.compressed=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Access Log Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If turn on the access log:</span></span><br><span class="line"><span class="comment"># 关闭tomcat日志打印【减少大量日志的输出，建议关闭】</span></span><br><span class="line">server.tomcat.accesslog.enabled=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The access log pattern:</span></span><br><span class="line">server.tomcat.accesslog.pattern=%h %l %u %t <span class="string">"%r"</span> %s %b %D %{User-Agent}i %{Request-Source}i</span><br><span class="line"></span><br><span class="line"><span class="comment">### The directory of access log:</span></span><br><span class="line">server.tomcat.basedir=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Access Control Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If enable spring security, this option is deprecated in 1.2.0:</span></span><br><span class="line"><span class="comment">#spring.security.enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The ignore urls of auth, is deprecated in 1.2.0:</span></span><br><span class="line">nacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span><br><span class="line"></span><br><span class="line"><span class="comment">### The auth system to use, currently only 'nacos' is supported:</span></span><br><span class="line">nacos.core.auth.system.type=nacos</span><br><span class="line"></span><br><span class="line"><span class="comment">### If turn on auth system</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置nacos授权</span></span><br><span class="line">nacos.core.auth.enabled=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line">nacos.core.auth.default.token.expire.seconds=18000</span><br><span class="line"></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line">nacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789</span><br><span class="line"></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line">nacos.core.auth.caching.enabled=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Since 1.4.1, Turn on/off white auth for user-agent: nacos-server, only for upgrade from old version.</span></span><br><span class="line">nacos.core.auth.enable.userAgentAuthWhite=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Since 1.4.1, worked when nacos.core.auth.enabled=true and nacos.core.auth.enable.userAgentAuthWhite=false.</span></span><br><span class="line"><span class="comment">### The two properties is the white list for auth and used by identity the request from other server.</span></span><br><span class="line">nacos.core.auth.server.identity.key=</span><br><span class="line">nacos.core.auth.server.identity.value=</span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Istio Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If turn on the MCP server:</span></span><br><span class="line">nacos.istio.mcp.server.enabled=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###*************** Add from 1.3.0 ***************###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Core Related Configurations ***************#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### set the WorkerID manually</span></span><br><span class="line"><span class="comment"># nacos.core.snowflake.worker-id=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Member-MetaData</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.site=</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.adweight=</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.weight=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### MemberLookup</span></span><br><span class="line"><span class="comment">### Addressing pattern category, If set, the priority is highest</span></span><br><span class="line"><span class="comment"># nacos.core.member.lookup.type=[file,address-server]</span></span><br><span class="line"><span class="comment">## Set the cluster list with a configuration file or command-line argument</span></span><br><span class="line"><span class="comment"># nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</span></span><br><span class="line"><span class="comment">## for AddressServerMemberLookup</span></span><br><span class="line"><span class="comment"># Maximum number of retries to query the address server upon initialization</span></span><br><span class="line"><span class="comment"># nacos.core.address-server.retry=5</span></span><br><span class="line"><span class="comment">## Server domain name address of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.domain=jmenv.tbsite.net</span></span><br><span class="line"><span class="comment">## Server port of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.port=8080</span></span><br><span class="line"><span class="comment">## Request address of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.url=/nacos/serverlist</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** JRaft Related Configurations ***************#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Sets the Raft cluster election timeout, default value is 5 second</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.election_timeout_ms=5000</span></span><br><span class="line"><span class="comment">### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.snapshot_interval_secs=30</span></span><br><span class="line"><span class="comment">### raft internal worker threads</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.core_thread_num=8</span></span><br><span class="line"><span class="comment">### Number of threads required for raft business request processing</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.cli_service_thread_num=4</span></span><br><span class="line"><span class="comment">### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe</span></span><br><span class="line"><span class="comment">### rpc request timeout, default 5 seconds</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-启动nacos"><a href="#4-启动nacos" class="headerlink" title="4. 启动nacos"></a>4. 启动nacos</h3><blockquote>
<p>在<code>/usr/local/nacos/bin/</code>目录下，执行<code>单机模式</code>启动命令</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse conf]<span class="comment"># cd ../bin</span></span><br><span class="line">[root@horse bin]<span class="comment"># ll</span></span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root   717 Apr 19 10:49 derby.log</span><br><span class="line">drwxr-xr-x 2 root root  4096 Apr 19 13:31 logPath_IS_UNDEFINED</span><br><span class="line">drwxr-xr-x 2 root root  4096 Apr 19 10:49 logs</span><br><span class="line">-rwxr-xr-x 1  502 games  954 May 14  2020 shutdown.cmd</span><br><span class="line">-rwxr-xr-x 1  502 games  951 Mar 18 11:36 shutdown.sh</span><br><span class="line">-rwxr-xr-x 1  502 games 3340 Mar 18 11:36 startup.cmd</span><br><span class="line">-rwxr-xr-x 1  502 games 4923 Mar 18 11:36 startup.sh</span><br><span class="line">drwxr-xr-x 3 root root  4096 Apr 19 10:49 work</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 单机启动</span></span><br><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></tbody></table></figure>
<p>可以在<code>/usr/local/nacos/logs/start.out</code>启动日志文件查看是否启动成功</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse logs]<span class="comment"># tail -f start.out </span></span><br><span class="line">2021-04-20 09:04:44,653 INFO Exposing 16 endpoint(s) beneath base path <span class="string">'/actuator'</span></span><br><span class="line"></span><br><span class="line">2021-04-20 09:04:44,975 INFO Tomcat started on port(s): 8848 (http) with context path <span class="string">'/nacos'</span></span><br><span class="line"></span><br><span class="line">2021-04-20 09:04:44,986 INFO Nacos started successfully <span class="keyword">in</span> stand alone mode. use external storage</span><br><span class="line"></span><br><span class="line">2021-04-20 09:05:37,640 INFO Initializing Servlet <span class="string">'dispatcherServlet'</span></span><br><span class="line"></span><br><span class="line">2021-04-20 09:05:37,666 INFO Completed initialization <span class="keyword">in</span> 26 ms</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-访问nacos"><a href="#5-访问nacos" class="headerlink" title="5. 访问nacos"></a>5. 访问nacos</h3><blockquote>
<p>访问<code>http://121.5.168.31:8848/nacos</code>地址，输入默认用户名和密码：nacos 进入配置注册中心。</p>
</blockquote>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210420212034.png" alt="Snipaste_2021-04-20_21-20-09"></p>
<p>==nacos配置中心的具体约定规则，见后面的文章==</p>
<p>到此结束！</p>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境安装JDK 1.8</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85Jdk/</url>
    <content><![CDATA[<h2 id="Linux环境安装JDK-1-8"><a href="#Linux环境安装JDK-1-8" class="headerlink" title="Linux环境安装JDK 1.8"></a>Linux环境安装JDK 1.8</h2><h3 id="1-检查服务器"><a href="#1-检查服务器" class="headerlink" title="1. 检查服务器"></a>1. 检查服务器</h3><blockquote>
<p>输入<code>java -version</code>命令，查看服务部署是否自带jdk，如果有，先卸载删除</p>
</blockquote>
<p>删除方法：</p>
<ol>
<li>发现有输入：rpm -qa | grep java 检测jdk的安装包，（注意：rpm命令符没有时记得下载一个输入：apt-get install +命令名称）</li>
<li>接着进行一个个删除包，输入：rpm -e —nodeps +包名</li>
<li>最后再次：rpm -qa | grep java检查是否删除</li>
</ol>
<h3 id="2-创建自定义文件夹"><a href="#2-创建自定义文件夹" class="headerlink" title="2. 创建自定义文件夹"></a>2. 创建自定义文件夹</h3><blockquote>
<p>一般来说，linux的安装程序放在 <code>/usr/local</code>文件夹下，但是没有强制要求</p>
</blockquote>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos local]# mkdir -p jdk</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-上传安装包"><a href="#3-上传安装包" class="headerlink" title="3. 上传安装包"></a>3. 上传安装包</h3><blockquote>
<p>Oracle下载官网：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">点击下载JDK 1.8</a></p>
<blockquote>
<p>账户：1985479344@qq.com</p>
<p>密码：Oracle123</p>
</blockquote>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos jdk]<span class="comment"># ll</span></span><br><span class="line">total 190564</span><br><span class="line">-rw-r--r-- 1 root root 195132576 Apr 18 16:58 jdk-8u251-linux-x64.tar.gz  <span class="comment"># jdk安装包</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-解压安装包"><a href="#4-解压安装包" class="headerlink" title="4. 解压安装包"></a>4. 解压安装包</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos jdk] tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@VM-0-4-centos jdk]<span class="comment"># ll</span></span><br><span class="line">total 190568</span><br><span class="line">drwxr-xr-x 7 10143 10143      4096 Mar 12  2020 jdk1.8.0_251</span><br><span class="line">-rw-r--r-- 1 root  root  195132576 Apr 18 16:58 jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5. 配置环境变量"></a>5. 配置环境变量</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos jdk1.8.0_251]<span class="comment"># vim /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># System wide environment and startup programs, for login setup</span></span><br><span class="line"><span class="comment"># Functions and aliases go in /etc/bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It's NOT a good idea to change this file unless you know what you</span></span><br><span class="line"><span class="comment"># are doing. It's much better to create a custom.sh shell script in</span></span><br><span class="line"><span class="comment"># /etc/profile.d/ to make custom changes to your environment, as this</span></span><br><span class="line"><span class="comment"># will prevent the need for merging in future updates.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pathmunge</span></span> () {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">":<span class="variable">${PATH}</span>:"</span> <span class="keyword">in</span></span><br><span class="line">        *:<span class="string">"<span class="variable">$1</span>"</span>:*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$2</span>"</span> = <span class="string">"after"</span> ] ; <span class="keyword">then</span></span><br><span class="line">                PATH=<span class="variable">$PATH</span>:<span class="variable">$1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                PATH=<span class="variable">$1</span>:<span class="variable">$PATH</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/bin/id ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$EUID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># ksh workaround</span></span><br><span class="line">        EUID=`/usr/bin/id -u`</span><br><span class="line">        UID=`/usr/bin/id -ru`</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    USER=<span class="string">"`/usr/bin/id -un`"</span></span><br><span class="line">    LOGNAME=<span class="variable">$USER</span></span><br><span class="line">    MAIL=<span class="string">"/var/spool/mail/<span class="variable">$USER</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path manipulation</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$EUID</span>"</span> = <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    pathmunge /usr/sbin</span><br><span class="line">    pathmunge /usr/<span class="built_in">local</span>/sbin</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    pathmunge /usr/<span class="built_in">local</span>/sbin after</span><br><span class="line">    pathmunge /usr/sbin after</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">HOSTNAME=`/usr/bin/hostname 2&gt;/dev/null`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$HISTCONTROL</span>"</span> = <span class="string">"ignorespace"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> HISTCONTROL=ignoreboth</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> HISTCONTROL=ignoredups</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, we want umask to get set. This sets it for login shell</span></span><br><span class="line"><span class="comment"># Current threshold for system reserved uid/gids is 200</span></span><br><span class="line"><span class="comment"># You could check uidgid reservation validity in</span></span><br><span class="line"><span class="comment"># /usr/share/doc/setup-*/uidgid file</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">"`/usr/bin/id -gn`"</span> = <span class="string">"`/usr/bin/id -un`"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">umask</span> 002</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">umask</span> 022</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /etc/profile.d/*.sh /etc/profile.d/sh.local ; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$i</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">${-#*i}</span>"</span> != <span class="string">"$-"</span> ]; <span class="keyword">then</span></span><br><span class="line">            . <span class="string">"<span class="variable">$i</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            . <span class="string">"<span class="variable">$i</span>"</span> &gt;/dev/null</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> i</span><br><span class="line"><span class="built_in">unset</span> -f pathmunge       </span><br><span class="line"></span><br><span class="line"><span class="comment"># jdk环境变量</span></span><br><span class="line"><span class="comment"># JAVA_HOME：jdk解压的文件路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_251</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=$:CLASSPATH:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="6-刷新环境变量文件"><a href="#6-刷新环境变量文件" class="headerlink" title="6. 刷新环境变量文件"></a>6. 刷新环境变量文件</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos jdk1.8.0_251]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="7-检查是否成功"><a href="#7-检查是否成功" class="headerlink" title="7.检查是否成功"></a>7.检查是否成功</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@VM-0-4-centos jdk1.8.0_251]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_251"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_251-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode)</span><br><span class="line"></span><br><span class="line">[root@VM-0-4-centos jdk1.8.0_251]<span class="comment"># javac</span></span><br><span class="line">Usage: javac &lt;options&gt; &lt;<span class="built_in">source</span> files&gt;</span><br><span class="line"><span class="built_in">where</span> possible options include:</span><br><span class="line">  -g                         Generate all debugging info</span><br><span class="line">  -g:none                    Generate no debugging info</span><br><span class="line">  -g:{lines,vars,<span class="built_in">source</span>}     Generate only some debugging info</span><br><span class="line">  -nowarn                    Generate no warnings</span><br><span class="line">  -verbose                   Output messages about what the compiler is doing</span><br><span class="line">  -deprecation               Output <span class="built_in">source</span> locations <span class="built_in">where</span> deprecated APIs are used</span><br><span class="line">  -classpath &lt;path&gt;          Specify <span class="built_in">where</span> to find user class files and annotation processors</span><br><span class="line">  -cp &lt;path&gt;                 Specify <span class="built_in">where</span> to find user class files and annotation processors</span><br><span class="line">  -sourcepath &lt;path&gt;         Specify <span class="built_in">where</span> to find input <span class="built_in">source</span> files</span><br><span class="line">  -bootclasspath &lt;path&gt;      Override location of bootstrap class files</span><br><span class="line">  -extdirs &lt;<span class="built_in">dirs</span>&gt;            Override location of installed extensions</span><br><span class="line">  -endorseddirs &lt;<span class="built_in">dirs</span>&gt;       Override location of endorsed standards path</span><br><span class="line">  -proc:{none,only}          Control whether annotation processing and/or compilation is <span class="keyword">done</span>.</span><br><span class="line">  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] Names of the annotation processors to run; bypasses default discovery process</span><br><span class="line">  -processorpath &lt;path&gt;      Specify <span class="built_in">where</span> to find annotation processors</span><br><span class="line">  -parameters                Generate metadata <span class="keyword">for</span> reflection on method parameters</span><br><span class="line">  -d &lt;directory&gt;             Specify <span class="built_in">where</span> to place generated class files</span><br><span class="line">  -s &lt;directory&gt;             Specify <span class="built_in">where</span> to place generated <span class="built_in">source</span> files</span><br><span class="line">  -h &lt;directory&gt;             Specify <span class="built_in">where</span> to place generated native header files</span><br><span class="line">  -implicit:{none,class}     Specify whether or not to generate class files <span class="keyword">for</span> implicitly referenced files</span><br><span class="line">  -encoding &lt;encoding&gt;       Specify character encoding used by <span class="built_in">source</span> files</span><br><span class="line">  -<span class="built_in">source</span> &lt;release&gt;          Provide <span class="built_in">source</span> compatibility with specified release</span><br><span class="line">  -target &lt;release&gt;          Generate class files <span class="keyword">for</span> specific VM version</span><br><span class="line">  -profile &lt;profile&gt;         Check that API used is available <span class="keyword">in</span> the specified profile</span><br><span class="line">  -version                   Version information</span><br><span class="line">  -<span class="built_in">help</span>                      Print a synopsis of standard options</span><br><span class="line">  -Akey[=value]              Options to pass to annotation processors</span><br><span class="line">  -X                         Print a synopsis of nonstandard options</span><br><span class="line">  -J&lt;flag&gt;                   Pass &lt;flag&gt; directly to the runtime system</span><br><span class="line">  -Werror                    Terminate compilation <span class="keyword">if</span> warnings occur</span><br><span class="line">  @&lt;filename&gt;                Read options and filenames from file</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>到此结束，JDK安装圆满结束。</p>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Redis 6.2.1</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85Redis%206.2.1/</url>
    <content><![CDATA[<h2 id="Linux安装Redis-6-2-1"><a href="#Linux安装Redis-6-2-1" class="headerlink" title="Linux安装Redis 6.2.1"></a>Linux安装Redis 6.2.1</h2><h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><blockquote>
<ol>
<li>到Redis官网下载最新稳定版：<a href="https://redis.io/download">Reids官网</a> </li>
<li>上传到<code>/usr/local/redis/</code>目录下并解压</li>
</ol>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis]<span class="comment"># tar -zxvf redis-6.2.1.tar.gz </span></span><br><span class="line">[root@horse redis]<span class="comment"># ll</span></span><br><span class="line">total 2388</span><br><span class="line">drwxrwxr-x 9 root root    4096 Apr 19 10:18 redis-6.2.1</span><br><span class="line">-rw-r--r-- 1 root root 2438367 Apr 19 09:14 redis-6.2.1.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<p>解压后的文件在<code>/usr/local/redis/redis-6.2.1</code>目录下，==存储位置，看自己心情<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>==</p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><blockquote>
<p>进入<code>/usr/local/redis/redis-6.2.1</code>目录，执行编译。编译后会出现<code>redis.conf</code>文件和<code>src</code>目录。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis-6.2.1]<span class="comment"># make</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>编译成功，进入<code>src</code>目录下，执行<code>make install</code>进行Redis安装。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse src]<span class="comment"># make install</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="部署启动"><a href="#部署启动" class="headerlink" title="部署启动"></a>部署启动</h3><blockquote>
<p>为了方便管理，将Redis文件中的conf配置文件和常用命令移动到统一文件中。</p>
<ul>
<li>创建<code>bin</code>和<code>etc</code>目录。</li>
<li>将<code>redis.conf</code>文件移动到<code>etc</code>目录下。</li>
<li>进入<code>src</code>目录将其他常用命令移动到<code>bin</code>目录下。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mkdir etc</span><br><span class="line">mkdir bin</span><br><span class="line"></span><br><span class="line">mv redis.conf /usr/<span class="built_in">local</span>/redis/redis-6.2.1/etc/</span><br><span class="line"></span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/<span class="built_in">local</span>/redis/redis-6.2.1/bin/</span><br></pre></td></tr></tbody></table></figure>
<p>查看移动后的文件</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis-6.2.1]<span class="comment"># cd etc</span></span><br><span class="line">[root@horse etc]<span class="comment"># ll</span></span><br><span class="line">total 92</span><br><span class="line">-rw-rw-r-- 1 root root 92484 Apr 19 13:55 redis.conf</span><br><span class="line">[root@horse etc]<span class="comment"># cd ../bin</span></span><br><span class="line">[root@horse bin]<span class="comment"># ll</span></span><br><span class="line">total 37316</span><br><span class="line">-rw-r--r-- 1 root root     113 Apr 21 18:59 dump.rdb</span><br><span class="line">-rwxrwxr-x 1 root root     735 Mar  2 14:14 mkreleasehdr.sh</span><br><span class="line">-rwxr-xr-x 1 root root 4833448 Apr 19 09:40 redis-benchmark</span><br><span class="line">-rwxr-xr-x 1 root root 9451144 Apr 19 09:40 redis-check-aof</span><br><span class="line">-rwxr-xr-x 1 root root 9451144 Apr 19 09:40 redis-check-rdb</span><br><span class="line">-rwxr-xr-x 1 root root 5003464 Apr 19 09:40 redis-cli</span><br><span class="line">-rwxr-xr-x 1 root root 9451144 Apr 19 09:40 redis-server</span><br></pre></td></tr></tbody></table></figure>
<p>启动redis服务</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在bin目录下，执行redis-server,指定redis.conf配置文件路径</span></span><br><span class="line"></span><br><span class="line">./redis-server[root@horse bin]<span class="comment"># ./redis-server /usr/local/redis/redis-6.2.1/etc/redis.conf</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">32336:C 19 Apr 2021 14:18:01.846 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">32336:C 19 Apr 2021 14:18:01.847 <span class="comment"># Redis version=6.2.1, bits=64, commit=00000000, modified=0, pid=32336, just started</span></span><br><span class="line">32336:C 19 Apr 2021 14:18:01.847 <span class="comment"># Configuration loaded</span></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.847 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 6.2.1 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 32336</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">              `-.__.-'</span>                                               </span><br><span class="line"></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 <span class="comment"># Server initialized</span></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 * Loading RDB produced by version 6.2.1</span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 * RDB age 170 seconds</span><br></pre></td></tr></tbody></table></figure>
<h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><blockquote>
<p>编辑<code>redis.conf</code>配置文件</p>
</blockquote>
<ul>
<li>注释绑定IP，允许远程连接</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>允许后台运行</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 参数设置为 yes [允许后台挂载运行]</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>修改模式</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这个参数设置为 no [非受保护模式]</span></span><br><span class="line">protected-mode no</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置日志输出位置</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># reids 日志输出位置</span></span><br><span class="line">logfile <span class="string">"/usr/local/redis/redis-6.2.1/redis.log"</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>设置最大内存,单位：字节【如果内存足够，默认即可】</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置redis最大占用内存：0.75G</span></span><br><span class="line">maxmemory 268435456</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>设置密码</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置redis密码</span></span><br><span class="line">requirepass redis123</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>修改端口（非必须<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改端口</span></span><br><span class="line">port 6380</span><br></pre></td></tr></tbody></table></figure>
<p>其他的配置，默认即可。</p>
<h3 id="重启Reids"><a href="#重启Reids" class="headerlink" title="重启Reids"></a>重启Reids</h3><blockquote>
<p>注意点：</p>
<ul>
<li><p>先关闭当前正在运行的Redis：<code>进入 redis-cli 客户端并执行 shutdown 命令</code></p>
</li>
<li><p>因为是自定义安装的原因，所以重置Redis服务的时候需要指定配置文件<code>redis.conf</code></p>
</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭Redis(原生方式)</span></span><br><span class="line">redis-cli -a ***** -h 121.5.168.32 -p 6379</span><br><span class="line"></span><br><span class="line">shutdown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动redis</span></span><br><span class="line">[root@horse bin]<span class="comment"># redis-server /usr/local/redis/redis-6.2.1/etc/redis.conf </span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis-cli配置"><a href="#Redis-cli配置" class="headerlink" title="Redis-cli配置"></a>Redis-cli配置</h3><blockquote>
<p>将<code>redis-cli</code>路径添加到PATH环境变量中，即可在任意路径下自行<code>redis-cli -a 密码 -p 6379 -h 121.5.168.32</code></p>
<p>步骤：</p>
<ul>
<li>打开<code>/etc/profile</code>文件，编辑路径配置</li>
<li>刷新环境配置：<code>source /etc/profile</code></li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># mysql环境变量</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis环境变量</span></span><br><span class="line"><span class="built_in">export</span> REDIS_HOME=/usr/<span class="built_in">local</span>/redis/redis-6.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># jdk环境变量</span></span><br><span class="line"><span class="comment"># JAVA_HOME：jdk解压的文件路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_291</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=$:CLASSPATH:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"><span class="comment"># 不同服务路径之间使用“:”(英文冒号)隔开</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MYSQL_HOME</span>/bin:<span class="variable">$REDIS_HOME</span>/bin</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis启动脚本"><a href="#Redis启动脚本" class="headerlink" title="Redis启动脚本"></a>Redis启动脚本</h3><blockquote>
<p>配置redis脚本，在任意路径下启动、停止redis服务</p>
</blockquote>
<h4 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本代码示例</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Tomcat 9.0.34</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85Tomcat%209.0.34/</url>
    <content><![CDATA[<h2 id="Linux安装Tomcat-9-0-34"><a href="#Linux安装Tomcat-9-0-34" class="headerlink" title="Linux安装Tomcat 9.0.34"></a>Linux安装Tomcat 9.0.34</h2><blockquote>
<p><strong>安装须知：</strong>安装Tomcat之前，系统中必须已经完成JDK的安装 ，请看其他文章： <a href="http://www.horsemuzi.top/Linux/Linux%E5%AE%89%E8%A3%85Jdk/">Linux安装Jdk1.8</a> </p>
</blockquote>
<h3 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h3><blockquote>
<p>访问Tomcat官网下载Tomcat压缩包</p>
<ul>
<li><a href="https://tomcat.apache.org/download-90.cgi">Tomcat官网</a></li>
</ul>
</blockquote>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210706204904.png" alt="Tomcat下载"></p>
<h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 解压文件，并重命名为tomcat</span></span><br><span class="line">tar -zxvf apache-tomcat-9.0.34.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv apache-tomcat-9.0.34 tomcat</span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote>
<p>修改端口：进入<code>tomcat/conf</code>目录下，编辑<code>server.xml</code>文件，修改对应端口号。</p>
<ul>
<li>如果需要启动多个tomcat服务，复制多份配置文件，修改不同端口号进行启动即可。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/tomcat/conf/server.xml</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210706205528.png" alt="Tomcat端口号"></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><blockquote>
<p>进入<code>tomcat/bin</code>目录下，执行<code>./startup.sh</code>脚本文件即可。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">./startup.sh </span><br></pre></td></tr></tbody></table></figure>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210706205938.png" alt="Tomcat服务访问"></p>
<blockquote>
<p>运行war包：将打好的war直接放入webapps目录下，tomcat启动会自动进行解压，浏览器直接访问即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用基础命令</title>
    <url>/Linux/Linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="检索查询命令"><a href="#检索查询命令" class="headerlink" title="检索查询命令"></a>检索查询命令</h2><h3 id="vi-vim检索"><a href="#vi-vim检索" class="headerlink" title="vi/vim检索"></a>vi/vim检索</h3><blockquote>
<p>应用场景: 日志查询,精准匹配</p>
</blockquote>
<ul>
<li>使用 / 搜索</li>
</ul>
<blockquote>
<p>命令模式下，输入/关键字 开始自上向下搜索。n跳到下一个，N跳到上一个。3n跳到向下第三个</p>
<pre><code>    &gt; \c  表示不区分大小写  例如: /error\c
    &gt; \C  表示区分大小写    例如: /error\C
</code></pre></blockquote>
<ul>
<li>使用 ? 搜索</li>
</ul>
<blockquote>
<p>和 / 类似，但是方向相反</p>
<pre><code>    &gt; \c  表示不区分大小写 
    &gt; \C  表示区分大小写
</code></pre></blockquote>
<ul>
<li>可以先设置搜索规则,再使用上面的符号进行搜索进行搜索</li>
</ul>
<blockquote>
<ul>
<li><p>是否区分大小写</p>
<ul>
<li>不区分大小写：<code>:set ignorecase</code></li>
<li>区分大小写：<code>:set noignorecase</code></li>
</ul>
</li>
<li><p>是否实时搜索</p>
<ul>
<li>开启实时搜索：<code>:set incsearch</code></li>
<li>开启只能搜索：<code>:set smartcase</code></li>
</ul>
</li>
<li><p>是否显示行号</p>
<ul>
<li>显示行号：<code>:set number</code> 或者 <code>:set nu</code></li>
<li>取消显示：<code>:set nonumber</code> 或者 <code>:set nonu</code></li>
</ul>
</li>
<li><p>是否高亮显示</p>
<ul>
<li>永久去除搜索高亮显示：<code>:set nohls</code></li>
<li>恢复搜索高亮：<code>:set hls</code></li>
<li>暂时取消高亮（下次搜索时再次显示）：<code>:noh</code></li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="vim常用内置命令"><a href="#vim常用内置命令" class="headerlink" title="vim常用内置命令"></a>vim常用内置命令</h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210709162320.png" alt="vim常用内置命令"></p>
<h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><ul>
<li>grep简单匹配搜索</li>
</ul>
<blockquote>
<p>grep -n ‘error’ todo.txt  [搜索todo.txt文件中匹配’error’的所在行和行号]</p>
<p>grep –e “正则表达式” 文件名  [从文件内容查找与正则表达式匹配的行：]</p>
<p>grep –i “被查找的字符串” 文件名 [查找时不区分大小写：]</p>
<p>grep -c “被查找的字符串” 文件名 [查找匹配的行数：]</p>
<p>grep -n ‘error’ *.log [在当前目录下查找所有扩展名为 .log 的文本文件，并找出包含 “error” 的行]</p>
<p><strong>ls | grep ‘^app’ 过滤文件中以 app 开头的文件[查询很快]</strong></p>
</blockquote>
<ul>
<li>grep命令的  <code>与</code> 或者 <code>或</code> 操作</li>
</ul>
<blockquote>
<p>grep  -E ‘word1|word2|word3’ filename  [ 查询 filename 文件中 包含 Word1，word2，word3 中任意一个关键词的行 ]</p>
<p>简便写法：</p>
<ul>
<li>egrep ‘word1|word2|word3’ filename </li>
<li>awk ‘/word1|word2|word3/‘ filename</li>
</ul>
<hr>
<p>grep ‘word1’  filename | grep ‘word2’  | grep ‘word3’   [ 查询 filename 文件中 同时包含 word1，word2，word3 关键词的行，（也就是多级管道符过滤操作而已！）]</p>
</blockquote>
<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><ul>
<li>常用匹配搜索</li>
</ul>
<blockquote>
<p>find /home -name *.jar [在/home目录下根据文件名进行匹配查询]</p>
<p>find /home -iname horse-vue-blog.jar [在/home目录下根据文件名进行匹配查询(忽略大小写)]</p>
<p>find . -ctime -20 [查询当前目录及其子目录下所有最近20天内更新过的文件]</p>
</blockquote>
<h3 id="cat-more-head-tail等命令"><a href="#cat-more-head-tail等命令" class="headerlink" title="cat,more,head,tail等命令"></a>cat,more,head,tail等命令</h3><ul>
<li>常用操作</li>
</ul>
<blockquote>
<p>cat -nbs todo.txt [查看文件]</p>
<p>more -s todo.txt [逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示]      </p>
<p>head -n 20 todo.txt [查看文件的开头20行部分内容,默认为查看开头10行]</p>
<hr>
<p>tail -f todo.log [循环读取todo.log文件的内容]</p>
<p>tail -n 20 todo.log [查看todo.log文件末尾20行内容]</p>
<p>tail -f -n 200 todo.log | perl -pe ‘s/(关键词)/\e[1;31m$1\e[0m/g’    [高亮关键词]</p>
</blockquote>
<h3 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h3><blockquote>
<p>命令简介：Linux中查看文件内容的强大工具</p>
<p>命令功能：less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件</p>
<p>命令参数：</p>
<ul>
<li>-b &lt;缓冲区大小&gt; 设置缓冲区的大小</li>
<li>-e 当文件显示结束后，自动离开</li>
<li><p>-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</p>
</li>
<li><p>-g 只标志最后搜索的关键词</p>
</li>
<li><p>-i 忽略搜索时的大小写</p>
</li>
<li><p>-m 显示类似more命令的百分比</p>
</li>
<li><p>-N 显示每行的行号</p>
</li>
<li><p>-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</p>
</li>
<li><p>-Q 不使用警告音</p>
</li>
<li><p>-s 显示连续空行为一行</p>
</li>
<li><p>-S 行过长时间将超出部分舍弃</p>
</li>
</ul>
<p>导航参数：</p>
<ul>
<li><p>G - 移动到最后一行（shift + g）</p>
</li>
<li><p>g - 移动到第一行</p>
</li>
<li><p>q / ZZ - 退出 less 命令</p>
</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 显示行号和百分比的查看文件</span></span><br><span class="line">less -mNs tps-control.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页查看进程信息</span></span><br><span class="line">ps -ef | less -mN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页查看历史命令</span></span><br><span class="line"><span class="built_in">history</span> | less -mN</span><br></pre></td></tr></tbody></table></figure>
<h3 id="whereis命令"><a href="#whereis命令" class="headerlink" title="whereis命令"></a>whereis命令</h3><blockquote>
<p>命令简介：和find相比，whereis查找的速度非常快，这是因为linux系统会将 系统内的所有文件都记录在一个数据库文件中，当使用whereis和下面即将介绍的locate时，会从数据库中查找数据，而不是像find命令那样，通过遍历硬盘来查找，效率自然会很高。</p>
<p>但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis]<span class="comment"># whereis mysql</span></span><br><span class="line">mysql: /usr/lib64/mysql /usr/<span class="built_in">local</span>/mysql /usr/share/mysql /usr/<span class="built_in">local</span>/mysql/bin/mysql</span><br><span class="line">[root@horse redis]<span class="comment"># whereis redis</span></span><br><span class="line">redis: /usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></tbody></table></figure>
<h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><blockquote>
<p>常用解压缩命令</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#打包  tar -cvf 包名  文件名</span></span><br><span class="line"><span class="variable">$tar</span> -cvf test.tar test.txt </span><br><span class="line"><span class="comment">#解包  tar -xvf 包名 </span></span><br><span class="line"><span class="variable">$tar</span> -xvf test.tar</span><br><span class="line"><span class="comment">#压缩  tar -czvf 包名 文件名</span></span><br><span class="line"><span class="variable">$tar</span> -czvf test.tgr.gz test.txt</span><br><span class="line"><span class="comment">#解压  tar -xzvf 包名 -C 解压到指定的文件夹下</span></span><br><span class="line"><span class="variable">$tar</span> -xzvf test.tgr.gz -C /usr/<span class="built_in">local</span>/naocs/</span><br></pre></td></tr></tbody></table></figure>
<h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h3><blockquote>
<p>查看文件大小</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定文件大小</span></span><br><span class="line"><span class="variable">$du</span> -h filename</span><br><span class="line"><span class="comment">#展示该目录下所有文件大小，大小以可读方式展示</span></span><br><span class="line"><span class="variable">$du</span>  -h /</span><br><span class="line"><span class="comment">#展示当前目录大小</span></span><br><span class="line"><span class="variable">$du</span> -sh</span><br><span class="line"><span class="comment">#展示当前目录下每个目录大小</span></span><br><span class="line"><span class="variable">$du</span> -sh ./</span><br><span class="line"><span class="comment">#显示所有文件的大小，以可读方式展示</span></span><br><span class="line"><span class="variable">$du</span> -ah /</span><br></pre></td></tr></tbody></table></figure>
<p>具体操作示例</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse logs]<span class="comment"># du -h remote-digest.log</span></span><br><span class="line">3.9M    remote-digest.log</span><br><span class="line">[root@horse logs]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nacos/logs</span><br><span class="line">[root@horse logs]<span class="comment"># du -h /usr/local/nacos/logs</span></span><br><span class="line">59M     /usr/<span class="built_in">local</span>/nacos/logs</span><br><span class="line">[root@horse logs]<span class="comment"># du -sh</span></span><br><span class="line">59M     .</span><br><span class="line">[root@horse logs]<span class="comment"># du -ah </span></span><br><span class="line">4.0K    ./naming-distro.log</span><br><span class="line">3.9M    ./remote-digest.log</span><br><span class="line">4.0K    ./naming-event.log.2021-05-25.0</span><br><span class="line">88K     ./nacos_gc.log.0.current</span><br><span class="line">92K     ./naming-performance.log</span><br><span class="line">4.0K    ./start.out</span><br><span class="line">2.2M    ./config-memory.log.2021-05-26.0</span><br><span class="line">0       ./nacos-address.log</span><br><span class="line">268K    ./core-auth.log.2021-05-25.0</span><br><span class="line">4.0K    ./naming-event.log</span><br><span class="line">728K    ./config-memory.log.2021-05-25.0</span><br><span class="line">4.8M    ./naming-push.log</span><br><span class="line">4.7M    ./naming-push.log.2021-05-26.0</span><br><span class="line">0       ./istio-main.log</span><br><span class="line">6.8M    ./core-auth.log</span><br><span class="line">11M     ./remote-digest.log.2021-05-27.0</span><br><span class="line">4.0K    ./naming-event.log.2021-05-26.0</span><br><span class="line">16K     ./nacos.log.2021-05-25.0</span><br><span class="line">8.0K    ./alipay-jraft.log</span><br><span class="line">3.3M    ./remote-digest.log.2021-05-25.0</span><br><span class="line">20K     ./tps-control.log</span><br><span class="line">4.0K    ./config-pull-check.log</span><br><span class="line">0       ./protocol-distro.log</span><br><span class="line">12K     ./config-trace.log</span><br><span class="line">224K    ./naming-performance.log.2021-05-27.0</span><br><span class="line">40K     ./tps-control-digest.log.2021-05-25.0</span><br><span class="line">8.0K    ./config-client-request.log.2021-05-25.0</span><br><span class="line">0       ./config-pull.log</span><br><span class="line">164K    ./naming-push.log.2021-05-25.0</span><br><span class="line">0       ./cmdb-main.log</span><br><span class="line">4.0K    ./config-trace.log.2021-05-25.0</span><br><span class="line">224K    ./naming-performance.log.2021-05-26.0</span><br><span class="line">0       ./config-notify.log</span><br><span class="line">4.0K    ./config-pull-check.log.2021-05-25.0</span><br><span class="line">12K     ./naming-server.log.2021-05-26.0</span><br><span class="line">12K     ./nacos.log</span><br><span class="line">12K     ./naming-server.log</span><br><span class="line">0       ./naming-rt.log</span><br><span class="line">4.0K    ./protocol-raft.log</span><br><span class="line">6.4M    ./core-auth.log.2021-05-26.0</span><br><span class="line">132K    ./config-client-request.log</span><br><span class="line">876K    ./tps-control-digest.log</span><br><span class="line">2.2M    ./config-memory.log.2021-05-27.0</span><br><span class="line">36K     ./nacos.log.2021-05-27.0</span><br><span class="line">4.0K    ./config-pull-check.log.2021-05-26.0</span><br><span class="line">4.0K    ./config-dump.log</span><br><span class="line">11M     ./remote-digest.log.2021-05-26.0</span><br><span class="line">880K    ./config-memory.log</span><br><span class="line">4.0K    ./remote.log</span><br><span class="line">36K     ./nacos.log.2021-05-26.0</span><br><span class="line">4.0K    ./config-server.log</span><br><span class="line">76K     ./naming-performance.log.2021-05-25.0</span><br><span class="line">4.0K    ./nacos-cluster.log</span><br><span class="line">0       ./remote-push.log</span><br><span class="line">4.0K    ./config-fatal.log</span><br><span class="line">4.0K    ./naming-raft.log</span><br><span class="line">692K    ./tps-control-digest.log.2021-05-26.0</span><br><span class="line">4.0K    ./naming-server.log.2021-05-25.0</span><br><span class="line">120K    ./config-client-request.log.2021-05-26.0</span><br><span class="line">0       ./tps-control-detail.log</span><br><span class="line">8.0K    ./config-trace.log.2021-05-26.0</span><br><span class="line">59M     .</span><br></pre></td></tr></tbody></table></figure>
<h3 id="firewall防火墙"><a href="#firewall防火墙" class="headerlink" title="firewall防火墙"></a>firewall防火墙</h3><h4 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h4><blockquote>
<p>查看防火墙状态</p>
<ul>
<li><code>firewall-cmd --state</code></li>
<li><code>systemctl status firewalld</code></li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">running</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl status firewalld</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sat 2021-07-03 10:13:48 CST; 2min 8s ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 1704 (firewalld)</span><br><span class="line">   CGroup: /system.slice/firewalld.service</span><br><span class="line">           └─1704 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class="line"></span><br><span class="line">Jul 03 10:13:48 localhost.horsehost systemd[1]: Stopped firewalld - dynamic firewall daemon.</span><br><span class="line">Jul 03 10:13:48 localhost.horsehost systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class="line">Jul 03 10:13:48 localhost.horsehost systemd[1]: Started firewalld - dynamic firewall daemon.</span><br><span class="line">Jul 03 10:13:48 localhost.horsehost firewalld[1704]: WARNING: AllowZoneDrifting is enabled. This is considered an i...now.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="防火墙的开启、重启、关闭"><a href="#防火墙的开启、重启、关闭" class="headerlink" title="防火墙的开启、重启、关闭"></a>防火墙的开启、重启、关闭</h4><blockquote>
<p>防火墙的开启、重启、关闭等操作（具体效果不再做演示，记得就好）</p>
<ul>
<li>开启<ul>
<li><code>systemctl start firewalld</code></li>
<li><code>service firewalld start</code></li>
</ul>
</li>
<li>重启<ul>
<li><code>systemctl restart firewalld</code></li>
<li><code>service firewalld restart</code></li>
</ul>
</li>
<li>关闭<ul>
<li><code>systemctl stop firewalld</code></li>
<li><code>service firewalld stop</code></li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="查看防火墙规则"><a href="#查看防火墙规则" class="headerlink" title="查看防火墙规则"></a>查看防火墙规则</h4><blockquote>
<p>查看防火墙全部规则：<code>firewall-cmd --list-all</code></p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --list-all</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens33</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 3306/tcp  <span class="comment"># 目前开启的端口为3306</span></span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br></pre></td></tr></tbody></table></figure>
<h4 id="防火墙端口常用操作"><a href="#防火墙端口常用操作" class="headerlink" title="防火墙端口常用操作"></a>防火墙端口常用操作</h4><blockquote>
<p>查看防火墙所有已开启的端口：<code>firewall-cmd --list-ports</code></p>
<p>添加新的端口：<code>firewall-cmd --zone=public --add-port=12701/tcp --permanent</code></p>
<p>添加连续的端口：<code>firewall-cmd --zone=public --add-port=8080-8848/tcp --permanent</code></p>
<p>关闭端口：<code>firewall-cmd --zone=public --remove-port=12701/tcp --permanent</code></p>
<p>查询某个端口是否开放：<code>firewall-cmd --query-port=6379/tcp</code></p>
<p><strong>注意：对于端口的操作，必须重启防火墙才能生效。</strong></p>
<p>参数解释：</p>
<ul>
<li>firwall-cmd：是Linux提供的操作firewall的一个工具</li>
<li>—permanent：表示设置为持久，没有此参数重启后失效</li>
<li>—add-port：标识添加的端口</li>
<li>—remove-port：标识要移除的端口</li>
<li>—query-port：标识要查询的端口</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查询某个端口是否开放</span></span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --query-port=6379/tcp</span></span><br><span class="line">yes</span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --query-port=5602/tcp</span></span><br><span class="line">no</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用难记命令</title>
    <url>/Linux/Linux%E5%B8%B8%E7%94%A8%E9%9A%BE%E8%AE%B0%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Linux常用难记命令"><a href="#Linux常用难记命令" class="headerlink" title="Linux常用难记命令"></a>Linux常用难记命令</h2><ul>
<li><code>查看消耗内存最多的前10个进程</code></li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ps auxw|head -1;ps auxw|sort -rn -k4|head -10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行显示</span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root      3327  0.5 38.5 3048056 726160 ?      Sl   14:24   2:13 /usr/<span class="built_in">local</span>/jdk/jdk1.8.0_291/bin/java -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=<span class="literal">true</span> -Dnacos.member.list= -Djava.ext.dirs=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_291/jre/lib/ext:/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_291/lib/ext -Xloggc:/usr/<span class="built_in">local</span>/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/usr/<span class="built_in">local</span>/nacos/plugins/health,/usr/<span class="built_in">local</span>/nacos/plugins/cmdb -Dnacos.home=/usr/<span class="built_in">local</span>/nacos -jar /usr/<span class="built_in">local</span>/nacos/target/nacos-server.jar --spring.config.additional-location=file:/usr/<span class="built_in">local</span>/nacos/conf/ --logging.config=/usr/<span class="built_in">local</span>/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288 nacos.nacos</span><br><span class="line">mysql    14876  0.0 17.9 1182900 337868 ?      Sl   May25   4:03 /usr/<span class="built_in">local</span>/mysql/bin/mysqld --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/data --plugin-dir=/usr/<span class="built_in">local</span>/mysql/lib/plugin --user=mysql --log-error=/usr/<span class="built_in">local</span>/mysql/data/mysql.err --pid-file=/usr/<span class="built_in">local</span>/mysql/data/mysql.pid --socket=/tmp/mysql.sock --port=3306</span><br><span class="line">polkitd  23741  0.1  5.4 1757392 103336 ?      Sl   May25  19:07 /usr/<span class="built_in">local</span>/lib/erlang/erts-11.2.1/bin/beam.smp -W w -MBas ageffcbf -MHas ageffcbf -MBlmbcs 512 -MHlmbcs 512 -MMmcs 30 -P 1048576 -t 5000000 -stbt db -zdbbl 128000 -sbwt none -sbwtdcpu none -sbwtdio none -B i -- -root /usr/<span class="built_in">local</span>/lib/erlang -progname erl -- -home /var/lib/rabbitmq -- -pa  -noshell -noinput -s rabbit boot -boot start_sasl -lager crash_log <span class="literal">false</span> -lager handlers []</span><br><span class="line">mongod   28963  0.1  4.4 525104 82960 ?        S&lt;l  May25  21:57 /usr/bin/mongod -f /etc/mongod.conf</span><br><span class="line">root     23084  0.0  2.3 661128 43656 ?        Ssl  May25   1:05 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">root     23075  0.0  1.1 429400 21820 ?        Ssl  May25   4:44 /usr/bin/containerd</span><br><span class="line">root      1061  0.0  0.7 574288 13504 ?        Ssl  May25   0:48 /usr/bin/python2 -Es /usr/sbin/tuned -l -P</span><br><span class="line">root       366  0.0  0.5  72140 10456 ?        Ss   May25   0:30 /usr/lib/systemd/systemd-journald</span><br><span class="line">root      1063  0.0  0.5  61488 10124 ?        S&lt;Ls May25   0:00 /sbin/iscsid -f</span><br><span class="line">polkitd    507  0.0  0.3 614416  7296 ?        Ssl  May25   0:01 /usr/lib/polkit-1/polkitd --no-debug</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>查看当前处于监听状态的TCP端口详细信息</code></li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">netstat -nltp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行显示</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1489/sshd           </span><br><span class="line">tcp        0      0 0.0.0.0:15672           0.0.0.0:*               LISTEN      23406/docker-proxy  </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1386/master         </span><br><span class="line">tcp        0      0 0.0.0.0:5672            0.0.0.0:*               LISTEN      23422/docker-proxy  </span><br><span class="line">tcp        0      0 0.0.0.0:27017           0.0.0.0:*               LISTEN      28963/mongod        </span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      14876/mysqld        </span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      21602/./redis-serve </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1489/sshd           </span><br><span class="line">tcp6       0      0 :::9848                 :::*                    LISTEN      3327/java           </span><br><span class="line">tcp6       0      0 :::15672                :::*                    LISTEN      23410/docker-proxy  </span><br><span class="line">tcp6       0      0 :::9849                 :::*                    LISTEN      3327/java           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1386/master         </span><br><span class="line">tcp6       0      0 :::7848                 :::*                    LISTEN      3327/java           </span><br><span class="line">tcp6       0      0 :::5672                 :::*                    LISTEN      23426/docker-proxy  </span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN      21602/./redis-serve </span><br><span class="line">tcp6       0      0 :::8848                 :::*                    LISTEN      3327/java  </span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>根据PID查询对应进程所在目录</code></li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ll /proc/PID号/exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行显示</span></span><br><span class="line">[root@horse /]<span class="comment"># ll /proc/3327/exe</span></span><br><span class="line">lrwxrwxrwx 1 root root 0 Jun  3 21:52 /proc/3327/exe -&gt; /usr/<span class="built_in">local</span>/jdk/jdk1.8.0_291/bin/java</span><br><span class="line">[root@horse /]<span class="comment"># ll /proc/14876/exe</span></span><br><span class="line">lrwxrwxrwx 1 root root 0 Jun  3 21:53 /proc/14876/exe -&gt; /usr/<span class="built_in">local</span>/mysql/bin/mysqld</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>根据进程名称查看进程启动时间</code></li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># netstat -nltp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1489/sshd           </span><br><span class="line">tcp        0      0 0.0.0.0:15672           0.0.0.0:*               LISTEN      23406/docker-proxy  </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1386/master         </span><br><span class="line">tcp        0      0 0.0.0.0:5672            0.0.0.0:*               LISTEN      23422/docker-proxy  </span><br><span class="line">tcp        0      0 0.0.0.0:27017           0.0.0.0:*               LISTEN      28963/mongod        </span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      14876/mysqld        </span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      21602/./redis-serve </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1489/sshd           </span><br><span class="line">tcp6       0      0 :::9848                 :::*                    LISTEN      3327/java           </span><br><span class="line">tcp6       0      0 :::15672                :::*                    LISTEN      23410/docker-proxy  </span><br><span class="line">tcp6       0      0 :::9849                 :::*                    LISTEN      3327/java           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1386/master         </span><br><span class="line">tcp6       0      0 :::7848                 :::*                    LISTEN      3327/java           </span><br><span class="line">tcp6       0      0 :::5672                 :::*                    LISTEN      23426/docker-proxy  </span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN      21602/./redis-serve </span><br><span class="line">tcp6       0      0 :::8848                 :::*                    LISTEN      3327/java           </span><br><span class="line">[root@horse ~]<span class="comment"># ps axo pid,ppid,comm,pmem,lstart | grep mysqld</span></span><br><span class="line">14661     1 mysqld_safe      0.0 Tue May 25 15:53:26 2021</span><br><span class="line">14876 14661 mysqld          19.0 Tue May 25 15:53:26 2021</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><code>启动java -jar后台运行程序</code></li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">java -jar xxx.jar &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">nohup java -jar xxx.jar &amp;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装ElasticSearch和Kibana服务</title>
    <url>/Linux/Linux%E5%AE%89%E8%A3%85ElasticSearch%E5%92%8CKibana%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="Linux安装ElasticSearch和Kibana服务"><a href="#Linux安装ElasticSearch和Kibana服务" class="headerlink" title="Linux安装ElasticSearch和Kibana服务"></a>Linux安装ElasticSearch和Kibana服务</h2><blockquote>
<p>这里选择比较方便的Docker方式进行安装，包括<code>ElasticSearch</code>、<code>Kibana</code>、<code>IK分词器</code>等服务</p>
<ul>
<li>SpringBoot和Elasticsearch版本关系</li>
</ul>
<blockquote>
<p>安装Elasticsearch之前，一定要再三确认和SpringBoot中的版本是否对应，否则会又不兼容的问题产生。</p>
</blockquote>
<p><img src="https://i.loli.net/2021/06/21/r5i41yFeORsclLE.png" alt="SpringBoot和Elasticsearch版本关系"></p>
<ul>
<li>SpringBoot、SpringCloud、SpringCloud Alibabab版本关系</li>
</ul>
<blockquote>
<p>以下版本的对应关系，都没有问题，大家可以放心使用。</p>
</blockquote>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210621212235.png" alt="SpringBoot、SpringCloud、SpringCloud Alibabab版本关系"></p>
</blockquote>
<h3 id="ElasticSearch安装"><a href="#ElasticSearch安装" class="headerlink" title="ElasticSearch安装"></a>ElasticSearch安装</h3><h4 id="拉取ElasticSearch镜像"><a href="#拉取ElasticSearch镜像" class="headerlink" title="拉取ElasticSearch镜像"></a>拉取ElasticSearch镜像</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.13.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动ElasticSearch"><a href="#启动ElasticSearch" class="headerlink" title="启动ElasticSearch"></a>启动ElasticSearch</h4><blockquote>
<p><strong>注意：必须添加<code>-e "discovery.type=single-node"</code>启动参数【单机模式启动】，否则会启动后自动关闭</strong></p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">"discovery.type=single-node"</span> -d elasticsearch:7.13.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h4><blockquote>
<p>浏览器访问<code>http://121.5.168.31:9200</code>查看是否启动成功。出现类似下面的信息，说明启动成功。</p>
</blockquote>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"530dd7820315"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"7O0fjpBJTkmn_axwmZX0RQ"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : {</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"7.13.0"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"508c38a"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2019-06-20T15:54:18.811730Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"8.0.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><h5 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h5><blockquote>
<p>启动es服务，进入容器，修改<code>elasticsearch.yml</code>文件</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入启动中的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器ID] /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入config目录，并打开elasticsearch.yml</span></span><br><span class="line">vim /usr/share/elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>在文件中加上下面配置，解决跨域问题</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>保存退出，重启容器</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker restart [容器ID]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="IK分词器安装"><a href="#IK分词器安装" class="headerlink" title="IK分词器安装"></a>IK分词器安装</h3><blockquote>
<p>访问<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">IK分词器各版本下载</a>网站，下载对应版本的压缩包。</p>
</blockquote>
<p><img src="https://i.loli.net/2021/06/21/UWAm5DT7Oc41FSG.png" alt="IK分词器各版本"></p>
<blockquote>
<p>进入es容器，在plugins目录中解压<code>elasticsearch-analysis-ik-7.13.0.zip</code>文件，删除压缩包。具体可以在Kibana可视化界面中测试是否安装成功。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将压缩包复制进容器中</span></span><br><span class="line">docker cp [压缩包路径] [容器ID]:/usr/share/elasticsearch/plugins/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器ID] /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入对应文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/elasticsearch/plugins/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在 ik-analysis目录下解压文件</span></span><br><span class="line">unzip elasticsearch-analysis-ik-7.13.0.zip -d ik-analyzerz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除压缩包</span></span><br><span class="line">rm -rf elasticsearch-analysis-ik-7.13.0.zip</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h3><h4 id="拉取Kibana镜像"><a href="#拉取Kibana镜像" class="headerlink" title="拉取Kibana镜像"></a>拉取Kibana镜像</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull kibana:7.13.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动Kibana服务"><a href="#启动Kibana服务" class="headerlink" title="启动Kibana服务"></a>启动Kibana服务</h4><blockquote>
<p>启动Kibana服务，访问<code>http:121.5.168.31:5601</code>，测试是否启动成功。</p>
<p>注意：需要使用 <code>--link</code>参数，进行上面启动的ElasticSearch容器和Kibana的绑定</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name kibana --link elasticsearch -p 5601:5601 -d kibana:7.13.0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="服务综合测试"><a href="#服务综合测试" class="headerlink" title="服务综合测试"></a>服务综合测试</h3><ul>
<li>分词器测试</li>
</ul>
<p><img src="https://i.loli.net/2021/06/21/ThX5Rq1b8gKEDmt.png" alt="分词器测试"></p>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>ElasticSearch</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从同步</title>
    <url>/MySQL/MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="MySQL主从同步-资源同步"><a href="#MySQL主从同步-资源同步" class="headerlink" title="MySQL主从同步(资源同步)"></a>MySQL主从同步(资源同步)</h1><h3 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h3><blockquote>
<p>此文档说明并未涉及mysql主从同步服务搭建过程，仅仅是主从服务之间数据同步的简单操作过程。</p>
<p>主服务节点名称：<code>master</code></p>
<p>从服务节点名称：<code>slave</code></p>
</blockquote>
<h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><ol>
<li>slave服务</li>
</ol>
<blockquote>
<p>停止slave的同步服务</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">stop slave</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>master服务</li>
</ol>
<blockquote>
<p>进入Mysql客户端，锁定数据库表</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>master服务</li>
</ol>
<blockquote>
<p>备份指定数据库 （yh_erp）到指定路径下的文件中</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mysqldump -uroot -p yh_erp &gt; /home/backup/mysql/yh_erp_back.sql</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>master服务</li>
</ol>
<blockquote>
<p>copy备份资源到slave服务器</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/backup/mysql</span><br><span class="line">scp yh_erp_back.sql root@192.168.0.71:/tmp/</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>master服务</li>
</ol>
<blockquote>
<p>记录master服务中的 <code>master_log_file</code>和<code>master_log_pos</code>的值（后面需要使用）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>slave服务</li>
</ol>
<blockquote>
<p>还原 yh_erp 数据库</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">use yh_erp</span><br><span class="line">source /tmp/yh_erp_back.sql</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>slave服务</li>
</ol>
<blockquote>
<p>更新主从配置（第一次的话需要输入密码 -&gt; 服务器密码）</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">change master to master_host = '192.168.0.70', master_user = 'root', master_port=3306, master_password='tps*yh2020', master_log_file = '前面的值', master_log_pos=21059059;</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>slave服务</li>
</ol>
<blockquote>
<p>开启同步服务</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">start slave</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>master服务</li>
</ol>
<blockquote>
<p>关闭锁表</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<ol>
<li>主从资源同步完成</li>
</ol>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决mybatis foreach in 参数超1000条问题</title>
    <url>/Mybatis/%E8%A7%A3%E5%86%B3mybatis%20foreach%20in%20%E5%8F%82%E6%95%B0%E8%B6%851000%E6%9D%A1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决mybatis-foreach-in-参数超1000条问题"><a href="#解决mybatis-foreach-in-参数超1000条问题" class="headerlink" title="解决mybatis foreach in 参数超1000条问题"></a>解决mybatis foreach in 参数超1000条问题</h1><blockquote>
<p>mybaits 中的foreach in的查询时候，上限in的个数是1000个，如果参数超过1000个，主要有以下两种解决办法：</p>
<ul>
<li>利用<code>or</code>连接符拼接</li>
<li>利用<code>$</code>符号直接解析此1000多个字符串参数(无长度限制)</li>
</ul>
</blockquote>
<h2 id="or连接符拼接"><a href="#or连接符拼接" class="headerlink" title="or连接符拼接"></a>or连接符拼接</h2><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeachOne"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM tb_blog tb</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        tb.is_deleted = 1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null and ids.size() != 0"</span>&gt;</span></span><br><span class="line">            AND tb.id IN</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"index % 999 == 998"</span>&gt;</span></span><br><span class="line">                    NULL ) OR tb.id IN (</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                #{id}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>SQL解析如下：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_blog tb <span class="keyword">where</span> tb.is_deleted<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> tb.id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>,...<span class="string">'998'</span>,<span class="keyword">NULL</span>) <span class="keyword">or</span> tb.id <span class="keyword">in</span> (<span class="string">'999'</span>,<span class="string">'1000'</span>,...,<span class="keyword">NULL</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="符号解析"><a href="#符号解析" class="headerlink" title="$符号解析"></a>$符号解析</h2><blockquote>
<p><strong>对于使用<code>$</code>符号拼接参数，没有任何长度限制，但是有SQL注入的风险，需要谨慎使用</strong></p>
<p>参数必须是字符串。如果参数原本是个list集合，那么必须转换为已<code>逗号</code>分割的字符串。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">// $ 符号的foreach.in查询</span></span><br><span class="line">List&lt;String&gt; ids = blogs.stream().map(Blog::getId).collect(Collectors.toList());</span><br><span class="line">    String id = String.join(<span class="string">","</span>, ids);</span><br><span class="line">    List&lt;Blog&gt; twoList = blogMapper.queryBlogForeachTwo(id);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeachTwo"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM tb_blog tb</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        tb.is_deleted = 1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null and id != ''"</span>&gt;</span></span><br><span class="line">            AND tb.id IN (${id});</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>SQL解析如下：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_blog tb <span class="keyword">where</span> tb.is_deleted<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> tb.id <span class="keyword">in</span> (<span class="string">'1'</span>,<span class="string">'2'</span>,...<span class="string">'1000'</span>,<span class="string">'1001'</span>,...) </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引优化简析</title>
    <url>/MySQL/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<h1 id="MySQL索引优化简析"><a href="#MySQL索引优化简析" class="headerlink" title="MySQL索引优化简析"></a>MySQL索引优化简析</h1><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="单值索引"><a href="#单值索引" class="headerlink" title="单值索引"></a>单值索引</h3><blockquote>
<p>概念：一个索引只包含单个数量的列，一个表可以有多个单值索引</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># 单值索引</span><br><span class="line"><span class="keyword">create</span> index idx_title <span class="keyword">on</span> tb_blog(title);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><blockquote>
<p>索引列的值必须唯一，但是允许有空值存在</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># 唯一索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index idx_title <span class="keyword">on</span> tb_blog(title);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><blockquote>
<p>字段被设置为主键后，数据库会自动为该字段建立索引，innodb引擎下被称为<code>聚簇索引</code></p>
</blockquote>
<h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><blockquote>
<p>一个索引包含多个列，一个表中索引的数量尽量不要太多</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># 复合索引</span><br><span class="line"><span class="keyword">create</span> index idx_username_email <span class="keyword">on</span> tb_user(username,email);</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># 查看某个表索引</span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tb_blog</span><br><span class="line"></span><br><span class="line"># 删除指定索引</span><br><span class="line"><span class="keyword">drop</span> index idx_title <span class="keyword">from</span> tb_blog</span><br></pre></td></tr></tbody></table></figure>
<h3 id="索引创建时机"><a href="#索引创建时机" class="headerlink" title="索引创建时机"></a>索引创建时机</h3><blockquote>
<p>适合创建索引：</p>
<ul>
<li>频繁作为查询条件的字段应该创建索引</li>
<li>查询中与其他表关联的字段适合创建索引（外键关系字段）</li>
<li>查询中作为排序条件的字段适合创建索引（排序字段创建索引后能够大幅度体生排序速度）</li>
<li>查询中作为统计或者分组的字段</li>
</ul>
<p><strong>注意：一般来说，复合索引的性价比要比单值索引的性价比要高，如果条件允许情况下，尽量选择复合索引</strong></p>
<p>不适合创建：</p>
<ul>
<li>表数据过少</li>
<li>经常增删改的表或者字段</li>
<li>where条件中用不太到的字段</li>
<li>过滤性不好的字段（字段值的辨识性不高，例如：用户的性别：男/女，文章类型：原创/转载 等等）</li>
</ul>
</blockquote>
<h2 id="Explain性能分析"><a href="#Explain性能分析" class="headerlink" title="Explain性能分析"></a>Explain性能分析</h2><blockquote>
<p>explain分析结构图示：<br><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210803085543.png" alt="explain关键字结构"></p>
</blockquote>
<h3 id="关键字简析"><a href="#关键字简析" class="headerlink" title="关键字简析"></a>关键字简析</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><blockquote>
<p>查询的序列号，包含一组数字，表示查询中执行select子句或者操作表的顺序</p>
<ul>
<li>id值相同：从上至下一次执行</li>
<li>id值不同：如果是存在子查询，id值的序号会递增，id值越大优先级越高，越先被执行</li>
<li>id值同时存在相同和不同：id如果相同，可认为是一组，从上至下顺序执行；在所有组中，id值越大，优先级越高</li>
</ul>
</blockquote>
<h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><blockquote>
<p>查询的类型，主要用于区别普通查询、联合查询、子查询等复杂查询</p>
<p>类型图示：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210803134251.png" alt="查询类型"></p>
</blockquote>
<h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><blockquote>
<p>表示数据来源于那张表（没什么实际作用）</p>
</blockquote>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><blockquote>
<p>查询的访问类型，比较重要的优化指标，指标的值从最好到最坏依次如下所示：</p>
<ol>
<li>system</li>
<li>const</li>
<li>eq_ref</li>
<li><code>ref</code></li>
<li>fulltext</li>
<li>ref_or_null</li>
<li>index_merge</li>
<li>unique_subquery</li>
<li>index_subquery</li>
<li><code>range</code></li>
<li><code>index</code></li>
<li>all</li>
</ol>
<p><strong>注意：一般来说，得保证查询至少达到 <code>range</code> 级别，最好能达到 <code>ref</code> 级别</strong></p>
</blockquote>
<h4 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h4><blockquote>
<p>显示查询过程中可能应用在这张表中的索引，存在一个或者多个。</p>
<p>注意：查询涉及到的字段上存在索引，则该索引被列出，但是不一定被查询实际使用。</p>
</blockquote>
<h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><blockquote>
<p>查询中实际使用到的索引，如果为null,则表示没有使用索引</p>
</blockquote>
<h4 id="ken-len"><a href="#ken-len" class="headerlink" title="ken_len"></a>ken_len</h4><blockquote>
<p>表示索引中使用的字节数，可通过该列计算查询中使用到的索引的长度。</p>
<p>含义：key_len字段能够检查此次查询是否充分利用上了索引。key_len的值越大，表明该索引使用的越充分。</p>
<p>索引计算说明：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210803140322.png" alt="索引长度计算"></p>
</blockquote>
<h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><blockquote>
<p>显示索引的那一列被使用了。如果可能的话，此值显示为一个常数，表明那些列或者常量被用于查找索引列上的值。</p>
</blockquote>
<h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h4><blockquote>
<p>显示MySQL认为此查询语句执行查询时必须检查的行数，越少越好。</p>
</blockquote>
<h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h4><blockquote>
<p>其他的额外重要的信息</p>
<ul>
<li>using where：表明使用了 where 条件过滤</li>
</ul>
<ul>
<li>using firesort：MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引排序。无法利用索引完成的排序操作被称为“文件排序”</li>
</ul>
<ul>
<li>using temporary：MySQL在对查询结果排序时会使用临时表保存结果，常见于 order by 排序和 group by 的分组操作中</li>
</ul>
<ul>
<li>using index：代表表示相应的 select 操作中使用了覆盖索引(Covering Index)，避免访问了表的数据行，效率不错！ 如果同时出现 using where，表明索引被用来执行索引键值的查找;如果没有同时出现 using where，表明索引只是 用来读取数据而非利用索引执行查找</li>
</ul>
<ul>
<li>using join buffer：表示使用了连接缓存</li>
</ul>
</blockquote>
<h3 id="索引失效简析"><a href="#索引失效简析" class="headerlink" title="索引失效简析"></a>索引失效简析</h3><h4 id="全值匹配我最爱"><a href="#全值匹配我最爱" class="headerlink" title="全值匹配我最爱"></a>全值匹配我最爱</h4><blockquote>
<p>解释：where后面需要过滤的字段按照顺序（<code>不按照顺序也可以，SQL会自动优化</code>）在索引中可以匹配的上</p>
</blockquote>
<h4 id="最左前缀要遵守"><a href="#最左前缀要遵守" class="headerlink" title="最左前缀要遵守"></a>最左前缀要遵守</h4><blockquote>
<p>解释：</p>
<ul>
<li><strong>带头大哥不能丢：</strong>一定要按照建立索引的字段顺序进行where后面过滤条件的书写，带头的索引字段需要写在最前面，否则后面字段的索引全部失效（<code>全部失效</code>）</li>
<li><strong>中间兄弟不能断：</strong>过滤条件的书写不要字段，一旦跳过某个字段，那么此字段后面的索引字段都将失效（<code>部分失效</code>）</li>
</ul>
</blockquote>
<h4 id="索引列上少计算"><a href="#索引列上少计算" class="headerlink" title="索引列上少计算"></a>索引列上少计算</h4><blockquote>
<p>不要再索引列上进行【<code>计算</code>，<code>函数</code>，<code>手动/自动类型转换</code>】操作，否则索引将全部失效</p>
</blockquote>
<h4 id="范围之后全失效"><a href="#范围之后全失效" class="headerlink" title="范围之后全失效"></a>范围之后全失效</h4><blockquote>
<p>如果在复合索引的某个字段上使用范围查询，那么后面字段的索引将全部失效</p>
<p><code>建议：建立索引时，将可能会用到范围查询的字段尽量放到</code></p>
</blockquote>
<h4 id="LIKE百分写最右"><a href="#LIKE百分写最右" class="headerlink" title="LIKE百分写最右"></a>LIKE百分写最右</h4><blockquote>
<p>只有 <code>%</code> 匹配符写在右边的时候，索引才不会失效。类似于 <code>%blog%</code>，<code>%blog</code> 这样的匹配索引都将失效。</p>
<p>示例：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210804201544.png" alt="image-20210804201530514"></p>
</blockquote>
<h4 id="覆盖索引不写"><a href="#覆盖索引不写" class="headerlink" title="覆盖索引不写*"></a>覆盖索引不写*</h4><blockquote>
<p>查询字段的时候，如果这些字段全部都存在于索引中，一定不要写 <code>*</code> 符号，尽量按照字段进行查询。</p>
</blockquote>
<h4 id="不等空值还有OR"><a href="#不等空值还有OR" class="headerlink" title="不等空值还有OR"></a>不等空值还有OR</h4><blockquote>
<p>不等空值还有OR，隐式转换要注意。</p>
<ul>
<li>不等号（<code>!=,&lt;&gt;</code>）：MySQL在使用不等条件过滤时，有时索引会失效，导致全表扫描</li>
<li><code>is not null</code>索引失效，全表扫描 <code>is null</code>索引失效</li>
<li>使用 <code>or</code> 作为过滤条件，有时也会导致索引失效，全表扫描<ul>
<li>建议：如果条件允许情况下，可以使用 <code>union all</code> 或者 <code>union</code> 来替代 or</li>
</ul>
</li>
<li>防止值类型的<code>隐式转换</code>，例如：char 类型隐式转换为 int 类型，会导致索引失效</li>
</ul>
</blockquote>
<h4 id="练习示例"><a href="#练习示例" class="headerlink" title="练习示例"></a>练习示例</h4><blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建复合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_a_b_c <span class="keyword">on</span> tb_blog(a,b,c);</span><br></pre></td></tr></tbody></table></figure>
<p>示例：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210804203127.png" alt="索引练习1"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210804203049.png" alt="索引练习2"></p>
</blockquote>
<h3 id="索引优化简析"><a href="#索引优化简析" class="headerlink" title="索引优化简析"></a>索引优化简析</h3><h4 id="关联查询优化"><a href="#关联查询优化" class="headerlink" title="关联查询优化"></a>关联查询优化</h4><blockquote>
<p>left join：</p>
<ul>
<li>优化关联查询时，只有在被驱动表上创建索引才能生效</li>
<li>left join 时，<code>左侧的为驱动表，右侧为被驱动表</code></li>
</ul>
<p>inner join：</p>
<ul>
<li>inner join 时，MySQL会自动优化，将小结果集的表作为驱动表</li>
</ul>
<p>注意：能够直接多表关联的尽量直接使用 join 关联，不要使用子查询（很难使用到索引）</p>
</blockquote>
<h4 id="排序分组优化"><a href="#排序分组优化" class="headerlink" title="排序分组优化"></a>排序分组优化</h4><blockquote>
<ol>
<li>order by 当没有 <code>where 或者 limit</code> 过滤条件时，不会使用索引</li>
<li>order by 的两个索引字段排序时，书写的顺序不能乱，例如：索引顺序：a-b，那么order by 的顺序如果是：b-a，必将会进行文件排序：<code>user fielsort</code></li>
<li>group by 没有过滤条件时，也会使用到索引</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL经典50题</title>
    <url>/MySQL/MySQL%E7%BB%8F%E5%85%B850%E9%A2%98/</url>
    <content><![CDATA[<h2 id="MySQL经典50题"><a href="#MySQL经典50题" class="headerlink" title="MySQL经典50题"></a>MySQL经典50题</h2><blockquote>
<p><span class="github-emoji"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🍰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🚯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>♐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>👩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<p>MySQL经典50题练习题，持续更新中…</p>
</blockquote>
<h3 id="表初始化"><a href="#表初始化" class="headerlink" title="表初始化"></a>表初始化</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-- 建表</span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE `tb_student`(</span><br><span class="line">	`s_id` VARCHAR(20),</span><br><span class="line">	`s_name` VARCHAR(20) NOT NULL DEFAULT '',</span><br><span class="line">	`s_birth` VARCHAR(20) NOT NULL DEFAULT '',</span><br><span class="line">	`s_sex` VARCHAR(10) NOT NULL DEFAULT '',</span><br><span class="line">	PRIMARY KEY(`s_id`)</span><br><span class="line">);</span><br><span class="line">-- 课程表</span><br><span class="line">CREATE TABLE `tb_course`(</span><br><span class="line">	`c_id`  VARCHAR(20),</span><br><span class="line">	`c_name` VARCHAR(20) NOT NULL DEFAULT '',</span><br><span class="line">	`t_id` VARCHAR(20) NOT NULL,</span><br><span class="line">	PRIMARY KEY(`c_id`)</span><br><span class="line">);</span><br><span class="line">-- 教师表</span><br><span class="line">CREATE TABLE `tb_teacher`(</span><br><span class="line">	`t_id` VARCHAR(20),</span><br><span class="line">	`t_name` VARCHAR(20) NOT NULL DEFAULT '',</span><br><span class="line">	PRIMARY KEY(`t_id`)</span><br><span class="line">);</span><br><span class="line">-- 成绩表</span><br><span class="line">CREATE TABLE `tb_score`(</span><br><span class="line">	`s_id` VARCHAR(20),</span><br><span class="line">	`c_id`  VARCHAR(20),</span><br><span class="line">	`s_score` INT(3),</span><br><span class="line">	PRIMARY KEY(`s_id`,`c_id`)</span><br><span class="line">);</span><br><span class="line">-- 插入学生表测试数据</span><br><span class="line">insert into tb_student values('01' , '赵雷' , '1990-01-01' , '男');</span><br><span class="line">insert into tb_student values('02' , '钱电' , '1990-12-21' , '男');</span><br><span class="line">insert into tb_student values('03' , '孙风' , '1990-05-20' , '男');</span><br><span class="line">insert into tb_student values('04' , '李云' , '1990-08-06' , '男');</span><br><span class="line">insert into tb_student values('05' , '周梅' , '1991-12-01' , '女');</span><br><span class="line">insert into tb_student values('06' , '吴兰' , '1992-03-01' , '女');</span><br><span class="line">insert into tb_student values('07' , '郑竹' , '1989-07-01' , '女');</span><br><span class="line">insert into tb_student values('08' , '王菊' , '1990-01-20' , '女');</span><br><span class="line">-- 课程表测试数据</span><br><span class="line">insert into tb_course values('01' , '语文' , '02');</span><br><span class="line">insert into tb_course values('02' , '数学' , '01');</span><br><span class="line">insert into tb_course values('03' , '英语' , '03');</span><br><span class="line"></span><br><span class="line">-- 教师表测试数据</span><br><span class="line">insert into tb_teacher values('01' , '张三');</span><br><span class="line">insert into tb_teacher values('02' , '李四');</span><br><span class="line">insert into tb_teacher values('03' , '王五');</span><br><span class="line"></span><br><span class="line">-- 成绩表测试数据</span><br><span class="line">insert into tb_score values('01' , '01' , 80);</span><br><span class="line">insert into tb_score values('01' , '02' , 90);</span><br><span class="line">insert into tb_score values('01' , '03' , 99);</span><br><span class="line">insert into tb_score values('02' , '01' , 70);</span><br><span class="line">insert into tb_score values('02' , '02' , 60);</span><br><span class="line">insert into tb_score values('02' , '03' , 80);</span><br><span class="line">insert into tb_score values('03' , '01' , 80);</span><br><span class="line">insert into tb_score values('03' , '02' , 80);</span><br><span class="line">insert into tb_score values('03' , '03' , 80);</span><br><span class="line">insert into tb_score values('04' , '01' , 50);</span><br><span class="line">insert into tb_score values('04' , '02' , 30);</span><br><span class="line">insert into tb_score values('04' , '03' , 20);</span><br><span class="line">insert into tb_score values('05' , '01' , 76);</span><br><span class="line">insert into tb_score values('05' , '02' , 87);</span><br><span class="line">insert into tb_score values('06' , '01' , 31);</span><br><span class="line">insert into tb_score values('06' , '03' , 34);</span><br><span class="line">insert into tb_score values('07' , '02' , 89);</span><br><span class="line">insert into tb_score values('07' , '03' , 98);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="50题简析"><a href="#50题简析" class="headerlink" title="50题简析"></a>50题简析</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><blockquote>
<p><strong>查询”01”课程比”02”课程成绩高的学生的信息及课程分数</strong></p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：</p>
<ul>
<li>包括01有成绩，02无成绩的情况</li>
<li>第一次用inner join 意义在于01课程必须有成绩，直接过滤掉没有01课程成绩的统计同学，第二次使用left join意义在于02课程成绩可以为NULL。这样也满足01课程比02课程成绩高的情况</li>
</ul>
<p><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>inner join 内连接和 left join 左连接的区别</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	ts.*,</span><br><span class="line">	sca.s_score AS `01_score`,</span><br><span class="line">	scb.s_score AS `02_score`</span><br><span class="line">FROM</span><br><span class="line">	tb_student ts</span><br><span class="line">	INNER JOIN tb_score sca ON ts.s_id = sca.s_id </span><br><span class="line">	AND sca.c_id = '01'</span><br><span class="line">	LEFT JOIN tb_score scb ON ts.s_id = scb.s_id </span><br><span class="line">	AND scb.c_id = '02' </span><br><span class="line">WHERE</span><br><span class="line">	sca.s_score &gt; scb.s_score </span><br><span class="line">	OR ( sca.s_score IS NOT NULL AND scb.s_score IS NULL );</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210710224325.png" alt="第1题"></p>
<hr>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote>
<p><strong>查询”01”课程比”02”课程成绩低的学生的信息及课程分数</strong></p>
<p><span class="github-emoji"><span>👩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：</p>
<ul>
<li>包括02有成绩，01无成绩的情况</li>
</ul>
<p><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>inner join 内连接和 left join 左连接的区别</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span>,</span><br><span class="line">       ta.s_score <span class="keyword">AS</span> `<span class="number">02</span>_score`,</span><br><span class="line">       tb.s_score <span class="keyword">AS</span> `<span class="number">01</span>_score`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">JOIN</span> tb_score ta <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> ta.s_id <span class="keyword">AND</span> ta.c_id <span class="operator">=</span> <span class="string">'02'</span></span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score tb <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> tb.s_id <span class="keyword">AND</span> tb.c_id <span class="operator">=</span> <span class="string">'01'</span></span><br><span class="line"><span class="keyword">WHERE</span> ta.s_score <span class="operator">&gt;</span> tb.s_score</span><br><span class="line">   <span class="keyword">OR</span> (ta.s_score <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> tb.s_score <span class="keyword">IS</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711195738.png" alt="第2题"></p>
<hr>
<h4 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h4><blockquote>
<p><strong>查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩（保留两位小数）</strong></p>
<p><strong>查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩（保留两位小数）</strong></p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：</p>
<ul>
<li>根据学号分组求平均成绩</li>
</ul>
<p><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>group by … having的使用</li>
<li>avg()聚合函数的使用</li>
<li>round(param1,param2)函数的使用</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩（保留两位小数）</span></span><br><span class="line"><span class="keyword">SELECT</span> ts.s_id, ts.s_name, ROUND(<span class="built_in">AVG</span>(t.s_score), <span class="number">2</span>) <span class="keyword">AS</span> `avgScore`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> t.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id</span><br><span class="line"><span class="keyword">HAVING</span> `avgScore` <span class="operator">&gt;=</span> <span class="number">60</span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩（保留两位小数）</span></span><br><span class="line"><span class="keyword">SELECT</span> ts.s_id, ts.s_name, ROUND(<span class="built_in">AVG</span>(t.s_score), <span class="number">2</span>) <span class="keyword">AS</span> `avgScore`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> t.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id</span><br><span class="line"><span class="keyword">HAVING</span> `avgScore` <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711201513.png" alt="第3题"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711201615.png" alt="第4题"></p>
<hr>
<h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><blockquote>
<p><strong>查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</strong></p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>必须使用外连接，因为有些同学可能没有选课，但是也要进行计算</li>
</ul>
<p><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>count()：当字段为NULL时，不计入统计数量</li>
<li>IFNULL(p1,p2)：如果p1不为NULL输出值为p1，否则值为p2</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> ts.s_id,</span><br><span class="line">       ts.s_name,</span><br><span class="line">       <span class="built_in">COUNT</span>(t.c_id)             <span class="keyword">AS</span> `courseCount`,</span><br><span class="line">       IFNULL(<span class="built_in">SUM</span>(t.s_score), <span class="number">0</span>) <span class="keyword">AS</span> `scoreSum`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> t.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id;</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><blockquote>
<p><strong>查询”李”姓老师的数量</strong></p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<ul>
<li>查询姓李的老师，只需要匹配姓氏即可</li>
</ul>
<p><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>CONCAT(‘李’, ‘%’)：右后缀匹配</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(tt.t_id)</span><br><span class="line"><span class="keyword">FROM</span> tb_teacher tt</span><br><span class="line"><span class="keyword">WHERE</span> tt.t_name <span class="keyword">LIKE</span> CONCAT(<span class="string">'李'</span>, <span class="string">'%'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711203018.png" alt="第6题"></p>
<hr>
<h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><blockquote>
<p><strong>查询学过”张三”老师课程的同学的信息</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 子查询方式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t.s_id</span><br><span class="line">                  <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                  <span class="keyword">WHERE</span> t.c_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tc.c_id</span><br><span class="line">                                   <span class="keyword">FROM</span> tb_course tc</span><br><span class="line">                                   <span class="keyword">WHERE</span> tc.t_id <span class="operator">=</span> (<span class="keyword">SELECT</span> tt.t_id</span><br><span class="line">                                                    <span class="keyword">FROM</span> tb_teacher tt</span><br><span class="line">                                                    <span class="keyword">WHERE</span> tt.t_name <span class="operator">=</span> <span class="string">'张三'</span>)));</span><br><span class="line"><span class="comment">-- 连表查询方式（推荐：会多走一次索引）</span></span><br><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> t.s_id</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_course tc <span class="keyword">ON</span> t.c_id <span class="operator">=</span> tc.c_id</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_teacher tt <span class="keyword">ON</span> tc.t_id <span class="operator">=</span> tt.t_id</span><br><span class="line"><span class="keyword">WHERE</span> tt.t_name <span class="operator">=</span> <span class="string">'张三'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- -------------------------------------------explain-------------------------------------------</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711204809.png" alt="第7题"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711205156.png" alt="explain分析"></p>
<hr>
<h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><blockquote>
<p><strong>查询没学过”张三”老师授课的同学的信息</strong></p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>: 包括没有选课的同学</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">not</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t.s_id</span><br><span class="line">                  <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                  <span class="keyword">WHERE</span> t.c_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tc.c_id</span><br><span class="line">                                   <span class="keyword">FROM</span> tb_course tc</span><br><span class="line">                                   <span class="keyword">WHERE</span> tc.t_id <span class="operator">=</span> (<span class="keyword">SELECT</span> tt.t_id</span><br><span class="line">                                                    <span class="keyword">FROM</span> tb_teacher tt</span><br><span class="line">                                                    <span class="keyword">WHERE</span> tt.t_name <span class="operator">=</span> <span class="string">'张三'</span>)));</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711205957.png" alt="第8题"></p>
<hr>
<h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><blockquote>
<p><strong>查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span>,</span><br><span class="line">       ta.c_id,</span><br><span class="line">       tb.c_id</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score ta <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> ta.s_id</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score tb <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> tb.s_id</span><br><span class="line"><span class="keyword">WHERE</span> ta.c_id <span class="operator">=</span> <span class="string">'01'</span></span><br><span class="line">  <span class="keyword">AND</span> tb.c_id <span class="operator">=</span> <span class="string">'02'</span>;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711210500.png" alt="第9题"></p>
<hr>
<h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><blockquote>
<p><strong>查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t.s_id</span><br><span class="line">                  <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                  <span class="keyword">WHERE</span> t.c_id <span class="operator">=</span> <span class="string">'01'</span>)</span><br><span class="line">  <span class="keyword">AND</span> ts.s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t.s_id</span><br><span class="line">                      <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                      <span class="keyword">WHERE</span> t.c_id <span class="operator">=</span> <span class="string">'02'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210711211125.png" alt="第10题"></p>
<hr>
<h4 id="11"><a href="#11" class="headerlink" title="11"></a>11</h4><blockquote>
<p> <strong>没有学习全部课程的同学</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> ts.s_id <span class="operator">=</span> t.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(ts.s_id) <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(tc.c_id) <span class="keyword">FROM</span> tb_course tc);</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="12"><a href="#12" class="headerlink" title="12"></a>12</h4><blockquote>
<p><strong>查询至少有一门课与学号为”01”的同学所学相同的同学的信息</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> t.s_id</span><br><span class="line">                  <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                  <span class="keyword">WHERE</span> t.c_id <span class="keyword">IN</span></span><br><span class="line">                        (<span class="keyword">SELECT</span> s.c_id</span><br><span class="line">                         <span class="keyword">FROM</span> tb_score s</span><br><span class="line">                         <span class="keyword">WHERE</span> s.s_id <span class="operator">=</span> <span class="string">''</span><span class="number">01</span><span class="string">''</span>));</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4><blockquote>
<p><strong>查询和”01”号的同学学习的课程完全相同的其他同学的信息</strong></p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<ul>
<li>查村课程信息完全相同的，只能进行比较操作</li>
</ul>
<p><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>GROUP_CONCAT()：将指定字段安装一定的分隔符进行连接，默认分隔符为：逗号。有点类似于java中的join方法</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> t.s_id</span><br><span class="line">    <span class="keyword">FROM</span> tb_score t</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.s_id</span><br><span class="line">    <span class="keyword">HAVING</span> GROUP_CONCAT(s.c_id，Separator <span class="string">'-'</span>) <span class="operator">=</span> (<span class="keyword">SELECT</span> GROUP_CONCAT(s.c_id，Separator <span class="string">'-'</span>)</span><br><span class="line">                                   <span class="keyword">FROM</span> tb_score s</span><br><span class="line">                                   <span class="keyword">WHERE</span> s.s_id <span class="operator">=</span> <span class="string">''</span><span class="number">01</span><span class="string">''</span>))</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="14"><a href="#14" class="headerlink" title="14"></a>14</h4><blockquote>
<p><strong>查询没学过”张三”老师讲授的任一门课程的学生姓名</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t.s_id</span><br><span class="line">                      <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                      <span class="keyword">WHERE</span> t.c_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> tc.c_id</span><br><span class="line">                                       <span class="keyword">FROM</span> tb_course tc</span><br><span class="line">                                       <span class="keyword">WHERE</span> tc.t_id <span class="operator">=</span> (<span class="keyword">SELECT</span> tt.t_id</span><br><span class="line">                                                        <span class="keyword">FROM</span> tb_teacher tt</span><br><span class="line">                                                        <span class="keyword">WHERE</span> tt.t_name <span class="operator">=</span> <span class="string">''</span>张三<span class="string">''</span></span><br><span class="line">                                       )));</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><blockquote>
<p><strong>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.s_id, ts.s_name, ROUND(<span class="built_in">AVG</span>(t.s_score), <span class="number">2</span>) <span class="keyword">AS</span> `avgScore`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> t.s_id <span class="operator">=</span> ts.s_id</span><br><span class="line"><span class="keyword">WHERE</span> ts.s_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> t.s_id</span><br><span class="line">                  <span class="keyword">FROM</span> tb_score t</span><br><span class="line">                  <span class="keyword">WHERE</span> t.s_score <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line">                  <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.s_id</span><br><span class="line">                  <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(t.s_id) <span class="operator">&gt;</span> <span class="number">2</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="16"><a href="#16" class="headerlink" title="16"></a>16</h4><blockquote>
<p><strong>检索”01”课程分数小于60，按分数降序排列的学生信息</strong></p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ts.<span class="operator">*</span>, t.s_score</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> t.s_id <span class="operator">=</span> ts.s_id</span><br><span class="line"><span class="keyword">WHERE</span> t.c_id <span class="operator">=</span> <span class="string">'01'</span></span><br><span class="line">  <span class="keyword">AND</span> t.s_score <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t.s_score <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h4 id="17"><a href="#17" class="headerlink" title="17"></a>17</h4><blockquote>
<p>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</p>
<p><span class="github-emoji"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:</p>
<ul>
<li>查询结果进行<code>行转列</code>操作</li>
<li>平均成绩应该是按照每个同学3门课程计算的</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一</span></span><br><span class="line"><span class="keyword">SELECT</span> ts.s_id, ts.s_name,</span><br><span class="line">       <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t.c_id <span class="operator">=</span> <span class="string">'01'</span> <span class="keyword">THEN</span> t.s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> `<span class="keyword">Language</span>`,</span><br><span class="line">       <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t.c_id <span class="operator">=</span> <span class="string">'02'</span> <span class="keyword">THEN</span> t.s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> `Math`,</span><br><span class="line">       <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> t.c_id <span class="operator">=</span> <span class="string">'03'</span> <span class="keyword">THEN</span> t.s_score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> `English`,</span><br><span class="line">       IFNULL(ROUND(<span class="built_in">SUM</span>(t.s_score) <span class="operator">/</span> <span class="number">3</span>, <span class="number">2</span>), <span class="number">0</span>) <span class="keyword">AS</span> `avgScore`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> t.s_id <span class="operator">=</span> ts.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `avgScore` <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二（推荐：比较简洁）</span></span><br><span class="line"><span class="keyword">SELECT</span> ts.s_id, ts.s_name,</span><br><span class="line">       <span class="built_in">SUM</span>(IF(t.c_id <span class="operator">=</span> <span class="string">'01'</span>, t.s_score, <span class="number">0</span>)) <span class="keyword">AS</span> `<span class="keyword">Language</span>`,</span><br><span class="line">       <span class="built_in">SUM</span>(IF(t.c_id <span class="operator">=</span> <span class="string">'02'</span>, t.s_score, <span class="number">0</span>)) <span class="keyword">AS</span> `Math`,</span><br><span class="line">       <span class="built_in">SUM</span>(IF(t.c_id <span class="operator">=</span> <span class="string">'03'</span>, t.s_score, <span class="number">0</span>)) <span class="keyword">AS</span> `English`,</span><br><span class="line">       IFNULL(ROUND(<span class="built_in">SUM</span>(t.s_score) <span class="operator">/</span> <span class="number">3</span>, <span class="number">2</span>), <span class="number">0</span>) <span class="keyword">AS</span> `avgScore`</span><br><span class="line"><span class="keyword">FROM</span> tb_student ts</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tb_score t <span class="keyword">ON</span> t.s_id <span class="operator">=</span> ts.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ts.s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `avgScore` <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure>
<hr>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#--18、查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</span><br><span class="line"># 及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</span><br><span class="line"></span><br><span class="line">SELECT tc.c_id,</span><br><span class="line">       tc.c_name,</span><br><span class="line">       MAX(ts.s_score) AS `maxScore`,</span><br><span class="line">       MIN(ts.s_score) AS `minScore`,</span><br><span class="line">       ROUND(AVG(ts.s_score), 2) AS `avgScore`,</span><br><span class="line">       ROUND(SUM(IF(ts.s_score &gt;= 60, 1, 0)) / SUM(IF(ts.s_score, 1, 0)), 2) AS `60-rate`,</span><br><span class="line">       ROUND(SUM(IF(ts.s_score &gt;= 70 AND ts.s_score &lt; 80, 1, 0)) / SUM(IF(ts.s_score, 1, 0)), 2) AS `78-rate`,</span><br><span class="line">       ROUND(SUM(IF(ts.s_score &gt;= 80 AND ts.s_score &lt; 90, 1, 0)) / SUM(IF(ts.s_score, 1, 0)), 2) AS `89-rate`,</span><br><span class="line">       ROUND(SUM(IF(ts.s_score &gt;= 90, 1, 0)) / SUM(IF(ts.s_score, 1, 0)), 2) AS `90-rate`</span><br><span class="line">FROM tb_course tc</span><br><span class="line">         LEFT JOIN tb_score ts ON ts.c_id = tc.c_id</span><br><span class="line">GROUP BY tc.c_id;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记中转站</title>
    <url>/notes/%E7%AC%94%E8%AE%B0%E4%B8%AD%E8%BD%AC%E7%AB%99/</url>
    <content><![CDATA[<h2 id="笔记中转站"><a href="#笔记中转站" class="headerlink" title="笔记中转站"></a>笔记中转站</h2><hr>
<h3 id="生活中的笔记资料"><a href="#生活中的笔记资料" class="headerlink" title="生活中的笔记资料"></a>生活中的笔记资料</h3><blockquote>
<ul>
<li><p>消息队列</p>
<ul>
<li><a href="http://mabin.horsemuzi.top/RabbitMQ.pdf">RabbitMQ点击下载</a></li>
</ul>
<hr>
</li>
<li><p>分布式检索引擎</p>
<ul>
<li><a href="http://mabin.horsemuzi.top/Elasticsearch.pdf">ElastisSearch点击下载</a></li>
</ul>
<hr>
</li>
<li><p>数据库</p>
<ul>
<li><a href="http://www.horsemuzi.top/">MySQL点击下载</a></li>
<li><a href="http://www.horsemuzi.top/">Redis点击下载</a></li>
<li><a href="http://www.horsemuzi.top/">MongoDB点击下载</a></li>
</ul>
</li>
<li><p>SpringBoot相关</p>
<ul>
<li><a href="http://www.horsemuzi.top/">SpringBoot点击下载</a></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus动态添加切换数据源</title>
    <url>/JAVA/MybatisPlus%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    <content><![CDATA[<h1 id="MybatisPlus动态添加切换数据源"><a href="#MybatisPlus动态添加切换数据源" class="headerlink" title="MybatisPlus动态添加切换数据源"></a>MybatisPlus动态添加切换数据源</h1><blockquote>
<p>MyabtisPlus集成Druid连接池，实现数据源的动态添加、删除、切换等操作。主要利用<code>@DS</code>注解实现动态切换。</p>
<p>原理步骤：</p>
<ol>
<li>在master主数据源库创建一个管理其他数据源的信息表，用于存储datasource的必要信息</li>
<li>当接收请求时，根据请求的自定义唯一标识，到MySQL读取数据源信息并动态的添加数据源，<code>一定程度上利用Redis进行缓存</code>。</li>
<li>利用MybatisPlus的<code>@DS</code>注解进行动态切换数据源</li>
<li>根据一定的算法，例如<code>lru算法（最少用的数据源）</code>，进行删除数据源。</li>
</ol>
<p><strong>MybatisPlus官网：<a href="[多数据源 | MyBatis-Plus](https://mybatis.plus/guide/dynamic-datasource.html">MybatisPlus</a>)</strong></p>
<p><strong>动态数据源官网：<a href="[集成Druid | 动态数据源 (dynamic-datasource.com">dynamic druid datasource</a>](<a href="https://dynamic-datasource.com/guide/integration/Druid.html">https://dynamic-datasource.com/guide/integration/Druid.html</a>))</strong></p>
</blockquote>
<h2 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h2><h3 id="1-1-引入依赖"><a href="#1-1-引入依赖" class="headerlink" title="1.1 引入依赖"></a>1.1 引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- druid动态数据源配置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- spring boot redis --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h3><blockquote>
<p>因为这里是进行动态添加数据源，所以只需要配置一个<code>master</code>主库的数据源即可，如果仅仅是纯正的读写分离，可以直接配置齐全的主从库<code>master和slave</code>数据源信息。</p>
</blockquote>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dynamic-source</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 动态数据源集成druid</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span>  <span class="comment"># 全局druid配置</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">druid</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">druid</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="attr">druid:</span></span><br><span class="line">        <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">maxActive:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span></span><br><span class="line">        <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span>  <span class="comment"># 主库数据源配置</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.1.160:3306/dynamic_source?serverTimezone=GMT%2B8&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">          <span class="attr">druid:</span> <span class="comment"># 主库的druid配置,具有覆盖性</span></span><br><span class="line">            <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">minIdle:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">maxActive:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">            <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">            <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">            <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">'x'</span></span><br><span class="line">            <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">maxOpenPreparedStatements:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">filter:</span></span><br><span class="line">              <span class="attr">stat:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">slow-sql-millis:</span> <span class="number">3000</span></span><br><span class="line">              <span class="attr">wall:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">log-violation:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">throw-exception:</span> <span class="literal">false</span></span><br><span class="line">                <span class="attr">config:</span></span><br><span class="line">                  <span class="attr">delete-where-none-check:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.160</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">30</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">shutdown-timeout:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.horse.dynamic.model</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.horse.dynamic:</span> <span class="string">debug</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-3-公共配置"><a href="#1-3-公共配置" class="headerlink" title="1.3 公共配置"></a>1.3 公共配置</h3><blockquote>
<p>Constants公共属性类</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/28 13:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源参数模板：只有URL的信息不同其他的都相同</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://192.168.1.153:3306/%s?serverTimezone=Asia/Shanghai&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据源的 hash key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DYNAMIC_TENANT_KEY = <span class="string">"tps_dynamic_%s"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>Redis配置类</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/10 17:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义json序列化器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入数据源</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 序列化时将对象全类名一起保存下来</span></span><br><span class="line">        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        <span class="comment">// mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key-value结构序列化数据结构</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash数据结构序列化方式,必须这样否则存hash 就是基于jdk序列化的</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>Source实例对象</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/28 10:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName("tb_source")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4629722406932497304L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "连接池名称必须唯一且不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "连接池名称", example = "master")</span></span><br><span class="line">    <span class="meta">@TableField(value = "poll_name")</span></span><br><span class="line">    <span class="keyword">private</span> String pollName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "JDBC Driver不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "JDBC Driver", example = "com.mysql.jdbc.Driver")</span></span><br><span class="line">    <span class="meta">@TableField(value = "driver_class_name")</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "JDBC Url不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "JDBC Url", example = "jdbc:mysql://121.5.168.31:3306/horse_vue_blog?serverTimezone=GMT%2B8")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "JDBC Username不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "JDBC Username", example = "root")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "JDBC Password不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "JDBC Password", example = "******")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// *********druid数据源配置信息(如果添加的是druid类型数据源，必须有下面的属性，否则包NPE错误)***********</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean lazy = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DrudConfigProperties druid;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>DrudConfigProperties属性类</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Druid数据源需要的非必须配置信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/28 16:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrudConfigProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer initialSize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer maxActive = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer minIdle = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer maxWait = <span class="number">60000</span>;</span><br><span class="line">    <span class="keyword">private</span> Long timeBetweenEvictionRunsMillis = <span class="number">60000L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long timeBetweenLogStatsMillis = <span class="number">300000L</span>;</span><br><span class="line">    <span class="keyword">private</span> Boolean testWhileIdle = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnBorrow = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Boolean testOnReturn = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String validationQuery = <span class="string">"select 'x'"</span>;</span><br><span class="line">    <span class="keyword">private</span> Boolean poolPreparedStatements = <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="1-4-排除原生Druid配置类"><a href="#1-4-排除原生Druid配置类" class="headerlink" title="1.4 排除原生Druid配置类"></a>1.4 排除原生Druid配置类</h3><blockquote>
<p>不进行排除的话，程序启动报错！！！（两种方式选其一即可）</p>
</blockquote>
<p>主启动类排除方式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = {"com.horse.dynamic.mapper"})</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line">@SpringBootApplication(exclude = DruidDataSourceAutoConfigure.class) # 排除原生Druid的快速配置类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDynamicSourceApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringbootDynamicSourceApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>yml配置文件方式</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">autoconfigure:</span></span><br><span class="line">    <span class="attr">exclude:</span> <span class="string">com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="2-服务接口"><a href="#2-服务接口" class="headerlink" title="2. 服务接口"></a>2. 服务接口</h2><blockquote>
<p>原理：接收唯一标识参数<code>tenant</code>，根据参数动态查询、添加、切换数据源。重点在<code>/switch</code>接口中的业务逻辑。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/27 18:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/dynamic/source")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicSourceController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultDataSourceCreator dataSourceCreator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SwitchService switchService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 测试查询当前所有数据源</span></span><br><span class="line">    <span class="meta">@GetMapping("/query/all")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">queryAllDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        DynamicRoutingDataSource dynamicAllSource = (DynamicRoutingDataSource) dataSource;</span><br><span class="line">        <span class="keyword">return</span> dynamicAllSource.getCurrentDataSources().keySet();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试添加一个数据源</span></span><br><span class="line">    <span class="meta">@PostMapping("/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">add</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> Source dto)</span> </span>{</span><br><span class="line">        DataSourceProperty dataSourceProperty = <span class="keyword">new</span> DataSourceProperty();</span><br><span class="line">        BeanUtils.copyProperties(dto, dataSourceProperty);</span><br><span class="line">        DynamicRoutingDataSource ds = (DynamicRoutingDataSource) dataSource;</span><br><span class="line">        DataSource dataSource = dataSourceCreator.createDataSource(dataSourceProperty);</span><br><span class="line">        ds.addDataSource(dto.getPollName(), dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds.getCurrentDataSources().keySet();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试查询、添加、切换数据源等一整套流程</span></span><br><span class="line">    <span class="meta">@PostMapping("/switch")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dynamicSwitchSource</span><span class="params">(<span class="meta">@RequestParam("tenant")</span> String tenant)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 查询租户是否存在,校验 tenant 参数合法性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切换数据源</span></span><br><span class="line">        log.info(<span class="string">" ==&gt; 数据源切换开始"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> isSuccess = switchService.dynamicAddSource(tenant);</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) {</span><br><span class="line">            log.info(<span class="string">" ==&gt; 数据源切换成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.error(<span class="string">" ==&gt; 数据源切换失败"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 连接数据库测试</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = switchService.switchSourceUpdateCount(tenant);</span><br><span class="line">        <span class="keyword">return</span> bool ? <span class="string">"success"</span> : <span class="string">"error"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h2><blockquote>
<ul>
<li><code>dynamicAddSource</code>方法： 动态添加数据源</li>
<li><code>switchSourceUpdateCount</code>方法：动态切换数据源（根据唯一标识）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/28 10:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SwitchMapper</span>, <span class="title">Switch</span>&gt; <span class="keyword">implements</span> <span class="title">SwitchService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DefaultDataSourceCreator dataSourceCreator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Druid数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DruidDataSourceCreator druidDataSourceCreator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SourceService sourceService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换数据源,连接数据库,修改信息</span></span><br><span class="line"><span class="comment">     * 利用Spring的SPEL语法:动态获取切换数据源的唯一标识参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tenant</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DS("#tenant")</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">switchSourceUpdateCount</span><span class="params">(String tenant)</span> </span>{</span><br><span class="line">        log.info(<span class="string">" ==&gt; 连接数据库测试开始"</span>);</span><br><span class="line">        Switch currentSwitch = <span class="keyword">this</span>.getById(<span class="number">1</span>);</span><br><span class="line">        currentSwitch.setSwitchCount(currentSwitch.getSwitchCount() + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">boolean</span> update = <span class="keyword">this</span>.updateById(currentSwitch);</span><br><span class="line">        <span class="keyword">if</span> (update) {</span><br><span class="line">            log.info(<span class="string">" ==&gt; 连接数据库测试成功"</span>);</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        }</span><br><span class="line">        log.error(<span class="string">" ==&gt; 连接数据库测试失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tenant 租户唯一标识 &amp;&amp; 数据源唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dynamicAddSource</span><span class="params">(String tenant)</span> </span>{</span><br><span class="line">        <span class="comment">// 根据key查询当前数据源中是否存在此数据源,有直接切换</span></span><br><span class="line">        DynamicRoutingDataSource ds = (DynamicRoutingDataSource) dataSource;</span><br><span class="line">        Map&lt;String, DataSource&gt; dataSources = ds.getCurrentDataSources();</span><br><span class="line">        Set&lt;String&gt; set = dataSources.keySet();</span><br><span class="line">        <span class="keyword">if</span> (set.contains(tenant)) {</span><br><span class="line">            log.info(<span class="string">" ==&gt; 数据源已存在"</span>);</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        }</span><br><span class="line">        Source source;</span><br><span class="line">        <span class="comment">// 查询redis</span></span><br><span class="line">        String temp = (String) redisTemplate.opsForValue().get(String.format(Constants.DYNAMIC_TENANT_KEY, tenant));</span><br><span class="line">        source = JacksonUtils.stringToObj(temp, Source.class);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isNotEmpty(source)) {</span><br><span class="line">            log.info(<span class="string">" ==&gt; 基于Redis缓存添加数据源,source:{}"</span>, source);</span><br><span class="line">            addSource(source, ds);</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Source&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.select(Source::getPollName, Source::getDriverClassName, Source::getUrl, Source::getUsername, Source::getPassword)</span><br><span class="line">                .eq(StringUtils.isNotBlank(tenant), Source::getPollName, tenant).last(<span class="string">"LIMIT 1"</span>);</span><br><span class="line">        source = sourceService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isNotEmpty(source)) {</span><br><span class="line">            log.info(<span class="string">" ==&gt; 基于MySQL数据添加数据源,source: {}"</span>, source);</span><br><span class="line">            <span class="comment">// addSource(source, ds, dataSourceProperty);</span></span><br><span class="line">            addDruidSource(source, ds);</span><br><span class="line">            <span class="comment">// 数据源存入缓存</span></span><br><span class="line">            log.info(<span class="string">" ==&gt; 数据源导入Redis缓存"</span>);</span><br><span class="line">            setRedisCache(source);</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 无当前租户的数据源信息:基于租户唯一标识 tenant 创建新数据源</span></span><br><span class="line">        Source newSource = <span class="keyword">new</span> Source();</span><br><span class="line">        newSource.setPollName(tenant);</span><br><span class="line">        newSource.setDriverClassName(Constants.DRIVER);</span><br><span class="line">        newSource.setUrl(String.format(Constants.URL, tenant));</span><br><span class="line">        newSource.setUsername(Constants.USERNAME);</span><br><span class="line">        newSource.setPassword(Constants.PASSWORD);</span><br><span class="line">        DataSourceProperty dataSourceProperty = <span class="keyword">new</span> DataSourceProperty();</span><br><span class="line">        BeanUtils.copyProperties(newSource, dataSourceProperty);</span><br><span class="line">		<span class="comment">// 添加druid类型数据源</span></span><br><span class="line">        DataSource dataSource = druidDataSourceCreator.createDataSource(dataSourceProperty);</span><br><span class="line">        ds.addDataSource(newSource.getPollName(), dataSource);</span><br><span class="line">        Set&lt;String&gt; keySet = ds.getCurrentDataSources().keySet();</span><br><span class="line">        <span class="keyword">if</span> (keySet.contains(tenant)) {</span><br><span class="line">            log.info(<span class="string">" ==&gt; 添加新数据源成功"</span>);</span><br><span class="line">            <span class="comment">// 持久化数据源</span></span><br><span class="line">            durance(newSource);</span><br><span class="line">            <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加通用数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSource</span><span class="params">(Source source, DynamicRoutingDataSource ds)</span> </span>{</span><br><span class="line">        DataSourceProperty dataSourceProperty = <span class="keyword">new</span> DataSourceProperty();</span><br><span class="line">        BeanUtils.copyProperties(source, dataSourceProperty);</span><br><span class="line">        DataSource dataSource = dataSourceCreator.createDataSource(dataSourceProperty);</span><br><span class="line">        ds.addDataSource(source.getPollName(), dataSource);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加Druid数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDruidSource</span><span class="params">(Source source, DynamicRoutingDataSource ds)</span> </span>{</span><br><span class="line">        DataSourceProperty dataSourceProperty = <span class="keyword">new</span> DataSourceProperty();</span><br><span class="line">        BeanUtils.copyProperties(source, dataSourceProperty);</span><br><span class="line">        DataSource dataSource = druidDataSourceCreator.createDataSource(dataSourceProperty);</span><br><span class="line">        ds.addDataSource(source.getPollName(), dataSource);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化数据源配置信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">durance</span><span class="params">(Source source)</span> </span>{</span><br><span class="line">        setRedisCache(source);</span><br><span class="line">        sourceService.save(source);</span><br><span class="line">        log.info(<span class="string">"==&gt; 数据源双重持久化成功"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Redis缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedisCache</span><span class="params">(Source source)</span> </span>{</span><br><span class="line">        redisTemplate.opsForValue().set(String.format(Constants.DYNAMIC_TENANT_KEY, source.getPollName()),</span><br><span class="line">                JacksonUtils.objToString(source), <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="4-实验结果-amp-遗留问题"><a href="#4-实验结果-amp-遗留问题" class="headerlink" title="4. 实验结果&amp;遗留问题"></a>4. 实验结果&amp;遗留问题</h2><blockquote>
<p>经过实验，动态添加、删除、切换数据源测试基本成功。</p>
<p><strong>遗留问题：如果进行判断数据源的删除时机，根据什么条件去判断那个数据源应该被移除，暂时没有想到解决办法，唯一想到的就是类似Redis的key删除策略<code>lru算法</code>，但是不知道怎样实现。</strong>但是数据源的动态添加切换基本流程就是这样，<strong>接下来需要考虑的是如何保证事务不失效</strong>。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MybatisPlus</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合EasyExcel</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88EasyExcel/</url>
    <content><![CDATA[<h1 id="SpringBoot整合EasyExcel实现"><a href="#SpringBoot整合EasyExcel实现" class="headerlink" title="SpringBoot整合EasyExcel实现"></a>SpringBoot整合EasyExcel实现</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>注意：</strong><a href="https://alibaba-easyexcel.github.io/quickstart/write.html">点击查看官网Demo</a></p>
<h3 id="1-引入pom依赖"><a href="#1-引入pom依赖" class="headerlink" title="1. 引入pom依赖"></a>1. 引入pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--easyExcel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-实现功能"><a href="#2-实现功能" class="headerlink" title="2. 实现功能"></a>2. 实现功能</h3><blockquote>
<ol>
<li>结合Vue前端，实现浏览器页面直接导出日志文件</li>
<li>实现文件的导入</li>
</ol>
</blockquote>
<h2 id="Excel文件下载"><a href="#Excel文件下载" class="headerlink" title="Excel文件下载"></a>Excel文件下载</h2><h3 id="3-日志实体类"><a href="#3-日志实体类" class="headerlink" title="3. 日志实体类"></a>3. 日志实体类</h3><blockquote>
<p>实体类里有自定义转换器：用于Java类型数据和Excel类型数据的转换，非常使用。结合注解，可以非常方便的进行Excel文件导出。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 操作日志信息</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-09-08</span></span><br><span class="line"><span class="comment"> * 注意: 实体类中如果使用<span class="doctag">@Accessory</span>（chain=true）,那么导入的数据无法填充到实例中,导出数据不受影响</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName("tb_operational_log")</span></span><br><span class="line"><span class="meta">@ApiModel(value = "OperationalLog对象", description = "操作日志信息")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationalLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "日志ID"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "日志ID")</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作类型"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作类型")</span></span><br><span class="line">    <span class="keyword">private</span> String operType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作描述"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作描述")</span></span><br><span class="line">    <span class="keyword">private</span> String operDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作员ID"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作员ID")</span></span><br><span class="line">    <span class="keyword">private</span> String operUserId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作员名称"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作员名称")</span></span><br><span class="line">    <span class="keyword">private</span> String operUserName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作方法"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作方法")</span></span><br><span class="line">    <span class="keyword">private</span> String operMethod;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求方法"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求方法")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequWay;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = {"操作日志", "请求耗时：单位-ms"}, converter = CustomRequestTimeConverter.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求耗时：单位-ms")</span></span><br><span class="line">    <span class="keyword">private</span> Long operRequTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求参数"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求参数")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequParams;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求Body"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求Body")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequBody;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求IP"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求IP")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequIp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求URL"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求URL")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = {"操作日志", "日志标识"}, converter = CustomLogFlagConverter.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "日志标识: 1-admin,0-portal")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean logFlag;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作状态"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作状态:1-成功,0-失败")</span></span><br><span class="line">    <span class="meta">@TableField(value = "is_success")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "逻辑删除 1-未删除， 0-删除")</span></span><br><span class="line">    <span class="meta">@TableField(value = "is_deleted")</span></span><br><span class="line">    <span class="meta">@TableLogic(value = "1", delval = "0")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = {"操作日志", "创建时间"}, converter = CustomTimeFormatConverter.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "创建时间")</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-接口和具体实现"><a href="#4-接口和具体实现" class="headerlink" title="4.  接口和具体实现"></a>4.  接口和具体实现</h3><h4 id="4-1-接口"><a href="#4-1-接口" class="headerlink" title="4.1 接口"></a>4.1 接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@OperatingLog(operType = BlogConstants.EXPORT, operDesc = "导出操作日志,写出到响应流中")</span></span><br><span class="line"><span class="meta">@ApiOperation(value = "导出操作日志", hidden = true)</span></span><br><span class="line"><span class="meta">@PostMapping("/oper/export")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operLogExport</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; logIds, HttpServletResponse response)</span> </span>{</span><br><span class="line">    operationalLogService.operLogExport(logIds, response);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2-具体实现"><a href="#4-2-具体实现" class="headerlink" title="4.2 具体实现"></a>4.2 具体实现</h4><blockquote>
<ul>
<li>自定义导出策略<code>HorizontalCellStyleStrategy</code></li>
<li>自定义导出拦截器<code>CellWriteHandler</code>，更加精确的自定义导出策略</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出操作日志(可以考虑分页导出)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> logIds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operLogExport</span><span class="params">(List&lt;String&gt; logIds, HttpServletResponse response)</span> </span>{</span><br><span class="line">    OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        List&lt;OperationalLog&gt; operationalLogs;</span><br><span class="line">        LambdaQueryWrapper&lt;OperationalLog&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;OperationalLog&gt;()</span><br><span class="line">                .orderByDesc(OperationalLog::getGmtCreate);</span><br><span class="line">        <span class="comment">// 如果logIds不为null,按照id查询信息,否则查询全部</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(logIds)) {</span><br><span class="line">            operationalLogs = <span class="keyword">this</span>.listByIds(logIds);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            operationalLogs = <span class="keyword">this</span>.list(queryWrapper);</span><br><span class="line">        }</span><br><span class="line">        outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取单元格样式</span></span><br><span class="line">        HorizontalCellStyleStrategy strategy = MyCellStyleStrategy.getHorizontalCellStyleStrategy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入响应输出流数据</span></span><br><span class="line">        EasyExcel.write(outputStream, OperationalLog.class).excelType(ExcelTypeEnum.XLSX).sheet(<span class="string">"操作信息日志"</span>)</span><br><span class="line">                <span class="comment">// .registerWriteHandler(new LongestMatchColumnWidthStyleStrategy()) // 自适应列宽(不是很适应,效果并不佳)</span></span><br><span class="line">                .registerWriteHandler(strategy) <span class="comment">// 注册上面设置的格式策略</span></span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> CustomCellWriteHandler()) <span class="comment">// 设置自定义格式策略</span></span><br><span class="line">                .doWrite(operationalLogs);</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.EXCEL_DATA_EXPORT_ERROR);</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        IoUtil.close(outputStream);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>自定义导出策略简单如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单元格样式策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/30 8:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCellStyleStrategy</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格样式(仅用于测试)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 样式策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HorizontalCellStyleStrategy <span class="title">getHorizontalCellStyleStrategy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 表头策略</span></span><br><span class="line">        WriteCellStyle headerCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">// 表头水平对齐居中</span></span><br><span class="line">        headerCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">        <span class="comment">// 背景色</span></span><br><span class="line">        headerCellStyle.setFillForegroundColor(IndexedColors.SKY_BLUE.getIndex());</span><br><span class="line">        WriteFont headerFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">        headerFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">14</span>);</span><br><span class="line">        headerCellStyle.setWriteFont(headerFont);</span><br><span class="line">        <span class="comment">// 自动换行</span></span><br><span class="line">        headerCellStyle.setWrapped(Boolean.FALSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内容策略</span></span><br><span class="line">        WriteCellStyle contentCellStyle = <span class="keyword">new</span> WriteCellStyle();</span><br><span class="line">        <span class="comment">// 设置数据允许的数据格式,这里49代表所有可以都允许设置</span></span><br><span class="line">        contentCellStyle.setDataFormat((<span class="keyword">short</span>) <span class="number">49</span>);</span><br><span class="line">        <span class="comment">// 设置背景色: 需要指定 FillPatternType 为FillPatternType.SOLID_FOREGROUND 不然无法显示背景颜色.头默认了 FillPatternType所以可以不指定</span></span><br><span class="line">        contentCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        contentCellStyle.setFillForegroundColor(IndexedColors.GREY_40_PERCENT.getIndex());</span><br><span class="line">        <span class="comment">// 设置内容靠左对齐</span></span><br><span class="line">        contentCellStyle.setHorizontalAlignment(HorizontalAlignment.LEFT);</span><br><span class="line">        <span class="comment">// 设置字体</span></span><br><span class="line">        WriteFont contentFont = <span class="keyword">new</span> WriteFont();</span><br><span class="line">        contentFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">12</span>);</span><br><span class="line">        contentCellStyle.setWriteFont(contentFont);</span><br><span class="line">        <span class="comment">// 设置自动换行</span></span><br><span class="line">        contentCellStyle.setWrapped(Boolean.FALSE);</span><br><span class="line">        <span class="comment">// 设置边框样式和颜色</span></span><br><span class="line">        contentCellStyle.setBorderLeft(MEDIUM);</span><br><span class="line">        contentCellStyle.setBorderTop(MEDIUM);</span><br><span class="line">        contentCellStyle.setBorderRight(MEDIUM);</span><br><span class="line">        contentCellStyle.setBorderBottom(MEDIUM);</span><br><span class="line">        contentCellStyle.setTopBorderColor(IndexedColors.RED.getIndex());</span><br><span class="line">        contentCellStyle.setBottomBorderColor(IndexedColors.GREEN.getIndex());</span><br><span class="line">        contentCellStyle.setLeftBorderColor(IndexedColors.YELLOW.getIndex());</span><br><span class="line">        contentCellStyle.setRightBorderColor(IndexedColors.ORANGE.getIndex());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将格式加入单元格样式策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HorizontalCellStyleStrategy(headerCellStyle, contentCellStyle);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>自定义导出拦截器简单如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 实现CellWriteHandler接口, 实现对单元格样式的精确控制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/29 21:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title">CellWriteHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CustomCellWriteHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单元格创建之后(没有写入值)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCellCreate</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Head head, Integer relativeRowIndex, Boolean isHead)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCellDataConverted</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       CellData cellData, Cell cell, Head head, Integer relativeRowIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Boolean isHead)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单元格处理后(已写入值): 设置第一行第一列的头超链接到EasyExcel的官网(本系统的导出的excel 0,1两行都是头,所以只设置第一行的超链接)</span></span><br><span class="line"><span class="comment">     * 这里再进行拦截的单元格样式设置的话,前面该样式将全部失效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeSheetHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeTableHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellDataList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> relativeRowIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isHead</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCellDispose</span><span class="params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Boolean isHead)</span> </span>{</span><br><span class="line">        <span class="comment">// 设置超链接</span></span><br><span class="line">        <span class="keyword">if</span> (isHead &amp;&amp; cell.getRowIndex() == <span class="number">0</span> &amp;&amp; cell.getColumnIndex() == <span class="number">0</span>) {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; 第{}行,第{}列超链接设置完成"</span>, cell.getRowIndex(), cell.getColumnIndex());</span><br><span class="line">            CreationHelper helper = writeSheetHolder.getSheet().getWorkbook().getCreationHelper();</span><br><span class="line">            Hyperlink hyperlink = helper.createHyperlink(HyperlinkType.URL);</span><br><span class="line">            hyperlink.setAddress(<span class="string">"https://github.com/alibaba/easyexcel"</span>);</span><br><span class="line">            cell.setHyperlink(hyperlink);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 精确设置单元格格式</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = isHead &amp;&amp; cell.getRowIndex() == <span class="number">1</span> &amp;&amp;</span><br><span class="line">                (cell.getStringCellValue().equals(<span class="string">"请求参数"</span>) || cell.getStringCellValue().equals(<span class="string">"请求Body"</span>));</span><br><span class="line">        <span class="keyword">if</span> (bool) {</span><br><span class="line">            logger.info(<span class="string">"第{}行，第{}列单元格样式设置完成。"</span>, cell.getRowIndex(), cell.getColumnIndex());</span><br><span class="line">            <span class="comment">// 获取工作簿</span></span><br><span class="line">            Workbook workbook = writeSheetHolder.getSheet().getWorkbook();</span><br><span class="line">            CellStyle cellStyle = workbook.createCellStyle();</span><br><span class="line"></span><br><span class="line">            Font cellFont = workbook.createFont();</span><br><span class="line">            cellFont.setBold(Boolean.TRUE);</span><br><span class="line">            cellFont.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">14</span>);</span><br><span class="line">            cellFont.setColor(IndexedColors.SEA_GREEN.getIndex());</span><br><span class="line">            cellStyle.setFont(cellFont);</span><br><span class="line">            cell.setCellStyle(cellStyle);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-3-前端请求"><a href="#4-3-前端请求" class="headerlink" title="4.3 前端请求"></a>4.3 前端请求</h4><blockquote>
<p>前端在基于Vue+Element的基础上实现了点击导出按钮，在浏览器页面进行下载。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 批量导出</span></span><br><span class="line">    <span class="function"><span class="title">batchExport</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="comment">// 遍历获取id集合列表</span></span><br><span class="line">      <span class="keyword">const</span> logIds = []</span><br><span class="line">      <span class="built_in">this</span>.multipleSelection.forEach(<span class="function"><span class="params">item</span> =&gt;</span> {</span><br><span class="line">        logIds.push(item.id)</span><br><span class="line">      })</span><br><span class="line">       <span class="comment">// 请求后端接口</span></span><br><span class="line">      axios({</span><br><span class="line">        url: <span class="built_in">this</span>.BASE_API + <span class="string">'/admin/blog/log/oper/export'</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        data: logIds,</span><br><span class="line">        responseType: <span class="string">'arraybuffer'</span>,</span><br><span class="line">        headers: { <span class="string">'token'</span>: getToken() }</span><br><span class="line">      }).then(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// type类型可以设置为文本类型，这里是新版excel类型</span></span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([response.data], { <span class="attr">type</span>: <span class="string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8'</span> })</span><br><span class="line">        <span class="keyword">const</span> pdfUrl = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">        <span class="keyword">const</span> fileName = <span class="string">'HorseBlog操作日志'</span> <span class="comment">// 下载文件的名字</span></span><br><span class="line">        <span class="comment">// 对于&lt;a&gt;标签，只有 Firefox 和 Chrome（内核）支持 download 属性</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'download'</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)) {</span><br><span class="line">          <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">          link.href = pdfUrl</span><br><span class="line">          link.setAttribute(<span class="string">'download'</span>, fileName)</span><br><span class="line">          <span class="built_in">document</span>.body.appendChild(link)</span><br><span class="line">          link.click()</span><br><span class="line">          <span class="built_in">window</span>.URL.revokeObjectURL(pdfUrl) <span class="comment">// 释放URL 对象</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="comment">// IE 浏览器兼容方法</span></span><br><span class="line">          <span class="built_in">window</span>.navigator.msSaveBlob(blob, fileName)</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>测试结果：还行，基本实现了页面下载的功能</p>
<h2 id="Excel文件导入"><a href="#Excel文件导入" class="headerlink" title="Excel文件导入"></a>Excel文件导入</h2><h3 id="5-文件读取配置"><a href="#5-文件读取配置" class="headerlink" title="5. 文件读取配置"></a>5. 文件读取配置</h3><blockquote>
<p>本配置基于泛型的方式编写，可扩展性较强。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: EasyExcel文件读取配置(不能让spring管理)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/27 13:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExcelImportConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyExcelImportConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次读取的最大数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_BATCH_COUNT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 泛型bean属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T dynamicService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可接收任何参数的泛型List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数注入bean(根据传入的bean动态注入)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dynamicService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyExcelImportConfig</span><span class="params">(T dynamicService)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.dynamicService = dynamicService;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析每条数据都进行调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(T data, AnalysisContext context)</span> </span>{</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 解析一条数据: {}"</span>, JacksonUtils.objToString(data));</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; MAX_BATCH_COUNT) {</span><br><span class="line">            <span class="comment">// 保存数据</span></span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">// 清空list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成后,会来调用一次</span></span><br><span class="line"><span class="comment">     * 作用: 避免最后集合中小于 MAX_BATCH_COUNT 条的数据没有被保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>{</span><br><span class="line">        saveData();</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 数据解析完成 &lt;=="</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据: 正式应该插入数据库,这里用于测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">()</span> </span>{</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 数据保存开始: {}"</span>, list.size());</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">        logger.info(<span class="string">" ==&gt; 数据保存结束 &lt;=="</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在转换异常 获取其他异常下会调用本接口。我们如果捕捉并手动抛出异常则停止读取。如果这里不抛出异常则 继续读取下一行。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Exception exception, AnalysisContext context)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        logger.error(<span class="string">" ==&gt; 数据解析失败,但是继续读取下一行:{}"</span>, exception.getMessage());</span><br><span class="line">        <span class="comment">//  如果是某一个单元格的转换异常 能获取到具体行号</span></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ExcelDataConvertException) {</span><br><span class="line">            ExcelDataConvertException convertException = (ExcelDataConvertException) exception;</span><br><span class="line">            logger.error(<span class="string">"第{}行，第{}列数据解析异常"</span>, convertException.getRowIndex(), convertException.getColumnIndex());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="6-读取测试"><a href="#6-读取测试" class="headerlink" title="6. 读取测试"></a>6. 读取测试</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = "数据导入测试", notes = "操作日志导入测试[OperationalLog]", hidden = true)</span></span><br><span class="line"><span class="meta">@PostMapping("/import")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">excelImport</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    EasyExcel.read(file.getInputStream(), OperationalLog.class, <span class="keyword">new</span> MyExcelImportConfig&lt;&gt;(operationalLogService))</span><br><span class="line">            .sheet().doRead();</span><br><span class="line">    <span class="keyword">return</span> R.ok().message(<span class="string">"文件导入成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="7-附上自定义属性转换器"><a href="#7-附上自定义属性转换器" class="headerlink" title="7. 附上自定义属性转换器"></a>7. 附上自定义属性转换器</h3><blockquote>
<p>转换器的属性内容转换，需要根据自己的实际业务需求而定，这里仅作为简单示例</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义excel转换器: 将操作日志的请求耗时加上单位 "ms"</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/27 10:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRequestTimeConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Long</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据时: 属性对应的java数据类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">supportJavaTypeKey</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Long.class;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据时: excel内部的数据类型,因为请求耗时是long类型,对应excel是NUMBER类型,但是加上"ms后对应的是STRING类型"</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellDataTypeEnum <span class="title">supportExcelTypeKey</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentProperty</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> globalConfiguration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">convertToJavaData</span><span class="params">(CellData cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 截取字符串: "ms",转换为long类型</span></span><br><span class="line">        String value = cellData.getStringValue();</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(value.substring(<span class="number">0</span>, value.length() - <span class="number">2</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellData&lt;Long&gt; <span class="title">convertToExcelData</span><span class="params">(Long value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 添加字符串: "ms"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CellData&lt;&gt;(String.valueOf(value).concat(<span class="string">"ms"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>格式化时间</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/27 14:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTimeFormatConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Date</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class&lt;Date&gt; <span class="title">supportJavaTypeKey</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Date.class;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellDataTypeEnum <span class="title">supportExcelTypeKey</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> CellDataTypeEnum.STRING;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convertToJavaData</span><span class="params">(CellData cellData, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String value = cellData.getStringValue();</span><br><span class="line">        <span class="keyword">return</span> DateUtil.parse(value, DatePattern.NORM_DATETIME_PATTERN);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellData&lt;Date&gt; <span class="title">convertToExcelData</span><span class="params">(Date value, ExcelContentProperty contentProperty, GlobalConfiguration globalConfiguration)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CellData&lt;&gt;(DateUtil.format(value, DatePattern.NORM_DATETIME_PATTERN));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>EasyExcel简单使用，到此结束，打完收功。</p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合RabbitMQ</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88RabbitMQ/</url>
    <content><![CDATA[<h1 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h1><blockquote>
<p>主要实现RabbitMQ以下三种消息队列：</p>
<ul>
<li>简单消息队列（演示direct模式）</li>
<li>基于RabbitMQ特性的延时消息队列</li>
<li>基于RabbitMQ相关插件的延时消息队列</li>
</ul>
</blockquote>
<h2 id="公共资源"><a href="#公共资源" class="headerlink" title="公共资源"></a>公共资源</h2><h3 id="1-引入pom依赖"><a href="#1-引入pom依赖" class="headerlink" title="1. 引入pom依赖"></a>1. 引入pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-配置yml文件"><a href="#2-配置yml文件" class="headerlink" title="2. 配置yml文件"></a>2. 配置yml文件</h3><blockquote>
<p>基于上篇《RabbitMQ安装与配置》实现的情况下，进行基础配置。</p>
</blockquote>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.5</span><span class="number">.168</span><span class="number">.31</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>    <span class="comment"># 默认可省略</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/***</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">***</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">***</span> <span class="comment"># 用户密码</span></span><br><span class="line">    <span class="comment"># 开启投递成功回调 P -&gt; Exchange</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 开启投递消息到队列失败回调 Exchange -&gt; Queue</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 开启手动ACK确认模式 Queue -&gt; C</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 代表手动ACK确认</span></span><br><span class="line">        <span class="comment"># 一些基本参数的设置</span></span><br><span class="line">        <span class="attr">concurrency:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">15</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-公共Constants类"><a href="#3-公共Constants类" class="headerlink" title="3. 公共Constants类"></a>3. 公共Constants类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/23 15:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个配置Queue,Exchange,Key(非注解方式)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_SIMPLE_QUEUE = <span class="string">"HORSE_SIMPLE_QUEUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_SIMPLE_EXCHANGE = <span class="string">"HORSE_SIMPLE_EXCHANGE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_SIMPLE_KEY = <span class="string">"HORSE_SIMPLE_KEY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二个配置Queue,Exchange,Key（注解方式）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_ANNOTATION_QUEUE = <span class="string">"HORSE_ANNOTATION_QUEUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_ANNOTATION_EXCHANGE = <span class="string">"HORSE_ANNOTATION_EXCHANGE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_ANNOTATION_KEY = <span class="string">"HORSE_ANNOTATION_KEY"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//************************************延时消息队列配置信息**************************</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时队列信息配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_DELAY_EXCHANGE = <span class="string">"HORSE_DELAY_EXCHANGE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_DELAY_QUEUE = <span class="string">"HORSE_DELAY_QUEUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_DELAY_KEY = <span class="string">"HORSE_DELAY_KEY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_DEAD_EXCHANGE = <span class="string">"HORSE_DEAD_EXCHANGE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_DEAD_QUEUE = <span class="string">"HORSE_DEAD_QUEUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_DEAD_KEY = <span class="string">"HORSE_DEAD_KEY"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//**************************************延时消息队列配置信息(插件版)******************************</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新延时队列信息配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_PLUGIN_EXCHANGE = <span class="string">"HORSE_PLUGIN_EXCHANGE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_PLUGIN_QUEUE = <span class="string">"HORSE_PLUGIN_QUEUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HORSE_PLUGIN_KEY = <span class="string">"HORSE_PLUGIN_KEY"</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="简单消息队列（direct模式）"><a href="#简单消息队列（direct模式）" class="headerlink" title="简单消息队列（direct模式）"></a>简单消息队列（direct模式）</h2><h3 id="4-RabbitTemplate模板配置"><a href="#4-RabbitTemplate模板配置" class="headerlink" title="4. RabbitTemplate模板配置"></a>4. RabbitTemplate模板配置</h3><blockquote>
<p>主要定义消息投递Exchange成功回调函数和消息从Exchange投递到消息队列失败的回调函数。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.topsun.rabbit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.operations.Bool;</span><br><span class="line"><span class="keyword">import</span> com.topsun.constants.Constants;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/23 14:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RabbitConfig.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CachingConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">()</span> </span>{</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">        <span class="comment">// 触发setReturnCallback回调必须设置mandatory=true,否则Exchange没有找到Queue就会丢弃掉消息, 而不会触发回调</span></span><br><span class="line">        rabbitTemplate.setMandatory(Boolean.TRUE);</span><br><span class="line">        <span class="comment">// 设置序列化机制</span></span><br><span class="line">        rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">        <span class="comment">// 消息由投递到Exchange中时触发的回调</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt;</span><br><span class="line">                logger.info(<span class="string">"消息发送到Exchange情况反馈:唯一标识：correlationData={},消息确认：ack={},原因：cause={}"</span>,</span><br><span class="line">                        correlationData, ack, cause)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 消息由Exchange发送到Queue时失败触发的回调</span></span><br><span class="line">        rabbitTemplate.setReturnsCallback((returnedMessage) -&gt; {</span><br><span class="line">            <span class="comment">// 如果是插件形式实现的延时队列,则直接返回</span></span><br><span class="line">            <span class="comment">// 原因: 因为发送方确实没有投递到队列上，只是在交换器上暂存，等过期时间到了 才会发往队列,从而实现延时队列的操作</span></span><br><span class="line">            <span class="keyword">if</span> (Constants.HORSE_PLUGIN_EXCHANGE.equals(returnedMessage.getExchange())) {</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            logger.warn(<span class="string">"消息由Exchange发送到Queue时失败:message={},replyCode={},replyText={},exchange={},rountingKey={}"</span>,</span><br><span class="line">                    returnedMessage.getMessage(), returnedMessage.getReplyText(), returnedMessage.getReplyText(),</span><br><span class="line">                    returnedMessage.getExchange(), returnedMessage.getRoutingKey());</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*******************************************直接配置绑定关系*****************************************</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">horseQueue</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(Constants.HORSE_SIMPLE_QUEUE, Boolean.TRUE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明指定模式交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">horseExchange</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(Constants.HORSE_SIMPLE_EXCHANGE, Boolean.TRUE, Boolean.FALSE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机,队列,路由Key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">horseBinding</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(horseQueue()).to(horseExchange()).with(Constants.HORSE_SIMPLE_KEY);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-定义消息监听器"><a href="#5-定义消息监听器" class="headerlink" title="5. 定义消息监听器"></a>5. 定义消息监听器</h3><blockquote>
<p>基于<code>@RabbitListenerzi</code>注解，实现自定义消息监听器。主要有两种实现方式：</p>
<ul>
<li>如果在配置类中声明了Queue、Excehange以及他们直接的绑定，这里直接指定队列进行消息监听</li>
<li>如果前面什么也没做，这里可以直接用注解的方式进行绑定实现消息监听</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.topsun.rabbit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.topsun.constants.Constants;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/23 14:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MsgListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置类中已经完成绑定,这里直接根据队列值接收</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListenerzi(queues = Constants.HORSE_SIMPLE_QUEUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customListener</span><span class="params">(Message message, Channel channel, String msg)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取每条消息唯一标识(用于手动ACK确认)</span></span><br><span class="line">        <span class="keyword">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; customListener接收"</span> + msg);</span><br><span class="line">            <span class="comment">// 手动ACK确认</span></span><br><span class="line">            channel.basicAck(tag, <span class="keyword">false</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">" ==&gt; 消息接收失败: {}"</span>, tag);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据注解的形式进行绑定接收</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = Constants.HORSE_ANNOTATION_QUEUE, durable = "true"),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = Constants.HORSE_ANNOTATION_EXCHANGE, ignoreDeclarationExceptions = "true"),</span></span><br><span class="line"><span class="meta">            key = {Constants.HORSE_ANNOTATION_KEY}</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationListener</span><span class="params">(Message message, Channel channel, String msg)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取每条消息唯一标识(用于手动ACK确认)</span></span><br><span class="line">        <span class="keyword">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; annotationListener接收"</span> + msg);</span><br><span class="line">            <span class="comment">// 手动ACK确认</span></span><br><span class="line">            channel.basicAck(tag, <span class="keyword">false</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">" ==&gt; 消息接收失败: {}"</span>, tag);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="6-测试接口"><a href="#6-测试接口" class="headerlink" title="6. 测试接口"></a>6. 测试接口</h3><blockquote>
<p>这里发送100条消息：</p>
<ul>
<li>奇数条到非注解方式的消息监听器</li>
<li>偶数条到注解式消息监听器</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/rabbit")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            String msg = <span class="string">"第"</span> + i + <span class="string">"条消息"</span>;</span><br><span class="line">            logger.info(<span class="string">"==&gt; 发送"</span> + msg);</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">                rabbitTemplate.convertAndSend(Constants.HORSE_SIMPLE_EXCHANGE, Constants.HORSE_SIMPLE_KEY, msg, <span class="keyword">new</span> CorrelationData(String.valueOf(i)));</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                rabbitTemplate.convertAndSend(Constants.HORSE_ANNOTATION_EXCHANGE, Constants.HORSE_ANNOTATION_KEY, msg, <span class="keyword">new</span> CorrelationData(String.valueOf(i)));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>结果：自行测试过，非常成功<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<h2 id="延时消息队列"><a href="#延时消息队列" class="headerlink" title="延时消息队列"></a>延时消息队列</h2><blockquote>
<p>原理：生产者生产一条延时消息，根据需要延时时间的不同，利用不同的routingkey将消息路由到不同的延时队列，每个队列都设置了不同的TTL属性，并绑定在同一个死信交换机中，消息过期后，根据routingkey的不同，又会被路由到不同的死信队列中，消费者只需要监听对应的死信队列进行处理即可。</p>
</blockquote>
<h3 id="7-配置绑定相关信息"><a href="#7-配置绑定相关信息" class="headerlink" title="7. 配置绑定相关信息"></a>7. 配置绑定相关信息</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/24 14:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayRabbitConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DelayRabbitConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明延时队列交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">delayExchange</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(Constants.HORSE_DELAY_EXCHANGE, Boolean.TRUE, Boolean.FALSE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明死信队列交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">deadExchange</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(Constants.HORSE_DEAD_EXCHANGE, Boolean.TRUE, Boolean.FALSE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明延时队列 延时10s(单位:ms),并将延时队列绑定到对应的死信交换机和路由Key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>{</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span></span><br><span class="line">        args.put(<span class="string">"x-dead-letter-exchange"</span>, Constants.HORSE_DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span></span><br><span class="line">        args.put(<span class="string">"x-dead-letter-routing-key"</span>, Constants.HORSE_DEAD_KEY);</span><br><span class="line">        <span class="comment">// x-message-ttl  声明队列的TTL(过期时间)</span></span><br><span class="line">        <span class="comment">// 可以在这里直接写死，也可以进行动态的设置（推荐动态设置）</span></span><br><span class="line">        <span class="comment">// args.put("x-message-ttl", 10000);</span></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(Constants.HORSE_DELAY_QUEUE).withArguments(args).build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明死信队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadQueue</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(Constants.HORSE_DEAD_QUEUE, Boolean.TRUE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时队列绑定管理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayBinding</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayQueue()).to(delayExchange()).with(Constants.HORSE_DELAY_KEY);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列绑定管理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadBinding</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadQueue()).to(deadExchange()).with(Constants.HORSE_DEAD_KEY);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//**********************************延时消息队列配置信息(插件版)************************************</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">pluginQueue</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(Constants.HORSE_PLUGIN_QUEUE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置延时队列的交换机，必须是 CustomExchange 类型交换机</span></span><br><span class="line"><span class="comment">     * 参数必须，不能改变</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomExchange <span class="title">customPluginExchange</span><span class="params">()</span> </span>{</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"direct"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(Constants.HORSE_PLUGIN_EXCHANGE, <span class="string">"x-delayed-message"</span>, Boolean.TRUE, Boolean.FALSE, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">pluginBinding</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(pluginQueue()).to(customPluginExchange()).with(Constants.HORSE_PLUGIN_KEY).noargs();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="8-定义延时监听器"><a href="#8-定义延时监听器" class="headerlink" title="8. 定义延时监听器"></a>8. 定义延时监听器</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/24 14:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayMsgListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DelayMsgListener.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听死信队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = Constants.HORSE_DEAD_QUEUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeDeadListener</span><span class="params">(Message message, Channel channel, String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; consumeDeadListener接收"</span> + msg);</span><br><span class="line">            <span class="comment">// 手动ACK确认</span></span><br><span class="line">            channel.basicAck(tag, <span class="keyword">false</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">" ==&gt; 消息接收失败: {}"</span>, tag);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听延时队列(插件版)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = Constants.HORSE_PLUGIN_QUEUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumePluginListener</span><span class="params">(Message message, Channel channel, String msg)</span> </span>{</span><br><span class="line">        <span class="keyword">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            logger.info(<span class="string">" ==&gt; consumePluginListener"</span> + msg);</span><br><span class="line">            <span class="comment">// 手动ACK确认</span></span><br><span class="line">            channel.basicAck(tag, <span class="keyword">false</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            logger.error(<span class="string">" ==&gt; 消息接收失败: {}"</span>, tag);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="9-测试接口"><a href="#9-测试接口" class="headerlink" title="9. 测试接口"></a>9. 测试接口</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">  <span class="comment">// 基于特性的延时队列</span></span><br><span class="line"><span class="meta">@GetMapping("/delay/rabbit")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delayMsg</span><span class="params">(<span class="meta">@RequestParam("expire")</span> Long expire)</span> </span>{</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">           String msg = <span class="string">"第"</span> + i + <span class="string">"条消息"</span>;</span><br><span class="line">           logger.info(<span class="string">"==&gt; 发送"</span> + msg);</span><br><span class="line">           <span class="comment">// 这里可以动态的设置过期时间</span></span><br><span class="line">           rabbitTemplate.convertAndSend(Constants.HORSE_DELAY_EXCHANGE, Constants.HORSE_DELAY_KEY, msg,</span><br><span class="line">                   message -&gt; {</span><br><span class="line">                       message.getMessageProperties().setExpiration(String.valueOf(expire));</span><br><span class="line">                       <span class="keyword">return</span> message;</span><br><span class="line">                   },</span><br><span class="line">                   <span class="keyword">new</span> CorrelationData(String.valueOf(i)));</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于插件的延时队列</span></span><br><span class="line">   <span class="meta">@GetMapping("/delay/plugin")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delayPluginMsg</span><span class="params">(<span class="meta">@RequestParam("expire")</span> Integer expire)</span> </span>{</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) {</span><br><span class="line">           String msg = <span class="string">"第"</span> + i + <span class="string">"条消息"</span>;</span><br><span class="line">           logger.info(<span class="string">"==&gt; 发送"</span> + msg);</span><br><span class="line">           <span class="comment">// 动态设置过期时间</span></span><br><span class="line">           rabbitTemplate.convertAndSend(Constants.HORSE_PLUGIN_EXCHANGE, Constants.HORSE_PLUGIN_KEY, msg, message -&gt; {</span><br><span class="line">               message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">               message.getMessageProperties().setDelay(expire);</span><br><span class="line">               <span class="keyword">return</span> message;</span><br><span class="line">           }, <span class="keyword">new</span> CorrelationData(String.valueOf(i)));</span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<p>RabbitMQ的基础使用演示到此结束。</p>
<h2 id="RabbitMQ安装延时插件"><a href="#RabbitMQ安装延时插件" class="headerlink" title="RabbitMQ安装延时插件"></a>RabbitMQ安装延时插件</h2><blockquote>
<p>示例演示环境：Docker安装的RabbitMQ服务</p>
</blockquote>
<h3 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h3><blockquote>
<p><a href="[Community Plugins — RabbitMQ](https://www.rabbitmq.com/community-plugins.html">延时插件点击下载</a>)</p>
</blockquote>
<p><img src="https://i.loli.net/2021/05/27/nkYDxtPdCaSOMeW.png" alt="image-20210527175811822"></p>
<h3 id="进入RabbitMQ容器"><a href="#进入RabbitMQ容器" class="headerlink" title="进入RabbitMQ容器"></a>进入RabbitMQ容器</h3><blockquote>
<ul>
<li>进入正在运行的RabbitMQ容器，查看RabbitMQ的插件列表是否已安装有<code>延时插件</code></li>
<li>把下载的插件复制到<code>plugins</code>目录下</li>
</ul>
</blockquote>
<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse lib]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND                  CREATED      STATUS      PORTS                                                                                                                                                 NAMES</span><br><span class="line">abe759d645e4   rabbitmq:3.8.14-management   <span class="string">"docker-entrypoint.s…"</span>   2 days ago   Up 2 days   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   horse-rabbitmq</span><br><span class="line">[root@horse lib]<span class="comment"># docker exec -it abe759d645e4 /bin/bash</span></span><br><span class="line">root@abe759d645e4:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  plugins  root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   media  opt  proc     run   srv   tmp  var</span><br><span class="line">root@abe759d645e4:/<span class="comment"># cd plugins</span></span><br><span class="line">root@abe759d645e4:/plugins<span class="comment"># ls -l</span></span><br><span class="line">total 17640</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq      59 Mar  2 16:09 README</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   13408 Mar  2 16:09 accept-0.3.5.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  106760 Mar  2 16:09 amqp10_client-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   45013 Mar  2 16:09 amqp10_common-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  414492 Mar  2 16:09 amqp_client-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   19781 Mar  2 16:09 aten-0.5.5.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq    3193 Mar  2 16:09 base64url-0.0.1.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  291018 Mar  2 16:09 cowboy-2.8.0.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  644412 Mar  2 16:09 cowlib-2.9.1.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   18562 Mar  2 16:09 credentials_obfuscation-2.4.0.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  187264 Mar  2 16:09 cuttlefish-2.6.0.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq 2486967 Mar  2 16:09 eetcd-0.3.3.ez</span><br><span class="line">-rw-r----- 1 root     root     3926464 May 27 09:51 erl_crash.dump</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   13844 Mar  2 16:09 gen_batch_server-0.8.4.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   69315 Mar  2 16:09 goldrush-0.1.9.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   97368 Mar  2 16:09 gun-1.3.3.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  831315 Mar  2 16:09 jose-1.11.1.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   99028 Mar  2 16:09 jsx-2.11.0.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  234145 Mar  2 16:09 lager-3.8.2.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  167726 Mar  2 16:09 observer_cli-1.6.1.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  223845 Mar  2 16:09 prometheus-4.6.0.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  388155 Mar  2 16:09 ra-1.1.8.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq 2640559 Mar  2 16:09 rabbit-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  799921 Mar  2 16:09 rabbit_common-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  257032 Mar  2 16:09 rabbitmq_amqp1_0-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   33708 Mar  2 16:09 rabbitmq_auth_backend_cache-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   17104 Mar  2 16:09 rabbitmq_auth_backend_http-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   53028 Mar  2 16:09 rabbitmq_auth_backend_ldap-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   52185 Mar  2 16:09 rabbitmq_auth_backend_oauth2-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   24363 Mar  2 16:09 rabbitmq_auth_mechanism_ssl-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   61855 Mar  2 16:09 rabbitmq_aws-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   35453 Mar  2 16:09 rabbitmq_consistent_hash_exchange-3.8.14.ez</span><br><span class="line">-rw-rw-rw- 1 root     root       43377 May 27 09:47 rabbitmq_delayed_message_exchange-3.8.0.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   27443 Mar  2 16:09 rabbitmq_event_exchange-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  261989 Mar  2 16:09 rabbitmq_federation-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   14731 Mar  2 16:09 rabbitmq_federation_management-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   26567 Mar  2 16:09 rabbitmq_jms_topic_exchange-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq 1286172 Mar  2 16:09 rabbitmq_management-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  189852 Mar  2 16:09 rabbitmq_management_agent-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  202956 Mar  2 16:09 rabbitmq_mqtt-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   28493 Mar  2 16:09 rabbitmq_peer_discovery_aws-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   58885 Mar  2 16:09 rabbitmq_peer_discovery_common-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   55973 Mar  2 16:09 rabbitmq_peer_discovery_consul-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   55273 Mar  2 16:09 rabbitmq_peer_discovery_etcd-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   30942 Mar  2 16:09 rabbitmq_peer_discovery_k8s-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   98941 Mar  2 16:09 rabbitmq_prelaunch-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   51254 Mar  2 16:09 rabbitmq_prometheus-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq    7624 Mar  2 16:09 rabbitmq_random_exchange-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   18875 Mar  2 16:09 rabbitmq_recent_history_exchange-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   49522 Mar  2 16:09 rabbitmq_sharding-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  205297 Mar  2 16:09 rabbitmq_shovel-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   27436 Mar  2 16:09 rabbitmq_shovel_management-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq  152417 Mar  2 16:09 rabbitmq_stomp-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   72740 Mar  2 16:09 rabbitmq_top-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   67968 Mar  2 16:09 rabbitmq_tracing-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   86263 Mar  2 16:09 rabbitmq_trust_store-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   49239 Mar  2 16:09 rabbitmq_web_dispatch-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   49063 Mar  2 16:09 rabbitmq_web_mqtt-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   66578 Mar  2 16:09 rabbitmq_web_mqtt_examples-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   53235 Mar  2 16:09 rabbitmq_web_stomp-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   52246 Mar  2 16:09 rabbitmq_web_stomp_examples-3.8.14.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   89840 Mar  2 16:09 ranch-1.7.1.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   77407 Mar  2 16:09 recon-2.5.1.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   47497 Mar  2 16:09 stdout_formatter-0.2.4.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   56943 Mar  2 16:09 syslog-3.4.5.ez</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   17588 Mar  2 16:09 sysmon_handler-1.3.0.ez</span><br></pre></td></tr></tbody></table></figure>
<h4 id="复制移动插件"><a href="#复制移动插件" class="headerlink" title="复制移动插件"></a>复制移动插件</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line">docker cp /tmp/installPackage/rabbitmq_delayed_message_exchange-3.8.0.ez abe759d645e4:/plugins/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否复制成功</span></span><br><span class="line">[root@horse /]<span class="comment"># docker exec -it abe759d645e4 /bin/bash</span></span><br><span class="line">root@abe759d645e4:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  plugins  root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   media  opt  proc     run   srv   tmp  var</span><br><span class="line">root@abe759d645e4:/<span class="comment"># cd plugins</span></span><br><span class="line">root@abe759d645e4:/plugins<span class="comment"># rabbitmq-plugins list</span></span><br><span class="line">Listing plugins with pattern <span class="string">".*"</span> ...</span><br><span class="line"> Configured: E = explicitly enabled; e = implicitly enabled</span><br><span class="line"> | Status: * = running on rabbit@abe759d645e4</span><br><span class="line"> |/</span><br><span class="line">[  ] rabbitmq_amqp1_0                  3.8.14</span><br><span class="line">[  ] rabbitmq_auth_backend_cache       3.8.14</span><br><span class="line">[  ] rabbitmq_auth_backend_http        3.8.14</span><br><span class="line">[  ] rabbitmq_auth_backend_ldap        3.8.14</span><br><span class="line">[  ] rabbitmq_auth_backend_oauth2      3.8.14</span><br><span class="line">[  ] rabbitmq_auth_mechanism_ssl       3.8.14</span><br><span class="line">[  ] rabbitmq_consistent_hash_exchange 3.8.14</span><br><span class="line"><span class="comment"># 插件已复制成功</span></span><br><span class="line">[E*] rabbitmq_delayed_message_exchange 3.8.0</span><br><span class="line">[  ] rabbitmq_event_exchange           3.8.14</span><br><span class="line">[  ] rabbitmq_federation               3.8.14</span><br><span class="line">[  ] rabbitmq_federation_management    3.8.14</span><br><span class="line">[  ] rabbitmq_jms_topic_exchange       3.8.14</span><br><span class="line">[E*] rabbitmq_management               3.8.14</span><br><span class="line">[e*] rabbitmq_management_agent         3.8.14</span><br><span class="line">[  ] rabbitmq_mqtt                     3.8.14</span><br><span class="line">[  ] rabbitmq_peer_discovery_aws       3.8.14</span><br><span class="line">[  ] rabbitmq_peer_discovery_common    3.8.14</span><br><span class="line">[  ] rabbitmq_peer_discovery_consul    3.8.14</span><br><span class="line">[  ] rabbitmq_peer_discovery_etcd      3.8.14</span><br><span class="line">[  ] rabbitmq_peer_discovery_k8s       3.8.14</span><br><span class="line">[E*] rabbitmq_prometheus               3.8.14</span><br><span class="line">[  ] rabbitmq_random_exchange          3.8.14</span><br><span class="line">[  ] rabbitmq_recent_history_exchange  3.8.14</span><br><span class="line">[  ] rabbitmq_sharding                 3.8.14</span><br><span class="line">[  ] rabbitmq_shovel                   3.8.14</span><br><span class="line">[  ] rabbitmq_shovel_management        3.8.14</span><br><span class="line">[  ] rabbitmq_stomp                    3.8.14</span><br><span class="line">[  ] rabbitmq_top                      3.8.14</span><br><span class="line">[  ] rabbitmq_tracing                  3.8.14</span><br><span class="line">[  ] rabbitmq_trust_store              3.8.14</span><br><span class="line">[e*] rabbitmq_web_dispatch             3.8.14</span><br><span class="line">[  ] rabbitmq_web_mqtt                 3.8.14</span><br><span class="line">[  ] rabbitmq_web_mqtt_examples        3.8.14</span><br><span class="line">[  ] rabbitmq_web_stomp                3.8.14</span><br><span class="line">[  ] rabbitmq_web_stomp_examples       3.8.14</span><br><span class="line">root@abe759d645e4:/plugins<span class="comment"># </span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="开启插件服务"><a href="#开启插件服务" class="headerlink" title="开启插件服务"></a>开启插件服务</h3><blockquote>
<p>在容器中执行两个命令</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行一下，避免出错</span></span><br><span class="line">rabbitmq-server -detached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用插件</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></tbody></table></figure>
<h3 id="可视化界面查看"><a href="#可视化界面查看" class="headerlink" title="可视化界面查看"></a>可视化界面查看</h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210527201850.png" alt="image-20210527201840273"></p>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Quartz定时任务</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="SpringBoot整个Quartz定时任务"><a href="#SpringBoot整个Quartz定时任务" class="headerlink" title="SpringBoot整个Quartz定时任务"></a>SpringBoot整个Quartz定时任务</h2><h3 id="运行SQL脚本"><a href="#运行SQL脚本" class="headerlink" title="运行SQL脚本"></a>运行SQL脚本</h3><blockquote>
<ul>
<li>下载Quartz的资源压缩包<a href="http://www.quartz-scheduler.org/downloads/">点击下载Quartz</a></li>
<li>在<code>docs/dbTables/</code>目录下选择合适的数据库SQL脚本执行</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># <span class="keyword">In</span> your Quartz properties file, you<span class="string">'ll need to set </span></span><br><span class="line"><span class="string"># org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># By: Ron Cordell - roncordell</span></span><br><span class="line"><span class="string">#  I didn'</span>t see this anywhere, so I thought I<span class="string">'d post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_LOCKS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_TRIGGERS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS QRTZ_CALENDARS;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_JOB_DETAILS(</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">DESCRIPTION VARCHAR(250) NULL,</span></span><br><span class="line"><span class="string">JOB_CLASS_NAME VARCHAR(250) NOT NULL,</span></span><br><span class="line"><span class="string">IS_DURABLE VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">IS_NONCONCURRENT VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">IS_UPDATE_DATA VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">REQUESTS_RECOVERY VARCHAR(1) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_DATA BLOB NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">DESCRIPTION VARCHAR(250) NULL,</span></span><br><span class="line"><span class="string">NEXT_FIRE_TIME BIGINT(13) NULL,</span></span><br><span class="line"><span class="string">PREV_FIRE_TIME BIGINT(13) NULL,</span></span><br><span class="line"><span class="string">PRIORITY INTEGER NULL,</span></span><br><span class="line"><span class="string">TRIGGER_STATE VARCHAR(16) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_TYPE VARCHAR(8) NOT NULL,</span></span><br><span class="line"><span class="string">START_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">END_TIME BIGINT(13) NULL,</span></span><br><span class="line"><span class="string">CALENDAR_NAME VARCHAR(200) NULL,</span></span><br><span class="line"><span class="string">MISFIRE_INSTR SMALLINT(2) NULL,</span></span><br><span class="line"><span class="string">JOB_DATA BLOB NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_SIMPLE_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">REPEAT_COUNT BIGINT(7) NOT NULL,</span></span><br><span class="line"><span class="string">REPEAT_INTERVAL BIGINT(12) NOT NULL,</span></span><br><span class="line"><span class="string">TIMES_TRIGGERED BIGINT(10) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_CRON_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">CRON_EXPRESSION VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TIME_ZONE_ID VARCHAR(80),</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_SIMPROP_TRIGGERS</span></span><br><span class="line"><span class="string">  (          </span></span><br><span class="line"><span class="string">    SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">    TRIGGER_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">    TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">    STR_PROP_1 VARCHAR(512) NULL,</span></span><br><span class="line"><span class="string">    STR_PROP_2 VARCHAR(512) NULL,</span></span><br><span class="line"><span class="string">    STR_PROP_3 VARCHAR(512) NULL,</span></span><br><span class="line"><span class="string">    INT_PROP_1 INT NULL,</span></span><br><span class="line"><span class="string">    INT_PROP_2 INT NULL,</span></span><br><span class="line"><span class="string">    LONG_PROP_1 BIGINT NULL,</span></span><br><span class="line"><span class="string">    LONG_PROP_2 BIGINT NULL,</span></span><br><span class="line"><span class="string">    DEC_PROP_1 NUMERIC(13,4) NULL,</span></span><br><span class="line"><span class="string">    DEC_PROP_2 NUMERIC(13,4) NULL,</span></span><br><span class="line"><span class="string">    BOOL_PROP_1 VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">    BOOL_PROP_2 VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) </span></span><br><span class="line"><span class="string">    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_BLOB_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">BLOB_DATA BLOB NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),</span></span><br><span class="line"><span class="string">FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span></span><br><span class="line"><span class="string">REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_CALENDARS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">CALENDAR_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">CALENDAR BLOB NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_FIRED_TRIGGERS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">ENTRY_ID VARCHAR(95) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">TRIGGER_GROUP VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">INSTANCE_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">FIRED_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">SCHED_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">PRIORITY INTEGER NOT NULL,</span></span><br><span class="line"><span class="string">STATE VARCHAR(16) NOT NULL,</span></span><br><span class="line"><span class="string">JOB_NAME VARCHAR(200) NULL,</span></span><br><span class="line"><span class="string">JOB_GROUP VARCHAR(200) NULL,</span></span><br><span class="line"><span class="string">IS_NONCONCURRENT VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">REQUESTS_RECOVERY VARCHAR(1) NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,ENTRY_ID))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_SCHEDULER_STATE (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">INSTANCE_NAME VARCHAR(200) NOT NULL,</span></span><br><span class="line"><span class="string">LAST_CHECKIN_TIME BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">CHECKIN_INTERVAL BIGINT(13) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE TABLE QRTZ_LOCKS (</span></span><br><span class="line"><span class="string">SCHED_NAME VARCHAR(120) NOT NULL,</span></span><br><span class="line"><span class="string">LOCK_NAME VARCHAR(40) NOT NULL,</span></span><br><span class="line"><span class="string">PRIMARY KEY (SCHED_NAME,LOCK_NAME))</span></span><br><span class="line"><span class="string">ENGINE=InnoDB;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);</span></span><br><span class="line"><span class="string">CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">commit; </span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-quartz--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h3><blockquote>
<p>额外配置使用自定义的Druid连接池，默认使用的C3p0连接池</p>
</blockquote>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># quartz信息配置</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="attr">instanceName:</span> <span class="string">DefaultQuartzScheduler</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">QRTZ_</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">10000</span></span><br><span class="line">            <span class="attr">useProperties:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">dataSource:</span> <span class="string">myDS</span>  <span class="comment"># 自定义数据源名称</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">dataSource:</span></span><br><span class="line">            <span class="attr">myDS:</span></span><br><span class="line">              <span class="attr">connectionProvider:</span></span><br><span class="line">                <span class="attr">class:</span> <span class="string">com.horse.service.blog.handler.DruidProviderHandler</span>  <span class="comment"># 替换为自定义的druid数据源(class属于下一级[有空格])</span></span><br><span class="line">              <span class="attr">URL:</span> <span class="string">jdbc:mysql://localhost:3306/horse_vue_blog?serverTimezone=GMT%2B8&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">              <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">              <span class="attr">password:</span> <span class="string">****</span></span><br><span class="line">              <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">              <span class="attr">maxConnection:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># 数据库持久化</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="attr">jdbc:</span></span><br><span class="line">      <span class="attr">initialize-schema:</span> <span class="string">never</span> <span class="comment"># 启动时是否执行建表语句(已经存在的任务,重启服务器的时候不会进行清空,并且自动拉取执行)</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="自定义Druid数据源"><a href="#自定义Druid数据源" class="headerlink" title="自定义Druid数据源"></a>自定义Druid数据源</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.quartz.utils.ConnectionProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的Quartz扩展类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidProviderHandler</span> <span class="keyword">implements</span> <span class="title">ConnectionProvider</span> </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 常量配置，与quartz.properties文件的key保持一致(去掉前缀)，同时提供set方法，Quartz框架自动注入值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC连接串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String URL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String user;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库最大连接数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> maxConnection;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库SQL查询每次连接返回执行到连接池，以确保它仍然是有效的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> validateOnCheckout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idleConnectionValidationSeconds;</span><br><span class="line">    <span class="keyword">public</span> String maxCachedStatementsPerConnection;</span><br><span class="line">    <span class="keyword">private</span> String discardIdleConnectionsSeconds;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_DB_MAX_CONNECTIONS = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_DB_MAX_CACHED_STATEMENTS_PER_CONNECTION = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">private</span> DruidDataSource datasource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        <span class="keyword">return</span> datasource.getConnection();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        datasource.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.URL == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"DBPool could not be created: DB URL cannot be null"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.driver == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"DBPool driver could not be created: DB driver class name cannot be null!"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.maxConnection &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"DBPool maxConnectins could not be created: Max connections must be greater than zero!"</span>);</span><br><span class="line">        }</span><br><span class="line">        datasource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            datasource.setDriverClassName(<span class="keyword">this</span>.driver);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SchedulerException(<span class="string">"Problem setting driver class name on datasource: "</span> + e.getMessage(), e);</span><br><span class="line">            } <span class="keyword">catch</span> (SchedulerException e1) {</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        datasource.setUrl(<span class="keyword">this</span>.URL);</span><br><span class="line">        datasource.setUsername(<span class="keyword">this</span>.user);</span><br><span class="line">        datasource.setPassword(<span class="keyword">this</span>.password);</span><br><span class="line">        datasource.setMaxActive(<span class="keyword">this</span>.maxConnection);</span><br><span class="line">        datasource.setMinIdle(<span class="number">1</span>);</span><br><span class="line">        datasource.setMaxWait(<span class="number">0</span>);</span><br><span class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(DEFAULT_DB_MAX_CONNECTIONS);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.validationQuery != <span class="keyword">null</span>) {</span><br><span class="line">            datasource.setValidationQuery(<span class="keyword">this</span>.validationQuery);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.validateOnCheckout) {</span><br><span class="line">                datasource.setTestOnReturn(<span class="keyword">true</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                datasource.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">            }</span><br><span class="line">            datasource.setValidationQueryTimeout(<span class="keyword">this</span>.idleConnectionValidationSeconds);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getURL</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> URL;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setURL</span><span class="params">(String URL)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.URL = URL;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxConnection</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> maxConnection;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxConnection</span><span class="params">(<span class="keyword">int</span> maxConnection)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.maxConnection = maxConnection;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValidationQuery</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> validationQuery;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidationQuery</span><span class="params">(String validationQuery)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.validationQuery = validationQuery;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidateOnCheckout</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> validateOnCheckout;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidateOnCheckout</span><span class="params">(<span class="keyword">boolean</span> validateOnCheckout)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.validateOnCheckout = validateOnCheckout;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIdleConnectionValidationSeconds</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> idleConnectionValidationSeconds;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdleConnectionValidationSeconds</span><span class="params">(<span class="keyword">int</span> idleConnectionValidationSeconds)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.idleConnectionValidationSeconds = idleConnectionValidationSeconds;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDatasource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> datasource;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatasource</span><span class="params">(DruidDataSource datasource)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDiscardIdleConnectionsSeconds</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> discardIdleConnectionsSeconds;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiscardIdleConnectionsSeconds</span><span class="params">(String discardIdleConnectionsSeconds)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.discardIdleConnectionsSeconds = discardIdleConnectionsSeconds;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="config全局配置"><a href="#config全局配置" class="headerlink" title="config全局配置"></a>config全局配置</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/14 15:41</span></span><br><span class="line"><span class="comment"> * quartz自定义全局配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQuartzConfig</span> <span class="keyword">implements</span> <span class="title">SchedulerFactoryBeanCustomizer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(SchedulerFactoryBean schedulerFactoryBean)</span> </span>{</span><br><span class="line">        <span class="comment">// 延时启动</span></span><br><span class="line">        schedulerFactoryBean.setStartupDelay(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 服务器加载自启动</span></span><br><span class="line">        schedulerFactoryBean.setAutoStartup(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 覆盖已存在的任务(确保任务更新及时生效)</span></span><br><span class="line">        schedulerFactoryBean.setOverwriteExistingJobs(<span class="keyword">true</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Quartz任务基操"><a href="#Quartz任务基操" class="headerlink" title="Quartz任务基操"></a>Quartz任务基操</h3><blockquote>
<p>前台接收数据<code>QuartzInfoVo</code>实例</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/15 11:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzInfoVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">451044673720410024L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务名称不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务名称")</span></span><br><span class="line">    <span class="keyword">public</span> String jobName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务组不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务组")</span></span><br><span class="line">    <span class="keyword">public</span> String jobGroup;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务类名不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务类名")</span></span><br><span class="line">    <span class="keyword">public</span> String jobClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务描述不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务描述")</span></span><br><span class="line">    <span class="keyword">public</span> String jobDescription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "触发器名称不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("触发器名称")</span></span><br><span class="line">    <span class="keyword">public</span> String triggerName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "触发器组不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("触发器组")</span></span><br><span class="line">    <span class="keyword">public</span> String triggerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "cron表达式不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("cron表达式")</span></span><br><span class="line">    <span class="keyword">public</span> String cronExpression;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="项目实现接口服务"><a href="#项目实现接口服务" class="headerlink" title="项目实现接口服务"></a>项目实现接口服务</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/15 11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Api(tags = {"Quartz调度服务API"})</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin/blog/job")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminQuartzController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzService quartzService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("根据任务名和任务组查询任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@GetMapping("/query")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">queryJobByNameAndGroup</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> <span class="meta">@NotBlank(message = "任务名称[jobName]不能为空")</span> String jobName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="meta">@RequestParam("jobGroup")</span> <span class="meta">@NotBlank(message = "任务名组[jobGroup]不能为空")</span> String jobGroup)</span> </span>{</span><br><span class="line">        ResponseQuartzInfoVO quartzInfoVO = quartzService.queryJobByNameAndGroup(jobName, jobGroup);</span><br><span class="line">        <span class="keyword">return</span> ObjectUtils.isNotEmpty(quartzInfoVO) ? R.ok().data(<span class="string">"item"</span>, quartzInfoVO) : R.error().message(<span class="string">"资源未找到"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = "分页查询任务列表", notes = "配合PageHelper分页插件")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "page", value = "当前页", dataType = "Integer", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "limit", value = "每页记录数", dataType = "Integer", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@GetMapping("/query/list/{page}/{limit}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">queryJobList</span><span class="params">(<span class="meta">@PathVariable("page")</span> Integer page, <span class="meta">@PathVariable("limit")</span> Integer limit)</span> </span>{</span><br><span class="line">        PageHelper.startPage(page, limit);</span><br><span class="line">        List&lt;ResponseQuartzInfoVO&gt; quartzInfoVOList = quartzService.queryJobList();</span><br><span class="line">        PageInfo&lt;ResponseQuartzInfoVO&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(quartzInfoVOList);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">"rows"</span>, pageInfo.getList()).data(<span class="string">"total"</span>, pageInfo.getTotal());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoRepeatSubmit</span></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.ADD, operDesc = "创建调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("创建任务")</span></span><br><span class="line">    <span class="meta">@PostMapping("/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">addJob</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> QuartzInfoVo quartzInfoVo)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(quartzInfoVo)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.addJob(quartzInfoVo);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"创建成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_CREATE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE, operDesc = "暂停调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("暂停任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@PostMapping("/pause")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">pauseJob</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName, <span class="meta">@RequestParam("jobGroup")</span> String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.pauseJob(jobName, jobGroup);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"暂停成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_PAUSE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE, operDesc = "恢复调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("恢复任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@PostMapping("/resume")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">resumeJob</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName, <span class="meta">@RequestParam("jobGroup")</span> String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.resumeJob(jobName, jobGroup);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"恢复成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_RESUME_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE, operDesc = "更新调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("更新任务")</span></span><br><span class="line">    <span class="meta">@PutMapping("/update")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">updateJob</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> QuartzInfoVo quartzInfoVo)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(quartzInfoVo)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.updateJob(quartzInfoVo.getTriggerName(), quartzInfoVo.getTriggerGroup(),</span><br><span class="line">                    quartzInfoVo.getCronExpression());</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"更新成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_UPDATE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.REMOVE, operDesc = "删除调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("删除任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "triggerName", value = "触发器名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "triggerGroup", value = "触发器组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/remove")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">removeJob</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("jobGroup")</span> String jobGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("triggerName")</span> String triggerName,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("triggerGroup")</span> String triggerGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup, triggerName, triggerGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.removeJob(jobName, jobGroup, triggerName, triggerGroup);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"删除成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_DELETE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="定时任务具体实现"><a href="#定时任务具体实现" class="headerlink" title="定时任务具体实现"></a>定时任务具体实现</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.job.BaseJob;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.mapper.QuartzMapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.QuartzService;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.vo.QuartzInfoVo;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.vo.ResponseQuartzInfoVO;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/15 11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzServiceImpl</span> <span class="keyword">implements</span> <span class="title">QuartzService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzMapper quartzMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> quartzInfoVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(QuartzInfoVo quartzInfoVo)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 启动调度器</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">        <span class="comment">// 创建JobDetails</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(reflectClass(quartzInfoVo.getJobClassName()).getClass())</span><br><span class="line">                .withIdentity(quartzInfoVo.getJobName(), quartzInfoVo.getJobGroup())</span><br><span class="line">                .withDescription(quartzInfoVo.getJobDescription())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 创建cron构建器</span></span><br><span class="line">        CronScheduleBuilder cronSchedule = CronScheduleBuilder.cronSchedule(quartzInfoVo.getCronExpression());</span><br><span class="line">        <span class="comment">// 创建触发器</span></span><br><span class="line">        CronTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(quartzInfoVo.getTriggerName(), quartzInfoVo.getTriggerGroup())</span><br><span class="line">                .withSchedule(cronSchedule)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 建立关联</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(String jobName, String jobGroup)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        scheduler.pauseJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(String jobName, String jobGroup)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        scheduler.resumeJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerGroup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(String jobName, String jobGroup, String triggerName, String triggerGroup)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 暂停触发器</span></span><br><span class="line">        scheduler.pauseTrigger(TriggerKey.triggerKey(triggerName, triggerGroup));</span><br><span class="line">        <span class="comment">// 移除触发器中绑定的任务</span></span><br><span class="line">        scheduler.unscheduleJob(TriggerKey.triggerKey(triggerName, triggerGroup));</span><br><span class="line">        <span class="comment">// 删除任务</span></span><br><span class="line">        scheduler.deleteJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cronExpression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateJob</span><span class="params">(String triggerName, String triggerGroup, String cronExpression)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 创建触发器唯一标识</span></span><br><span class="line">        TriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroup);</span><br><span class="line">        <span class="comment">// 创建表达式构建器(动态修改后不立即执行)</span></span><br><span class="line">        CronScheduleBuilder cronScheduler = CronScheduleBuilder.cronSchedule(cronExpression)</span><br><span class="line">                .withMisfireHandlingInstructionDoNothing();</span><br><span class="line">        <span class="comment">// 获取cron类型触发器</span></span><br><span class="line">        CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">        <span class="comment">// 按照新的cron表达式重新构建触发器</span></span><br><span class="line">        trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">                .withSchedule(cronScheduler)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 按新的trigger重新设置job执行</span></span><br><span class="line">        scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询任务列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ResponseQuartzInfoVO&gt; <span class="title">queryJobList</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> quartzMapper.queryJobList();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据任务名和任务组查询任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseQuartzInfoVO <span class="title">queryJobByNameAndGroup</span><span class="params">(String jobName, String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> quartzMapper.queryJobByNameAndGroup(jobName, jobGroup);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射获取类(全部进行强制转换成BaseJob实现接口)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 完整类路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BaseJob <span class="title">reflectClass</span><span class="params">(String className)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> (BaseJob) Class.forName(className).newInstance();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="页面效果"><a href="#页面效果" class="headerlink" title="页面效果"></a>页面效果</h3><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><p><img src="https://i.loli.net/2021/05/31/HCqkTzJWA91O4f2.png" alt="任务列表"></p>
<h4 id="任务创建"><a href="#任务创建" class="headerlink" title="任务创建"></a>任务创建</h4><p><img src="https://i.loli.net/2021/05/31/VtLA59KvrTJfMd8.png" alt="任务创建更新"></p>
<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Job</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合支付宝沙箱支付</title>
    <url>/JAVA/SpringBoot%E6%95%B4%E5%90%88%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h2 id="SpringBoot整合支付宝沙箱支付"><a href="#SpringBoot整合支付宝沙箱支付" class="headerlink" title="SpringBoot整合支付宝沙箱支付"></a>SpringBoot整合支付宝沙箱支付</h2><blockquote>
<p>基于支付宝开放平台，使用沙箱环境进行整合操作。</p>
</blockquote>
<h3 id="引入SDK文件"><a href="#引入SDK文件" class="headerlink" title="引入SDK文件"></a>引入SDK文件</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--支付宝SDK--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.50.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置yml信息"><a href="#配置yml信息" class="headerlink" title="配置yml信息"></a>配置yml信息</h3><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 支付宝配置信息</span></span><br><span class="line"><span class="attr">alipay:</span></span><br><span class="line">  <span class="attr">serverUrl:</span> <span class="string">https://openapi.alipaydev.com/gateway.do</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="number">202100011766</span><span class="string">****</span></span><br><span class="line">  <span class="attr">privateKey:</span> <span class="string">MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCHOOTPFoXOeGcZgYKwXrJmh1rN6A6OlXVM6K7Qm7StJx4A6mA+lXTDbJsJl4SXpDur1UZv6I51JzEn3VUPCZeHrdWdemB1sgRo4JC5HJdj0Z3jIueevodtKe2nPMFFhFfhEfJYZucbfOnx0TCdEavlRw2HByv3Y4pYvBBqi0m2icp6dC3aixg9+EruSq5civSofIfwgTlFrcF+JuCWi1LGU3ySiRAHa6STatHLHMlVJjHHJvG4UNRKDwjSkcFhH0CSBGeNGQBMNs2My8OWZg1CwvNenXVfM9PE2zo8QoXLTs0FrY2mg9zSuJUrHKbudCbVS9qTsee4ChQtmjijk/oVAgMBAAECggEAIAbHmoy5EFfQA2h7LY6gLkxso0wM9pRLffW2Qc4/EqurHYhlVy1KxGZaqgDq9Id/YolW73ZjFzg7Gjf/x1n8O7ReXbf4VKffB3/4hv9Qk+G3xW4k8aIqrR47HVr0Y6Ses73uaiWlIwuI1S84llrzHZCgkZSPQz6eK7oPIUzwHn1VnRL484/UX4+krNv0zn11DBmQN6eMKV7Wuuv3zrFkXMkYhJfVxLxQSFq6NO3lSlhixHZdCWt/tVrTv6jA+qDTAZmpiXlJqfXe6GUlCf8ap8BK4S6X+Ld5kZCDzTodiu4UCOY6+tXSuitXmXFZoV/UbiIEuyG3v4L9zNQOm1fYQQKBgQDrAZFViMWpqLTkkNjoF62T6lMQydg2khIB/dbqnkXYEVkBLfVcd1FDSudOFAYSeV9gt/xCaGg1l2yfuAUzicZeKPxMb/PNLcvFASJfsjwZz8okVv2jR7WBXWgy19AWw7RMncLgwtw9qt/CDEbYPlKlG8oOG61ZAHS1j3sYxAQAeQKBgQCTTVXuR2aiBHT5G+RWo4/FUp6O+ro7Y2/xFRCuxr2P2QHqS4kCF4HFx2Rd89ihz1A/pTtZyNMP0uKl40pGmlPPiR2PiKGaHJyQLWNv+mTJR5SWqpTAY9S0v+HFfeFRbK1adOAnrS68vmQxJiRtTZRMnmK2UQ36EIABonpfHcP3fQKBgHnlxEcDvNO2CK6OW5R3w7d30kJhEF+uAN07l+D22++pf+tWtXCTC3nGPpiHVmb6wfhfNuATXAqAUv297CTBkD2DMOtNHr8MxCeZ4QSWZQpWd9nFraamKYXCt6u3ud41AS7EnjMLoEX0fkAfMhg0q5WtBm+u94m07NTIaed8tT6xAoGABy7yTdh1jNkiyzMtA3yeekT5LofTpSnIP72DPsK6Y9V1XnOojs2OqpJ6too5ukpd43yvVEWS5WanXueiq6bDB4/sPR+woc9bYzyTaNaRK6+t81sGPgugR+BDplnpLwtZuNuSQt0TNmkigbMWe64Y2VOwBKwXPmanl2zRAup0sBECgYB8iJkG9Ldb8st4a2A81qBH1hjoiZv4Fjljcb3MojpoBLlZjKI6WBGJCHIarEX9LOZmudIPvEDNftnTw5kAb++2JDow0mlCEFdb6LXwgr/tLERbL5QV3HD4fSt3TLxUzq10UUduQ0iQ/tk9GG8tNrgepCI3J3qXNxvcT3AUk1****</span></span><br><span class="line">  <span class="attr">charset:</span> <span class="string">UTF-8</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">json</span></span><br><span class="line">  <span class="attr">signType:</span> <span class="string">RSA2</span></span><br><span class="line">  <span class="attr">returnUrl:</span> <span class="string">http://localhost:9528</span></span><br><span class="line">  <span class="attr">notifyUrl:</span> <span class="string">http://localhost:9528</span></span><br><span class="line">  <span class="attr">publicKey:</span> <span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5n5Wb/QsFgF5rSyNwpWcyHYUuHg7shVWTNzi9UM+1wsy6UulApMK5Zti6LsE4lae05IvpfckiLJI21JamSMd4z5IEAwzexSSX1YycqgSVIF5EFOveYUdVLYTjh4gOx7xsv6vtwULQ0rdVNjvCEX9RRpVOpnSAj2axq5sxVLho3sB55/o4Z6y2W8Giv1DRBGqYF+zV+gY/j/FTRVrsvGwW1eEQrtvin/e9oPByKIxY9ByW2JUcojYt+Bfk++rCy7MraZ1ylocK8lkqm2KpiVk4Zsv2fW4t65N8AZvbIy15py3xefy3PpAbYJZxIoMdqlQzEby73CitC+auIPTiAtR1QID****</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="属性映射配置类"><a href="#属性映射配置类" class="headerlink" title="属性映射配置类"></a>属性映射配置类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/25 10:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "alipay")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlipayPropeties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务地址(支付宝网关)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serverUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自己的appId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付宝公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String charset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String format;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签证类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String signType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String returnUrl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String notifyUrl;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="初始化配置类"><a href="#初始化配置类" class="headerlink" title="初始化配置类"></a>初始化配置类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alipay.api.AlipayClient;</span><br><span class="line"><span class="keyword">import</span> com.alipay.api.DefaultAlipayClient;</span><br><span class="line"><span class="keyword">import</span> com.alipay.api.request.AlipayTradePagePayRequest;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.common.AlipayPropeties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 初始化支付宝配置项信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/15 16:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAlipayConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AlipayPropeties alipayPropeties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得初始化的AlipayClient</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AlipayClient <span class="title">getAlipayClient</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAlipayClient(alipayPropeties.getServerUrl(), alipayPropeties.getAppId(),</span><br><span class="line">                alipayPropeties.getPrivateKey(), alipayPropeties.getFormat(), alipayPropeties.getCharset(),</span><br><span class="line">                alipayPropeties.getPublicKey(), alipayPropeties.getSignType());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单页面生成对应的request请求API</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AlipayTradePagePayRequest <span class="title">getAlipayTradePagePayRequest</span><span class="params">()</span> </span>{</span><br><span class="line">        AlipayTradePagePayRequest alipayRequest = <span class="keyword">new</span> AlipayTradePagePayRequest();</span><br><span class="line">        <span class="comment">//在公共参数中设置回调和通知地址</span></span><br><span class="line">        alipayRequest.setReturnUrl(alipayPropeties.getReturnUrl());</span><br><span class="line">        alipayRequest.setNotifyUrl(alipayPropeties.getNotifyUrl());</span><br><span class="line">        <span class="keyword">return</span> alipayRequest;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="生成订单并支付逻辑"><a href="#生成订单并支付逻辑" class="headerlink" title="生成订单并支付逻辑"></a>生成订单并支付逻辑</h3><blockquote>
<p>页面传入必要信息，发起请求，根据响应信息，生成付款网页或者二维码</p>
</blockquote>
<p>参数实例</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TradeVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4097767717541192097L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "订单号不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = "订单金额不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> Double amount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "文章ID不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String blogId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>生成页面</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 提交订单</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> tradeVO</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 付款二维码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">submitAlipayTrade</span><span class="params">(TradeVO tradeVO)</span> </span>{</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="comment">//获得初始化的AlipayClient</span></span><br><span class="line">           AlipayClient alipayClient = alipayConfig.getAlipayClient();</span><br><span class="line">           <span class="comment">//创建API对应的request</span></span><br><span class="line">           AlipayTradePagePayRequest alipayRequest = alipayConfig.getAlipayTradePagePayRequest();</span><br><span class="line">           <span class="comment">// 订单号</span></span><br><span class="line">           String orderId = tradeVO.getOrderId();</span><br><span class="line">           Double amount = tradeVO.getAmount();</span><br><span class="line">           log.info(<span class="string">"交易订单号: {},付款金额: {}"</span>, orderId, amount);</span><br><span class="line">           <span class="comment">// 组装订单参数</span></span><br><span class="line">           Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">           map.put(<span class="string">"out_trade_no"</span>, orderId);</span><br><span class="line">           <span class="comment">// 销售产品码</span></span><br><span class="line">           map.put(<span class="string">"product_code"</span>, <span class="string">"FAST_INSTANT_TRADE_PAY"</span>);</span><br><span class="line">           <span class="comment">// 交易金额,单位:元</span></span><br><span class="line">           map.put(<span class="string">"total_amount"</span>, amount);</span><br><span class="line">           <span class="comment">// 订单标题</span></span><br><span class="line">           map.put(BlogConstants.SUBJECT, <span class="string">"小马博客-文章赞赏"</span>);</span><br><span class="line">           <span class="comment">// 订单描述</span></span><br><span class="line">           map.put(BlogConstants.BODY, <span class="string">"既然选择了远方,便只顾风雨兼程"</span>);</span><br><span class="line">           <span class="comment">// 设置二维码模式(75px)</span></span><br><span class="line">           map.put(<span class="string">"qr_pay_mode"</span>, <span class="string">"3"</span>);</span><br><span class="line">           <span class="comment">// 设置模式为不支持花呗支付</span></span><br><span class="line">           map.put(<span class="string">"goods_type"</span>, <span class="string">"0"</span>);</span><br><span class="line">           <span class="comment">// 订单超时时间(10分钟)</span></span><br><span class="line">           map.put(<span class="string">"timeout_express"</span>, <span class="string">"10m"</span>);</span><br><span class="line">           <span class="comment">// 发送请求时间</span></span><br><span class="line">           map.put(<span class="string">"timestamp"</span>, DateUtil.format(<span class="keyword">new</span> Date(), DatePattern.NORM_DATETIME_PATTERN));</span><br><span class="line">           <span class="comment">// 调用接口版本</span></span><br><span class="line">           map.put(<span class="string">"version"</span>, <span class="number">1.0</span>);</span><br><span class="line">           alipayRequest.setBizContent(JacksonUtils.objToString(map));</span><br><span class="line">           <span class="comment">//调用SDK生成表单字符串</span></span><br><span class="line">           String payCode = alipayClient.pageExecute(alipayRequest).getBody();</span><br><span class="line">           <span class="comment">// 生成付款成功,订单异步入库并传输到延时队列,订单10分钟内为支付,订单超时</span></span><br><span class="line">           <span class="keyword">if</span> (StringUtils.isNotBlank(payCode)) {</span><br><span class="line">               asyncProvider.asyncSaveTrade(tradeVO, map);</span><br><span class="line">           }</span><br><span class="line">           <span class="keyword">return</span> payCode;</span><br><span class="line">       } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">           log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.GENERATE_PAYMENT_CODE);</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<p>订单查询</p>
<blockquote>
<p>根据订单号[out_trade_no]或者交易号[trade_no]查询订单信息，可以查询订单状态。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单号查询交易信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderId 订单号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryTradeByOrderId</span><span class="params">(String orderId)</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        AlipayClient alipayClient = alipayConfig.getAlipayClient();</span><br><span class="line">        <span class="comment">// 创建订单查询对应的请求API</span></span><br><span class="line">        AlipayTradeQueryRequest request = <span class="keyword">new</span> AlipayTradeQueryRequest();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        params.put(<span class="string">"out_trade_no"</span>, orderId);</span><br><span class="line">        request.setBizContent(JacksonUtils.objToString(params));</span><br><span class="line">        AlipayTradeQueryResponse response = alipayClient.execute(request);</span><br><span class="line">        log.info(<span class="string">"订单[{}]信息: {}"</span>, orderId, response.getBody());</span><br><span class="line">        <span class="comment">// 返回订单状态: 页面根据订单状态进行逻辑处理</span></span><br><span class="line">        String tradeStatus = response.getTradeStatus();</span><br><span class="line">        log.info(<span class="string">"订单[{}]状态: {}"</span>, orderId, tradeStatus);</span><br><span class="line">        <span class="comment">// 订单状态: TRADE_SUCCESS,更新数据库订单状态</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(<span class="string">"TRADE_SUCCESS"</span>, tradeStatus)) {</span><br><span class="line">            <span class="comment">// 查询订单是否存在</span></span><br><span class="line">            LambdaQueryWrapper&lt;Trade&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(Trade::getOutTradeNo, orderId).last(<span class="string">"LIMIT 1"</span>);</span><br><span class="line">            Trade trade = Optional.ofNullable(<span class="keyword">this</span>.getOne(queryWrapper))</span><br><span class="line">                    .orElseThrow(() -&gt; <span class="keyword">new</span> BlogException(ResultCodeEnum.ORDER_NOT_EXIST));</span><br><span class="line">            <span class="comment">// 更新订单状态</span></span><br><span class="line">            Integer status = BlogConstants.TRADE_STATUS.TRADE_SUCCESS.getStatus();</span><br><span class="line">            <span class="keyword">if</span> (!status.equals(trade.getTradeStatus())) {</span><br><span class="line">                trade.setTradeNo(response.getTradeNo());</span><br><span class="line">                trade.setBuyLoginId(response.getBuyerLogonId());</span><br><span class="line">                trade.setTradeStatus(status);</span><br><span class="line">                <span class="keyword">this</span>.updateById(trade);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tradeStatus;</span><br><span class="line">    } <span class="keyword">catch</span> (AlipayApiException e) {</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.ORDER_QUERY_ERROR);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="回调通知接口示例"><a href="#回调通知接口示例" class="headerlink" title="回调通知接口示例"></a>回调通知接口示例</h3><blockquote>
<p>此回调方法由支付宝发起请求,必须外网访问,这里仅仅用作示例写法</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * POST请求: 此回调方法由支付宝发起请求,必须外网访问,这里仅仅用作示例写法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping("/notify/callback")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">notifyCallback</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"==&gt; 付款成功异步回调通知"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//获取支付宝POST过来反馈信息</span></span><br><span class="line">            Map&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String key : requestParams.keySet()) {</span><br><span class="line">                String[] values = requestParams.get(key);</span><br><span class="line">                String valueStr = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) {</span><br><span class="line">                    valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i]</span><br><span class="line">                            : valueStr + values[i] + <span class="string">","</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//乱码解决，这段代码在出现乱码时使用。</span></span><br><span class="line">                <span class="comment">//valueStr = new String(valueStr.getBytes("ISO-8859-1"), "utf-8");</span></span><br><span class="line">                params.put(key, valueStr);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">boolean</span> flag = AlipaySignature.rsaCheckV1(params, alipayPropeties.getPublicKey(),</span><br><span class="line">                    alipayPropeties.getCharset(), alipayPropeties.getSignType());</span><br><span class="line">            <span class="comment">// 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)</span></span><br><span class="line">            String order_no = request.getParameter(<span class="string">"out_trade_no"</span>); <span class="comment">// 获取订单号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//			String trade_no = request.getParameter("trade_no"); // 支付宝交易号</span></span><br><span class="line"><span class="comment">//			String total_amount = request.getParameter("total_amount"); // 获取总金额</span></span><br><span class="line"><span class="comment">//			String subject = new String(request.getParameter("subject")</span></span><br><span class="line"><span class="comment">//					.getBytes("ISO-8859-1"), "gbk");// 商品名称、订单名称</span></span><br><span class="line"><span class="comment">//			String body = "";</span></span><br><span class="line"><span class="comment">//			if (request.getParameter("body") != null) {</span></span><br><span class="line"><span class="comment">//				body = new String(request.getParameter("body").getBytes(</span></span><br><span class="line"><span class="comment">//						"ISO-8859-1"), "gbk");// 商品描述、订单备注、描述</span></span><br><span class="line"><span class="comment">//			}</span></span><br><span class="line"><span class="comment">//			String buyer_email = request.getParameter("buyer_email"); // 买家支付宝账号</span></span><br><span class="line"></span><br><span class="line">            String trade_status = request.getParameter(<span class="string">"trade_status"</span>); <span class="comment">// 交易状态</span></span><br><span class="line">            <span class="comment">// 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)//</span></span><br><span class="line">            <span class="keyword">if</span> (flag) {</span><br><span class="line">                <span class="comment">// 验证成功</span></span><br><span class="line">                <span class="comment">// 保存或更新此次赞赏记录</span></span><br><span class="line">                log.info(<span class="string">"支付宝订单 {} 支付成功"</span>, order_no);</span><br><span class="line">                <span class="keyword">return</span> R.ok().message(<span class="string">"支付成功"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> R.error().message(<span class="string">"支付失败"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.UNKNOWN_REASON);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET请求: 付款成功同步回调通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/return/callback")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnRedirect</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        log.info(<span class="string">"==&gt; 付款成功同步回调通知"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="页面代码"><a href="#页面代码" class="headerlink" title="页面代码"></a>页面代码</h3><blockquote>
<p>这个只是生成付款码的弹窗，逻辑比较混乱，异常垃圾，将就看吧。</p>
</blockquote>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> * @Author: Mr.Horse</span><br><span class="line"> * @Date: 2021-06-15 11:08:21</span><br><span class="line"> * @LastEditTime: 2021-06-18 14:57:23</span><br><span class="line"> * @Blog: http://www.horsemuzi.top</span><br><span class="line"> * @Descripttion: 选择赞赏金额弹窗页</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="app-container"&gt;</span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      v-elDragDialog</span><br><span class="line">      :visible="dialogFormVisible"</span><br><span class="line">      :close-on-click-modal="false"</span><br><span class="line">      title="请选择赞赏金额"</span><br><span class="line">      show-close</span><br><span class="line">      @close="close()"&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;el-row :gutter="10"&gt;</span><br><span class="line">          &lt;div v-for="(item,index) in money" :key="index"&gt;</span><br><span class="line">            &lt;el-col :span="6" style="margin-bottom: 1vh;"&gt;</span><br><span class="line">              &lt;el-card&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div style="text-align: center;font-size:30px;" @click="toPay(item)"&gt;</span><br><span class="line">                  &lt;i class="el-icon-coin"&gt;&lt;/i&gt;</span><br><span class="line">                  &lt;span&gt;{{ item }}.0&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/el-card&gt;</span><br><span class="line">            &lt;/el-col&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-row style="margin-bottom: 1.5vh;"&gt;</span><br><span class="line">          &lt;el-col :span="24"&gt;</span><br><span class="line">            &lt;el-button type="primary" size="mini" @click="openCustomMoney"&gt;其他金额&lt;/el-button&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;p v-if="isShow"&gt;</span><br><span class="line">              &lt;el-input-number v-model="customAmount" :precision="1" :step="0.5" :min="0.5"&gt;&lt;/el-input-number&gt;</span><br><span class="line">              &lt;el-button type="primary" @click="toPay(customAmount)"&gt;确定&lt;/el-button&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">          &lt;el-col&gt;</span><br><span class="line">            &lt;el-card&gt;</span><br><span class="line"></span><br><span class="line">              &lt;div style="text-align: center"&gt;</span><br><span class="line">                &lt;iframe</span><br><span class="line">                  :srcdoc="payHtml"</span><br><span class="line">                  sandbox="allow-forms allow-same-origin allow-scripts"</span><br><span class="line">                  frameborder="no"</span><br><span class="line">                  border="0"</span><br><span class="line">                  marginwidth="0"</span><br><span class="line">                  marginheight="0"</span><br><span class="line">                  scrolling="no"</span><br><span class="line">                  width="80"</span><br><span class="line">                  height="80"</span><br><span class="line">                  style="overflow:hidden;"&gt;</span><br><span class="line">                &lt;/iframe&gt;</span><br><span class="line">                &lt;p&gt;支付宝扫码支付&amp;ensp;</span><br><span class="line">                  &lt;span style="color: red; font-size: 30px;"&gt;{{ realMoney }}&lt;/span&gt;</span><br><span class="line">                  &amp;ensp;元</span><br><span class="line">                &lt;/p&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/el-card&gt;</span><br><span class="line">          &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import payApi from '@/api/pay'</span><br><span class="line">import elDragDialog from '@/directive/el-drag-dialog/' // 可拖拽dialog</span><br><span class="line">// 引入icon组件和配置</span><br><span class="line">import { DEFAULT_ICON_CONFIGS } from '@icon-park/vue'</span><br><span class="line">import { IconPark } from '@icon-park/vue/es/all'</span><br><span class="line"></span><br><span class="line">const IconConfig = { ...DEFAULT_ICON_CONFIGS, prefix: 'icon' }</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  provide() {</span><br><span class="line">    return {</span><br><span class="line">      ICON_CONFIGS: IconConfig</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  name: 'Pay',</span><br><span class="line">  directives: {</span><br><span class="line">    elDragDialog,</span><br><span class="line">    IconPark</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      dialogFormVisible: false,</span><br><span class="line">      money: [1, 2, 3, 4, 5, 6, 7, 8],</span><br><span class="line">      payHtml: '', // 付款表单页面</span><br><span class="line">      customAmount: 0, // 自定义支付金额</span><br><span class="line">      isShow: false,</span><br><span class="line">      realMoney: 0, // 真实支付金额</span><br><span class="line">      trade: {</span><br><span class="line">        blogId: '', // 文章id</span><br><span class="line">        amount: 0, // 订单金额</span><br><span class="line">        orderId: '' // 订单号（UUID）</span><br><span class="line">      }, // 订单信息</span><br><span class="line">      timer: '' // 定时器名称</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  mounted() {</span><br><span class="line">    this.timer = setInterval(this.queryOrderStatus, 7000)</span><br><span class="line">  },</span><br><span class="line">  beforeDestroy() {</span><br><span class="line">    clearInterval(this.timer)</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    open(blogId) {</span><br><span class="line">      this.dialogFormVisible = true</span><br><span class="line">      if (blogId) {</span><br><span class="line">        this.trade.blogId = blogId</span><br><span class="line">      } else {</span><br><span class="line">        this.$message.error('付款码生成失败')</span><br><span class="line">      }</span><br><span class="line">      // 默认基于第一个金额值，生成二维码</span><br><span class="line">      this.toPay(this.money[0])</span><br><span class="line">    },</span><br><span class="line">    close() {</span><br><span class="line">      this.dialogFormVisible = false</span><br><span class="line">      this.resetForm()</span><br><span class="line">    },</span><br><span class="line">    resetForm() {</span><br><span class="line">      this.payHtml = ''</span><br><span class="line">      this.isShow = false</span><br><span class="line">      this.customAmount = 0.5</span><br><span class="line">      // 重置各项参数</span><br><span class="line">      this.trade = {</span><br><span class="line">        blogId: '',</span><br><span class="line">        amount: 0,</span><br><span class="line">        orderId: ''</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    toPay(amount) {</span><br><span class="line">      this.realMoney = amount</span><br><span class="line">      this.trade.amount = amount</span><br><span class="line">      this.trade.orderId = this.generateUUID()</span><br><span class="line">      payApi.toPayMoney(this.trade).then(response =&gt; {</span><br><span class="line">        this.payHtml = response.data.items</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    openCustomMoney() {</span><br><span class="line">      this.isShow = !this.isShow</span><br><span class="line">    },</span><br><span class="line">    // 轮询查询订单状态，如果支付成功，则关闭弹窗</span><br><span class="line">    queryOrderStatus() {</span><br><span class="line">      const orderId = this.trade.orderId</span><br><span class="line">      if (orderId !== '') {</span><br><span class="line">        payApi.queryOrderByOrderId(orderId).then(response =&gt; {</span><br><span class="line">          if (response.data.status === 'TRADE_SUCCESS') {</span><br><span class="line">            this.$message.success('支付成功')</span><br><span class="line">            this.close()</span><br><span class="line">          }</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    // 生成UUID(无横线)</span><br><span class="line">    generateUUID() {</span><br><span class="line">      let d = new Date().getTime()</span><br><span class="line">      if (window.performance &amp;&amp; typeof window.performance.now === 'function') {</span><br><span class="line">        d += performance.now() // use high-precision timer if available</span><br><span class="line">      }</span><br><span class="line">      const uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {</span><br><span class="line">        const r = (d + Math.random() * 16) % 16 | 0</span><br><span class="line">        d = Math.floor(d / 16)</span><br><span class="line">        return (c === 'x' ? r : (r &amp; 0x3 | 0x8)).toString(16)</span><br><span class="line">      })</span><br><span class="line">      return uuid</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://i.loli.net/2021/06/26/CSIsNLad3MJFpAW.png" alt="点击支付宝扫码支付"></p>
<p><img src="https://i.loli.net/2021/06/26/q6AYeRNrl4V7HJw.png" alt="选择金额，扫码支付（沙箱环境）"></p>
]]></content>
      <categories>
        <category>支付对接</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>alipay</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot结合Redis的bitmap实现签到功能和布隆过滤器</title>
    <url>/JAVA/SpringBoot%E7%BB%93%E5%90%88Redis%E7%9A%84bitmap%E5%AE%9E%E7%8E%B0%E7%AD%BE%E5%88%B0%E5%8A%9F%E8%83%BD%E5%92%8C%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h1 id="SpringBoot结合Redis的bitmap实现签到功能和布隆过滤器"><a href="#SpringBoot结合Redis的bitmap实现签到功能和布隆过滤器" class="headerlink" title="SpringBoot结合Redis的bitmap实现签到功能和布隆过滤器"></a>SpringBoot结合Redis的bitmap实现签到功能和布隆过滤器</h1><h2 id="每月签到"><a href="#每月签到" class="headerlink" title="每月签到"></a>每月签到</h2><blockquote>
<p>签到功能需求：</p>
<ul>
<li>记录每个用户每月的签到情况（签到或者未签到、签到总天数、总连续到天数等），这里，基于用户ID（userId）和每月日期（yyyyMM）作为key，结合Redis中的<code>bitmap</code>数据结构，实现用户每月签到情况记录的功能。</li>
</ul>
<p><strong>本文结合仅仅实际代码片段，进行签到功能复现（重在核心逻辑，因为每个签到需求可能都不一样）</strong></p>
</blockquote>
<h3 id="片段讲解"><a href="#片段讲解" class="headerlink" title="片段讲解"></a>片段讲解</h3><h4 id="公共代码片段"><a href="#公共代码片段" class="headerlink" title="公共代码片段"></a>公共代码片段</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据request获取组装参数key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getKey</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">    <span class="comment">// 校验用户是否存在</span></span><br><span class="line">    User user = commonProvide.getAdminUserByRequest(request);</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"sign:%s:%s"</span>, user.getId(), LocalDate.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyyMM"</span>)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据UserInfo获取组装参数key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getKey</span><span class="params">(UserInfo userInfo)</span> </span>{</span><br><span class="line">    String userId = userInfo.getId();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(userId)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    log.info(<span class="string">"token解析成功 ==&gt; {}"</span>, userInfo);</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"sign:%s:%s"</span>, userId, LocalDate.now().format(DateTimeFormatter.ofPattern(<span class="string">"yyyyMM"</span>)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取符合redis位图偏移量的值(从0开始的,所以这里-1)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">getOffset</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> LocalDate.now().getDayOfMonth() - <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="命令代码片段"><a href="#命令代码片段" class="headerlink" title="命令代码片段"></a>命令代码片段</h4><h5 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h5><blockquote>
<p>redis命令：<code>SETBIT key offset value</code></p>
<p>命令含义：将名为key的第offset位的值置为 1，（offset偏移量从 0 开始）</p>
<p>逻辑理解：把每月的每天是当月的第多少天计算出来，作为 offset 偏移量的值。如果当天签到，就把对应位的值置为 1，否则默认值就为 0。后面可根据1和0的值即可得出用户每月的签到情况。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"># 设置对应偏移量的位置值为 true(置为1)</span><br><span class="line"># 注意结果返回的没有设置值之前的值，也就是默认值0，所以，结果返回值 isSet 是 false</span><br><span class="line"><span class="keyword">boolean</span> isSet = redisTemplate.opsForValue().setBit(key, <span class="keyword">this</span>.getOffset(), <span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h5 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h5><blockquote>
<p>redis命令：<code>GETBIT    key offset</code></p>
<p>命令含义：获取第 offset 位的对应值</p>
<p>逻辑理解：使用setbit命令进行签到后，可以使用此命令获取 用户当前的签到状态（已签到：返回true，未签到：返回false）</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 某一天是否签到</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkSignIn</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue().getBit(<span class="keyword">this</span>.getKey(request), <span class="keyword">this</span>.getOffset());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h5 id="bitcount"><a href="#bitcount" class="headerlink" title="bitcount"></a>bitcount</h5><blockquote>
<p>redis命令：<code>BITCOUNT key start end</code></p>
<p>命令含义：根据key获取对应值的start 到 end 范围内 1 的个数 （start ,end不写 默认获取全部范围，或者 0 -1 也表示全部范围）</p>
<p>逻辑理解：使用此命令获取用户当月的总签到数</p>
<p>注意：redisTemplate并没有提供直接的方法来调用bitcount，可以通过<code>redisTemplate.execute</code>来执行bitcount方法</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本月签到总天数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">signTotalDaysOfMonth</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) cal -&gt; cal.bitCount(<span class="keyword">this</span>.getKey(request).getBytes()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h5 id="bitfield"><a href="#bitfield" class="headerlink" title="bitfield"></a>bitfield</h5><blockquote>
<p>redis命令：<code>BITFIELD key get [u/i]offset start</code></p>
<p>命令含义：</p>
<ul>
<li>u：代表无符号位</li>
<li>i：代表有符号位</li>
<li>start：代表从哪一位开始获取，0代表从第一位开始获取</li>
<li>offset：代表共获取多少位的值</li>
</ul>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210729214304.png" alt="bitfield命令示例"></p>
<p>逻辑理解：使用 bitfield 获取用户签到的总值，再根据其他的逻辑进行计算获取 此用户每月的连续签到情况。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连续签到天数(今天已经签到过)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">continuousSignDay</span><span class="params">(UserInfo userInfo)</span> </span>{</span><br><span class="line">    <span class="comment">// 偏移量从 1 开始</span></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="keyword">this</span>.getOffset() + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 连续签到次数标识,初始值为0</span></span><br><span class="line">    <span class="keyword">int</span> signCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取此用户签到的情况的值,返回的List集合</span></span><br><span class="line">    List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(<span class="keyword">this</span>.getKey(userInfo),</span><br><span class="line">            BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(offset)).valueAt(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) {</span><br><span class="line">        <span class="comment">// 原理: 获取低位连续不为0的个数,就是连续签到的次数</span></span><br><span class="line">        <span class="keyword">long</span> v = list.get(<span class="number">0</span>) == <span class="keyword">null</span> ? <span class="number">0</span> : list.get(<span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">"v == {}"</span>, v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; offset; i++) {</span><br><span class="line">            <span class="comment">// 先右移再左移, 如果和原值相等代表低位为0</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span> == v) {</span><br><span class="line">                <span class="keyword">return</span> signCount;</span><br><span class="line">            }</span><br><span class="line">            signCount++;</span><br><span class="line">            v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> signCount;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<p>根据和上面类似的逻辑，获取用户当月每天的签到情况</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取截至目前当月的签到情况</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;CalendarInfoVO&gt; <span class="title">signMapInfo</span><span class="params">(HttpServletRequest request)</span> </span>{</span><br><span class="line">    List&lt;CalendarInfoVO&gt; signList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="comment">// 偏移量从 1 开始</span></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="keyword">this</span>.getOffset() + <span class="number">1</span>;</span><br><span class="line">    List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(<span class="keyword">this</span>.getKey(request),</span><br><span class="line">            BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(offset)).valueAt(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) {</span><br><span class="line">        <span class="keyword">long</span> v = list.get(<span class="number">0</span>) == <span class="keyword">null</span> ? <span class="number">0</span> : list.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">            signList.add(<span class="keyword">new</span> CalendarInfoVO(LocalDate.now().withDayOfMonth(i).toString(),</span><br><span class="line">                    v &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span> != v ? <span class="string">"😀"</span> : <span class="string">"☠"</span>));</span><br><span class="line">            v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> signList;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/6 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarInfoVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h5><blockquote>
<p>redis命令：<code>bitop [add/or/xop/not] destKey keys…</code></p>
<p>命令含义：</p>
<ul>
<li><code>and</code>：对一个或多个 <code>key</code> 求 <strong>逻辑并</strong>，并将结果保存到 <code>destkey</code> </li>
<li><code>or</code>：对一个或多个 <code>key</code> 求 <strong>逻辑或</strong>，并将结果保存到 <code>destkey</code> </li>
<li><code>xor</code>：对一个或多个 <code>key</code> 求 <strong>逻辑异或</strong>，并将结果保存到 <code>destkey</code></li>
<li><code>not</code>：对给定 <code>key</code> 求逻辑非，并将结果保存到 <code>destkey</code> </li>
<li><strong>注意：除 <code>not</code> 操作外，其余操作都支持一次输入一个或者多个key</strong></li>
</ul>
<p>逻辑理解：使用 用户id 去匹配查询由自己签到生成的 bitmap值，通过bitop命令统计此用户的签到总天数。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对符合指定格式的key值进行未操作(可以用来获取用户的总签到天数)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> op  操作类型：与、或、异或、否</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> destKey 存放结果的键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern 用于匹配的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户签到天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">queryUserSignInTotalDay</span><span class="params">(RedisStringCommands.BitOperation op, String destKey, String pattern)</span> </span>{</span><br><span class="line">    Set&lt;String&gt; keys = redisTemplate.keys(pattern);</span><br><span class="line">    <span class="keyword">if</span> (PublicUtil.isEmpty(keys)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[][] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[keys.size()][];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) {</span><br><span class="line">        bytes[index++] = key.getBytes();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 设置存放结果的key</span></span><br><span class="line">    <span class="keyword">byte</span>[] resultKey = destKey.getBytes();</span><br><span class="line">    <span class="comment">// 执行 bitop 操作,将获取的结果放入 resultKey 中</span></span><br><span class="line">    redisTemplate.execute((RedisCallback&lt;Long&gt;) cal -&gt; cal.bitOp(op, resultKey, bytes));</span><br><span class="line">    <span class="comment">// 获取 resultKey 的结果值</span></span><br><span class="line">    <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) cal -&gt; cal.bitCount(resultKey));</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="片段封装"><a href="#片段封装" class="headerlink" title="片段封装"></a>片段封装</h4><blockquote>
<p>由于使用 redisTemplate.execute 执行的代码量较大，这里进行简单的封装，以后可以直接调用封装方法即可。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 啦啦啦</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><blockquote>
<p>Redis中布隆过滤器的安装过程，请参考文章：<a href="http://www.horsemuzi.top/JAVA/SpringBoot小杂记/">SpringBoot小杂记</a> 即可，布隆过滤器基于redis中的bitmap数据结构应用而来。</p>
</blockquote>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<ul>
<li>有效解决redis的<code>缓存穿透</code>问题</li>
<li>大数据量去重场景（抖音推荐，url去重等等）</li>
</ul>
<p>简洁：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801131053.png" alt="布隆过滤器结构简介"></p>
</blockquote>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><blockquote>
<p>前期准备：</p>
<ul>
<li>引入<code>guava</code>工具包，编写hash函数核心方法</li>
<li>构建redisTemplate简单配置（应用引入redis时就已完成）</li>
</ul>
</blockquote>
<h4 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="构造hash处理"><a href="#构造hash处理" class="headerlink" title="构造hash处理"></a>构造hash处理</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnel;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 借助guava工具包实现Redis布隆过滤处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/28 20:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterHelper</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numHashFunctions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bitSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Funnel&lt;T&gt; funnel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数初始化数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> funnel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expectedInsertions</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fpp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BloomFilterHelper</span><span class="params">(Funnel&lt;T&gt; funnel, <span class="keyword">int</span> expectedInsertions, <span class="keyword">double</span> fpp)</span> </span>{</span><br><span class="line">        Preconditions.checkArgument(funnel != <span class="keyword">null</span>, <span class="string">"funnel不能为空"</span>);</span><br><span class="line">        <span class="keyword">this</span>.funnel = funnel;</span><br><span class="line">        <span class="comment">// 计算bit数组长度</span></span><br><span class="line">        bitSize = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">        <span class="comment">// 计算hash方法执行次数</span></span><br><span class="line">        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] murmurHashOffset(T value) {</span><br><span class="line">        <span class="keyword">int</span>[] offset = <span class="keyword">new</span> <span class="keyword">int</span>[numHashFunctions];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> hash64 = Hashing.murmur3_128().hashObject(value, funnel).asLong();</span><br><span class="line">        <span class="keyword">int</span> hash1 = (<span class="keyword">int</span>) hash64;</span><br><span class="line">        <span class="keyword">int</span> hash2 = (<span class="keyword">int</span>) (hash64 &gt;&gt;&gt; <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numHashFunctions; i++) {</span><br><span class="line">            <span class="keyword">int</span> nextHash = hash1 + i * hash2;</span><br><span class="line">            <span class="keyword">if</span> (nextHash &lt; <span class="number">0</span>) {</span><br><span class="line">                nextHash = ~nextHash;</span><br><span class="line">            }</span><br><span class="line">            offset[i - <span class="number">1</span>] = nextHash % bitSize;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> offset;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算bit数组长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">optimalNumOfBits</span><span class="params">(<span class="keyword">long</span> n, <span class="keyword">double</span> p)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// 设定最小期望长度</span></span><br><span class="line">            p = Double.MIN_VALUE;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (-n * Math.log(p) / (Math.log(<span class="number">2</span>) * Math.log(<span class="number">2</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算hash方法执行次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">optimalNumOfHashFunctions</span><span class="params">(<span class="keyword">long</span> n, <span class="keyword">long</span> m)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">1</span>, (<span class="keyword">int</span>) Math.round((<span class="keyword">double</span>) m / n * Math.log(<span class="number">2</span>)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Bean注入"><a href="#Bean注入" class="headerlink" title="Bean注入"></a>Bean注入</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/10 17:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启基于注解的缓存</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义json序列化器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入数据源</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer =</span><br><span class="line">                <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 序列化时将对象全类名一起保存下来</span></span><br><span class="line">        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key-value结构序列化数据结构</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash数据结构序列化方式,必须这样否则存hash 就是基于jdk序列化的</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 启用默认序列化方式</span></span><br><span class="line">        redisTemplate.setEnableDefaultSerializer(<span class="keyword">true</span>);</span><br><span class="line">        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        redisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解缓存信息配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> </span>{</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                <span class="comment">//过期时间600秒:600秒后会重新进行数据库查询</span></span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                <span class="comment">// 配置序列化</span></span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(connectionFactory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================初始化对常用数据类型的操作================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String 类型初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * List 类型初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set 类型初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZSet 类型初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash 类型初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化布隆过滤器，放入到spring容器里面(初始化默认泛型为 String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BloomFilterHelper&lt;String&gt; <span class="title">bloomFilterHelper</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BloomFilterHelper&lt;&gt;((Funnel&lt;String&gt;) (from, into) -&gt; into.putString(from, Charsets.UTF_8)</span><br><span class="line">                .putString(from, Charsets.UTF_8), <span class="number">1000000</span>, <span class="number">0.01</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="封装处理类"><a href="#封装处理类" class="headerlink" title="封装处理类"></a>封装处理类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Redis实现布隆过滤器处理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/28 20:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisBloomFilterHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, Object&gt; valueOperations;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的布隆过滤器添加值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addByBloomFilter</span><span class="params">(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value)</span> </span>{</span><br><span class="line">        Preconditions.checkArgument(bloomFilterHelper != <span class="keyword">null</span>, <span class="string">"bloomFilterHelper实例不能为空"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class="line">        log.info(<span class="string">"key: {}, value: {}"</span>, key, value);</span><br><span class="line">        Arrays.stream(offset).forEach(i -&gt; valueOperations.setBit(key, i, <span class="keyword">true</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的布隆过滤器判断值是否存在</span></span><br><span class="line"><span class="comment">     * BloomFilter 可以绝对判断某个元素一定不存在,但是不能绝对判断某个一定存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">includeByBloomFilter</span><span class="params">(BloomFilterHelper&lt;T&gt; bloomFilterHelper, String key, T value)</span> </span>{</span><br><span class="line">        Preconditions.checkArgument(bloomFilterHelper != <span class="keyword">null</span>, <span class="string">"bloomFilterHelper不能为空"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class="line">        log.info(<span class="string">"key: {}, value: {}"</span>, key, value);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : offset) {</span><br><span class="line">            <span class="comment">// 如果有一个bit位的值不是 1 ,那么此值一定不存在</span></span><br><span class="line">            <span class="keyword">if</span> (!valueOperations.getBit(key, i)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h3><h4 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h4><blockquote>
<ol>
<li>向布隆过滤器中添加值</li>
<li>查询指定值是否存在于布隆过滤器中</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = "Redis的布隆过滤器插入值测试")</span></span><br><span class="line"><span class="meta">@GetMapping("/add/bloomValue")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">addBloomFilterValue</span><span class="params">()</span> </span>{</span><br><span class="line">    StopWatch watch = CommonProvide.getWatchStart();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        <span class="keyword">long</span> value = RandomUtil.randomLong(<span class="number">0</span>, <span class="number">100000</span>);</span><br><span class="line">        redisBloomFilterHandler.addByBloomFilter(bloomFilterHelper, <span class="string">"bloom_test"</span>, String.valueOf(value));</span><br><span class="line">    }</span><br><span class="line">    watch.stop();</span><br><span class="line">    log.info(<span class="string">"插入数据: {}条,共耗时: {}"</span>, <span class="number">10</span>, watch.getTotalTimeMillis());</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping("/query/bloomValue")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">queryBloomFilterValue</span><span class="params">(<span class="meta">@RequestParam("value")</span> String value)</span> </span>{</span><br><span class="line">    <span class="keyword">boolean</span> bloom_test = redisBloomFilterHandler.includeByBloomFilter(bloomFilterHelper, <span class="string">"bloom_test"</span>, value);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">"exists"</span>, bloom_test);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">2021-08-01 13:27:04 |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-8110-exec-3 |PropertySourcedRequestMappingHandlerMapping.java:69 |springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping |Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2Controller#getDocumentation(String, HttpServletRequest)]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">969775</span>, <span class="number">555786</span>, <span class="number">9443260</span>, <span class="number">272191</span>, <span class="number">686180</span>, <span class="number">9346200</span>, <span class="number">8932211</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">17359</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">360220</span>, <span class="number">2954942</span>, <span class="number">4035393</span>, <span class="number">1440671</span>, <span class="number">8431007</span>, <span class="number">4610084</span>, <span class="number">7204806</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">22388</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">5251899</span>, <span class="number">8332681</span>, <span class="number">1885834</span>, <span class="number">5024045</span>, <span class="number">8162256</span>, <span class="number">7869648</span>, <span class="number">4731437</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">49259</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">370989</span>, <span class="number">8877009</span>, <span class="number">1906419</span>, <span class="number">7341579</span>, <span class="number">6143208</span>, <span class="number">4640220</span>, <span class="number">4607778</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">60904</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">7198607</span>, <span class="number">2228155</span>, <span class="number">3603608</span>, <span class="number">8574060</span>, <span class="number">3959454</span>, <span class="number">655151</span>, <span class="number">5269757</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">63413</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">9311937</span>, <span class="number">1217360</span>, <span class="number">2707841</span>, <span class="number">4198322</span>, <span class="number">5688803</span>, <span class="number">2405773</span>, <span class="number">915292</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">85602</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">4861797</span>, <span class="number">4674016</span>, <span class="number">3763460</span>, <span class="number">6732153</span>, <span class="number">7642709</span>, <span class="number">8553265</span>, <span class="number">982548</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">19829</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">7142620</span>, <span class="number">6126652</span>, <span class="number">5110684</span>, <span class="number">5490341</span>, <span class="number">6506309</span>, <span class="number">7522277</span>, <span class="number">1908124</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">04</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">97241</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">05</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">2864099</span>, <span class="number">4312348</span>, <span class="number">8542631</span>, <span class="number">8218874</span>, <span class="number">4636105</span>, <span class="number">2540342</span>, <span class="number">729579</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">05</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">14616</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">05</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">33</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |offset: [<span class="number">621922</span>, <span class="number">2377133</span>, <span class="number">4514877</span>, <span class="number">6652621</span>, <span class="number">8790365</span>, <span class="number">8242006</span>, <span class="number">6104262</span>]</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">05</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |RedisBloomFilterHandler.java:<span class="number">34</span> |com.horse.service.blog.handler.redis.RedisBloomFilterHandler |key: bloom_test, value: <span class="number">91111</span></span><br><span class="line"><span class="number">2021</span>-08-<span class="number">01</span> <span class="number">13</span>:<span class="number">27</span>:<span class="number">05</span> |INFO  [72dffa5e95d44090a71bb1c0151d1c71] |http-nio-<span class="number">8110</span>-exec-<span class="number">3</span> |AdminTestController.java:<span class="number">73</span> |com.horse.service.blog.controller.admin.AdminTestController |插入数据: <span class="number">10</span>条,共耗时: <span class="number">864</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><blockquote>
<p>查询数据：<code>91111</code> (刚刚已添加的数据)</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801133057.png" alt="查询存在数据"></p>
<p>查询数据：<code>43763</code> （刚刚未添加的数据）</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801133320.png" alt="查询不存在数据"></p>
</blockquote>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
        <tag>bitmap</tag>
        <tag>布隆过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot简单定时任务</title>
    <url>/JAVA/SpringBoot%E7%AE%80%E5%8D%95%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8A%E5%BC%80%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="SringBoot简单定时任务"><a href="#SringBoot简单定时任务" class="headerlink" title="SringBoot简单定时任务"></a>SringBoot简单定时任务</h1><h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><blockquote>
<p>利用SpringBoot中提供的<code>@ConditionOnProperty</code>注解，实现项目启动过程中是否加载注解所在的这个配置项。</p>
</blockquote>
<p>yml配置属性</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定时任务开关</span></span><br><span class="line"><span class="attr">schedule:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<p>注解解析</p>
<blockquote>
<p><code>@ConditionOnProperty</code>注解基本作用：</p>
<p>通过属性<strong>name</strong>以及<strong>havingValue</strong>来实现的，其中<strong>name</strong>用来从<strong>application.properties</strong>中读取某个属性值。</p>
<ul>
<li><strong>如果该值为空，则返回false</strong>;</li>
<li><strong>如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。</strong></li>
<li><strong>如果返回值为false，则该configuration不生效；为true则生效。</strong></li>
</ul>
<p>注意：<strong>prefix</strong> 表示某些属性值的前缀</p>
</blockquote>
<h2 id="任务示例"><a href="#任务示例" class="headerlink" title="任务示例"></a>任务示例</h2><h3 id="Schedule注解实现"><a href="#Schedule注解实现" class="headerlink" title="@Schedule注解实现"></a>@Schedule注解实现</h3><blockquote>
<p>缺点：每次更新定时任务,只能手动停止服务,更新cron表达式,再打包,重新启动服务,只适用于更新不频繁的定时任务。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/16 20:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "schedule", name = "enable", havingValue = "true")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = "0 */5 * * **")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleTask</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"==&gt; 简单任务演示"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="SchedulingConfigurer接口实现"><a href="#SchedulingConfigurer接口实现" class="headerlink" title="SchedulingConfigurer接口实现"></a>SchedulingConfigurer接口实现</h3><blockquote>
<p>缺点：虽然实现了cron表达式的动态配置,但是每次配置之后,表达式生效的时间是下次执行此任务的时候,也就是说,动态配置不能实时生效,简单的定时任务可以这样使用,即可以满足需求,但是稍微复杂的,实时性比较高的,建议使用Quartz, xxl-job等任务框架</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DatePattern;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.Trigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.SchedulingConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.ScheduledTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.support.CronTrigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: {description}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/6/17 18:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> mb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "schedule", name = "enable", havingValue = "true")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicScheduleTask</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的cron表达式可以动态的配置到数据库，动态获取并执行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CRON_EXPRESSION = <span class="string">"*/5 * * * * ?"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>{</span><br><span class="line">        taskRegistrar.setTriggerTasks(<span class="keyword">this</span>.getTaskAndTriggerConfig(taskRegistrar));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;Runnable, Trigger&gt; <span class="title">getTaskAndTriggerConfig</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Map&lt;Runnable, Trigger&gt; taskMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建触发器</span></span><br><span class="line">        Trigger trigger = triggerContext -&gt; {</span><br><span class="line">            CronTrigger cronTrigger = <span class="keyword">new</span> CronTrigger(CRON_EXPRESSION);</span><br><span class="line">            <span class="keyword">return</span> cronTrigger.nextExecutionTime(triggerContext);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建定时任务</span></span><br><span class="line">        Runnable runnable = () -&gt; {</span><br><span class="line">            log.info(<span class="string">" 线程名: {}"</span> + Thread.currentThread().getName() + <span class="string">"  执行时间: {}"</span>, DateUtil.format(<span class="keyword">new</span> Date(), DatePattern.NORM_DATETIME_PATTERN));</span><br><span class="line">        };</span><br><span class="line">        taskMap.put(runnable, trigger);</span><br><span class="line">        <span class="keyword">return</span> taskMap;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="ScheduledFuture任务调度（简单版Quartz）"><a href="#ScheduledFuture任务调度（简单版Quartz）" class="headerlink" title="ScheduledFuture任务调度（简单版Quartz）"></a>ScheduledFuture任务调度（简单版Quartz）</h3><blockquote>
<p>实现简介：使用<code>ScheduledFuture</code>类结合Mysql进行定时任务数据持久化，实现定时任务的<code>增删改查</code>功能，如果觉得类似与<code>Quartz</code>任务调度框架过于沉重，可以试着自己实现简单的任务调度。</p>
<p>实现步骤：</p>
<ol>
<li>创建数据库（用于持久化cron表达式等其他信息）</li>
<li>实现任务调度处理类</li>
<li>创建任务调度业务类</li>
<li>任务调度启动初始化</li>
<li>实现任务调度控制类</li>
</ol>
</blockquote>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><blockquote>
<p>创建任务调度需要持久化的必要属性以及任务执行情况的日志记录表</p>
</blockquote>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">CREATE TABLE tb_task</span><br><span class="line">(</span><br><span class="line">    id            CHAR(19)                      NOT NULL COMMENT '任务ID'</span><br><span class="line">        PRIMARY KEY,</span><br><span class="line">    bean_name     VARCHAR(255)                  NOT NULL COMMENT 'Bean名称',</span><br><span class="line">    method_name   VARCHAR(255)                  NOT NULL COMMENT '方法名',</span><br><span class="line">    method_params VARCHAR(255)                  NULL COMMENT '方法参数',</span><br><span class="line">    cron          VARCHAR(100)                  NOT NULL COMMENT 'cron表达式',</span><br><span class="line">    job_remark    VARCHAR(1000)                 NULL COMMENT '任务备注',</span><br><span class="line">    job_status    TINYINT(1) UNSIGNED DEFAULT 1 NOT NULL COMMENT '任务状态：1-正常，0-暂停',</span><br><span class="line">    gmt_create    DATETIME                      NOT NULL COMMENT '创建时间',</span><br><span class="line">    gmt_modified  DATETIME                      NOT NULL COMMENT '更新时间',</span><br><span class="line">    is_deleted    TINYINT(1) UNSIGNED DEFAULT 1 NOT NULL COMMENT '逻辑删除',</span><br><span class="line">    version       BIGINT UNSIGNED     DEFAULT 1 NOT NULL COMMENT '乐观锁'</span><br><span class="line">)</span><br><span class="line">    COMMENT '任务调度信息表';</span><br><span class="line">    </span><br><span class="line">CREATE TABLE tb_task_log</span><br><span class="line">(</span><br><span class="line">    id              CHAR(19)                  NOT NULL,</span><br><span class="line">    job_id          CHAR(19)                  NOT NULL COMMENT '任务Id',</span><br><span class="line">    bean_name       VARCHAR(128)              NOT NULL COMMENT 'bean名称',</span><br><span class="line">    method_name     VARCHAR(128)              NOT NULL COMMENT '方法名',</span><br><span class="line">    method_params   VARCHAR(128)              NULL COMMENT '方法参数',</span><br><span class="line">    job_remark      VARCHAR(255)              NULL COMMENT '任务备注',</span><br><span class="line">    job_status      TINYINT(1) UNSIGNED       NOT NULL COMMENT '任务状态',</span><br><span class="line">    executor_status VARCHAR(10)               NOT NULL COMMENT '执行状态：success-成功，fail-失败',</span><br><span class="line">    executor_time   BIGINT UNSIGNED DEFAULT 0 NOT NULL COMMENT '任务耗时，单位：ms',</span><br><span class="line">    exce_info       TEXT                      NULL COMMENT '任务异常信息',</span><br><span class="line">    gmt_create      DATETIME                  NOT NULL COMMENT '创建时间',</span><br><span class="line">    gmt_modified    DATETIME                  NOT NULL COMMENT '更新时间',</span><br><span class="line">    CONSTRAINT tb_task_log_id_uindex</span><br><span class="line">        UNIQUE (id)</span><br><span class="line">)</span><br><span class="line">    COMMENT '任务日志信息';</span><br><span class="line"></span><br><span class="line">ALTER TABLE tb_task_log</span><br><span class="line">    ADD PRIMARY KEY (id);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="任务调度实现（核心）"><a href="#任务调度实现（核心）" class="headerlink" title="任务调度实现（核心）"></a>任务调度实现（核心）</h4><h5 id="任务取消实现类"><a href="#任务取消实现类" class="headerlink" title="任务取消实现类"></a>任务取消实现类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 取消定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/8 10:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> ScheduledFuture&lt;?&gt; future;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>{</span><br><span class="line">        ScheduledFuture&lt;?&gt; future = <span class="keyword">this</span>.future;</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="keyword">null</span>) {</span><br><span class="line">            future.cancel(<span class="keyword">true</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="任务注册实现类"><a href="#任务注册实现类" class="headerlink" title="任务注册实现类"></a>任务注册实现类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.CronTask;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 任务注册类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/8 10:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronTaskRegistrar</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CronTaskRegistrar.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务的核心类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建并发包下的Map数据结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, ScheduledTask&gt; scheduledTasks = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(CronTask cronTask)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (cronTask != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// 获取任务接口对象</span></span><br><span class="line">            Runnable task = cronTask.getRunnable();</span><br><span class="line">            <span class="comment">// 如果任务已存在,则删除</span></span><br><span class="line">            <span class="keyword">if</span> (scheduledTasks.containsKey(task)) {</span><br><span class="line">                removeCronTask(task);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 重新开始执行任务</span></span><br><span class="line">            scheduledTasks.put(task, scheduleCronTask(cronTask));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加调度任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task           任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cronExpression cron表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(Runnable task, String cronExpression)</span> </span>{</span><br><span class="line">        logger.info(<span class="string">"开始注册任务"</span>);</span><br><span class="line">        addCronTask(<span class="keyword">new</span> CronTask(task, cronExpression));</span><br><span class="line">        logger.info(<span class="string">"任务注册成功"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCronTask</span><span class="params">(Runnable task)</span> </span>{</span><br><span class="line">        logger.info(<span class="string">"准备移除任务"</span>);</span><br><span class="line">        ScheduledTask scheduledTask = scheduledTasks.remove(task);</span><br><span class="line">        <span class="keyword">if</span> (scheduledTask != <span class="keyword">null</span>) {</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        logger.info(<span class="string">"移除任务成功"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cronTask</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledTask <span class="title">scheduleCronTask</span><span class="params">(CronTask cronTask)</span> </span>{</span><br><span class="line">        ScheduledTask scheduledTask = <span class="keyword">new</span> ScheduledTask();</span><br><span class="line">        scheduledTask.future = taskScheduler.schedule(cronTask.getRunnable(), cronTask.getTrigger());</span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务销毁(当bean被销毁之前，执行此方法，结束所有定时任务)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">for</span> (ScheduledTask task : scheduledTasks.values()) {</span><br><span class="line">            task.cancel();</span><br><span class="line">        }</span><br><span class="line">        scheduledTasks.clear();</span><br><span class="line">        logger.info(<span class="string">"定时任务取消..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="任务多线程处理类"><a href="#任务多线程处理类" class="headerlink" title="任务多线程处理类"></a>任务多线程处理类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.extra.spring.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.ThreadFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.constants.BlogConstants;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.utils.JacksonUtils;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.entity.Task;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.entity.TaskLog;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.TaskLogService;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.threads.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Runnable接口实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/8 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SchedulingRunnable.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"InsertJobLogPool-%d"</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String executorStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行耗时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long executorTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String exceInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须实现无参构造函数,才能自动注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulingRunnable</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulingRunnable</span><span class="params">(String beanName, String methodName)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(beanName, methodName, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchedulingRunnable</span><span class="params">(String beanName, String methodName, String params)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">        <span class="keyword">this</span>.methodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写定时任务run方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">5</span>), threadFactory);</span><br><span class="line">        logger.info(<span class="string">"定时任务开始执行 - bean：{}，方法：{}，参数：{}"</span>, beanName, methodName, params);</span><br><span class="line">        <span class="comment">// 任务开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 获取bean目标对象</span></span><br><span class="line">            Object target = SpringUtil.getBean(beanName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取方法</span></span><br><span class="line">            Method method;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(params)) {</span><br><span class="line">                <span class="comment">// 根据方法名和参数类型获取</span></span><br><span class="line">                method = target.getClass().getDeclaredMethod(methodName, String.class);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 根据方法名获取</span></span><br><span class="line">                method = target.getClass().getDeclaredMethod(methodName);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 放开方法的访问权限</span></span><br><span class="line">            ReflectionUtils.makeAccessible(method);</span><br><span class="line">            <span class="comment">// 调用方法</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(params)) {</span><br><span class="line">                method.invoke(target, params);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                method.invoke(target);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 任务耗时</span></span><br><span class="line">            <span class="keyword">long</span> times = System.currentTimeMillis() - startTime;</span><br><span class="line">            logger.info(<span class="string">"定时任务执行结束 - bean：{}，方法：{}，参数：{}，耗时：{} 毫秒"</span>, beanName, methodName, params, times);</span><br><span class="line">            <span class="comment">// 任务执行成功: 设置任务执行状态和任务执行时间</span></span><br><span class="line">            <span class="keyword">this</span>.executorStatus = BlogConstants.JOB_EXECUTOR_STATUS.SUCCESS.name();</span><br><span class="line">            <span class="keyword">this</span>.executorTime = times;</span><br><span class="line">            <span class="comment">// 保存执行日志</span></span><br><span class="line">            executor.execute(<span class="keyword">new</span> JobLog());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">// 任务执行异常: 设置任务执行状态</span></span><br><span class="line">            logger.error(String.format(<span class="string">"定时任务执行异常 - bean：%s，方法：%s，参数：%s "</span>, beanName, methodName, params), e);</span><br><span class="line">            <span class="keyword">this</span>.executorStatus = BlogConstants.JOB_EXECUTOR_STATUS.FAIL.name();</span><br><span class="line">            <span class="keyword">this</span>.executorTime = System.currentTimeMillis() - startTime;</span><br><span class="line">            <span class="comment">// 保存为json格式数据</span></span><br><span class="line">            <span class="keyword">this</span>.exceInfo = JacksonUtils.objToString(e);</span><br><span class="line">            <span class="comment">// 保存执行日志</span></span><br><span class="line">            executor.execute(<span class="keyword">new</span> JobLog());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存执行日志</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobLog</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TaskLogService taskLogService;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程类中可以利用无参构造方法,通过调用getBean方法来实现bean实例的注入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JobLog</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// HuTool工具类实现bean的获取</span></span><br><span class="line">            <span class="keyword">this</span>.taskService = SpringUtil.getBean(TaskService.class);</span><br><span class="line">            <span class="keyword">this</span>.taskLogService = SpringUtil.getBean(TaskLogService.class);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// 插入执行日志(根据beanName,methodName,methodParams可以确定一个唯一任务)</span></span><br><span class="line">            Task task = <span class="keyword">this</span>.taskService.getOne(<span class="keyword">new</span> QueryWrapper&lt;Task&gt;().lambda()</span><br><span class="line">                    .select(Task::getId, Task::getBeanName, Task::getMethodName, Task::getMethodParams, Task::getCron</span><br><span class="line">                            , Task::getJobRemark, Task::getJobStatus)</span><br><span class="line">                    .eq(Task::getBeanName, beanName)</span><br><span class="line">                    .eq(Task::getMethodName, methodName)</span><br><span class="line">                    .eq(StringUtils.isNotBlank(params), Task::getMethodParams, params)</span><br><span class="line">                    .isNull(StringUtils.isBlank(params), Task::getMethodParams));</span><br><span class="line">            <span class="comment">// 组装信息</span></span><br><span class="line">            TaskLog taskLog = <span class="keyword">new</span> TaskLog();</span><br><span class="line">            taskLog.setJobId(task.getId())</span><br><span class="line">                    .setExecutorStatus(executorStatus)</span><br><span class="line">                    .setExecutorTime(executorTime);</span><br><span class="line">            <span class="comment">// 如果异常信息不为空,则保存此异常</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(exceInfo)) {</span><br><span class="line">                <span class="comment">// 截取异常信息</span></span><br><span class="line">                exceInfo = exceInfo.length() &gt; <span class="number">256</span> ? exceInfo.substring(<span class="number">0</span>, <span class="number">256</span>) : exceInfo;</span><br><span class="line">                taskLog.setExceInfo(exceInfo);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 将任务Id置为空: 防止属性拷贝时,两个id值的相互拷贝,造成数据库插入错误</span></span><br><span class="line">            task.setId(<span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 拷贝属性</span></span><br><span class="line">            BeanUtils.copyProperties(task, taskLog);</span><br><span class="line">            <span class="comment">// 保存数据</span></span><br><span class="line">            <span class="keyword">this</span>.taskLogService.save(taskLog);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写equals和hashCode</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        SchedulingRunnable that = (SchedulingRunnable) o;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                    methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                    that.params == <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                params.equals(that.params);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(beanName, methodName);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(beanName, methodName, params);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h3><blockquote>
<p>编写任务调度的具体业务逻辑，用于被注册和调度</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.job.simple;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.common.CommonProvide;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.mapper.BlogViewsMapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.SongService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 简单任务实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/8 15:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component("testJob")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJob</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SongService songService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlogViewsMapper blogViewsMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每天定时11:11执行一次删除昨天浏览记录的操作[tb_blog_views]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobWithParams</span><span class="params">(String params)</span> </span>{</span><br><span class="line">        StopWatch watch = CommonProvide.getWatchStart();</span><br><span class="line">        log.info(<span class="string">"===&gt; 开始执行删除昨日浏览记录操作 &lt;==="</span>);</span><br><span class="line">        blogViewsMapper.removeYesterdayViewRecord();</span><br><span class="line">        watch.stop();</span><br><span class="line">        log.info(<span class="string">"===&gt; 删除昨日浏览记录操作执行耗时: {}ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每天11点定时删除重复歌曲(0 0 11 * * ?)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobNoWithParams</span><span class="params">()</span> </span>{</span><br><span class="line">        StopWatch watch = CommonProvide.getWatchStart();</span><br><span class="line">        log.info(<span class="string">"===&gt; 开始执行删除重复歌曲操作 &lt;==="</span>);</span><br><span class="line">        songService.removeRepeatSong();</span><br><span class="line">        watch.stop();</span><br><span class="line">        log.info(<span class="string">"===&gt; 删除重复歌曲操作执行耗时: {}ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时删除无版权的歌曲</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobWithParamsAndSleep</span><span class="params">(String params)</span> </span>{</span><br><span class="line">        StopWatch watch = CommonProvide.getWatchStart();</span><br><span class="line">        log.info(<span class="string">"===&gt; 开始执行删除无版权歌曲操作 &lt;==="</span>);</span><br><span class="line">        songService.removeNoCopyrightSong();</span><br><span class="line">        watch.stop();</span><br><span class="line">        log.info(<span class="string">"===&gt; 删除无版权歌曲操作执行耗时: {}ms"</span>, watch.getTotalTimeMillis());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="启动初始化"><a href="#启动初始化" class="headerlink" title="启动初始化"></a>启动初始化</h3><blockquote>
<p>利用<code>CommandLineRunner</code>接口，实现任务启动初始化</p>
<p>实现原理：从数据库中拉取任务调度信息，在项目启动过程中进行任务的循环注册，实现任务调度的初始化。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.init;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.common.CommonProvide;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.entity.Task;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.handler.CronTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.handler.SchedulingRunnable;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.util.ThreadUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定时任务初始化: 在应用启动后,执行的一段代码逻辑,并且只执行一次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/11 9:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span> <span class="comment">// 用@Order注解去设置多个CommandLineRunner实现类的执行顺序,value越小,执行顺序优先级越高</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRunnerInit</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此run方法实在主线程的run方法执行之前进行执行的,如果此run方法异常,会影响主线程的run方法的执行启动</span></span><br><span class="line"><span class="comment">     * 所以,这里要另开辟一个独立线程,即使执行出错,也不会影响到主线程业务;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"定时任务初始化开始..."</span>);</span><br><span class="line">        StopWatch watch = CommonProvide.getWatchStart();</span><br><span class="line">        <span class="comment">// 执行线程</span></span><br><span class="line">        ThreadUtils.executor.execute(<span class="keyword">new</span> JonInit());</span><br><span class="line">        watch.stop();</span><br><span class="line">        log.info(<span class="string">"定时任务初始化结束,执行耗时: {}ms"</span>, watch.getTotalTimeSeconds());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时任务逻辑类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">JonInit</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">//  查询status=true的任务,并开启任务</span></span><br><span class="line">            List&lt;Task&gt; tasks = taskService.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;Task&gt;()</span><br><span class="line">                    .select(Task::getBeanName, Task::getMethodName, Task::getMethodParams, Task::getCron)</span><br><span class="line">                    .eq(Task::getJobStatus, <span class="keyword">true</span>));</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(tasks)) {</span><br><span class="line">                tasks.forEach(task -&gt; {</span><br><span class="line">                    String methodParams = task.getMethodParams();</span><br><span class="line">                    String beanName = task.getBeanName();</span><br><span class="line">                    String methodName = task.getMethodName();</span><br><span class="line">                    SchedulingRunnable job;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(methodParams)) {</span><br><span class="line">                        job = <span class="keyword">new</span> SchedulingRunnable(beanName, methodName, methodParams);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        job = <span class="keyword">new</span> SchedulingRunnable(beanName, methodName);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 开启任务</span></span><br><span class="line">                    cronTaskRegistrar.addCronTask(job, task.getCron());</span><br><span class="line">                    log.info(<span class="string">"定时任务初始化成功 - bean：{}，方法：{}，参数：{}"</span>, beanName, methodName, methodParams);</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="任务调度控制"><a href="#任务调度控制" class="headerlink" title="任务调度控制"></a>任务调度控制</h3><blockquote>
<p>结合页面，实现任务调度的Controller控制层，实现任务调度的启动、暂定、恢复、删除等操作。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line">   <span class="meta">@OperatingLog(operType = BlogConstants.ADD, operDesc = "创建任务调度")</span></span><br><span class="line">   <span class="meta">@ApiOperation(httpMethod = "POST", value = "开启定时任务", notes = "根据cron表达式开启任务调度")</span></span><br><span class="line">   <span class="meta">@PostMapping("/start")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">startTask</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> Task task)</span> </span>{</span><br><span class="line">       <span class="comment">// 校验参数</span></span><br><span class="line">       <span class="keyword">if</span> (ObjectUtils.isEmpty(task)) {</span><br><span class="line">           <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">// 保存任务信息</span></span><br><span class="line">       <span class="keyword">boolean</span> success = taskService.saveJobInfo(task);</span><br><span class="line">       <span class="keyword">if</span> (!success) {</span><br><span class="line">           <span class="keyword">return</span> R.error().message(<span class="string">"任务创建失败"</span>);</span><br><span class="line">       }</span><br><span class="line">       String cron = task.getCron();</span><br><span class="line">       String beanName = task.getBeanName();</span><br><span class="line">       String methodName = task.getMethodName();</span><br><span class="line">       String methodParams = task.getMethodParams();</span><br><span class="line">       <span class="comment">// 开启任务</span></span><br><span class="line">       <span class="keyword">if</span> (task.getJobStatus() &amp;&amp; StringUtils.isNoneBlank(beanName, methodName)) {</span><br><span class="line">           SchedulingRunnable job = getSchedulingRunnable(methodName, beanName, methodParams);</span><br><span class="line">           cronTaskRegistrar.addCronTask(job, cron);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> R.ok().message(<span class="string">"任务创建成功"</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ApiOperation(httpMethod = "GET", value = "获取任务信息", notes = "根据任务ID查询任务信息")</span></span><br><span class="line">   <span class="meta">@ApiImplicitParam(name = "jobId", value = "任务ID", required = true, dataType = "String", paramType = "path")</span></span><br><span class="line">   <span class="meta">@GetMapping("/query/{jobId}")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">queryTaskById</span><span class="params">(<span class="meta">@PathVariable("jobId")</span> String jobId)</span> </span>{</span><br><span class="line">       Task task = taskService.getById(jobId);</span><br><span class="line">       <span class="keyword">return</span> R.ok().data(<span class="string">"item"</span>, task);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 只允许修改 cron表达式</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE, operDesc = "更新任务调度")</span></span><br><span class="line">   <span class="meta">@ApiOperation(httpMethod = "PUT", value = "更新定时任务", notes = "根据cron表达式更新任务调度")</span></span><br><span class="line">   <span class="meta">@PutMapping("/edit")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">editTask</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> Task task)</span> </span>{</span><br><span class="line">       <span class="comment">// 校验参数</span></span><br><span class="line">       <span class="keyword">if</span> (ObjectUtils.isEmpty(task)) {</span><br><span class="line">           <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">// 更新任务信息</span></span><br><span class="line">       <span class="keyword">boolean</span> success = taskService.updateJobInfo(task);</span><br><span class="line">       <span class="keyword">if</span> (!success) {</span><br><span class="line">           <span class="keyword">return</span> R.error().message(<span class="string">"任务修改失败"</span>);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">// 先移除旧任务,再启动新任务</span></span><br><span class="line">       String cron = task.getCron();</span><br><span class="line">       String beanName = task.getBeanName();</span><br><span class="line">       String methodName = task.getMethodName();</span><br><span class="line">       String methodParams = task.getMethodParams();</span><br><span class="line">       SchedulingRunnable job = getSchedulingRunnable(methodName, beanName, methodParams);</span><br><span class="line">       cronTaskRegistrar.removeCronTask(job);</span><br><span class="line">       <span class="comment">// 新增</span></span><br><span class="line">       cronTaskRegistrar.addCronTask(job, cron);</span><br><span class="line">       <span class="keyword">return</span> R.ok().message(<span class="string">"任务修改成功"</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@OperatingLog(operType = BlogConstants.REMOVE, operDesc = "删除任务调度")</span></span><br><span class="line">   <span class="meta">@ApiOperation(httpMethod = "DELETE", value = "移除定时任务", notes = "根据任务i移除任务调度")</span></span><br><span class="line">   <span class="meta">@DeleteMapping("/remove/{jobId}")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">removeTask</span><span class="params">(<span class="meta">@PathVariable("jobId")</span> String jobId)</span> </span>{</span><br><span class="line">       Task task = taskService.getById(jobId);</span><br><span class="line">       <span class="comment">// 任务是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (ObjectUtils.isEmpty(task)) {</span><br><span class="line">           <span class="keyword">return</span> R.error().message(<span class="string">"任务不存在"</span>);</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">// 校验任务信息</span></span><br><span class="line">       String beanName = task.getBeanName();</span><br><span class="line">       String methodName = task.getMethodName();</span><br><span class="line">       String methodParams = task.getMethodParams();</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isAnyBlank(beanName, methodName, methodParams)) {</span><br><span class="line">           <span class="keyword">return</span> R.error().message(<span class="string">"任务移除失败"</span>);</span><br><span class="line">       }</span><br><span class="line">       SchedulingRunnable job = getSchedulingRunnable(methodName, beanName, methodParams);</span><br><span class="line">       cronTaskRegistrar.removeCronTask(job);</span><br><span class="line">       <span class="comment">// 移除数据库数据</span></span><br><span class="line">       taskService.removeJobInfoById(jobId);</span><br><span class="line">       <span class="keyword">return</span> R.ok().message(<span class="string">"任务移除成功"</span>);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 改变定时任务状态:查询数据库对应任务信息, status为false:开启任务,为true:暂停任务</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE, operDesc = "更新任务状态")</span></span><br><span class="line">   <span class="meta">@ApiOperation(httpMethod = "GET", value = "更新任务状态", notes = "根据jobStatus更新任务状态")</span></span><br><span class="line">   <span class="meta">@GetMapping("change/{jobId}")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">updateTaskStatus</span><span class="params">(<span class="meta">@PathVariable("jobId")</span> String jobId)</span> </span>{</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(jobId)) {</span><br><span class="line">           <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">       }</span><br><span class="line">       Task task = taskService.getById(jobId);</span><br><span class="line">       <span class="keyword">if</span> (ObjectUtils.isEmpty(task)) {</span><br><span class="line">           <span class="keyword">return</span> R.error().message(<span class="string">"任务不存在"</span>);</span><br><span class="line">       }</span><br><span class="line">       String cron = task.getCron();</span><br><span class="line">       Boolean status = task.getJobStatus();</span><br><span class="line">       String methodName = task.getMethodName();</span><br><span class="line">       String beanName = task.getBeanName();</span><br><span class="line">       String methodParams = task.getMethodParams();</span><br><span class="line"></span><br><span class="line">       SchedulingRunnable job = getSchedulingRunnable(methodName, beanName, methodParams);</span><br><span class="line">       <span class="comment">// 关闭任务(移除)</span></span><br><span class="line">       <span class="keyword">if</span> (status) {</span><br><span class="line">           <span class="comment">// 移除</span></span><br><span class="line">           cronTaskRegistrar.removeCronTask(job);</span><br><span class="line">           <span class="comment">// 更新status状态值</span></span><br><span class="line">           taskService.updateJobInfo(<span class="keyword">new</span> Task().setId(jobId).setJobStatus(<span class="keyword">false</span>));</span><br><span class="line">           <span class="keyword">return</span> R.ok().message(<span class="string">"任务暂停成功"</span>);</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">           <span class="comment">// 开启</span></span><br><span class="line">           cronTaskRegistrar.addCronTask(job, cron);</span><br><span class="line">           taskService.updateJobInfo(<span class="keyword">new</span> Task().setId(jobId).setJobStatus(<span class="keyword">true</span>));</span><br><span class="line">           <span class="keyword">return</span> R.ok().message(<span class="string">"任务开启成功"</span>);</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取Runnable任务</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> methodParams</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SchedulingRunnable <span class="title">getSchedulingRunnable</span><span class="params">(String methodName, String beanName, String methodParams)</span> </span>{</span><br><span class="line">       SchedulingRunnable job;</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isNotBlank(methodParams)) {</span><br><span class="line">           job = <span class="keyword">new</span> SchedulingRunnable(beanName, methodName, methodParams);</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">           job = <span class="keyword">new</span> SchedulingRunnable(beanName, methodName);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> job;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801143347.png" alt="任务列表"></p>
<h4 id="任务注册"><a href="#任务注册" class="headerlink" title="任务注册"></a>任务注册</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801143455.png" alt="任务注册"></p>
<h4 id="任务日志"><a href="#任务日志" class="headerlink" title="任务日志"></a>任务日志</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801143620.png" alt="任务日志"></p>
<h4 id="任务图表"><a href="#任务图表" class="headerlink" title="任务图表"></a>任务图表</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210801143732.png" alt="任务图表"></p>
<h2 id="cron表达式简析"><a href="#cron表达式简析" class="headerlink" title="cron表达式简析"></a>cron表达式简析</h2><figure class="highlight crystal"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>. Seconds （秒） </span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. Minutes （分） </span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>. Hours （时） </span><br><span class="line"> </span><br><span class="line"><span class="number">4</span>. Day-<span class="keyword">of</span>-Month （天） </span><br><span class="line"> </span><br><span class="line"><span class="number">5</span>. Month （月） </span><br><span class="line"> </span><br><span class="line"><span class="number">6</span>. Day-<span class="keyword">of</span>-Week （周） </span><br><span class="line"> </span><br><span class="line"><span class="number">7</span>. Year (年 可选字段) </span><br><span class="line"> </span><br><span class="line">Seconds (秒) ：可以用数字<span class="number">0</span>－<span class="number">59</span> 表示；</span><br><span class="line"> </span><br><span class="line">Minutes(分) ：可以用数字<span class="number">0</span>－<span class="number">59</span> 表示；</span><br><span class="line"> </span><br><span class="line">Hours(时) ：可以用数字<span class="number">0</span>-<span class="number">23</span>表示；</span><br><span class="line"> </span><br><span class="line">Day-<span class="keyword">of</span>-Month(天) ：可以用数字<span class="number">1</span>-<span class="number">31</span> 中的任一一个值，但要注意一些特别的月份<span class="number">2</span>月份没有只能<span class="number">1</span>-<span class="number">28</span>，有些月份没有<span class="number">31</span>；</span><br><span class="line"> </span><br><span class="line">Month(月) ：可以用<span class="number">0</span>-<span class="number">11</span> 或用字符串 “JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC” 表示；</span><br><span class="line"> </span><br><span class="line">Day-<span class="keyword">of</span>-Week(*每周*)*：*可以用数字<span class="number">1</span>-<span class="number">7</span>表示（<span class="number">1</span> ＝ 星期日）或用字符口串“SUN, MON, TUE, WED, THU, FRI and SAT”表示；</span><br><span class="line"> </span><br><span class="line">“/”：为特别单位，表示为“每”如“<span class="number">0</span>/<span class="number">10</span>”表示每隔<span class="number">10</span>分钟执行一次,“<span class="number">0</span>”表示为从“<span class="number">0</span>”分开始, “<span class="number">3</span>/<span class="number">20</span>”表示表示每隔<span class="number">20</span>分钟执行一次，“<span class="number">3</span>”表示从第<span class="number">3</span>分钟开始执行；</span><br><span class="line"> </span><br><span class="line">“?”：表示每月的某一天，或第周的某一天；</span><br><span class="line"> </span><br><span class="line">“L”：用于每月，或每周，表示为每月的最后一天，或每个月的最后星期几如“<span class="number">6</span>L”表示“每月的最后一个星期五”；</span><br><span class="line"> </span><br><span class="line">“W”：表示为最近工作日，如“<span class="number">15</span>W”放在每月（day-<span class="keyword">of</span>-month）字段上表示为“到本月<span class="number">15</span>日最近的工作日”；</span><br><span class="line"> </span><br><span class="line">“<span class="comment">#”：是用来指定“的”每月第n个工作日,例 在每周（day-of-week）这个字段中内容为”6#3” or “FRI#3” 则表示“每月第三个星期五”；</span></span><br><span class="line"> </span><br><span class="line">“*” 代表整个时间段。</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Schedule</tag>
      </tags>
  </entry>
  <entry>
    <title>亚虎大百货服务环境搭建</title>
    <url>/Linux/%E4%BA%9A%E8%99%8E%E5%A4%A7%E7%99%BE%E8%B4%A7%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="亚虎大百货服务环境搭建"><a href="#亚虎大百货服务环境搭建" class="headerlink" title="亚虎大百货服务环境搭建"></a>亚虎大百货服务环境搭建</h1><h2 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h2><blockquote>
<p>运行服务需要的系统环境如下：</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>服务</th>
<th>版本（版本可不一致，兼容即可）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Centos</td>
<td>7.x</td>
</tr>
<tr>
<td>Jdk</td>
<td>1.8</td>
</tr>
<tr>
<td>Nginx</td>
<td>1.12.x</td>
</tr>
<tr>
<td>Redis</td>
<td>4.x</td>
</tr>
<tr>
<td>Mysql</td>
<td>5.7.x</td>
</tr>
<tr>
<td>MongoDB</td>
<td>4.x</td>
</tr>
<tr>
<td>Docker</td>
<td>18.x</td>
</tr>
<tr>
<td>rabbitMQ</td>
<td>3.7.x management（具有可视化面板版本）</td>
</tr>
<tr>
<td>Tomcat</td>
<td>9.0.x（war包运行服务，本次环境暂未配置）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Redis搭建"><a href="#Redis搭建" class="headerlink" title="Redis搭建"></a>Redis搭建</h2><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><blockquote>
<p>参考文档：<a href="https://www.horsemuzi.top/Linux/Linux安装Redis 6.2.1/">Linux 安装 Redis</a></p>
<p>要求：</p>
<ul>
<li>端口：16379</li>
<li>安装方式：源码安装</li>
<li>自行测试<code>redis-cli</code>客户端是否正常</li>
</ul>
</blockquote>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h4><blockquote>
<ol>
<li>到Redis官网下载最新稳定版：<a href="https://redis.io/download">Reids官网</a> </li>
<li>上传到<code>/usr/local/redis/</code>目录下并解压</li>
</ol>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis]<span class="comment"># tar -zxvf redis-6.2.1.tar.gz </span></span><br><span class="line">[root@horse redis]<span class="comment"># ll</span></span><br><span class="line">total 2388</span><br><span class="line">drwxrwxr-x 9 root root    4096 Apr 19 10:18 redis-6.2.1</span><br><span class="line">-rw-r--r-- 1 root root 2438367 Apr 19 09:14 redis-6.2.1.tar.gz</span><br></pre></td></tr></tbody></table></figure>
<p>解压后的文件在<code>/usr/local/redis/redis-6.2.1</code>目录下</p>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><blockquote>
<p>进入<code>/usr/local/redis/redis-6.2.1</code>目录，执行编译。编译后会出现<code>redis.conf</code>文件和<code>src</code>目录。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis-6.2.1]<span class="comment"># make</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>编译成功，进入<code>src</code>目录下，执行<code>make install</code>进行Redis安装。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse src]<span class="comment"># make install</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="部署启动"><a href="#部署启动" class="headerlink" title="部署启动"></a>部署启动</h4><blockquote>
<p><strong>为了方便管理</strong>，将Redis文件中的conf配置文件和常用命令移动到统一文件中。</p>
<ul>
<li>创建<code>bin</code>和<code>etc</code>目录。</li>
<li>将<code>redis.conf</code>文件移动到<code>etc</code>目录下。</li>
<li>进入<code>src</code>目录将其他常用命令移动到<code>bin</code>目录下。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mkdir etc</span><br><span class="line">mkdir bin</span><br><span class="line"></span><br><span class="line">mv redis.conf /usr/<span class="built_in">local</span>/redis/redis-6.2.1/etc/</span><br><span class="line"></span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server /usr/<span class="built_in">local</span>/redis/redis-6.2.1/bin/</span><br></pre></td></tr></tbody></table></figure>
<p>查看移动后的文件</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse redis-6.2.1]<span class="comment"># cd etc</span></span><br><span class="line">[root@horse etc]<span class="comment"># ll</span></span><br><span class="line">total 92</span><br><span class="line">-rw-rw-r-- 1 root root 92484 Apr 19 13:55 redis.conf</span><br><span class="line">[root@horse etc]<span class="comment"># cd ../bin</span></span><br><span class="line">[root@horse bin]<span class="comment"># ll</span></span><br><span class="line">total 37316</span><br><span class="line">-rw-r--r-- 1 root root     113 Apr 21 18:59 dump.rdb</span><br><span class="line">-rwxrwxr-x 1 root root     735 Mar  2 14:14 mkreleasehdr.sh</span><br><span class="line">-rwxr-xr-x 1 root root 4833448 Apr 19 09:40 redis-benchmark</span><br><span class="line">-rwxr-xr-x 1 root root 9451144 Apr 19 09:40 redis-check-aof</span><br><span class="line">-rwxr-xr-x 1 root root 9451144 Apr 19 09:40 redis-check-rdb</span><br><span class="line">-rwxr-xr-x 1 root root 5003464 Apr 19 09:40 redis-cli</span><br><span class="line">-rwxr-xr-x 1 root root 9451144 Apr 19 09:40 redis-server</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在bin目录下，执行redis-server,指定redis.conf配置文件路径</span></span><br><span class="line"></span><br><span class="line">./redis-server[root@horse bin]<span class="comment"># ./redis-server /usr/local/redis/redis-6.2.1/etc/redis.conf</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">32336:C 19 Apr 2021 14:18:01.846 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">32336:C 19 Apr 2021 14:18:01.847 <span class="comment"># Redis version=6.2.1, bits=64, commit=00000000, modified=0, pid=32336, just started</span></span><br><span class="line">32336:C 19 Apr 2021 14:18:01.847 <span class="comment"># Configuration loaded</span></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.847 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 6.2.1 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 32336</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">              `-.__.-'</span>                                               </span><br><span class="line"></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 <span class="comment"># Server initialized</span></span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 * Loading RDB produced by version 6.2.1</span><br><span class="line">32336:M 19 Apr 2021 14:18:01.848 * RDB age 170 seconds</span><br></pre></td></tr></tbody></table></figure>
<h4 id="redis-conf配置"><a href="#redis-conf配置" class="headerlink" title="redis.conf配置"></a>redis.conf配置</h4><blockquote>
<p>编辑<code>redis.conf</code>配置文件，根据服务需求配置</p>
</blockquote>
<ul>
<li>注释绑定IP，允许远程连接</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>允许后台运行</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 参数设置为 yes [允许后台挂载运行]</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>修改模式</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这个参数设置为 no [非受保护模式]</span></span><br><span class="line">protected-mode no</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>配置日志输出位置</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># reids 日志输出位置</span></span><br><span class="line">logfile <span class="string">"/usr/local/redis/redis-6.2.1/redis.log"</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>设置最大内存,单位：字节【如果内存足够，默认即可】</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置redis最大占用内存：0.75G</span></span><br><span class="line">maxmemory 268435456</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>设置密码</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置redis密码</span></span><br><span class="line">requirepass redis123</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>修改端口（非必须<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 修改端口</span></span><br><span class="line">port 16379</span><br></pre></td></tr></tbody></table></figure>
<p>其他的配置，默认即可。</p>
<h4 id="重启Reids"><a href="#重启Reids" class="headerlink" title="重启Reids"></a>重启Reids</h4><blockquote>
<p>因为是自定义安装的原因，所以重置Redis服务的时候需要指定配置文件<code>redis.conf</code></p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 要指定redis.conf的具体路径</span></span><br><span class="line">[root@horse bin]<span class="comment"># redis-server /usr/local/redis/redis-6.2.1/etc/redis.conf </span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="redis-cli客户端"><a href="#redis-cli客户端" class="headerlink" title="redis-cli客户端"></a>redis-cli客户端</h3><blockquote>
<p>将<code>redis-cli</code>路径添加到PATH环境变量中，即可在任意路径下执行<code>redis-cli -a 密码 -p 端口 -h IP地址</code>命令，进入redis-cli客户端。</p>
<p>步骤：</p>
<ul>
<li>打开<code>/etc/profile</code>文件，编辑路径配置</li>
<li>刷新环境配置：<code>source /etc/profile</code></li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># mysql环境变量</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis环境变量</span></span><br><span class="line"><span class="built_in">export</span> REDIS_HOME=/usr/<span class="built_in">local</span>/redis/redis-6.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># jdk环境变量</span></span><br><span class="line"><span class="comment"># JAVA_HOME：jdk解压的文件路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/jdk1.8.0_291</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=$:CLASSPATH:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"><span class="comment"># 不同服务路径之间使用“:”(英文冒号)隔开</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$MYSQL_HOME</span>/bin:<span class="variable">$REDIS_HOME</span>/bin</span><br></pre></td></tr></tbody></table></figure>
<h3 id="redis启动脚本"><a href="#redis启动脚本" class="headerlink" title="redis启动脚本"></a>redis启动脚本</h3><blockquote>
<p>需求：配置redis脚本，在任意路径下快捷启动、停止redis服务</p>
</blockquote>
<h4 id="脚本介绍"><a href="#脚本介绍" class="headerlink" title="脚本介绍"></a>脚本介绍</h4><blockquote>
<ol>
<li><p>在<code>/etc/init.d/</code>目录下创建脚本 文件 redis_16379</p>
</li>
<li><p>根据redis各个文件的路径，配置redis_16379脚本文件</p>
</li>
<li><p>执行脚本、</p>
<ul>
<li><p>开启命令：service redis_16379 start</p>
</li>
<li><p>关闭命令：service redis_16379 stop</p>
</li>
</ul>
</li>
</ol>
<p><strong>坑点：</strong></p>
<ul>
<li><p>redis如果设置有密码，在脚本文件中，必须进行显式定义使用。</p>
</li>
<li><p>使用脚本开启，必须使用脚本关闭，否则会无法在关闭redis的时候系统自动删除<code>/var/run/redis_16379.pid</code>文件。</p>
</li>
<li>如果未使用脚本关闭redis服务后，只需要手动删除redis_16379.pid 文件即可再次使用脚本启动。</li>
<li>脚本文件名称可改动，见名知义即可。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启redis服务</span></span><br><span class="line">service redis_16379 start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭redis服务</span></span><br><span class="line">service redis_16379 stop</span><br></pre></td></tr></tbody></table></figure>
<h4 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本代码示例详解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#redis服务器监听的端口</span></span><br><span class="line">REDISPORT=16379</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis-server服务端所处位置</span></span><br><span class="line">EXEC=/home/yahutest/redis-4.0.6/src/redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis-cli客户端位置</span></span><br><span class="line">CLIEXEC=/home/yahutest/redis-4.0.6/src/redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis的PID文件位置，默认在 /var/run/路径下会生成一个【redis_端口号.pid】文件</span></span><br><span class="line">PIDFILE=/var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#redis.conf的配置文件位置，需将${REDISPORT}修改为文件名</span></span><br><span class="line">CONF=<span class="string">"/home/yahutest/redis-4.0.6/redis.conf"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis密码</span></span><br><span class="line">PWD=redis123</span><br><span class="line"></span><br><span class="line"><span class="comment"># $1: 接收外面传入的参数，start 或者 stop</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></span><br><span class="line">                <span class="comment"># 拼接并执行redis启动命令</span></span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Redis start success!"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span></span><br><span class="line">                <span class="comment"># 执行客户端命令，关闭redis服务（如果端口号和密码有配置，这里也要重新进行指定，否则无法关闭）</span></span><br><span class="line">                <span class="variable">$CLIEXEC</span> -p <span class="variable">$REDISPORT</span> -a <span class="variable">$PWD</span> shutdown</span><br><span class="line">                <span class="keyword">while</span> [ -x /proc/<span class="variable">${PID}</span> ]</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span></span><br><span class="line">                    sleep 1</span><br><span class="line">                <span class="keyword">done</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopp success!"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Please use start or stop as first argument"</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="MongoDB搭建"><a href="#MongoDB搭建" class="headerlink" title="MongoDB搭建"></a>MongoDB搭建</h2><h3 id="安装要求-1"><a href="#安装要求-1" class="headerlink" title="安装要求"></a>安装要求</h3><blockquote>
<p>参考文档：</p>
<ul>
<li>源码安装：<a href="https://www.cnblogs.com/wangchengyi/articles/12094967.html?d=1625712366635">centos7部署mongodb4.0.14</a></li>
<li>yum方式安装：<a href="https://www.horsemuzi.top/Linux/Linux安装MondoDB/">Linux 环境下安装 MongoDB 4.x</a></li>
</ul>
<p>要求：</p>
<ul>
<li>端口：27017</li>
<li>安装方式：源码安装</li>
<li>自行测试<code>mongo</code>客户端是否正常</li>
</ul>
</blockquote>
<h3 id="安装过程-1"><a href="#安装过程-1" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="压缩包下载"><a href="#压缩包下载" class="headerlink" title="压缩包下载"></a>压缩包下载</h4><blockquote>
<p>mongodb官网：<a href="https://www.mongodb.com/try/download/community">mongodb点击下载</a></p>
<p><img src="https://i.loli.net/2021/07/08/Jrn5G71apvlPWRt.png" alt="mongodb官网"></p>
</blockquote>
<h4 id="解压包"><a href="#解压包" class="headerlink" title="解压包"></a>解压包</h4><blockquote>
<p>将解压资源移动到<code>/usr/local/mongodb/</code>目录下</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-4.0.14.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看移动后的资源</span></span><br><span class="line">[root@localhost mongodb]<span class="comment"># ll</span></span><br><span class="line">总用量 320</span><br><span class="line">drwxr-xr-x. 2 root root   4096 7月  26 09:01 bin</span><br><span class="line">drwxr-xr-x. 3 root root   4096 7月  27 09:10 data</span><br><span class="line">drwxr-xr-x. 2 root root     49 7月  26 09:19 etc</span><br><span class="line">-rw-r--r--. 1 root root  30608 5月   3 23:08 LICENSE-Community.txt</span><br><span class="line">drwxr-xr-x. 2 root root     62 7月  26 09:19 logs</span><br><span class="line">-rw-r--r--. 1 root root  16726 5月   3 23:08 MPL-2</span><br><span class="line">-rw-r--r--. 1 root root   2581 5月   3 23:08 README</span><br><span class="line">-rw-r--r--. 1 root root  75405 5月   3 23:08 THIRD-PARTY-NOTICES</span><br><span class="line">-rw-r--r--. 1 root root 183512 5月   3 23:10 THIRD-PARTY-NOTICES.gotools</span><br><span class="line">[root@localhost mongodb]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="创建存储路径"><a href="#创建存储路径" class="headerlink" title="创建存储路径"></a>创建存储路径</h4><blockquote>
<p>分别创建<code>data</code>,<code>logs</code>,<code>etc</code>三个资源目录，分别放置存储数据、日志文件、配置文件</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/mongodb/ data logs etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志文件（在配置文件中需要用到）</span></span><br><span class="line">touch /usr/<span class="built_in">local</span>/mongodb/logs/mongodb.log</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/mongodb/etc/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体配置内容如下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定数据库路径</span></span><br><span class="line">dbpath=/usr/<span class="built_in">local</span>/mongodb/data</span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line">logpath=/usr/<span class="built_in">local</span>/mongodb/logs/mongodb.log</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">port=27017</span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 关闭日志选项（开启的话，MongoDB的数据操作将会写入到journal文件夹的文件里）</span></span><br><span class="line">journal=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 绑定服务IP，若绑定127.0.0.1，则只能本机访问；若绑定0.0.0.0，则所有人都可以访问</span></span><br><span class="line">bind_ip=0.0.0.0</span><br><span class="line"><span class="comment"># 开启用户认证</span></span><br><span class="line">auth=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 过滤无用日志信息</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb config</span></span><br><span class="line"><span class="built_in">export</span> MONGODB_HOME=/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MONGODB_HOME</span>/bin</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定配置文件并启动服务</span></span><br><span class="line">/usr/<span class="built_in">local</span>/mongodb/bin/mongod -f ../etc/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">[root@localhost mongodb]<span class="comment"># ps -ef | grep mongod</span></span><br><span class="line">root      23088      1  0 7月26 ?       00:03:16 ./mongod -f ../etc/mongodb.conf</span><br><span class="line">root      36048  35049  0 09:20 pts/3    00:00:00 grep --color=auto mongod</span><br></pre></td></tr></tbody></table></figure>
<h3 id="账户角色配置"><a href="#账户角色配置" class="headerlink" title="账户角色配置"></a>账户角色配置</h3><blockquote>
<p>配置信息如下：</p>
<ul>
<li>数据库：dbh</li>
<li>用户：dbhUser，权限： readWrite（读写权限）</li>
<li>密码：mongo123</li>
</ul>
<p><strong>坑点：</strong></p>
<ul>
<li>进入mongo客户端中，在同一个会话中不能进行两次 db.auth() 授权验证操作，否则会报错。只需要退出重新进入即可解决。例如：在指定完 use admin 和相应的授权命令db.auth()后，就不能在执行 use dbh 和 db.auth()命令，必须退出重新进入才行。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># z在mongo安装bin目录下进入客户端</span></span><br><span class="line">[root@yhgateway bin]<span class="comment"># ./mongo</span></span><br><span class="line">MongoDB shell version v4.2.14</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session { <span class="string">"id"</span> : UUID(<span class="string">"aa0f3746-0477-40be-bf31-b758d960cdee"</span>) }</span><br><span class="line">MongoDB server version: 4.2.14</span><br><span class="line"><span class="comment"># 切换数据库,如果没有此数据库，则进行创建</span></span><br><span class="line">&gt; use dbh</span><br><span class="line">switched to dbh</span><br><span class="line"><span class="comment"># 创建针对某个数据库的用户、角色、权限等</span></span><br><span class="line">&gt; db.createUser({user:<span class="string">"dbhUser"</span>,<span class="built_in">pwd</span>:<span class="string">"mongo123"</span>,roles:[{role:<span class="string">"readWrite"</span>,db:<span class="string">"dbh"</span>}]})</span><br></pre></td></tr></tbody></table></figure>
<p>测试配置</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 切换数据库</span></span><br><span class="line">&gt; use dbh</span><br><span class="line">switched to db dbh</span><br><span class="line"><span class="comment"># 进行授权验证</span></span><br><span class="line">&gt; db.auth(<span class="string">"dbhUser"</span>,<span class="string">"mongo123"</span>)</span><br><span class="line">1</span><br><span class="line"><span class="comment"># 执行查询</span></span><br><span class="line">&gt; db.dbh.find().pretty();</span><br></pre></td></tr></tbody></table></figure>
<h3 id="mongo客户端"><a href="#mongo客户端" class="headerlink" title="mongo客户端"></a>mongo客户端</h3><blockquote>
<p>将<code>mongo</code>的文件路径，添加到环境变量中，即可在任意目录下执行<code>mongo ip:port</code>命令，连接指定端口号的客户端</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># redis configuration</span></span><br><span class="line"><span class="built_in">export</span> REDIS_HOME=/home/yahutest/redis-4.0.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb configuration</span></span><br><span class="line"><span class="built_in">export</span> MONGO_HOME=/home/yahutest/mongodb-linux-x86_64-rhel70-4.2.14</span><br><span class="line"></span><br><span class="line"><span class="comment"># JDK Configuration</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_144</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_144/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config        </span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$REDIS_HOME</span>/src:<span class="variable">$MONGO_HOME</span>/bin</span><br></pre></td></tr></tbody></table></figure>
<p>连接测试</p>
<blockquote>
<p>注意：当前系统中已经开启端口为 <code>27017</code>的mongo服务</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定连接27017端口客户端 （连接成功）</span></span><br><span class="line">[root@yhgateway ~]<span class="comment"># mongo localhost:27017</span></span><br><span class="line">MongoDB shell version v4.2.14</span><br><span class="line">connecting to: mongodb://localhost:27017/<span class="built_in">test</span>?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session { <span class="string">"id"</span> : UUID(<span class="string">"094b3a80-c369-4840-b3b2-ca4bb60edecd"</span>) }</span><br><span class="line">MongoDB server version: 4.2.14</span><br><span class="line">&gt; use dbh</span><br><span class="line">switched to db dbh</span><br><span class="line">&gt; db.auth(<span class="string">"dbhUser"</span>,<span class="string">"mongo123"</span>)</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定连接3717端口客户端 （无此端口服务，无法连接）</span></span><br><span class="line">[root@yhgateway ~]<span class="comment"># mongo localhost:3717</span></span><br><span class="line">MongoDB shell version v4.2.14</span><br><span class="line">connecting to: mongodb://localhost:3717/<span class="built_in">test</span>?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">2021-07-08T14:29:20.199+0800 E  QUERY    [js] Error: couldn<span class="string">'t connect to server localhost:3717, connection attempt failed: SocketException: Error connecting to localhost:3717 (127.0.0.1:3717) :: caused by :: Connection refused :</span></span><br><span class="line"><span class="string">connect@src/mongo/shell/mongo.js:353:17</span></span><br><span class="line"><span class="string">@(connect):2:6</span></span><br><span class="line"><span class="string">2021-07-08T14:29:20.200+0800 F  -        [main] exception: connect failed</span></span><br><span class="line"><span class="string">2021-07-08T14:29:20.200+0800 E  -        [main] exiting with code 1</span></span><br><span class="line"><span class="string">[root@yhgateway ~]# </span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="mongo启动脚本"><a href="#mongo启动脚本" class="headerlink" title="mongo启动脚本"></a>mongo启动脚本</h3><blockquote>
<p>步骤：</p>
<ol>
<li>在<code>/etc/init.d/</code>目录下创建mongod文件并编辑</li>
<li>修改文件权限：<code>chmod 755 mongod</code></li>
<li>指定命令：<ol>
<li>开启服务：<code>systemctl start mongod</code></li>
<li>重启服务：<code>systemctl restart mongod</code></li>
<li>关闭服务：<code>systemctl stop mongod</code></li>
</ol>
</li>
</ol>
</blockquote>
<p>脚本示例</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mongod文件绝对路径</span></span><br><span class="line">MONGOD=/home/yahutest/mongodb-linux-x86_64-rhel70-4.2.14/bin/mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb.conf文件绝对路径</span></span><br><span class="line">CONF=/home/yahutest/mongodb/etc/mongodb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义开启服务</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>(){</span><br><span class="line">    <span class="variable">$MONGOD</span> --config <span class="variable">$CONF</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义关闭服务</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>(){</span><br><span class="line">    <span class="variable">$MONGOD</span> --config <span class="variable">$CONF</span> --shutdown</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据执行脚本传入的 参数$1 执行</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line"> start)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"starting mongodb server..."</span></span><br><span class="line">  start</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"mongodb start success!"</span></span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line">  stop</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line"></span><br><span class="line">  *)</span><br><span class="line">  <span class="built_in">echo</span></span><br><span class="line"> $<span class="string">"Please use start or restart or stop as first argument"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>修改文件权限</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置为可执行文件</span></span><br><span class="line">chmod 755 mongod</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><blockquote>
<p>方式一：使用mongo自带的<code>mongoexport</code>和<code>mongoimport</code>命令进行数据迁移，原理：先导出集合数据，在导入到mongo数据库中。</p>
<p>方式二：使用<code>mongodump</code>和<code>mongorestore</code>命令进行数据备份和恢复，原理：先备份数据到指定位置，再从指定位置恢复数据</p>
<p>注意：mongodb需要添加到<code>PATH环境变量</code>中</p>
<p>区别：</p>
<ul>
<li>mongodump 比 mongoexport 的速度稍快（使用时没怎么感觉到）</li>
<li>mongodump 可以backup整个数据库或者也可以针对每个collection操作，而mongoexport只能对每个collection进行操作</li>
<li>mongoexport 输出的JSON比mongodump 的BSON可读性更高</li>
</ul>
<p>推荐使用：<code>mongoexport</code>和<code>mongoimport</code>进行数据迁移</p>
</blockquote>
<h4 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h4><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><blockquote>
<p>导出命令：<code>mongoexport</code></p>
<p>参数说明：</p>
<ul>
<li>-h, —host ：代表远程连接的数据库地址，默认连接本地Mongo数据库；</li>
<li>—port：代表远程连接的数据库的端口，默认连接的远程端口27017；</li>
<li>-u,—username：代表连接远程数据库的账号，如果设置数据库的认证，需要指定用户账号；</li>
<li>-p,—password：代表连接数据库的账号对应的密码；</li>
<li>-d,—db：代表连接的数据库；</li>
<li>-c,—collection：代表连接数据库中的集合；</li>
<li>-f, —fields：代表集合中的字段，可以根据设置选择导出的字段；</li>
<li>—type：代表导出输出的文件类型，包括csv和json文件；</li>
<li>-o, —out：代表导出的文件名；</li>
<li>-q, —query：代表查询条件；</li>
<li>—skip：跳过指定数量的数据；</li>
<li>—limit：读取指定数量的数据记录；</li>
<li>—sort：对数据进行排序，可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列,如sort({KEY:1})。</li>
</ul>
</blockquote>
<h5 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h5><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 导出 admin 库中 fs.files 集合中的数据到 /tmp/files.json 文件中</span></span><br><span class="line">mongoexport -h localhost:27017 -u root -p mongo123 -d admin -c fs.files -o /tmp/files.json --<span class="built_in">type</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出 admin 库中 fs.chunks 集合数据到 /tmp/chunks.json 文件中</span></span><br><span class="line">mongoexport -h localhost:27017 -u root -p mongo123 -d admin -c fs.chunks -o /tmp/chunks.json --<span class="built_in">type</span> json</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h4><h5 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h5><blockquote>
<p>导入命令：<code>mongoimport</code></p>
<p>参数说明：</p>
<ul>
<li>h,—host ：代表远程连接的数据库地址，默认连接本地Mongo数据库；</li>
<li>—port：代表远程连接的数据库的端口，默认连接的远程端口27017；</li>
<li>-u,—username：代表连接远程数据库的账号，如果设置数据库的认证，需要指定用户账号；</li>
<li>-p,—password：代表连接数据库的账号对应的密码；</li>
<li>-d,—db：代表连接的数据库；</li>
<li>-c,—collection：代表连接数据库中的集合；</li>
<li>-f, —fields：代表导入集合中的字段；</li>
<li>—type：代表导入的文件类型，包括csv和json,tsv文件，默认json格式；</li>
<li>—file：导入的文件名称</li>
<li>—headerline：导入csv文件时，指明第一行是列名，不需要导入；</li>
</ul>
</blockquote>
<h5 id="命令示例-1"><a href="#命令示例-1" class="headerlink" title="命令示例"></a>命令示例</h5><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 导入 /tmp/files.json 文件导入 admin 库的 fs.files 集合中</span></span><br><span class="line"></span><br><span class="line">mongoimport -h localhost:27017 -u root -p mongo123 -d admin -c fs.files --file /tmp/files.json --<span class="built_in">type</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 /tmp/chunks.json 文件导入 admin 库的 fs.chunks 集合中</span></span><br><span class="line"></span><br><span class="line">mongoimport -h localhost:27017 -u root -p mongo123 -d admin -c fs.chunks --file /tmp/chunks.json --<span class="built_in">type</span> json</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="数据备份恢复"><a href="#数据备份恢复" class="headerlink" title="数据备份恢复"></a>数据备份恢复</h4><h5 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h5><h6 id="参数示例"><a href="#参数示例" class="headerlink" title="参数示例"></a>参数示例</h6><blockquote>
<p>备份命令：<code>mongodump</code></p>
<p>参数说明：</p>
<ul>
<li>—host <hostname>&lt;:port&gt;, -h <hostname>&lt;:port&gt;  # 指定备份的主机ip和端口号，默认值localhost:27017 </hostname></hostname></li>
<li>—port # 指定端口号 默认27017 </li>
<li>—username <username>, -u <username> # 指定用户名 </username></username></li>
<li>—password <password>, -p <password> # 指定密码 </password></password></li>
<li>—authenticationDatabase <dbname> # 指定认证的数据库 </dbname></li>
<li>—authenticationMechanism <name> # 指定认证的算法 ，默认值 SCRAM-SHA-1 </name></li>
<li>—db <database>, -d <database> # 指定备份的数据库，未指定的话，备份所有的数据库，但不包含local库 </database></database></li>
<li>—collection <collection>, -c <collection> # 指定备份的集合，未指定则备份指定库中的所有集合。 </collection></collection></li>
<li>—query <json>, -q <json>  # 指定 json 作为查询条件。来备份我们过滤后的数据。 —queryFile <path>  # 指定 json 文档路径，以该文档的内容作为查询条件，来备份我们过滤后的数据。 </path></json></json></li>
<li>—quit # 通过抑制 MongoDB的复制，连接等活动，来实现备份。 </li>
<li>—gzip  # 开启压缩，3.2版本后可以使用，输出为文件的话会带有后缀.gz </li>
<li>—out <path>, -o <path>  # 输出的目录路径（如果指定集合的备份，默认会输出的目录格式：当前目录/数据库名/集合名.bson）</path></path></li>
</ul>
</blockquote>
<h6 id="命令示例-2"><a href="#命令示例-2" class="headerlink" title="命令示例"></a>命令示例</h6><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出 admin 数据库的 fs.files 集合数据到 /tmp/ 目录下</span></span><br><span class="line"></span><br><span class="line">mongodump -h 121.5.168.31:27017 -u root -p mongo123 --authenticationDatabase admin -d admin -c fs.files -o /tmp/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 admin 数据库的 fs.chunks 集合数据到 /tmp/ 目录下</span></span><br><span class="line"></span><br><span class="line">mongodump -h 121.5.168.31:27017 -u root -p mongo123 --authenticationDatabase admin -d admin -c fs.chunks -o /tmp/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> =============================查看导出文件====================================</span></span><br><span class="line">[root@horse admin]# ll</span><br><span class="line">total 3820</span><br><span class="line">-rw-r--r-- 1 root root 3896395 Jul 28 14:56 fs.chunks.bson</span><br><span class="line">-rw-r--r-- 1 root root     163 Jul 28 14:55 fs.chunks.metadata.json</span><br><span class="line">-rw-r--r-- 1 root root     399 Jul 28 14:52 fs.files.bson</span><br><span class="line">-rw-r--r-- 1 root root     162 Jul 28 14:52 fs.files.metadata.json</span><br><span class="line">[root@horse admin]# pwd</span><br><span class="line">/tmp/admin</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h5><h6 id="参数示例-1"><a href="#参数示例-1" class="headerlink" title="参数示例"></a>参数示例</h6><blockquote>
<p>恢复命令：<code>mongorestore</code></p>
<p>参数说明：</p>
<ul>
<li>—host <hostname>&lt;:port&gt;, -h <hostname>&lt;:port&gt;  # 指定恢复的主机ip和端口号，默认值localhost:27017 </hostname></hostname></li>
<li>—port # 指定端口号 默认27017 </li>
<li>—username <username>, -u <username> # 指定用户名 </username></username></li>
<li>—password <password>, -p <password> # 指定密码 </password></password></li>
<li>—authenticationDatabase <dbname> # 指定认证的数据库 </dbname></li>
<li>—authenticationMechanism <name> # 指定认证的算法 ，默认值 SCRAM-SHA-1 </name></li>
<li>—objcheck # 开启验证，验证还原操作，确保没有无效的文档插入数据库。会有较小的性能影响 </li>
<li>—oplogReplay # 恢复备份数据并将 mongodump 执行期间的操作(记录在导出的日志)恢复。 </li>
<li>—oplogLimit  # 指定恢复 </li>
<li>—oplogFile # 指定 Oplog 路径 </li>
<li>—keepIndexVersion # 阻止mongorestore在还原过程中将索引升级到最新版本。 </li>
<li>—restoreDbUsersAndRoles # 还原指定的数据库用户和角色。 </li>
<li>—maintainInsertionOrder # 默认值为False,如果为 True,mongorestore 将按照输入源的文档顺序插入，否则是 随机执行插入。 </li>
<li>—numParallelCollections int, -j int # 指定并行恢复的集合数。 </li>
<li>—numInsertionWorkersPerCollection int # 默认值为 1，指定每个集合恢复的并发数，大数据量导入增加该值可提高 恢复速度。 </li>
<li>—gzip # 从压缩文档中 恢复。 </li>
<li>—archive # 从归档文件中恢复。 </li>
<li>—dir # 指定还原数据储存目录。</li>
</ul>
</blockquote>
<h6 id="命令示例-3"><a href="#命令示例-3" class="headerlink" title="命令示例"></a>命令示例</h6><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复 /tmp/admin/*.bson 文件到 admin 数据库 中的对应的 集合中</span></span><br><span class="line"></span><br><span class="line">mongorestore -h 121.5.168.31:27017 -u root -p mongo123 --authenticationDatabase admin -d admin -c fs.files /tmp/admin/fs.files.bson</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复 /tmp/admin/*.bson 文件到 admin 数据库 中的对应的 集合中</span></span><br><span class="line">mongorestore -h 121.5.168.31:27017 -u root -p mongo123 --authenticationDatabase admin -d admin -c fs.chunks /tmp/admin/fs.chunks.bson</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Docker搭建"><a href="#Docker搭建" class="headerlink" title="Docker搭建"></a>Docker搭建</h2><h3 id="安装要求-2"><a href="#安装要求-2" class="headerlink" title="安装要求"></a>安装要求</h3><blockquote>
<p>参考文档：<a href="https://www.horsemuzi.top/Linux/Linux安装Docker/">Linux安装Docker</a></p>
<p>要求：</p>
<ul>
<li>完成Docker安装，能够完成镜像拉取、运行的基本操作</li>
</ul>
</blockquote>
<h3 id="安装过程-2"><a href="#安装过程-2" class="headerlink" title="安装过程"></a>安装过程</h3><blockquote>
<p>本次采用<code>yum</code>在线安装Docker工具</p>
</blockquote>
<h4 id="安装yum工具"><a href="#安装yum工具" class="headerlink" title="安装yum工具"></a>安装yum工具</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></tbody></table></figure>
<h4 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h4><blockquote>
<p>安装软件源为：阿里云仓库，速度较快</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure>
<h4 id="更新yum缓存"><a href="#更新yum缓存" class="headerlink" title="更新yum缓存"></a>更新yum缓存</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装Docker-ce"><a href="#安装Docker-ce" class="headerlink" title="安装Docker-ce"></a>安装Docker-ce</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure>
<h3 id="docker基础命令"><a href="#docker基础命令" class="headerlink" title="docker基础命令"></a>docker基础命令</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 显示docker的版本信息</span></span><br><span class="line">docker version 或者 docker -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示docker的详细信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索指定镜像</span></span><br><span class="line">docker search rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已拉取的所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本拉取镜像（如果不添加版本信息，默认拉取最新版的镜像）</span></span><br><span class="line">docker pull rabbitmq:3.8.14-management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用参数说明</span></span><br><span class="line">--name=<span class="string">"容器名字"</span>  <span class="comment">#设置启动容器的名字，例如：tomcat01,tomcat02...，用来区别容器</span></span><br><span class="line">-d  <span class="comment">#后台方式运行</span></span><br><span class="line">-it <span class="comment">#使用交互方式运行并进行容器进行交互查看信息</span></span><br><span class="line">-p  <span class="comment">#端口映射，下面是几种不同的映射书写方式（指定容器的映射端口）</span></span><br><span class="line">	1.ip:主机端口：容器端口</span><br><span class="line">	2.主机端口：容器端口（常用）</span><br><span class="line">	3.容器端口</span><br><span class="line">docker run  -d --name horse-rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.8.14-management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询已经运行过的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入已经启动的容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it [容器ID] /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从主机拷贝文件到容器内部（反向拷贝也可以）</span></span><br><span class="line">docker cp 主机文件路径 容器ID:文件路径</span><br></pre></td></tr></tbody></table></figure>
<h2 id="RabbitMQ搭建"><a href="#RabbitMQ搭建" class="headerlink" title="RabbitMQ搭建"></a>RabbitMQ搭建</h2><h3 id="安装要求-3"><a href="#安装要求-3" class="headerlink" title="安装要求"></a>安装要求</h3><blockquote>
<p>参考文档：<a href="https://www.horsemuzi.top/JAVA/RabbitMQ安装配置/">Linux安装RabbitMQ </a></p>
<p>要求：</p>
<ul>
<li>安装带有可视化配置界面的rabbitmq版本</li>
<li>安装rabbitmq延时插件</li>
</ul>
</blockquote>
<h3 id="安装过程-3"><a href="#安装过程-3" class="headerlink" title="安装过程"></a>安装过程</h3><h4 id="拉取镜像，启动容器"><a href="#拉取镜像，启动容器" class="headerlink" title="拉取镜像，启动容器"></a>拉取镜像，启动容器</h4><blockquote>
<p>进入Docker Hub，查找需要版本。</p>
</blockquote>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426204759.png" alt="Snipaste_2021-04-26_20-47-38"></p>
<p>执行命令：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.8.14-management</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG                 IMAGE ID       CREATED       SIZE</span><br><span class="line">rabbitmq     3.8.14-management   edd581f906b9   3 weeks ago   187MB</span><br></pre></td></tr></tbody></table></figure>
<p>启动容器：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name horse-rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.8.14-management</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND                  CREATED      STATUS      PORTS                                                                                                                                                 NAMES</span><br><span class="line">2d2dc97ed0f1   rabbitmq:3.8.14-management   <span class="string">"docker-entrypoint.s…"</span>   7 days ago   Up 2 days   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   horse-rabbitmq</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="可视化配置"><a href="#可视化配置" class="headerlink" title="可视化配置"></a>可视化配置</h4><blockquote>
<p>可视化面板创建 虚拟主机、用户、交换机、队列…</p>
</blockquote>
<h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205228.png" alt="Snipaste_2021-04-26_20-51-24"></p>
<h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205351.png" alt="image_2021-04-23_17-59-01"></p>
<h5 id="添加虚拟主机"><a href="#添加虚拟主机" class="headerlink" title="添加虚拟主机"></a>添加虚拟主机</h5><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205409.png" alt="image_2021-04-23_18-00-36"></p>
<h5 id="绑定用户和虚拟主机"><a href="#绑定用户和虚拟主机" class="headerlink" title="绑定用户和虚拟主机"></a>绑定用户和虚拟主机</h5><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210426205742.png" alt="Snipaste_2021-04-26_20-56-58"></p>
<p>配置完成后，使用配置的用户和密码登录即可。</p>
<h3 id="延时插件安装"><a href="#延时插件安装" class="headerlink" title="延时插件安装"></a>延时插件安装</h3><blockquote>
<p>在RabbitMQ容器中安装 延时插件，项目中可以配置基于插件的延时队列</p>
</blockquote>
<h4 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h4><blockquote>
<p><a href="[Community Plugins — RabbitMQ](https://www.rabbitmq.com/community-plugins.html">延时插件点击下载</a>)</p>
</blockquote>
<p><img src="https://i.loli.net/2021/05/27/nkYDxtPdCaSOMeW.png" alt="image-20210527175811822"></p>
<h4 id="进入RabbitMQ容器"><a href="#进入RabbitMQ容器" class="headerlink" title="进入RabbitMQ容器"></a>进入RabbitMQ容器</h4><blockquote>
<ul>
<li>进入正在运行的RabbitMQ容器，查看RabbitMQ的插件列表是否已安装有<code>延时插件</code></li>
<li>把下载的插件复制到<code>plugins</code>目录下</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@horse lib]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE                        COMMAND                  CREATED      STATUS      PORTS                                                                                                                                                 NAMES</span><br><span class="line">abe759d645e4   rabbitmq:3.8.14-management   <span class="string">"docker-entrypoint.s…"</span>   2 days ago   Up 2 days   4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, :::5672-&gt;5672/tcp, 15671/tcp, 15691-15692/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp, :::15672-&gt;15672/tcp   horse-rabbitmq</span><br><span class="line">[root@horse lib]<span class="comment"># docker exec -it abe759d645e4 /bin/bash</span></span><br><span class="line">root@abe759d645e4:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  plugins  root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   media  opt  proc     run   srv   tmp  var</span><br><span class="line">root@abe759d645e4:/<span class="comment"># cd plugins</span></span><br><span class="line">root@abe759d645e4:/plugins<span class="comment"># ls -l</span></span><br><span class="line">total 17640</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq      59 Mar  2 16:09 README</span><br><span class="line">-rw-r--r-- 1 rabbitmq rabbitmq   13408 Mar  2 16:09 accept-0.3.5.ez</span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="复制移动插件"><a href="#复制移动插件" class="headerlink" title="复制移动插件"></a>复制移动插件</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line">docker cp /tmp/installPackage/rabbitmq_delayed_message_exchange-3.8.0.ez abe759d645e4:/plugins/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否复制成功</span></span><br><span class="line">[root@horse /]<span class="comment"># docker exec -it abe759d645e4 /bin/bash</span></span><br><span class="line">root@abe759d645e4:/<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  plugins  root  sbin  sys  usr</span><br><span class="line">boot  etc  lib   media  opt  proc     run   srv   tmp  var</span><br><span class="line">root@abe759d645e4:/<span class="comment"># cd plugins</span></span><br><span class="line">root@abe759d645e4:/plugins<span class="comment"># rabbitmq-plugins list</span></span><br><span class="line">Listing plugins with pattern <span class="string">".*"</span> ...</span><br><span class="line"> Configured: E = explicitly enabled; e = implicitly enabled</span><br><span class="line"> | Status: * = running on rabbit@abe759d645e4</span><br><span class="line"> |/</span><br><span class="line">[  ] rabbitmq_amqp1_0                  3.8.14</span><br><span class="line">[  ] rabbitmq_auth_mechanism_ssl       3.8.14</span><br><span class="line">[  ] rabbitmq_consistent_hash_exchange 3.8.14</span><br><span class="line"><span class="comment"># 插件已复制成功</span></span><br><span class="line">[E*] rabbitmq_delayed_message_exchange 3.8.0</span><br><span class="line">[  ] rabbitmq_event_exchange           3.8.14</span><br><span class="line">[  ] rabbitmq_federation               3.8.14</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">root@abe759d645e4:/plugins<span class="comment"># </span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="开启插件服务"><a href="#开启插件服务" class="headerlink" title="开启插件服务"></a>开启插件服务</h4><blockquote>
<p>在容器中执行两个命令</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行一下，避免出错（若执行出错，继续执行开启插件命令）</span></span><br><span class="line">rabbitmq-server -detached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用插件(需要在plugins目录下执行此命令，注意观察，不带插件后缀哟！)</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可视化界面查看"><a href="#可视化界面查看" class="headerlink" title="可视化界面查看"></a>可视化界面查看</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210527201850.png" alt="image-20210527201840273"></p>
<h2 id="Nginx搭建"><a href="#Nginx搭建" class="headerlink" title="Nginx搭建"></a>Nginx搭建</h2><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">yum install gcc-c++ -y</span><br><span class="line"></span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line"></span><br><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><blockquote>
<p><strong>注意：</strong>如果需要开始https支持，这里请不要直接执行<code>./configure</code>，即不要直接执行该脚本，而是在该脚本后面加上SSL模块<code>--with-http_ssl_module</code></p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf nginx-1.19.9.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入解压后的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.19.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行配置（安装https模块，stream模块）</span></span><br><span class="line">./configure --with-http_ssl_module --with-stream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><blockquote>
<p>进入<code>usr/local/nginx/sbin/</code>目录下，执行<code>./nginx</code>即可启动成功</p>
<p>相关命令：</p>
<ul>
<li>查看配置正确性：<code>./nginx  -t</code></li>
<li>关闭nginx: <code>./nginx -s quit</code>或者<code>./nginx -s stop</code></li>
<li>重启nginx：<code>./nginx -s reload</code></li>
</ul>
</blockquote>
<h4 id="nginx自启动"><a href="#nginx自启动" class="headerlink" title="nginx自启动"></a>nginx自启动</h4><blockquote>
<p>在<code>/etc/rc.local</code>文件中添加nginx的路径<code>/usr/local/nginx/sbin/nginx</code>即可</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost sbin]<span class="comment"># vim /etc/rc.local </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/<span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx config</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx                                           </span><br></pre></td></tr></tbody></table></figure>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><h4 id="upstream服务流"><a href="#upstream服务流" class="headerlink" title="upstream服务流"></a>upstream服务流</h4><blockquote>
<p>当配置upstream流之后，nginx自动触发负载均衡。</p>
<p>nginx负载均衡策略主要有3种：</p>
<ul>
<li>轮询策略： nginx默认的负载均衡策略</li>
<li>权重策略：在配置upstream服务流时，手动配置每个服务地址的权重</li>
<li>ip_hash策略：每个请求按照访问 ip 的 hash 结果分配，这样只要 ip 访问过并被分配过服务器之后，以后再次方位，分配的都将是同一个服务器</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">	</span><br><span class="line">	# 创建服务流（myServer:自定义的服务流名称）</span><br><span class="line">    # 默认轮询策略</span><br><span class="line">	upstream myServer {</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8080</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8081</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8082</span>;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">     # 权重策略</span><br><span class="line">	upstream myServer {</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8080</span> weight=<span class="number">5</span></span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8081</span> weight=<span class="number">10</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8082</span> weight=<span class="number">8</span>;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">      # ip_hash方式</span><br><span class="line">	upstream myServer {</span><br><span class="line">         ip_hash               # 只要添上这一句，就是ip_hash分配策略</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8080</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8081</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8082</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen       80;  # 监听端口</span><br><span class="line">        server_name  47.99.152.217;  # 监听地址</span><br><span class="line"></span><br><span class="line">		# 反向代理转发配置(一个server中可以配置多个location)</span><br><span class="line">        location / {</span><br><span class="line">			proxy_pass http:<span class="comment">//myServer;  # 负载均衡的服务流名称</span></span><br><span class="line">			proxy_connect_timeout 600; # 连接超时时间（默认也可以）</span><br><span class="line">			proxy_read_timeout 600; # 请求读超时时间（默认也可以）</span><br><span class="line">        }</span><br><span class="line">		</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">           root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="nginx-conf文件"><a href="#nginx-conf文件" class="headerlink" title="nginx.conf文件"></a>nginx.conf文件</h4><blockquote>
<p><strong>坑点：</strong></p>
<ul>
<li>理解nginx中<code>try_files</code> 属性配置含义，正确配置文件路径。</li>
</ul>
<p>内置全局变量：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class="line">$content_length ： 请求头中的Content-length字段。</span><br><span class="line">$content_type ： 请求头中的Content-Type字段。</span><br><span class="line">$document_root ： 当前请求在root指令中指定的值。</span><br><span class="line">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent ： 客户端agent信息</span><br><span class="line">$http_cookie ： 客户端cookie信息</span><br><span class="line">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class="line">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class="line">$remote_addr ： 客户端的IP地址。</span><br><span class="line">$remote_port ： 客户端的端口。</span><br><span class="line">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class="line">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="line">$scheme ： HTTP方法（如http，https）。</span><br><span class="line">$server_protocol ： 请求使用的协议，通常是HTTP/<span class="number">1.0</span>或HTTP/<span class="number">1.1</span>。</span><br><span class="line">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name ： 服务器名称。</span><br><span class="line">$server_port ： 请求到达服务器的端口号。</span><br><span class="line">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri ： 与$uri相同。</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">#=====================亚虎大百货测试配置=========================</span><br><span class="line"></span><br><span class="line"># 配置 keepalive_timeout策略：在处理完一个请求后保持这个 tcp 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接</span><br><span class="line">keepalive_timeout  <span class="number">120</span>;</span><br><span class="line">client_header_timeout <span class="number">120</span>s;</span><br><span class="line">client_body_timeout <span class="number">120</span>s;</span><br><span class="line">client_max_body_size <span class="number">100</span>m;</span><br><span class="line"></span><br><span class="line"># 是否开启压缩传输，off表示关闭，on表示开启</span><br><span class="line">gzip on;</span><br><span class="line"># 设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大</span><br><span class="line">gzip_comp_level <span class="number">9</span>;</span><br><span class="line"># 当返回内容大于此值时才会使用gzip进行压缩,以K为单位,当值为<span class="number">0</span>时，所有页面都进行压缩</span><br><span class="line">gzip_min_length <span class="number">100</span>;</span><br><span class="line"># 设置需要压缩的MIME类型,非设置值不进行压缩</span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">gzip_vary off;</span><br><span class="line"></span><br><span class="line"># 定义updtream流		</span><br><span class="line">upstream dapi-test {</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">17979</span>;</span><br><span class="line">}</span><br><span class="line">upstream fapi-test{</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">18000</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">    # 配置nginx监听端口，</span><br><span class="line">    listen  <span class="number">8083</span>; </span><br><span class="line">    # 配置nginx监听地址，当浏览器访问 <span class="number">101.70</span><span class="number">.37</span><span class="number">.56</span>:<span class="number">8083</span> 时，会被nginx拦截捕获并重新转发</span><br><span class="line">    server_name  <span class="number">101.70</span><span class="number">.37</span><span class="number">.56</span>;  </span><br><span class="line"></span><br><span class="line">    charset UTF<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">    # 路径重写：将uri路径重写为 /dbh</span><br><span class="line">    location / {</span><br><span class="line">        rewrite / /dbh; </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    # ^~ /dbh ：只匹配以 /dbh 开头的路径</span><br><span class="line">    # $uri: 获取当前路径中的uri，在这里也就是 /dbh 路径</span><br><span class="line">    # $root： 获取存放当前资源的路径，也就是 /home/yahutest/dbhweb</span><br><span class="line">    # try_files: 当前配置含义：首先执行第一个参数 $uri，查询是否存在 $root/dbh 文件，如果存在则进行转发，如果不存在，则进行第二个参数 $uri/ 的查询，查询是否存在 $root/dbh/ 目录，如果不存在，则将值赋给@router变量，进行下面的转发操作，如果存在，则直接进行转发访问 $root/dbh/index.html 资源</span><br><span class="line">    location ^~ /dbh {</span><br><span class="line">        root   /home/yahutest/dbhweb;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ @router /index.html;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location @router{</span><br><span class="line">        rewrite ^.*$ /index.html last;</span><br><span class="line">    }</span><br><span class="line">    # 匹配静态资源，如果匹配成功，则转发访问 $root/abc.jpg 资源</span><br><span class="line">    location ^~ /abc.jpg {</span><br><span class="line">        root /home/yahutest/dbhweb;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    # 匹配文件服务路径</span><br><span class="line">    location /platform/file/ {</span><br><span class="line">        proxy_connect_timeout   <span class="number">300</span>;</span><br><span class="line">        proxy_send_timeout      <span class="number">600</span>;</span><br><span class="line">        proxy_read_timeout      <span class="number">600</span>;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Scheme  $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        # 重定向到已定义的服务和端口</span><br><span class="line">        proxy_pass http:<span class="comment">//fapi-test/viewOnline/;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location /v/api/ {</span><br><span class="line">        proxy_pass http:<span class="comment">//dapi-test/;</span></span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header  Host  $host;</span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_ignore_headers Set-Cookie;</span><br><span class="line">        proxy_hide_header Set-Cookie;</span><br><span class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    error_page  <span class="number">404</span>              /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line"></span><br><span class="line">    location = /<span class="number">50</span>x.html {</span><br><span class="line">        root   html;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">#==============================================</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置Https"><a href="#配置Https" class="headerlink" title="配置Https"></a>配置Https</h4><blockquote>
<p>具体配置参考文档：<a href="https://blog.csdn.net/duyusean/article/details/79348613">nginx配置支持Https访问</a></p>
</blockquote>
<h2 id="jar启动脚本"><a href="#jar启动脚本" class="headerlink" title="jar启动脚本"></a>jar启动脚本</h2><blockquote>
<p>编写各个jar服务便捷启动的脚本</p>
<p>步骤：</p>
<ul>
<li>在<code>/usr/lib/systemd/system</code>目录下创建<code>xxx.service</code>脚本文件</li>
<li>配置文件信息</li>
<li>注册并执行脚本<ul>
<li>注册：<code>systemctl enable xxx.service</code></li>
<li>执行：<code>systemctl [start、restart、stop] xxx.service</code></li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>坑点：</strong></p>
<ol>
<li>jdk的路径必须按照项目jdk安装目录正确指定</li>
</ol>
</blockquote>
<h3 id="脚本示例-1"><a href="#脚本示例-1" class="headerlink" title="脚本示例"></a>脚本示例</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"><span class="comment"># 服务的简单描述</span></span><br><span class="line">Description=eureka</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># 指定启动单元的命令或者脚本，并配置启动端口号和日志路径</span></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/java/jdk1.8.0_144/bin/java -jar -Dfile.encoding=UTF-8 \</span><br><span class="line">/home/yahutest/jars/platform-eureka-test.jar --server.port=18761 \</span><br><span class="line">--logging.file=/home/yahutest/logs/eureka.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定单元重载时执行的命令或者脚本</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="comment"># 设置服务为执行命令后立即启动</span></span><br><span class="line">Type=simple</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="comment"># 单元被允许运行需要的弱依赖性单元</span></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>
<hr>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 注册脚本</span></span><br><span class="line">systemctl <span class="built_in">enable</span> eureka.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">systemctl start eureka.service</span><br><span class="line">systemctl restart eureka.service</span><br><span class="line">systemctl stop eureka.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：如果更新了脚本文件，需要重新加载以下脚本</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure>
<h3 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h3><blockquote>
<p>一般启动顺序：注册中心和配置中心 —-&gt; 应用服务 —-&gt; 网关服务</p>
</blockquote>
]]></content>
      <categories>
        <category>服务部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot小杂记</title>
    <url>/JAVA/SpringBoot%E5%B0%8F%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h2><h3 id="注解简记"><a href="#注解简记" class="headerlink" title="注解简记"></a>注解简记</h3><h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><ol>
<li><p>@Autowired ： 自动装配bean对象，通过byType方式匹配寻找，把一个bean自动注入到另一个bean中（spring注解）<strong>推荐</strong></p>
</li>
<li><p>@Resource ： 自动装配bean对象，通过byName和byType两种方式（java本身注解）</p>
</li>
<li><p>@Nullable ： 若字段标记了此注解，说明这个字段可以为空，编译不报错</p>
</li>
<li><p>@Qualifier ：通过唯一标识某个字段，对象等元素的对应绑定</p>
</li>
<li><p>@Component：一般放在类上，说明这个类被spring容器进行管理，也就相当于在xml文件中注册了bean</p>
</li>
<li><p>@Repository：跟@Component功能含义一样，一般在Dao层使用</p>
</li>
<li><p>@Service：跟@Component功能含义一样，一般在Service层使用</p>
</li>
<li><p>@Controller：跟@Component功能含义一样，一般在Controller层使用</p>
</li>
<li><p>@Scope：规定bean的作用域，@Scope(“singleton”)—&gt;单例模式  @Scope(“prototype”)—&gt;原型模式 </p>
</li>
<li><p>```xml<br> 只有在applicationContext.xml文件中进行下面的配置，所有的注解才能生效</p>
<pre><code>    &lt;!--开启注解支持--&gt;
&lt;context:annotation-config/&gt;
&lt;!--指定要扫描的包，这个包下的所有注解才会生效--&gt;
&lt;context:component-scan base-package="com.mabin"/&gt;
</code></pre><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">11. @Configuration：代表这是一个配置类，和applicationContext.xml的作用相同</span><br><span class="line"></span><br><span class="line">12. @Bean： 注册一个bean，相当于之前的bean标签</span><br><span class="line"></span><br><span class="line">13. @ComponentScan：包扫描注解，与第10条的xml配置作用相同</span><br><span class="line"></span><br><span class="line">14. @Import：将多个配置类引入到一个主配置类中</span><br><span class="line"></span><br><span class="line">#### AOP</span><br><span class="line"></span><br><span class="line"> 1. @Aspect：代表这个类是一个切面类,注解在类上面</span><br><span class="line"></span><br><span class="line"> 2. @Pointcut：表明这是一个切入点,具体使用方法如下：</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    @Pointcut("execution(* com.example.demo.service.*.*(..))")  //表明这是一个切入点</span><br><span class="line">    public void pc1(){}</span><br></pre></td></tr></tbody></table></figure>
<p>3.@Before,@After,@Around,…等等都是一些切面增强的业务方法，可以自行研究</p>
</li>
</ol>
<h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><ul>
<li>@RequestParam： 提交的域名称和处理方法的参数名不一致时，可以使用此注解进行优化接收参数</li>
<li>@ResponseBody：注解在类或方法上，返回值不会再走视图解析器，而会直接返回一个字符串    <strong>注意：如果页面传入的是json等复杂对象类型，controller层使用pojo类获取值，必须添加注解@ResponseBody，否则pojo类中的各个属性不会获取到值，均为null**</strong></li>
<li>@RestController：相当于@Controller和@ReponseBody的结合体，功能效果叠加</li>
<li>@param:dao层属性参数必须添加此注解，sql语句可以准确的获取到传入的参数值，pojo类实体类对象不需要</li>
<li>@PropertySource(value=”classpath:xxx.properties”):导入自定义的properties配置文件</li>
<li>@ImportSResource(locations = “classpath:xxx-config.xml”):在启动类上面导入自定义的xml配置文件</li>
<li><strong>ResponseEntity&lt;T&gt;：此并非注解，是一个功能强大的响应数据泛型实体类，相当于@Controller+@ResponseBody+@ResponseStatus三个注解加一起的作用</strong></li>
<li><strong>注意：@Controller+@ResponseBody == @RestController+@ResponseStatus 功能相似，场景灵活使用</strong></li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="基本SQL函数"><a href="#基本SQL函数" class="headerlink" title="基本SQL函数"></a>基本SQL函数</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 字符函数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- CONCAT () 拼接字符</span></span><br><span class="line">	<span class="keyword">SELECT</span> CONCAT(<span class="string">'hello,'</span>,`username`) <span class="keyword">FROM</span> admin;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- LENGTH () 获取字节长度（数据库中1个汉字表示3个字节长度）</span></span><br><span class="line">	<span class="keyword">SELECT</span> LENGTH (`username`) <span class="keyword">FROM</span> admin <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">SELECT</span> LENGTH (<span class="string">'yes,木子'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- CHAR_LENGTH () 获取字符个数 （数据库中无论中英文，一个字符表示一个长度）</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span> (`username`) <span class="keyword">FROM</span> admin <span class="keyword">WHERE</span> `id`<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span> (<span class="string">'yes,木子'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- SUBSTR () 截取字串 (这个版本竟然没有这个函数)</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	  注意：起始索引从1开始</span></span><br><span class="line"><span class="comment">	  substr(string,起始索引,截取的字符长度)</span></span><br><span class="line"><span class="comment">	  substr(string,起始索引)  这个默认从起始索引到最后</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">SELECT</span> SUBSTR (<span class="string">'我是你爸爸'</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- substring_index（“待截取有用部分的字符串”，“截取数据依据的字符”，截取字符的位置N）</span></span><br><span class="line">	<span class="comment">-- N若为正数：代表从左往右数，第N个分隔符之前的字符串</span></span><br><span class="line">	<span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">'1,2,3,4,5,6'</span>,<span class="string">','</span>,<span class="number">3</span>) <span class="keyword">AS</span> `string` <span class="comment">-- 结果：1,2,3</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- N若为负数：代表从右往左数，第N个分隔符之后的字符串</span></span><br><span class="line">	<span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">'1,2,3,4,5,6'</span>,<span class="string">','</span>,<span class="number">-3</span>) <span class="keyword">AS</span> `string` <span class="comment">-- 结果：4,5,6</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- FIND_IN_SET(要查询字符串，字段名：必须是以英文逗号分割的字符串)</span></span><br><span class="line">	<span class="comment">-- 返回结果：若存在则返回记录，否则返回null</span></span><br><span class="line">	<span class="comment">-- 相较于like：模糊匹配，find_in_set:属于精确匹配，类似于in函数的效果</span></span><br><span class="line">	<span class="keyword">SELECT</span> blog_id,blog_title <span class="keyword">FROM</span> tb_blog <span class="keyword">WHERE</span> FIND_IN_SET(<span class="string">'2'</span>,tag_ids) <span class="keyword">AND</span> deleted<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- INSTR ()获取字符第一次出现的索引</span></span><br><span class="line">	<span class="keyword">SELECT</span> INSTR (<span class="string">'三打白骨精你妹妹的白骨精妹妹的白骨精'</span>,<span class="string">'白骨精'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- TRIM ()去前后指定的字符（默认去空格） 这个函数竟然也不存在</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">TRIM</span> (<span class="string">'   木  子  '</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">TRIM</span> (<span class="string">'X'</span> <span class="keyword">FROM</span> <span class="string">'xxxxx木xxx子xxxxxxxxxxxx'</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- LPAD()/RPAD() 左填充/右填充</span></span><br><span class="line">	<span class="keyword">SELECT</span> LPAD (<span class="string">'木子'</span>,<span class="number">10</span>,<span class="string">'a'</span>);</span><br><span class="line">	<span class="keyword">SELECT</span> RPAD (<span class="string">'木子'</span>,<span class="number">10</span>,<span class="string">'a'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- UPPER()/LOWER() 变大写/变小写</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">UPPER</span> (`username`) <span class="keyword">FROM</span> admin;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">LOWER</span> (`username`) <span class="keyword">FROM</span> admin;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- STRCMP () 比较两个字符大小</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	   跟java类似，比较字母的ASCLL码，大于返回1，小于返回-1</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">SELECT</span> STRCMP (`username`,<span class="string">'ke'</span>) <span class="keyword">FROM</span> admin <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- LEFT()/RIGHT() 从字串的左边或者右边进行截取指定长度的字串</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">LEFT</span> (<span class="string">'鸠摩智'</span>,<span class="number">1</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">RIGHT</span> (<span class="string">'鸠摩智'</span>,<span class="number">1</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 数学函数</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- ABS() 获取绝对值</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">ABS</span> (<span class="number">-2</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- CEIL(向上取整（返回 &gt;=该参数的最小整数）) </span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">3.09</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- FLOOR (向下取整（返回 &lt;=该参数的最大整数）)</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">FLOOR</span> (<span class="number">3.09</span>) <span class="keyword">AS</span> a;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- ROUND() 四舍五入（可以规定取小数点后几位）</span></span><br><span class="line">	<span class="keyword">SELECT</span> ROUND (<span class="number">1.56897</span>);</span><br><span class="line">	<span class="keyword">SELECT</span> ROUND (<span class="number">1.56897</span>,<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- TRUNCATE() 截断（也就是保留小数点后面几位，其余的全部截掉）</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.56897</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.56897</span>,<span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- MOD() 取余（被除数的正负决定了余数的正负）</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">-10</span>,<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="number">-10</span><span class="operator">%</span><span class="number">3</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 日期函数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- NOW() 获取当前时间（包括日期和时间）</span></span><br><span class="line">	<span class="keyword">SELECT</span> NOW();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- CURDATE() 获取当前时间（只有日期）</span></span><br><span class="line">	<span class="keyword">SELECT</span> CURDATE();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- CURTIME() 获取当前时间（只有时间）</span></span><br><span class="line">	<span class="keyword">SELECT</span> CURTIME();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- DATEDIFF() 获取连个日期之差</span></span><br><span class="line">	<span class="keyword">SELECT</span> DATEDIFF(CURDATE(),<span class="string">'1998-8-16'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- DATE_FORMAT() 格式化日期（或者也可以用来进行日期数字的截取）</span></span><br><span class="line">	<span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(),<span class="string">'%Y'</span>);</span><br><span class="line">	<span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(),<span class="string">'%Y年%m月%d日 %H时%i分%s秒'</span>);</span><br><span class="line">	<span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(),<span class="string">'%Y%m%d %T'</span>); <span class="comment">-- 输出格式为：yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- STR_TO_DATE() 按指定格式解析字符串为格式化日志（1998-03-15）</span></span><br><span class="line">	<span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">'3/15 1998'</span>,<span class="string">'%m/%d %Y'</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 流程控制函数</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- IF函数（类似于Java中的三元运算符）</span></span><br><span class="line">	<span class="keyword">SELECT</span> IF(<span class="number">100</span><span class="operator">&gt;</span><span class="number">99</span>,<span class="string">'yes'</span>,<span class="string">'no'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- CASE函数（1.类似于Java中的switch表达式）</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	  案例：</span></span><br><span class="line"><span class="comment">	      显示：部门编号，旧工资，新工资</span></span><br><span class="line"><span class="comment">	      </span></span><br><span class="line"><span class="comment">	      部门编号是30，工资显示为2倍</span></span><br><span class="line"><span class="comment">	      部门编号是50，工资显示为3倍</span></span><br><span class="line"><span class="comment">	      部门编号是60，工资显示为4倍</span></span><br><span class="line"><span class="comment">	      否则不变</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">SELECT</span> `department_id`,`salary`,</span><br><span class="line">	<span class="keyword">CASE</span> `department_id`</span><br><span class="line">	    <span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> `salary`<span class="operator">*</span><span class="number">2</span></span><br><span class="line">	    <span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> `salary`<span class="operator">*</span><span class="number">3</span></span><br><span class="line">	    <span class="keyword">WHEN</span> <span class="number">60</span> <span class="keyword">THEN</span> `salary`<span class="operator">*</span><span class="number">4</span></span><br><span class="line">            <span class="keyword">ELSE</span> `salary`</span><br><span class="line">	    <span class="keyword">END</span> </span><br><span class="line">	<span class="keyword">AS</span> `newSalary`</span><br><span class="line">	<span class="keyword">FROM</span> employees;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- CASE函数（2.类似于Java中的多重if语句，实现区间判断）</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	  案例：</span></span><br><span class="line"><span class="comment">	      如果工资&gt;20000,显示级别为A；</span></span><br><span class="line"><span class="comment">	      工资&gt;15000,显示级别为B；</span></span><br><span class="line"><span class="comment">	      工资&gt;10000,显示级别为C；</span></span><br><span class="line"><span class="comment">	      否则，显示级别为D；</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">SELECT</span> `salary`,</span><br><span class="line">	<span class="keyword">CASE</span></span><br><span class="line">	    <span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">'A'</span></span><br><span class="line">	    <span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">'B'</span></span><br><span class="line">	    <span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">'C'</span></span><br><span class="line">	    <span class="keyword">ELSE</span> <span class="string">'D'</span></span><br><span class="line">	    <span class="keyword">END</span> </span><br><span class="line">	<span class="keyword">AS</span> `grade`</span><br><span class="line">	<span class="keyword">FROM</span> employees;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="基本聚合函数"><a href="#基本聚合函数" class="headerlink" title="基本聚合函数"></a>基本聚合函数</h3><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 聚合（分组）函数与分组查询</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 聚合函数清单</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	  sun(字段名)：求和</span></span><br><span class="line"><span class="comment">	  avg(字段名):求平均数</span></span><br><span class="line"><span class="comment">	  max(字段名):求最大值</span></span><br><span class="line"><span class="comment">	  min(字段名):求最小值</span></span><br><span class="line"><span class="comment">	  count(字段名):计算非空字段个数</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 分组查询案例学习</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 案例：显示每个部门员工的平均工资(截取两位小数点)</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="built_in">AVG</span>(`salary`),<span class="number">2</span>) <span class="keyword">AS</span> `avgSalary`,`department_id` </span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> `department_id`;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 案例：显示每个工作种类的平均工资(截取两位小数点)</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="built_in">AVG</span>(`salary`),<span class="number">2</span>) <span class="keyword">AS</span> `avgSalary`,`job_id`</span><br><span class="line">	<span class="keyword">FROM</span> employees</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> `job_id`;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 案例：查询每个部门的员工个数&gt;5;（分组后筛选使用关键字（HAVING）在 group by 后面进行书写）</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> 员工个数,`department_id`</span><br><span class="line">	<span class="keyword">FROM</span> employees	</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> `department_id`</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">5</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 外连接查询（左连接/右连接）</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	  select 查询列表</span></span><br><span class="line"><span class="comment">	  from 表1 别名</span></span><br><span class="line"><span class="comment">	  left|right [outer] join 表2 别名</span></span><br><span class="line"><span class="comment">	  on 连接条件</span></span><br><span class="line"><span class="comment">	  [where 筛选条件]</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">SELECT</span> be.id,be.name,bo.boyName</span><br><span class="line">	<span class="keyword">FROM</span> beauty be </span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> be.`boyfriend_id`<span class="operator">=</span>bo.`id`</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- LIMIT(index1，index2) 限制查询的条目数，index1默认为0</span></span><br><span class="line">	<span class="keyword">SELECT</span> be.id,be.name,bo.boyName</span><br><span class="line">	<span class="keyword">FROM</span> beauty be </span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> be.`boyfriend_id`<span class="operator">=</span>bo.`id`</span><br><span class="line">	LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 联合查询（表之间没有联系，而且查询结果：自动去重）</span></span><br><span class="line">	<span class="comment">-- UNION() 直接在两个查询语句之间写关键词union即可，一般很少用到 </span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="力扣Mysql"><a href="#力扣Mysql" class="headerlink" title="力扣Mysql"></a>力扣Mysql</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-- limit语句的具体含义</span><br><span class="line">	limit y 分句表示: 读取 y 条数据</span><br><span class="line">limit x, y 分句表示: 跳过 x 条数据，读取 y 条数据</span><br><span class="line">limit y offset x 分句表示: 跳过 x 条数据，读取 y 条数据</span><br><span class="line"></span><br><span class="line">-- ifnull(expression,param)</span><br><span class="line">	-- IFNULL() 函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值(param)，如果不为 NULL 则返回第一个参数的值。</span><br><span class="line">	</span><br><span class="line">-- group_concat(属性值，[order by 属性值]，'分隔符'):用于将group by后每组中相同属性的值连接起来</span><br><span class="line"></span><br><span class="line">-- if(boolean,value1,value2):如果boolean=true,则值为value1，否则值为value2</span><br><span class="line"></span><br><span class="line">-- case...when...then...else...end:相当于if-else函数</span><br><span class="line">	-- 简单函数用法：CASE [column_name] WHEN [value1] THEN [result1]... ELSE [default] END</span><br><span class="line">	-- 搜索函数用法：CASE WHEN [expr] THEN [result1]... ELSE [default] END</span><br><span class="line">	-- 注意：case 只返回第一个符合条件的值，剩下的 case 部分会被忽略</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>力扣经典sql</p>
<p>1.经典排名问题（mysql 5.7写法），mysql 8.0版本中有提供dense_rank()等函数进行调用（自行百度）</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213634.png" alt="image-20201011183626456"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213639.png" alt="经典排名问题"></p>
<h3 id="MySQL索引优化"><a href="#MySQL索引优化" class="headerlink" title="MySQL索引优化"></a>MySQL索引优化</h3><blockquote>
<p>基本口诀：</p>
<p><strong>全值匹配我最爱，最左前缀要遵守；</strong></p>
<p><strong>带头大哥不能死，中间兄弟不能断；</strong></p>
<p><strong>索引列上少计算，范围之后全失效；</strong></p>
<p><strong>Like百分写最右，覆盖索引不写星；</strong></p>
<p><strong>不等非空还有or，索引失效要少用；</strong></p>
<p><strong>VAR引号不可丢，SQL高级也不难！</strong></p>
</blockquote>
<h3 id="触发器和存储过程"><a href="#触发器和存储过程" class="headerlink" title="触发器和存储过程"></a>触发器和存储过程</h3><blockquote>
<p>基于horse_vue_blog.tb_blog表演示实例</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建无参存储过程(procedure)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> selectBlogList()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_blog <span class="keyword">WHERE</span> is_deleted <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">-- 调用存储过程(call 名称)</span></span><br><span class="line"><span class="keyword">CALL</span> selectBlogList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建有参存储过程(单参数)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> selectBlog02(<span class="keyword">IN</span> views <span class="type">BIGINT</span> UNSIGNED, flag <span class="type">CHAR</span>(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_blog tb <span class="keyword">WHERE</span> tb.flag <span class="operator">=</span> flag <span class="keyword">AND</span> tb.views <span class="operator">&gt;</span> views <span class="keyword">AND</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> selectBlog02(<span class="number">40</span>, <span class="string">'原创'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建有返回值和有参存储过程</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> selectBlog03(<span class="keyword">IN</span> views <span class="type">BIGINT</span> UNSIGNED, flag <span class="type">CHAR</span>(<span class="number">5</span>), <span class="keyword">OUT</span> blogCount <span class="type">INTEGER</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> recommend TINYINT UNSIGNED <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span>; <span class="comment">-- 声明一个变量</span></span><br><span class="line">    <span class="keyword">SET</span> recommend <span class="operator">=</span> <span class="literal">TRUE</span>; <span class="comment">-- 变量赋值(这两句的功能相当于set @recommend=true )</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@share</span> <span class="operator">=</span> <span class="literal">TRUE</span>; <span class="comment">-- set @变量名=值 (可以设置变量的值)</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">INTO</span> blogCount</span><br><span class="line">    <span class="keyword">FROM</span> tb_blog tb</span><br><span class="line">    <span class="keyword">WHERE</span> tb.flag <span class="operator">=</span> flag</span><br><span class="line">      <span class="keyword">AND</span> tb.views <span class="operator">&gt;</span> views</span><br><span class="line">      <span class="keyword">AND</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">      <span class="keyword">AND</span> tb.is_recommend <span class="operator">=</span> recommend</span><br><span class="line">      <span class="keyword">AND</span> tb.is_share <span class="operator">=</span> <span class="variable">@share</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> blogCount, recommend, <span class="variable">@share</span>; <span class="comment">-- select @变量名 (查询输出结果变量名的值)</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出的变量名必须以 @ 符合开头 (但必须是变量，不能是常量)</span></span><br><span class="line"><span class="keyword">CALL</span> selectBlog03(<span class="number">35</span>, <span class="string">'原创'</span>, <span class="variable">@count</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 动态传入表名(可以进行一些复杂存储过程的编写)</span></span><br><span class="line"><span class="comment">-- 使用CONCAT进行sql的拼接，拼接处必须留有空格，比如 concat('insert into ')，不然拼接无法识别参数</span></span><br><span class="line"><span class="comment">-- prepare: 预处理, execute: 执行, deallocate prepare: 释放资源</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> selectBlog04(<span class="keyword">IN</span> tableName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="variable">@selectTable</span> <span class="operator">=</span> concat(<span class="string">'select * from horse_vue_blog.tb_'</span>, tableName, <span class="string">' tb where tb.is_deleted=1'</span>);</span><br><span class="line">    <span class="keyword">PREPARE</span> tableInfo <span class="keyword">FROM</span> <span class="variable">@selectTable</span>;</span><br><span class="line">    <span class="keyword">EXECUTE</span> tableInfo;</span><br><span class="line">    <span class="keyword">DEALLOCATE</span> <span class="keyword">PREPARE</span> tableInfo;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> selectBlog04(<span class="string">'blog'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看存储过程的创建语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> selectBlog02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> selectBlogList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 区别: 函数与存储过程最大的区别是函数必须有返回值，否则会报错</span></span><br><span class="line"><span class="comment">-- mysql的函数</span></span><br><span class="line"></span><br><span class="line">#     <span class="number">1.</span>创建函数使用<span class="keyword">create</span> <span class="keyword">FUNCTION</span> 函数名(参数) <span class="keyword">RETURNS</span> 返回类型；</span><br><span class="line">#     <span class="number">2.</span>函数体放在<span class="keyword">begin</span>和<span class="keyword">end</span>之间；</span><br><span class="line">#     <span class="number">3.</span><span class="keyword">returns</span>指定函数的返回值；</span><br><span class="line">#     <span class="number">4.</span>函数调用使用 <span class="keyword">select</span> 函数名([参数]);</span><br><span class="line"><span class="comment">-- 根据id查询对应title</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getBlogTitle(blogId <span class="type">CHAR</span>(<span class="number">30</span>)) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">    <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> blogTitle <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> tb.title <span class="keyword">INTO</span> blogTitle <span class="keyword">FROM</span> tb_blog tb <span class="keyword">WHERE</span> tb.id <span class="operator">=</span> blogId <span class="keyword">AND</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">RETURN</span> blogTitle;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="keyword">SELECT</span> getBlogTitle(<span class="string">'1303461445253976089'</span>) <span class="keyword">AS</span> title;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 触发器调用存储过程(未完待续...)</span></span><br></pre></td></tr></tbody></table></figure>
<p>复杂SQL</p>
<blockquote>
<p>平常练习的sql业务逻辑，生活随笔</p>
</blockquote>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 复杂sql练习</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询最近7天数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_category tc</span><br><span class="line"><span class="keyword">WHERE</span> <span class="type">date</span>(tc.gmt_create) <span class="operator">&gt;=</span> date_sub(<span class="built_in">current_date</span>, <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>)</span><br><span class="line">  <span class="keyword">AND</span> is_deleted <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询本周数据</span></span><br><span class="line"><span class="comment">-- yearweek(date,model)函数:获取指定日期的年份和该日期所在的周数(第几周)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> tb_category tc</span><br><span class="line"><span class="keyword">WHERE</span> yearweek(tc.gmt_create, <span class="number">1</span>) <span class="operator">=</span> yearweek(now(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除分类名称重复(name)的数据,只保留id最小的那条(表不要用别名,例如 tb_category tc)</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> tb_category</span><br><span class="line"><span class="keyword">WHERE</span> is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">AND</span> name <span class="keyword">IN</span> (<span class="keyword">SELECT</span> nameList</span><br><span class="line">               <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> name <span class="keyword">AS</span> nameList</span><br><span class="line">                     <span class="keyword">FROM</span> tb_category</span><br><span class="line">                     <span class="keyword">WHERE</span> is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                     <span class="keyword">GROUP</span> <span class="keyword">BY</span> name</span><br><span class="line">                     <span class="keyword">HAVING</span> <span class="built_in">count</span>(name) <span class="operator">&gt;</span> <span class="number">1</span>) name_sheet) <span class="comment">-- 名称重复的那些数据</span></span><br><span class="line">  <span class="keyword">AND</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> idList</span><br><span class="line">                 <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">min</span>(id) <span class="keyword">AS</span> idList</span><br><span class="line">                       <span class="keyword">FROM</span> tb_category</span><br><span class="line">                       <span class="keyword">WHERE</span> is_deleted <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">                       <span class="keyword">GROUP</span> <span class="keyword">BY</span> name</span><br><span class="line">                       <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(name) <span class="operator">&gt;</span> <span class="number">1</span>) id_sheet); <span class="comment">-- 名称重复并且id最小的那些数据</span></span><br><span class="line">                       </span><br><span class="line">                 </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="SpringIOC"><a href="#SpringIOC" class="headerlink" title="SpringIOC"></a>SpringIOC</h2><h4 id="1-使用无参构造方法创建对象，（默认方式）"><a href="#1-使用无参构造方法创建对象，（默认方式）" class="headerlink" title="1.使用无参构造方法创建对象，（默认方式）"></a>1.使用无参构造方法创建对象，（默认方式）</h4><h4 id="2-使用有参构造方式创建对象"><a href="#2-使用有参构造方式创建对象" class="headerlink" title="2.使用有参构造方式创建对象"></a>2.使用有参构造方式创建对象</h4><p>​    2.1 参数索引（不建议使用）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"小妮子..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>​    2.2 参数类型 (不建议使用)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"木子..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>​    2.3 参数名构建（建议使用）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"木子..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>​        <strong>总结：只要在容器中注册了bean，那么在bean配置文件加载的时候，容器中管理的对象就都已经被实例化了（已经new了一个对象出来，不管你是否使用它）</strong></p>
<h3 id="2-spring基本配置"><a href="#2-spring基本配置" class="headerlink" title="2.spring基本配置"></a>2.spring基本配置</h3><h4 id="2-1-alias（别名）"><a href="#2-1-alias（别名）" class="headerlink" title="2.1 alias（别名）"></a>2.1 alias（别名）</h4><p>不推荐使用</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果设置了别名，也可以使用别名来从容其中获取这个对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"aliasUser"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2-Bean的基本配置"><a href="#2-2-Bean的基本配置" class="headerlink" title="2.2 Bean的基本配置"></a>2.2 Bean的基本配置</h4><p>推荐使用</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--id:bean的唯一标识符，相当于对象名 User user</span></span><br><span class="line"><span class="comment">    class:对象所对应的全限定名，相当于new的对象 new User();</span></span><br><span class="line"><span class="comment">    name:也是设置别名，可以同时取对多个别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.User"</span> <span class="attr">name</span>=<span class="string">"user2,user3,user4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"木子..."</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3-Import"><a href="#2-3-Import" class="headerlink" title="2.3 Import"></a>2.3 Import</h4><p>​    一般用于团队合作，可以将多个xml文件合并成一个。</p>
<h3 id="3-依赖注入（DI）"><a href="#3-依赖注入（DI）" class="headerlink" title="3.依赖注入（DI）"></a>3.依赖注入（DI）</h3><p>就是向spring容器注入<strong>实体类对象</strong>和<strong>实体类中的各种属性的值</strong></p>
<h4 id="3-1构造器注入"><a href="#3-1构造器注入" class="headerlink" title="3.1构造器注入"></a>3.1构造器注入</h4><p>​    上面的有参/无参创建对象就是这个</p>
<h4 id="3-2-set注入"><a href="#3-2-set注入" class="headerlink" title="3.2 set注入"></a>3.2 set注入</h4><ul>
<li><strong>依赖</strong>含义：bean对象的创建依赖于容器</li>
<li><strong>注入</strong>含义：bena对象中的所有属性，由容器来注入</li>
</ul>
<p>各种类型注入形式：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"杭州"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"木子"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bean注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--List集合注入和set集合注入相似--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>造纸术<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>指南针<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>印刷术<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>火药<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--map集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"信用卡"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"借记卡"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"three"</span> <span class="attr">value</span>=<span class="string">"储蓄卡"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"学号"</span>&gt;</span>1701110186<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"年龄"</span>&gt;</span>23<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>注入结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Student{name=<span class="string">'木子'</span>, </span><br><span class="line">        address=Address{address=<span class="string">'杭州'</span>}, </span><br><span class="line">        books=[水浒传, 西游记, 三国演义, 红楼梦], </span><br><span class="line">        hobbys=[造纸术, 指南针, 印刷术, 火药], </span><br><span class="line">        card={one=信用卡, two=借记卡, three=储蓄卡}, </span><br><span class="line">        games=<span class="keyword">null</span>, (set未进行注入演示)</span><br><span class="line">        info={学号=<span class="number">1701110186</span>, 年龄=<span class="number">23</span>}}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-3-其他方式注入（了解即可）"><a href="#3-3-其他方式注入（了解即可）" class="headerlink" title="3.3 其他方式注入（了解即可）"></a>3.3 其他方式注入（了解即可）</h4><p>p命名空间注入（相当于set注入可以直接注入属性（property）的值）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:p="http://www.springframework.org/schema/p" //必须引入约束</span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--p命名空间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.User"</span> <span class="attr">p:username</span>（<span class="attr">set</span>方法中的<span class="attr">username</span>）=<span class="string">"马滨"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>c命名空间注入（相当于通过构造器注入）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"> xmlns:c="http://www.springframework.org/schema/c"  //必须引入约束</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.User"</span> <span class="attr">c:username</span>（有参构造器中的参数<span class="attr">username</span>）=<span class="string">"马滨"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-Bean作用域"><a href="#4-Bean作用域" class="headerlink" title="4.Bean作用域"></a>4.Bean作用域</h3><p>singleton(单例模式)：每次从容器中get不同id，而实体类相同的对象时，都是同一个对象；（spring默认机制）</p>
<p>prototype(原型模式)：每次从容器中get不同id，而实体类相同的对象时，都会重新产生一个新对象；</p>
<p>request：请求实现，立即消失；</p>
<p>session：请求实现，保持生命一段时间；</p>
<p>application：请求实现，一致保持生命；</p>
<h3 id="5-Autowired注解实现自动装配（推荐使用）"><a href="#5-Autowired注解实现自动装配（推荐使用）" class="headerlink" title="5.@Autowired注解实现自动装配（推荐使用）"></a>5.@Autowired注解实现自动装配（推荐使用）</h3><p>spring从2.5开始支持注解</p>
<p>使用注解须知：</p>
<p>1.导入约束(<strong>context</strong>)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context.xsd</span><br></pre></td></tr></tbody></table></figure>
<p>2.配置：开启注解支持</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>3.基本使用</p>
<p>构建Address，Student实体类</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address333"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.Address"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address111"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"杭州"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address222"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"湖州"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.mabin.pojo.Student"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = "address111")</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>结果：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Student(address=Address(address=杭州))</span><br></pre></td></tr></tbody></table></figure>
<p><strong>总结：如果@Autowired自动装配的环境比较复杂时，自动装配方式无法识别到 自己想要的bean对象，无法只使用一个注解完成自动装配的时候，我们可以配合使用@Qualifier(value = “xxx”) 去指定一个唯一的bean进行注入</strong></p>
<h4 id="5-1-精华总结"><a href="#5-1-精华总结" class="headerlink" title="5.1 精华总结"></a>5.1 精华总结</h4><h5 id="5-1-2-两种自动装配的原理方式"><a href="#5-1-2-两种自动装配的原理方式" class="headerlink" title="5.1.2 两种自动装配的原理方式"></a>5.1.2 两种自动装配的原理方式</h5><p><strong>byName</strong>（根据唯一标识id，进行自动装配，id名必须和对象名现同，否则无法自动装配）</p>
<p><strong>byType</strong>（根据xml文件中所有的bean对象只有一个唯一的路径名进行自动装配，若有多个，则这种方式会失效）</p>
<p><strong>@Autowired</strong>:使用byType方式自动装配（spring中的注解）<strong>常用</strong></p>
<p><strong>@Resource</strong>：也是自动装配的注解，通过byName和byType两种方式自动装配（java本身的注解）</p>
<h3 id="使用javaConfig的配置类实现spring自动装配"><a href="#使用javaConfig的配置类实现spring自动装配" class="headerlink" title="使用javaConfig的配置类实现spring自动装配"></a>使用javaConfig的配置类实现spring自动装配</h3><p>springboot中这种配置类随处可见</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//代表这是一个配置类，和applicationContext.xml的作用相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStudentConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//注册一个bean，相当于之前的bean标签，</span></span><br><span class="line">			 方法名:相当于bean标签中的id属性，</span><br><span class="line">       		 方法的返回值:相当于bean标签中的<span class="class"><span class="keyword">class</span>属性</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Address</span> <span class="title">getAddress</span>() </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Address();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(<span class="meta">@Qualifier("getAddress")</span> Address address)</span> </span>{</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setAddress(address);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="SpringAOP"><a href="#SpringAOP" class="headerlink" title="SpringAOP"></a>SpringAOP</h2><p><strong>目标原理：在不影响业务逻辑的情况下，对业务逻辑实现动态增强</strong></p>
<h3 id="6-静态代理（aop原理）"><a href="#6-静态代理（aop原理）" class="headerlink" title="6.静态代理（aop原理）"></a>6.静态代理（aop原理）</h3><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><p>1.抽象角色（一般用接口实现，真是角色的操作（房东出租房屋））</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>2.真是角色（房东）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"房东要出租房子..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>3.代理角色（中介）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//房屋中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行房东角色的代理操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>{</span><br><span class="line">        test1();</span><br><span class="line">        host.rent();</span><br><span class="line">        test2();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"中介带你看房子"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"首中介费"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>4.客户端访问代理角色（我要租房）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//房屋中介代理房东</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">        <span class="comment">//与中介商议租房事宜</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>代理模式的优点：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共业务</li>
<li>公共部分业务交给代理角色，实现了业务的分工</li>
<li>公共业务发生扩展时，方便集中管理</li>
</ul>
<h3 id="7-动态代理（aop原理）"><a href="#7-动态代理（aop原理）" class="headerlink" title="7.动态代理（aop原理）"></a>7.动态代理（aop原理）</h3><p>动态生成代理对象（调用处理程序实现）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">这个代码可以作为工具类使用</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandlere</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*被代理的接口*/</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*动态生成代理类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*处理代理实例*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        Proxy result = (Proxy) method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>客户端使用</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//房屋中介代理房东(代理角色,现在没有，通过调用处理程序动态获取)</span></span><br><span class="line">        ProxyInvocationHandlereTest proxyInvocationHandlereTest = <span class="keyword">new</span> ProxyInvocationHandlereTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过处理程序来处理我们的真实对象（被代理对象）</span></span><br><span class="line">        proxyInvocationHandlereTest.setRent(host);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理角色对象（动态生成）</span></span><br><span class="line">        Rent proxy = (Rent) proxyInvocationHandlereTest.getProxy();</span><br><span class="line">        <span class="comment">//代理对象实现业务操作</span></span><br><span class="line">        proxy.rent();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="8-aop具体配置（引入aop约束）"><a href="#8-aop具体配置（引入aop约束）" class="headerlink" title="8.aop具体配置（引入aop约束）"></a>8.aop具体配置（引入aop约束）</h3><h4 id="8-1-使用原生spring-API接口"><a href="#8-1-使用原生spring-API接口" class="headerlink" title="8.1 使用原生spring-API接口"></a>8.1 使用原生spring-API接口</h4><p>前提：编写两个继承spring-API原生接口的实现类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeLog</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span></span>{}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span></span>{}    </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring - aop配置(方式一：使用原生Spring-API接口)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置：切入点表达式：execution()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.horse.service.impl.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--执行环绕业务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"beforeLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-2-自定切面类方式"><a href="#8-2-自定切面类方式" class="headerlink" title="8.2 自定切面类方式"></a>8.2 自定切面类方式</h4><p>前提：编写一个切面类diyAspect</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diyAspect"</span> <span class="attr">class</span>=<span class="string">"com.horse.diy.diyAspect"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面，ref="引入自定义的切面类"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diyAspect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.horse.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-3注解实现aop"><a href="#8-3注解实现aop" class="headerlink" title="8.3注解实现aop"></a>8.3注解实现aop</h4><p>前提：编写一个注解实现的切面类并进行bean注册，开启aop注解支持（重点理解注解含义）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//代表这个类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectAnnotation</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut("execution(* com.example.demo.service.*.*(..))")</span>  <span class="comment">//表明这是一个切入点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc1</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知的方式有很多种，具体使用再研究</span></span><br><span class="line">    <span class="meta">@Before(value = "pc1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"=====方法执行前===="</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@After(value = "pc1()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"=====方法执行后===="</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启aop操作的注解支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>拓展：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span> 注解：表明这是一个切入点。</span><br><span class="line">execution 中的第一个 * 表示方法返回任意值</span><br><span class="line">第二个 * 表示 service 包下的任意类</span><br><span class="line">第三个 * 表示类中的任意方法，括号中的两个点表示方法参数任意，即这里描述的切入点为 service 包下所有类中的所有方法。</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-4-Horse-Blog实例演示注解式AOP-最简单的演示"><a href="#8-4-Horse-Blog实例演示注解式AOP-最简单的演示" class="headerlink" title="8.4 Horse Blog实例演示注解式AOP(最简单的演示)"></a>8.4 Horse Blog实例演示注解式AOP(最简单的演示)</h4><p>引入场景启动器</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>编写自定义注解</p>
<blockquote>
<p>也可以使用切入点表达式对service层进行全部方法的切入，但是不够注解切入灵活</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Target(METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogSection {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户操作</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>编写具体切入类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/8 9:08</span></span><br><span class="line"><span class="comment"> * aop切面类:获取系统后台管理操作的日志信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemOperationLog</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCALHOST = <span class="string">"0:0:0:0:0:0:0:1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义：在有自定义注解的controller层接口处切入aop代码操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.horse.blog.annotation.LogSection)")</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logPointcut</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知：保存操作日志,具体什么类型的通知，具体再确定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After("logPointcut()")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logSave</span><span class="params">(JoinPoint joinPoint)</span> </span>{</span><br><span class="line"></span><br><span class="line">        SystemLog log = <span class="keyword">new</span> SystemLog();</span><br><span class="line">        <span class="comment">//获取操作方法</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        log.setMethod(method.getName());</span><br><span class="line">        <span class="comment">//获取用户操作</span></span><br><span class="line">        LogSection operation = method.getAnnotation(LogSection.class);</span><br><span class="line">        <span class="keyword">if</span> (operation != <span class="keyword">null</span>) {</span><br><span class="line">            String value = operation.value();</span><br><span class="line">            log.setOperation(value);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//获取ip</span></span><br><span class="line">        ServletRequestAttributes sra = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = sra.getRequest();</span><br><span class="line">        String ip = request.getRemoteAddr();</span><br><span class="line">        System.out.println(ip);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equals(LOCALHOST, ip)) {</span><br><span class="line">            ip = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        }</span><br><span class="line">        log.setAccessIp(ip);</span><br><span class="line">        <span class="comment">//获取用户昵称</span></span><br><span class="line">        User currentUser = (User) request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentUser != <span class="keyword">null</span>) {</span><br><span class="line">            log.setNickname(currentUser.getNickname());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//保存到数据库</span></span><br><span class="line">        logService.save(log);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>具体保存到数据库的操作，执行操作，此处省略…</p>
<h3 id="9-Spring中声明式事务管理"><a href="#9-Spring中声明式事务管理" class="headerlink" title="9.Spring中声明式事务管理"></a>9.Spring中声明式事务管理</h3><p>why?</p>
<p>如果没有设置事务，可能会出现事务提交不一致的情况（存钱/取钱）</p>
<p>原理：利用aop把配置的事务织入到业务层（service）的方法上</p>
<p>在xml文件中大部分是固定的配置。</p>
<p>前提：导入约束</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xmlns:tx="http://www.springframework.org/schema/tx"</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xs</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置spring框架声明式事务管理--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--1.配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>  //dataSource：是已经配置的数据源</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给那些方法配置事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3.配置AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--建立通知和切入点表达式之间的联系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.maven.ssm.services.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="1-web-xml文件的基本配置和相应的作用"><a href="#1-web-xml文件的基本配置和相应的作用" class="headerlink" title="1.web.xml文件的基本配置和相应的作用"></a>1.web.xml文件的基本配置和相应的作用</h3><p><strong>DispatcherServlet</strong>:前端控制器（web.xml）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		配置DispatcherServlet:(用于接收请求并进行拦截请求，调用处理器映射器，处理器适配器进行解析操作，并寻找相应的controller,执行业务逻辑，获取ModelAndView，之后再次调用视图解析器(springmvc.xml中配置的)进行ModelAndView的解析，之后视图解析器将解析后的逻辑视图名传回前端控制器，前端控制器根据具体的视图名调用相应的jsp页面，进行数据的显示。)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--初始化参数：配置加载spring-mvc.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置：启动tomcat服务器，就立即创建该servlet（固定配置）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>ViewResolver</strong>：视图解析器(spring-mvc.xml)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置视图解析器对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceView"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSP文件所在的目录(根据目录进行具体配置) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文件后缀名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-spring-mvc的执行原理图（只有虚线部分需要我们去做）"><a href="#2-spring-mvc的执行原理图（只有虚线部分需要我们去做）" class="headerlink" title="2.spring-mvc的执行原理图（只有虚线部分需要我们去做）"></a>2.spring-mvc的执行原理图（只有虚线部分需要我们去做）<img src="../AppData/Roaming/Typora/typora-user-images/image-20200305131753815.png" alt="image-20200305131753815"></h3><h4 id="2-1文字原理解析"><a href="#2-1文字原理解析" class="headerlink" title="2.1文字原理解析"></a>2.1文字原理解析</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span> DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</span><br><span class="line">   - 我们假设请求的url为 : [http:<span class="comment">//localhost](http://localhost/):8080/SpringMVC/hello</span></span><br><span class="line">   - **如上url拆分成三部分：**</span><br><span class="line">   - [http:<span class="comment">//localhost](http://localhost/):8080服务器域名</span></span><br><span class="line">   - SpringMVC部署在服务器上的web站点</span><br><span class="line">   - hello表示控制器</span><br><span class="line">   - 通过分析，如上url表示为：请求位于服务器localhost:<span class="number">8080</span>上的SpringMVC站点的hello控制器。</span><br><span class="line"><span class="number">2.</span> HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</span><br><span class="line"><span class="number">3.</span> HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</span><br><span class="line"><span class="number">4.</span> HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</span><br><span class="line"><span class="number">5.</span> HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</span><br><span class="line"><span class="number">6.</span> Handler让具体的Controller执行。</span><br><span class="line"><span class="number">7.</span> Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</span><br><span class="line"><span class="number">8.</span> HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</span><br><span class="line"><span class="number">9.</span> DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</span><br><span class="line"><span class="number">10.</span> 视图解析器将解析的逻辑视图名传给DispatcherServlet。</span><br><span class="line"><span class="number">11.</span> DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</span><br><span class="line"><span class="number">12.</span> 最终视图呈现给用户。</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2-spring-mvc-xml文件的Final配置"><a href="#2-2-spring-mvc-xml文件的Final配置" class="headerlink" title="2.2 spring-mvc.xml文件的Final配置"></a>2.2 spring-mvc.xml文件的Final配置</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--只有这里的包路径需要更改，其他都是固定的配置--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.maven.ssm.controller"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--让spring-mvc不再去处理.css,.js,.html,.mp3,.mp4等静态资源文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置此项作用：默认开启处理器映射器和处理器适配器（这两个东西处于底层）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置过滤静态资源(那些静态资源不拦截，要在webapps路径下建立相应的静态资源文件夹)--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3-请求转发和重定向"><a href="#2-3-请求转发和重定向" class="headerlink" title="2.3 请求转发和重定向"></a>2.3 请求转发和重定向</h4><p><strong>请求转发</strong>：可以省略关键词：<strong>forward</strong>。但是需要视图解析器的前后缀拼接，进行具体视图的访问（url不会改变），开启视图解析器之后，不需要forward的声明，默认就是请求转发操作。</p>
<p><strong>重定向</strong>：不需要视图解析器 ,但是需要一个关键词：<strong>redirect</strong> 。其本质就是重新请求一个新地方嘛 , 所以注意路径问题。</p>
<p>同时：重定向可以直接重定向到另一个controller请求实现 .  我认为：重定向一般用于访问出错的重定向跳转</p>
<p>注意：下面的重定向操作是错误的，WEB-INF目录下的资源不能直接进行重定向访问</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/WEB-INF/views/test.jsp"</span>; <span class="comment">//错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:index.jsp"</span>;  <span class="comment">//正确</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/rsm2/t1")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/rsm2/t2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//重定向到另一个请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">        <span class="comment">//return "redirect:hello.do"; //hello.do为另一个请求/</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-4-中文乱码问题解决"><a href="#2-4-中文乱码问题解决" class="headerlink" title="2.4 中文乱码问题解决"></a>2.4 中文乱码问题解决</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置：中文乱码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--初始化：encoding(固定变量名)的编码方式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-SpringMVC-Json理解"><a href="#3-SpringMVC-Json理解" class="headerlink" title="3.SpringMVC-Json理解"></a>3.SpringMVC-Json理解</h3><p>前后端分离原理:后端提供给前端一种大家都理解，都明白，都会使用的一种数据类型（json）,进行开发对接工作。</p>
<ul>
<li>后端部署后端：提供接口，提供数据（json）</li>
<li>json类型数据：前后端数据交换的格式</li>
<li>前端独立部署：负责渲染后端数据(json)</li>
</ul>
<h4 id="3-1简单转换示例"><a href="#3-1简单转换示例" class="headerlink" title="3.1简单转换示例"></a>3.1简单转换示例</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//没什么用，只是看一下对象数据和json数据写法的不同</span><br><span class="line">var user = {</span><br><span class="line">            name:"马滨",</span><br><span class="line">            age:23,</span><br><span class="line">            sex:"男"</span><br><span class="line">        };</span><br><span class="line">        //将js对象转换为json类型的对象数据</span><br><span class="line">        var json = JSON.stringify(user);</span><br><span class="line">        console.log(json);</span><br><span class="line">        console.log("===============");</span><br><span class="line">        //将json对象数据解析为js对象</span><br><span class="line">        var js = JSON.parse(json);</span><br><span class="line">        console.log(js);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2-后端真正的json转换传输"><a href="#3-2-后端真正的json转换传输" class="headerlink" title="3.2 后端真正的json转换传输"></a>3.2 后端真正的json转换传输</h4><h5 id="方法一：jackson"><a href="#方法一：jackson" class="headerlink" title="方法一：jackson"></a>方法一：jackson</h5><p>​    1. 引入jackson的依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson(后端数据转换为json类型数据传输到前端)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>在spring-mvc.xml文件中配置固定的xml配置</li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--json乱码问题解决（jackson依赖包的操作）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>可以进行jackson的用法封装（固定工具类：包括日期的格式转换）</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*直接调用这个方法即可*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object,String dateFormat)</span> </span>{</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//不使用时间差的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式对象</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        <span class="comment">//指定日期格式</span></span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        } <span class="keyword">catch</span> (JsonProcessingException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>在controller层直接进行调用返回操作</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//返回值不会再走视图解析器，而会直接返回一个字符串</span></span><br><span class="line"><span class="meta">@GetMapping(value = "/json")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"马滨"</span>,<span class="number">23</span>,<span class="string">"男"</span>);</span><br><span class="line">    <span class="keyword">return</span> JSONUtils.getJson(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="方法二：fastjson（阿里巴巴开源工具类，可以直接使用，相当于jackson封装之后的样子）"><a href="#方法二：fastjson（阿里巴巴开源工具类，可以直接使用，相当于jackson封装之后的样子）" class="headerlink" title="方法二：fastjson（阿里巴巴开源工具类，可以直接使用，相当于jackson封装之后的样子）"></a>方法二：fastjson（阿里巴巴开源工具类，可以直接使用，相当于jackson封装之后的样子）</h5><p>引入pom依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastjson(json转换)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>几种直接可以进行调用使用的方法示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//最常用的方法</span></span><br><span class="line">System.out.println(<span class="string">"*******Java对象 转 JSON字符串*******"</span>);</span><br><span class="line">      String str1 = JSON.toJSONString(list);</span><br><span class="line">      System.out.println(<span class="string">"JSON.toJSONString(list)==&gt;"</span>+str1);</span><br><span class="line">      String str2 = JSON.toJSONString(user1);</span><br><span class="line">      System.out.println(<span class="string">"JSON.toJSONString(user1)==&gt;"</span>+str2);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"\n****** JSON字符串 转 Java对象*******"</span>);</span><br><span class="line">      User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">      System.out.println(<span class="string">"JSON.parseObject(str2,User.class)==&gt;"</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"\n****** Java对象 转 JSON对象 ******"</span>);</span><br><span class="line">      JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">      System.out.println(<span class="string">"(JSONObject) JSON.toJSON(user2)==&gt;"</span>+jsonObject1.getString(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"\n****** JSON对象 转 Java对象 ******"</span>);</span><br><span class="line">      User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">      System.out.println(<span class="string">"JSON.toJavaObject(jsonObject1, User.class)==&gt;"</span>+to_java_user);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="10-AJAX技术浅析"><a href="#10-AJAX技术浅析" class="headerlink" title="10.AJAX技术浅析"></a>10.AJAX技术浅析</h3><p>注意：${pageContext.request.contextPath}获取的是相对路径，比如：local host:8080/，如果项目有项目名，也会会哦渠道项目名：local host:8080/springmvc</p>
<p> <strong>Ajax的核心</strong>是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据.</p>
<p><strong>简单来说：</strong>ajax就是在这个页面对服务器发起请求，获取数据，但是不会进行页面的转发和重定向操作。有种不知不觉的感觉，数据就获取并展示到浏览器了。</p>
<h4 id="10-1-ajax的参数解析"><a href="#10-1-ajax的参数解析" class="headerlink" title="10.1 ajax的参数解析"></a>10.1 ajax的参数解析</h4><ul>
<li>```js<br>jQuery.ajax(…)<pre><code>   部分参数：
          url：请求地址
         type：请求方式，GET、POST（1.9.0之后用method）
      headers：请求头
         data：要发送的数据
  contentType：即将发送信息至服务器的内容编码类型(默认: "application/x-www-form-urlencoded; charset=UTF-8")
        async：是否异步
      timeout：设置请求超时时间（毫秒）
   beforeSend：发送请求前执行的函数(全局)
     complete：完成之后执行的回调函数(全局)
      success：成功之后执行的回调函数(全局)
        error：失败之后执行的回调函数(全局)
      accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型
     dataType：将服务器端返回的数据转换成指定类型
        "xml": 将服务器端返回的内容转换成xml格式
       "text": 将服务器端返回的内容转换成普通文本格式
       "html": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。
     "script": 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式
       "json": 将服务器端返回的内容转换成相应的JavaScript对象
      "jsonp": JSONP 格式使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数
</code></pre><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">主要学习：url; type; data; success;即可</span><br><span class="line"></span><br><span class="line">#### 10.2 ajax实现简单登录提示效果</span><br><span class="line"></span><br><span class="line">controller层：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">	@ResponseBody</span><br><span class="line">    @PostMapping(value = "/login")</span><br><span class="line">    public String login(String username, String password) {</span><br><span class="line">        /*模拟数据库数据*/</span><br><span class="line">        String message = "";</span><br><span class="line">       if (username != null) {</span><br><span class="line">           if ("mabin".equals(username)) {</span><br><span class="line">               message="OK";</span><br><span class="line">           } else {</span><br><span class="line">               message="用户名不正确";</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       if (password != null) {</span><br><span class="line">           if ("mabin".equals(password)) {</span><br><span class="line">               message="OK";</span><br><span class="line">           } else {</span><br><span class="line">               message="密码不正确";</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">        return message;  //@ResponseBody会自动将message转换json</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<p>jsp页面：</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">	&lt;script&gt; </span><br><span class="line">	<span class="comment">/*登陆注册提示效果（失去焦点事件）*/</span></span><br><span class="line">        <span class="comment">//用户名验证</span></span><br><span class="line">            <span class="function">function <span class="title">u</span><span class="params">()</span> </span>{</span><br><span class="line">                $.ajax({</span><br><span class="line">                    url: <span class="string">"${pageContext.request.contextPath}/login"</span>,</span><br><span class="line">                    type: <span class="string">"POST"</span>,</span><br><span class="line">                    data: {<span class="string">"username"</span>: $(<span class="string">"#username1"</span>).val()},</span><br><span class="line">                    success: function (data) {</span><br><span class="line">                        <span class="keyword">if</span> (data.toString() == <span class="string">"OK"</span>) {</span><br><span class="line">                            $(<span class="string">"#userInfo"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            $(<span class="string">"#userInfo"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">                        }</span><br><span class="line">                        $(<span class="string">"#userInfo"</span>).html(data)</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//密码验证</span></span><br><span class="line">            <span class="function">function <span class="title">p</span><span class="params">()</span> </span>{</span><br><span class="line">                $.ajax({</span><br><span class="line">                    url:<span class="string">"${pageContext.request.contextPath}/login"</span>,</span><br><span class="line">                    type:<span class="string">"POST"</span>,</span><br><span class="line">                    data:{<span class="string">"password"</span>:$(<span class="string">"#password"</span>).val()},</span><br><span class="line">                    success:function (data) {</span><br><span class="line">                        <span class="keyword">if</span> (data.toString() == <span class="string">"OK"</span>) {</span><br><span class="line">                            $(<span class="string">"#passInfo"</span>).css(<span class="string">"color"</span>,<span class="string">"green"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            $(<span class="string">"#passInfo"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">                        }</span><br><span class="line">                        $(<span class="string">"#passInfo"</span>).html(data)</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"><span class="comment">//html表单</span></span><br><span class="line">&lt;h3&gt;登录注册提示效果&lt;/h3&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> id=<span class="string">"username1"</span> placeholder=<span class="string">"请输入用户名"</span> onblur=<span class="string">"u()"</span>/&gt;</span><br><span class="line">&lt;span id="userInfo"&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：&lt;input type=<span class="string">"password"</span> id=<span class="string">"password"</span> placeholder=<span class="string">"请输入密码"</span> onblur=<span class="string">"p()"</span>/&gt;</span><br><span class="line">&lt;span id="passInfo"&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="11-mvc中的拦截器基本使用和配置"><a href="#11-mvc中的拦截器基本使用和配置" class="headerlink" title="11.mvc中的拦截器基本使用和配置"></a>11.mvc中的拦截器基本使用和配置</h3><p><strong>spring-mvc中的拦截器核心思想</strong>：是基于spring AOP的，不对业务逻辑做任何改变，从而增强业务效果，（一般用于登录拦截等…）</p>
<p><strong>一般流程</strong>：拦截从客户端发出的请求，在到达controller层之前进行一些增强业务操作，满足条件就放行，否则，再进行其他操作。</p>
<h4 id="11-1-编写一个继承了HandlerInterceptor接口的拦截扩展类"><a href="#11-1-编写一个继承了HandlerInterceptor接口的拦截扩展类" class="headerlink" title="11.1 编写一个继承了HandlerInterceptor接口的拦截扩展类"></a>11.1 编写一个继承了HandlerInterceptor接口的拦截扩展类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果返回true执行下一个拦截器，请求会往下走，到controller中执行相应的方法</span></span><br><span class="line"><span class="comment">     * 如果返回false就不执行下一个拦截器,请求不会再继续往下走</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"controller被请求方法执行之前"</span>);</span><br><span class="line">        <span class="comment">//这里进行具体的逻辑判断操作，决定是否放行。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这下面的两个方法主要用于写拦截日志，一般不适用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"controller被请求方法执行之后"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"在dispatcherServlet处理后执行,做清理工作"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="11-2-spring-mvc-xml文件中的基本配置"><a href="#11-2-spring-mvc-xml文件中的基本配置" class="headerlink" title="11.2 spring-mvc.xml文件中的基本配置"></a>11.2 spring-mvc.xml文件中的基本配置</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置：拦截器将要拦截的请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置想要拦截的路径</span></span><br><span class="line"><span class="comment">/admin/**：代表所有请求路径，包括所有父路径下的所有层的子路径(/admin/user/user1/user2/...)后面可以无数多层</span></span><br><span class="line"><span class="comment">/admin/*：代表一个父路径的任何一个子路经(/admin/user),仅仅就这两层</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/admin/**"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--自定义的拦截器扩展类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.maven.ssm.config.MyInterceptorConfig"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>这样就大功告成了。</p>
<h3 id="12-springmvc文件上传配置"><a href="#12-springmvc文件上传配置" class="headerlink" title="12 springmvc文件上传配置"></a>12 springmvc文件上传配置</h3><h4 id="12-1-导入pom依赖"><a href="#12-1-导入pom依赖" class="headerlink" title="12.1 导入pom依赖"></a>12.1 导入pom依赖</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!--文件上传--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--servlet-api导入高版本的--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="12-2-编写页面表单（注意点很多）"><a href="#12-2-编写页面表单（注意点很多）" class="headerlink" title="12.2 编写页面表单（注意点很多）"></a>12.2 编写页面表单（注意点很多）</h4><p> <strong>要求</strong>：前端表单要求：为了能上传文件，必须将表单的<strong>method设置为POST</strong>，并将<strong>enctype设置为multipart/form-data</strong>。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"${pageContext.request.contextPath}/upload2"</span> enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>12.3 spring-mvc.xml文件的配置(固定的配置)</p>
<p><strong>注意点：这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误</strong></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置：文件上传--&gt;</span><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>    <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span>    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760"</span>/&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="12-4-controller层上传方法的编写-主要使用了CommonsMulti-part-File这个类"><a href="#12-4-controller层上传方法的编写-主要使用了CommonsMulti-part-File这个类" class="headerlink" title="12.4 controller层上传方法的编写(主要使用了CommonsMulti part File这个类)"></a>12.4 controller层上传方法的编写(主要使用了CommonsMulti part File这个类)</h4><p>CommonsMultipartFile 的 常用方法：</p>
<ul>
<li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li>
<li><strong>InputStream getInputStream()：获取文件流</strong></li>
<li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li>
</ul>
<p>方式一：繁杂版，但是可以更加深入理解文件上传的原理过程，</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">    <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = "/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam("file")</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">        String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">""</span>.equals(uploadFileName)){</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"上传文件名 : "</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists()){</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">        InputStream is = file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>){</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        }</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>方式二：简单版，直接使用这方法进行操作：<strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 采用file.Transferto 来保存上传的文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping("/upload2")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam("file")</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传路径保存设置，如过没有这个目录，就直接进行创建</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">    File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists()){</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//上传文件地址</span></span><br><span class="line">    System.out.println(<span class="string">"上传文件保存地址："</span>+realPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">"/"</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上传图片完成（其底层原理我还不会），</p>
<h3 id="13-文件下载-简单"><a href="#13-文件下载-简单" class="headerlink" title="13 文件下载(简单)"></a>13 文件下载(简单)</h3><p>前端页面更为简单：只需要将要请求路径放入a标签中即可。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download"</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>controller层的方法（基本固定）</p>
<p><strong>注意：</strong>只需要改变要下载文件所在的路径和具体下载文件内容即可</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件的下载：只需要改变要下载文件的路径和具体下载内容即可</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(value="/download")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">       <span class="comment">//要下载的图片地址（只有这里需要改变）</span></span><br><span class="line">       String  path = request.getSession().getServletContext().getRealPath(<span class="string">"/images"</span>);</span><br><span class="line">       String  fileName = <span class="string">"th.jfif"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1、设置response 响应头</span></span><br><span class="line">       response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">       response.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">//字符编码</span></span><br><span class="line">       response.setContentType(<span class="string">"multipart/form-data"</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">       <span class="comment">//设置响应头</span></span><br><span class="line">       response.setHeader(<span class="string">"Content-Disposition"</span>,</span><br><span class="line">               <span class="string">"attachment;fileName="</span>+ URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">       File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">       <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">       InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">       <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">       OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">       <span class="comment">//4、执行 写出操作</span></span><br><span class="line">       <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>){</span><br><span class="line">           out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">           out.flush();</span><br><span class="line">       }</span><br><span class="line">       out.close();</span><br><span class="line">       input.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="SpringJSP"><a href="#SpringJSP" class="headerlink" title="SpringJSP"></a>SpringJSP</h3><h3 id="1-jsp基础语法"><a href="#1-jsp基础语法" class="headerlink" title="1.jsp基础语法"></a>1.jsp基础语法</h3><h4 id="1-1-jsp表达式-lt-gt-相当于EL表达式的"><a href="#1-1-jsp表达式-lt-gt-相当于EL表达式的" class="headerlink" title="1.1 jsp表达式<%= %>相当于EL表达式的 : ${ }"></a>1.1 jsp表达式&lt;%= %&gt;相当于EL表达式的 : ${ }</h4><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--jsp表达式：用于将程序的输出，显示到客户端</span><br><span class="line">    语法：&lt;%= 变量或者变道时%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> Date()%&gt; </span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2-jsp脚本片段"><a href="#1-2-jsp脚本片段" class="headerlink" title="1.2 jsp脚本片段"></a>1.2 jsp脚本片段</h4><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">        sum+=i;</span><br><span class="line">    }</span><br><span class="line">    out.print(<span class="string">"&lt;h2&gt; sum = "</span> + sum + <span class="string">"&lt;/h2&gt;"</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--jsp脚本片段的复用原理：只要在同一个页面上的java代码全部都在同一个方法里，所以可以进行相互调用--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">/*这里就可以直接使用上面脚本片段里面的数据*/</span></span><br><span class="line">out.print(sum);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-3-在代码中嵌入html元素"><a href="#1-3-在代码中嵌入html元素" class="headerlink" title="1.3 在代码中嵌入html元素"></a>1.3 在代码中嵌入html元素</h4><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--嵌入html元素--%&gt;</span><br><span class="line">&lt;h2&gt;hello jsp &lt;%= i%&gt;&lt;/h2&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    }</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-4-jsp的声明-注意：语法格式：-lt-gt"><a href="#1-4-jsp的声明-注意：语法格式：-lt-gt" class="headerlink" title="1.4 jsp的声明(注意：语法格式：<%!       %>"></a>1.4 jsp的声明(注意：语法格式：&lt;%!       %&gt;</h4><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>{</span><br><span class="line">    System.out.println(<span class="string">"这是jsp声明语法，任何脚本片段都可以进行调用"</span>);</span><br><span class="line">}</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>注意</strong>：jsp的注释不会在客户端显示，HTML的注释可以在源代码中进行查看</p>
<h3 id="2-jsp指令"><a href="#2-jsp指令" class="headerlink" title="2.jsp指令"></a>2.jsp指令</h3><h4 id="2-1-定制错误页面跳转"><a href="#2-1-定制错误页面跳转" class="headerlink" title="2.1 定制错误页面跳转"></a>2.1 定制错误页面跳转</h4><p>方式一：直接在页面使用errorPage指令进行自定义</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--自定义错误页面跳转--%&gt;</span><br><span class="line">&lt;%--&lt;%@ page errorPage=<span class="string">"error/500.jsp"</span> %&gt;--%&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>方式二：web.xml文件中进行配置(推荐使用)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置：404错误页面跳转--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2jsp标签（不常用）"><a href="#2-2jsp标签（不常用）" class="headerlink" title="2.2jsp标签（不常用）"></a>2.2jsp标签（不常用）</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--jsp标签：</span><br><span class="line">    jsp:include:进行页面的拼接，其本质还是一个页面，与主页面互不影响</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"${pageContext.request.contextPath}/error/500.jsp"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--jsp标签：</span><br><span class="line">    jsp:forward:请求转发的作用，并且可以进行携带数据--%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">"jsp01.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"name"</span> value=<span class="string">"horse"</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"age"</span> value=<span class="string">"23"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3-jsp常用内置对象"><a href="#2-3-jsp常用内置对象" class="headerlink" title="2.3 jsp常用内置对象"></a>2.3 jsp常用内置对象</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--jsp内置对象--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"name1"</span>, <span class="string">"pageContext"</span>);  <span class="comment">//保存的数据，只在这个页面中有效</span></span><br><span class="line">    request.setAttribute(<span class="string">"name2"</span>, <span class="string">"request"</span>);  <span class="comment">//保存的数据只在一次请求中有效，请求会携带这个数据</span></span><br><span class="line">    session.setAttribute(<span class="string">"name3"</span>, <span class="string">"session"</span>);  <span class="comment">//保存的数据在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">    application.setAttribute(<span class="string">"name4"</span>, <span class="string">"application"</span>);  <span class="comment">//保存的数据在整个服务器运行期间有效，从打开服务器到关闭服务器</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    String name1 = (String) pageContext.getAttribute(<span class="string">"name1"</span>);</span><br><span class="line">    String name2 = (String) request.getAttribute(<span class="string">"name2"</span>);</span><br><span class="line">    String name3 = (String) session.getAttribute(<span class="string">"name3"</span>);</span><br><span class="line">    String name4 = (String) application.getAttribute(<span class="string">"name4"</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;${name1}&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;${name2}&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;${name3}&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;${name4}&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>区别：</p>
<p>request:客户端向服务器发送请求，服务器响应数据，存在request中，用户看完一次就没有了，比如：新闻</p>
<p>session：客户端向服务器发送请求，服务器响应数据，存在session中，用户看完一会还能用，比如：购物车</p>
<p>application：客户端向服务器发送请求，服务器响应数据，存在application中，一个用户看完了，其他用户还能用，比如：聊天数据</p>
<h3 id="3-EL表达式"><a href="#3-EL表达式" class="headerlink" title="3.EL表达式"></a>3.EL表达式</h3><p>常用功能：</p>
<ul>
<li>获取数据 —&gt; ${ }</li>
<li>执行运算</li>
<li>获取web开发的常用对象 —&gt;  <input type="text" name="username" value="${param.username}"></li>
<li><img src="../AppData/Roaming/Typora/typora-user-images/image-20200309211615272.png" alt="image-20200309211615272"></li>
</ul>
<h3 id="4-jstl核心标签"><a href="#4-jstl核心标签" class="headerlink" title="4.jstl核心标签"></a>4.jstl核心标签</h3><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--jstl--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"index.jsp"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"${param.username}"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--c:<span class="keyword">if</span>标签--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"${param.username == 'admin'}"</span> <span class="keyword">var</span>=<span class="string">"isAdmin"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"你是管理员"</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;%--c:out可以使一个自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"${isAdmin}"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--c:set：定义变量--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"100"</span>/&gt;\</span><br><span class="line">&lt;%--c:choose相当于java中的<span class="keyword">switch</span>--%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"${score &gt;= 90}"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"优秀"</span>/&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"${score &gt;= 80}"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"一般"</span>/&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"${score &gt;= 70}"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"良好"</span>/&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"${score &gt;= 60}"</span>&gt;</span><br><span class="line">        &lt;c:out value=<span class="string">"及格"</span>/&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--c:forEach:遍历数据，参数：items:要遍历的对象，<span class="keyword">var</span>:每一次遍历出来的变量 --%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"${user}"</span> <span class="keyword">var</span>=<span class="string">"userList"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"${userList}"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="jstl格式标签-fmt"><a href="#jstl格式标签-fmt" class="headerlink" title="jstl格式标签(fmt)"></a>jstl格式标签(fmt)</h4><p>具体用法：</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;td&gt;&lt;fmt:formatDate value="${student.birthday}" pattern="yyyy-MM-dd"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;fmt:formatDate value="${student.grade}" pattern="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/td&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-JavaBean的定义："><a href="#5-JavaBean的定义：" class="headerlink" title="5.JavaBean的定义："></a>5.JavaBean的定义：</h3><ul>
<li>必须要有一个无参构造</li>
<li>所有属性必须私有化</li>
<li>必须有对应的get/set方法</li>
</ul>
<p>一般用来和数据库的字段做映射</p>
<p><strong>ORM：对象关系映射的含义</strong></p>
<h2 id="Springboot整合"><a href="#Springboot整合" class="headerlink" title="Springboot整合"></a>Springboot整合</h2><h3 id="1-springboot-shiro（MD5加密）"><a href="#1-springboot-shiro（MD5加密）" class="headerlink" title="1.springboot-shiro（MD5加密）"></a>1.springboot-shiro（MD5加密）</h3><h5 id="添加必要依赖"><a href="#添加必要依赖" class="headerlink" title="添加必要依赖"></a>添加必要依赖</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引入thymeleaf和shiro整合的部分依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--shiro整合ehcache缓存(和启动器中的同名依赖不一样)--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="编写配置类MyShiroConfig"><a href="#编写配置类MyShiroConfig" class="headerlink" title="编写配置类MyShiroConfig"></a>编写配置类MyShiroConfig</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码匹配凭证管理器（shiro的内置MD5+salt盐值加密）</span></span><br><span class="line"><span class="comment">     * MD5算法：算法不可逆，如果内容相同，无论做多少次MD5算法生成的结果始终一致，多用于加密和签名校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "hashedCredentialsMatcher")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>{</span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">//指定加密方式</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">        <span class="comment">//设置加密次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//设置编码方式：true:hex编码，false:base64编码</span></span><br><span class="line">        credentialsMatcher.setStoredCredentialsHexEncoded(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存管理器（最简单的，全部按照默认配置，没有做自定义的一些缓存逻辑）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "ehCacheManager")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">ehCacheManager</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建自定义realm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashedCredentialsMatcher</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "myShiroRealm")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyShiroRealm <span class="title">myShiroRealm</span><span class="params">(<span class="meta">@Qualifier("hashedCredentialsMatcher")</span> HashedCredentialsMatcher hashedCredentialsMatcher,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@Qualifier("ehCacheManager")</span> EhCacheManager ehCacheManager)</span> </span>{</span><br><span class="line">        MyShiroRealm myShiroRealm = <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">        <span class="comment">//设置密码校验匹配器</span></span><br><span class="line">        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher);</span><br><span class="line">        <span class="comment">//开启shiro的缓存管理:开启之后，当页面遇到授权的校验时，就不会再走一遍MyShiroRealm中的授权方法，否则每次都要走，耗费资源</span></span><br><span class="line">        myShiroRealm.setCacheManager(ehCacheManager);</span><br><span class="line">        myShiroRealm.setCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//下面的写不写都行（主要用于与shiro-ehcache.xml配置文件搭配）</span></span><br><span class="line">        myShiroRealm.setAuthenticationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        myShiroRealm.setAuthenticationCacheName(<span class="string">"authenticationCache"</span>);</span><br><span class="line">        myShiroRealm.setAuthorizationCachingEnabled(<span class="keyword">true</span>);</span><br><span class="line">        myShiroRealm.setAuthorizationCacheName(<span class="string">"authorizationCache"</span>);</span><br><span class="line">        <span class="keyword">return</span> myShiroRealm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建安全管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> myShiroRealm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = "defaultWebSecurityManager")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier("myShiroRealm")</span> MyShiroRealm myShiroRealm)</span> </span>{</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//给安全管理器设置自定义realm</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(myShiroRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier("defaultWebSecurityManager")</span> DefaultWebSecurityManager defaultWebSecurityManager)</span> </span>{</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置允许访问(后续会添加...)</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//用户注册</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/registered"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//异步请求路径验证</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/login/checkUser"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/login/checkPass"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/echarts"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//权限控制放行</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/category"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/tags"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/comments"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/link"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//异步请求发送验证码</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/code"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">//管理员权限限定（后续添加普通用户的权限限定）</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/category/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/tags/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/comments/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/link/**"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        <span class="comment">//限制系统应用访问</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/swagger"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/access"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/druid"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/user"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/excel"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/logExcel"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/admin/logs"</span>, <span class="string">"perms[user:admin]"</span>);</span><br><span class="line">        <span class="comment">//设置权限认证路径</span></span><br><span class="line">        filterMap.put(<span class="string">"/admin/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">//登录页面访问路径</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/admin"</span>);</span><br><span class="line">        <span class="comment">//访问受限：未授权跳转路径</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/admin/unauthorized"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 整合ShiroDialect：避免整合thymeleaf和shiro报错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="编写认证授权规则类MyShiroRealm-必须继承AuthorizingRealm，并重写相应的方法"><a href="#编写认证授权规则类MyShiroRealm-必须继承AuthorizingRealm，并重写相应的方法" class="headerlink" title="编写认证授权规则类MyShiroRealm,必须继承AuthorizingRealm，并重写相应的方法"></a>编写认证授权规则类MyShiroRealm,必须继承AuthorizingRealm，并重写相应的方法</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录授权（后续增加权限控制）</span></span><br><span class="line"><span class="comment">     * 当用户访问需要权限才能访问的路径时，调用此方法为用户设置相关的权限，若权限不够，则跳转到401.html页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>{</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//获取当前认证用户的信息（从认证哪里传递过来的用户信息）</span></span><br><span class="line">        User currentUser = (User) principals.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//授予当前用户(管理员)相关权限[user:admin]</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>{</span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line">        User currentUser = userMapper.selectOne(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">"username"</span>, userToken.getUsername()));</span><br><span class="line">        <span class="comment">//返回null,shiro会自动响应异常</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//当前用户信息存入session(用于前端调用)</span></span><br><span class="line">        SecurityUtils.getSubject().getSession().setAttribute(<span class="string">"loginUser"</span>, currentUser);</span><br><span class="line">        <span class="comment">//自定义盐值(将用户名作为盐值)</span></span><br><span class="line">        ByteSource salt = ByteSource.Util.bytes(currentUser.getUsername());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * currentUser:将用户信息传递给后面的授权操作</span></span><br><span class="line"><span class="comment">        * currentUser.getPassword():密码Shiro框架自己认证,（MyShiroConfig配置类中自定义传入MD5加密）</span></span><br><span class="line"><span class="comment">        * salt:传入自定义的盐值</span></span><br><span class="line"><span class="comment">        * this.getRealm():此自定义realm的唯一标识符，一般是固定的，没有特别的意义</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(currentUser, currentUser.getPassword(), salt, <span class="keyword">this</span>.getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>注册时：生成存入数据库的密码的工具类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5ShiroUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成MD5密码：用于登录验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username:用于作为随即盐salt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MD5Code</span><span class="params">(String username, String password)</span> </span>{</span><br><span class="line">        String hashAlgorithName = <span class="string">"MD5"</span>;</span><br><span class="line">        <span class="keyword">int</span> hashInteractions = <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleHash(hashAlgorithName,password, ByteSource.Util.bytes(username),hashInteractions).toHex();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h5 id="login登录验证"><a href="#login登录验证" class="headerlink" title="login登录验证"></a>login登录验证</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = "/login")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@RequestParam("username")</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("password")</span> String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                       RedirectAttributes redirectAttributes, Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletRequest request)</span> </span>{</span><br><span class="line">       <span class="comment">/*获取当前用户的信息并封装*/</span></span><br><span class="line">       UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">       Subject subject = SecurityUtils.getSubject();</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           subject.login(token);</span><br><span class="line">           <span class="comment">//登录后首先进行验证码验证</span></span><br><span class="line">           model.addAttribute(<span class="string">"image"</span>, avatar);</span><br><span class="line">           <span class="keyword">if</span> (!KaptchaUtils.checkVerifyCode(request)) {</span><br><span class="line">               redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"验证码错误"</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="string">"redirect:/admin"</span>;</span><br><span class="line">           }</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"admin/index"</span>;</span><br><span class="line">       } <span class="keyword">catch</span> (UnknownAccountException e) { <span class="comment">//注意：下面如果是重定向，这里不适用Model，而是使用RedirectAttribute</span></span><br><span class="line">           redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"用户名不存在"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redirect:/admin"</span>;</span><br><span class="line">       } <span class="keyword">catch</span> (IncorrectCredentialsException e) {</span><br><span class="line">           redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"密码错误"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redirect:/admin"</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<p>就此基本简单配置成功…</p>
<h3 id="2-springboot-security-前后端不分离"><a href="#2-springboot-security-前后端不分离" class="headerlink" title="2. springboot-security(前后端不分离)"></a>2. springboot-security(前后端不分离)</h3><p>设计用户角色权限关系表（我这里默认user 1&lt;—&gt;1角色1&lt;—&gt;n权限permission），一定要先设计好数据表</p>
<h4 id="首先：引入pom依赖，并配置具体扩展类"><a href="#首先：引入pom依赖，并配置具体扩展类" class="headerlink" title="首先：引入pom依赖，并配置具体扩展类"></a>首先：引入pom依赖，并配置具体扩展类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span>  <span class="comment">//开启Security认证服务</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span>  <span class="comment">//开启方法级别的权限认证</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> myUserDetailsServiceImpl myUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定加密方式（官方推荐）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        http.headers().frameOptions().sameOrigin();  <span class="comment">//表示允许同源请求加载iframe</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">//允许/login,/error匿名访问，包括静态资源</span></span><br><span class="line">                .antMatchers(<span class="string">"/my/**"</span>, <span class="string">"/treetable-lay/**"</span>, <span class="string">"/xadmin/**"</span>, <span class="string">"/ztree/**"</span>, <span class="string">"/login"</span>, <span class="string">"/authority"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()<span class="comment">//其他路径访问均需验证权限</span></span><br><span class="line">                <span class="comment">//登录失败返回或者没有权限跳转到authority.html页面		.formLogin().usernameParameter("username").passwordParameter("password").loginPage("/login")</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">"/index"</span>).failureUrl(<span class="string">"/authority"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//退出成功返回登录页面</span></span><br><span class="line">                .logout().logoutUrl(<span class="string">"/logout"</span>).permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();  <span class="comment">//关闭csrf跨域(目前不明白为什么关闭？？？)</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//引用上面的bean--&gt;passwordEncoder</span></span><br><span class="line">        auth.userDetailsService(myUserDetailsService).passwordEncoder(passwordEncoder());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="进行具体的认证授权业务逻辑"><a href="#进行具体的认证授权业务逻辑" class="headerlink" title="进行具体的认证授权业务逻辑"></a>进行具体的认证授权业务逻辑</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myUserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAndRoleMapper userAndRoleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionMapper permissionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户授权</span></span><br><span class="line"><span class="comment">     * 注意：授权的时候是对角色授权，而认证的时候应该基于资源，而不是角色，因为资源是不变的，而用户的角色是会变的</span></span><br><span class="line"><span class="comment">     * 定义：用户1&lt;--&gt;1角色1&lt;--&gt;n权限(按照自己的数据库进行定义)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>{</span><br><span class="line">        User user = userService.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//赋予权限</span></span><br><span class="line">        ArrayList&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        UserAndRole role = userAndRoleMapper.getRoleUserByUserId(user.getId());</span><br><span class="line">        List&lt;Permission&gt; permissionByRoleId = permissionMapper.getPermissionByRoleId(role.getRoleId());</span><br><span class="line">        <span class="keyword">for</span> (Permission permission : permissionByRoleId) {</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(permission.getPermission()));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//返回Userdetails的子类即可，相对比较简单（推荐）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), authorities);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="简单的loginController控制类"><a href="#简单的loginController控制类" class="headerlink" title="简单的loginController控制类"></a>简单的loginController控制类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = "/login")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = "/authority")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toError</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"authority"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = "/logout")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogout</span><span class="params">(HttpSession session)</span> </span>{</span><br><span class="line">        session.invalidate();  <span class="comment">//退出销毁session</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="当进行用户添加的时候，注意密码的加密方式要使用：BCryptPasswordEncoder"><a href="#当进行用户添加的时候，注意密码的加密方式要使用：BCryptPasswordEncoder" class="headerlink" title="当进行用户添加的时候，注意密码的加密方式要使用：BCryptPasswordEncoder"></a>当进行用户添加的时候，注意密码的加密方式要使用：BCryptPasswordEncoder</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//使用了security,加密方式为BCryptPasswordEncoder</span></span><br><span class="line">userAddDto.setPassword(<span class="keyword">new</span> BCryptPasswordEncoder().encode(userAddDto.getPassword().trim()));</span><br></pre></td></tr></tbody></table></figure>
<h4 id="坑点："><a href="#坑点：" class="headerlink" title="坑点："></a>坑点：</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">      <span class="comment">//permission.getPermission()穿的值一定是没有空格的非空值，否则会报错</span></span><br><span class="line"><span class="keyword">for</span> (Permission permission : permissionByRoleId) {</span><br><span class="line">          authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(permission.getPermission()));</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-不算坑点，简单的建议"><a href="#2-不算坑点，简单的建议" class="headerlink" title="2. 不算坑点，简单的建议"></a>2. 不算坑点，简单的建议</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//返回Userdetails的子类User即可，相对比较简单（推荐）</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), authorities);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-sprongboot实现文件上传（markdown的图片上传就基于此配置），太他妈垃圾了…"><a href="#3-sprongboot实现文件上传（markdown的图片上传就基于此配置），太他妈垃圾了…" class="headerlink" title="3.sprongboot实现文件上传（markdown的图片上传就基于此配置），太他妈垃圾了…"></a>3.sprongboot实现文件上传（markdown的图片上传就基于此配置），太他妈垃圾了…</h3><h4 id="上传页面file-html"><a href="#上传页面file-html" class="headerlink" title="上传页面file.html"></a>上传页面file.html</h4><p><strong>注意：enctype必须为multipart/form-data，提交方式必须为post</strong></p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">th:method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@{/file/upload}"</span>&gt;</span></span><br><span class="line">    文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Upload"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="实现文件上传的真正业务控制"><a href="#实现文件上传的真正业务控制" class="headerlink" title="实现文件上传的真正业务控制"></a>实现文件上传的真正业务控制</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/file")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileServiceImpl fileService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片的真实路径(此路径最好在application.yml文件中配置)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String FILEPATH = <span class="string">"D:/IEDA_data/springboot-web-upload/src/main/resources/static/FileUpload/"</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片的访问路径（已经配置资源路径映射的路径）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String NEWFILEPATH = <span class="string">"http://localhost:8080/static/FileUpload/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/upload")</span></span><br><span class="line">    <span class="comment">//MultipartFile的变量名必须和文件:&lt;input type="file" name="file"/&gt;中的name相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file, Model model)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取文件后缀</span></span><br><span class="line">        <span class="comment">// file.getOriginalFilename()：获取文件的原名称</span></span><br><span class="line">        String suffixName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">// 重新生成唯一文件名，用于存储数据库</span></span><br><span class="line">        String newFileName = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// 创建目标文件文件</span></span><br><span class="line">        File dest = <span class="keyword">new</span> File(FILEPATH + newFileName);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//一步到位的上传文件操作</span></span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            <span class="comment">//model只是用于测试回显</span></span><br><span class="line">            model.addAttribute(<span class="string">"imageURL"</span>, NEWFILEPATH + newFileName);</span><br><span class="line">            <span class="comment">//测试保存到数据库</span></span><br><span class="line">            fileService.saveImageURL(NEWFILEPATH + newFileName);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"image"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="想要实现图片回显，需要进行：资源路径映射"><a href="#想要实现图片回显，需要进行：资源路径映射" class="headerlink" title="想要实现图片回显，需要进行：资源路径映射"></a>想要实现图片回显，需要进行：<strong>资源路径映射</strong></h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">//注意：localhost:8080这个站点路径需要动态的获取--&gt;FileUploadUtils</span></span><br><span class="line">        <span class="comment">//当服务器在localhost:8080/static/FileUpload/**路径上请求时，服务器就会到实际存储路径file:***去寻找资源(一般小型demo的真是存储路径就在项目中)</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">"/static/FileUpload/**"</span>)</span><br><span class="line">.addResourceLocations(<span class="string">"file:D:/IEDA_data/springboot-web-upload/src/main/resources/static/FileUpload/"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>动态获取站点路径的工具类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getImagePath</span><span class="params">(HttpServletRequest request)</span></span>{</span><br><span class="line">        String scheme = request.getScheme(); <span class="comment">// 获取链接协议，http</span></span><br><span class="line">        String serverName = request.getServerName(); <span class="comment">// 获取服务器名称 localhost</span></span><br><span class="line">        <span class="keyword">int</span> serverPort = request.getServerPort(); <span class="comment">// 获取端口 8080或者8081...</span></span><br><span class="line">        String path = scheme+<span class="string">"://"</span>+serverName+<span class="string">":"</span>+serverPort+<span class="string">"/"</span>;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可以进行上传文件的简单配置-上传文件大小"><a href="#可以进行上传文件的简单配置-上传文件大小" class="headerlink" title="可以进行上传文件的简单配置(上传文件大小)"></a>可以进行上传文件的简单配置(上传文件大小)</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFileUploadConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span> </span>{</span><br><span class="line">        MultipartConfigFactory factory = <span class="keyword">new</span> MultipartConfigFactory();</span><br><span class="line">        <span class="comment">//单个文件最大KB,MB</span></span><br><span class="line">        factory.setMaxFileSize(DataSize.parse(<span class="string">"10MB"</span>));</span><br><span class="line">        <span class="comment">//设置总上传数据总大小</span></span><br><span class="line">        factory.setMaxRequestSize(DataSize.parse(<span class="string">"20MB"</span>));</span><br><span class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>其他的简单的数据库存储操作，一般都是在项目中直接就考虑设计了、</p>
<h4 id="3-1-基于nginx反向代理的图片上传"><a href="#3-1-基于nginx反向代理的图片上传" class="headerlink" title="3.1 基于nginx反向代理的图片上传"></a>3.1 基于<code>nginx</code>反向代理的图片上传</h4><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">F:\springboot-springcloud-leyou\uploadImage\</span></span><br><span class="line">    <span class="attr">server_url:</span> <span class="string">http://image.leyou.com</span></span><br></pre></td></tr></tbody></table></figure>
<p>service层的具体实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title">UploadService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; IMAGE_CATEGORIES = Arrays.asList(MimeTypeUtils.IMAGE_JPEG_VALUE,</span><br><span class="line">            MimeTypeUtils.IMAGE_PNG_VALUE, MimeTypeUtils.IMAGE_GIF_VALUE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${upload.image.path}")</span></span><br><span class="line">    <span class="keyword">private</span> String localPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${upload.image.server_url}")</span></span><br><span class="line">    <span class="keyword">private</span> String server_url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>{</span><br><span class="line">        <span class="comment">//校验图片类型(根据ContentType进行校验)</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span> (!IMAGE_CATEGORIES.contains(file.getContentType())) {</span><br><span class="line">            LOGGER.error(<span class="string">"文件类型不合法：{}"</span>, originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//校验图片内容（防止伪装文件恶意注入）</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) {</span><br><span class="line">                LOGGER.error(<span class="string">"文件内容不合法：{}"</span>, originalFilename);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//文件重命名UUID</span></span><br><span class="line">            String suffix = StringUtils.substringAfterLast(originalFilename, <span class="string">"."</span>);</span><br><span class="line">            String newFileName = StringUtils.replace(UUID.randomUUID().toString(), <span class="string">"-"</span>, <span class="string">""</span>) + <span class="string">"."</span> + suffix;</span><br><span class="line">            <span class="comment">//图片上传到本地服务器并返回url进行回显</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(localPath + newFileName));</span><br><span class="line">            <span class="comment">//这里的http://image.leyou.com会被nginx转发到存放图片的本地路径上去（后期会用fastDFS进行升级维护）</span></span><br><span class="line">            <span class="keyword">return</span> server_url + <span class="string">"/"</span> + newFileName;</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            LOGGER.error(<span class="string">"服务器内部错误！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>更改host文件：127.0.0.1    image.leyou.com </p>
</blockquote>
<p>nginx的反向代理：</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200513225124697.png" alt="image-20200513225124697"></p>
<h4 id="3-2-基于fastDFS分布式文件系统的文件上传和回显"><a href="#3-2-基于fastDFS分布式文件系统的文件上传和回显" class="headerlink" title="3.2 基于fastDFS分布式文件系统的文件上传和回显"></a>3.2 基于<code>fastDFS</code>分布式文件系统的文件上传和回显</h4><blockquote>
<p>fastDFS环境很难搭建，建议大家使用Docker一键安装即可</p>
</blockquote>
<p>引入pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastDFS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.26.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>application.yml的配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">upload:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">server_url:</span> <span class="string">http://image.leyou.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fastDFS的基本配置</span></span><br><span class="line"><span class="attr">fdfs:</span></span><br><span class="line">  <span class="attr">so-timeout:</span> <span class="number">1000</span> <span class="comment">#超时时间</span></span><br><span class="line">  <span class="attr">connect-timeout:</span> <span class="number">1000</span> <span class="comment">#连接超时时间</span></span><br><span class="line">  <span class="attr">thumb-image:</span> <span class="comment">#缩略图的大小</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">tracker-list:</span>  <span class="comment">#tracker踪迹服务器地址：你的服务器IP+默认端口22122</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.19</span><span class="number">.131</span><span class="string">:22122</span></span><br></pre></td></tr></tbody></table></figure>
<p>添加扩展（官方规定的固定扩展）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/14 9:29</span></span><br><span class="line"><span class="comment"> * 解决jmx重复注册bean的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(FdfsClientConfig.class)</span></span><br><span class="line"><span class="meta">@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClientImporter</span> </span>{</span><br><span class="line">	<span class="comment">//里面什么都不用写，上面的注解已经实现类扩展配置</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>可以先使用测试类进行上传回显测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThumbImageConfig thumbImageConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接上传图片到fastDFS并返回URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">        <span class="comment">//找一张本地图片路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\马滨\\Pictures\\WebBg\\th08.png"</span>);</span><br><span class="line">        <span class="comment">// 上传并保存图片，参数：1-上传的文件流 2-文件的大小 3-文件的后缀 4-可以不管他</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadFile(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"png"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片到fastDFS并生成缩略图返回URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUploadAndCreateThumb</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>{</span><br><span class="line">        <span class="comment">//找一张本地图片路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\马滨\\Pictures\\WebBg\\th08.png"</span>);</span><br><span class="line">        <span class="comment">// 上传并且生成缩略图</span></span><br><span class="line">        StorePath storePath = <span class="keyword">this</span>.storageClient.uploadImageAndCrtThumbImage(</span><br><span class="line">                <span class="keyword">new</span> FileInputStream(file), file.length(), <span class="string">"jpeg"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getFullPath());</span><br><span class="line">        <span class="comment">// 不带分组的路径</span></span><br><span class="line">        System.out.println(storePath.getPath());</span><br><span class="line">        <span class="comment">// 获取缩略图路径</span></span><br><span class="line">        String path = thumbImageConfig.getThumbImagePath(storePath.getPath());</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>我们实际service层的上传逻辑和一般的文件上传一样，只是存储的位置不同而已</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServiceImpl</span> <span class="keyword">implements</span> <span class="title">UploadService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; IMAGE_CATEGORIES = Arrays.asList(MimeTypeUtils.IMAGE_JPEG_VALUE,</span><br><span class="line">            MimeTypeUtils.IMAGE_PNG_VALUE, MimeTypeUtils.IMAGE_GIF_VALUE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${upload.image.server_url}")</span></span><br><span class="line">    <span class="keyword">private</span> String serverUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> </span>{</span><br><span class="line">        <span class="comment">//校验图片类型(根据ContentType进行校验)</span></span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">if</span> (!IMAGE_CATEGORIES.contains(file.getContentType())) {</span><br><span class="line">            LOGGER.error(<span class="string">"文件类型不合法：{}"</span>, originalFilename);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//校验图片内容（防止伪装文件恶意注入）</span></span><br><span class="line">            BufferedImage image = ImageIO.read(file.getInputStream());</span><br><span class="line">            <span class="keyword">if</span> (image == <span class="keyword">null</span>) {</span><br><span class="line">                LOGGER.error(<span class="string">"文件内容不合法：{}"</span>, originalFilename);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//上传到fastDFS分布式文件系统中</span></span><br><span class="line">            String suffix = StringUtils.substringAfterLast(originalFilename, <span class="string">"."</span>);</span><br><span class="line">            <span class="comment">//调用文件上传的方法（人家客户端集成好的）</span></span><br><span class="line">            StorePath storePath = storageClient.uploadFile(file.getInputStream(), file.getSize(), suffix, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//组装访问路径</span></span><br><span class="line">            <span class="keyword">return</span> serverUrl + storePath.getFullPath();</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            LOGGER.error(<span class="string">"服务器内部错误！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>我们已经配置好了上面的host文件解析和nginx的反向代理配置</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200514100853202.png" alt="image-20200514100853202"></p>
<p>在经过网关之前就代理到图片上传服务模块，然后会返回一个组装的图片访问地址</p>
<p><a href="http://image.leyou.com/group1/…">http://image.leyou.com/group1/…</a>.</p>
<blockquote>
<p>更改host文件：192.168.149.131    image.leyou.com </p>
<p>那么就可以访问到虚拟机中的图片信息了…</p>
</blockquote>
<h3 id="4-Interceptor拦截器浅析"><a href="#4-Interceptor拦截器浅析" class="headerlink" title="4.Interceptor拦截器浅析"></a>4.<code>Interceptor</code>拦截器浅析</h3><h4 id="springboot-2-x-需要继承-WebMvcConfigurationSupport，并进行静态资源的拦截放行处理"><a href="#springboot-2-x-需要继承-WebMvcConfigurationSupport，并进行静态资源的拦截放行处理" class="headerlink" title="springboot 2.x 需要继承 WebMvcConfigurationSupport，并进行静态资源的拦截放行处理"></a>springboot 2.x 需要继承 <strong>WebMvcConfigurationSupport</strong>，并进行静态资源的拦截放行处理</h4><p>需要重写两个方法 <strong>addInterceptors</strong> 和 <strong>addResourceHandlers</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入自定义拦截处理规则的bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">//拦截所有路径请求</span></span><br><span class="line">        registry.addInterceptor(myInterceptor).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">//放行静态资源（路径根据具体情况）</span></span><br><span class="line">    registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>,<span class="string">"classpath:/public"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="自定义拦截规则的实现类"><a href="#自定义拦截规则的实现类" class="headerlink" title="自定义拦截规则的实现类"></a>自定义拦截规则的实现类</h4><p>需要继承接口：<strong>HandlerInterceptor</strong>，并重写期中的3个方法，一般都只需要控制器方法执行之前的<strong>preHandle()</strong>,</p>
<p>如果满足条件，就return true，放行，否则就return false,直接拦截住，不进入控制层的方法中。</p>
<p><strong>小知识点：request.getRequestURL().toString().contains(“/login”); </strong>这种方式可以获取请求路径，进行其他操作。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//如果存在某一个cookie和数据库对应，则将信息存进session中</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length != <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) {</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"token"</span>.equals(cookie.getName())) {</span><br><span class="line">                    String token = cookie.getValue();</span><br><span class="line">                    User user = userService.getUserByToken(token);</span><br><span class="line">                    <span class="keyword">if</span> (user != <span class="keyword">null</span>) {</span><br><span class="line">                        request.getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>简单的拦截器就配置好了。</p>
<h3 id="5-springboot的maven的测试类搭建（需要自己手动搭建，不小心可能会出现空指针错误）"><a href="#5-springboot的maven的测试类搭建（需要自己手动搭建，不小心可能会出现空指针错误）" class="headerlink" title="5.springboot的maven的测试类搭建（需要自己手动搭建，不小心可能会出现空指针错误）"></a>5.springboot的maven的测试类搭建（需要自己手动搭建，不小心可能会出现空指针错误）</h3><h4 id="1-引入依赖：spring-boot-starter-test"><a href="#1-引入依赖：spring-boot-starter-test" class="headerlink" title="1.引入依赖：spring-boot-starter-test"></a>1.引入依赖：<strong>spring-boot-starter-test</strong></h4><h4 id="2-重要：测试类的包路径必须和主启动类的包路径一致"><a href="#2-重要：测试类的包路径必须和主启动类的包路径一致" class="headerlink" title="2.重要：测试类的包路径必须和主启动类的包路径一致"></a><strong>2.重要：测试类的包路径必须和主启动类的包路径一致</strong></h4><h4 id="3-测试类添加注解：-SpringbootTest和-RunWith-SpringRunner-class"><a href="#3-测试类添加注解：-SpringbootTest和-RunWith-SpringRunner-class" class="headerlink" title="3.测试类添加注解：**@SpringbootTest和@RunWith(SpringRunner.class)"></a>3.测试类添加注解：**@SpringbootTest和@RunWith(SpringRunner.class)</h4><p>这样测试类基本能正常工作…</p>
<h3 id="6-springboot整合jsp页面渲染引擎"><a href="#6-springboot整合jsp页面渲染引擎" class="headerlink" title="6.springboot整合jsp页面渲染引擎"></a>6.springboot整合jsp页面渲染引擎</h3><p>引入解析jsp页面的引擎依赖(其他的依赖需要时可以自行引入)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入解析jsp页面的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jstl标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>在main目录下创建webapp目录以及其他的子目录</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200617200752459.png" alt="webapp目录"></p>
<p>配置模板渲染的资源寻找路径</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#切换视图渲染模板为jsp</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/views</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></tbody></table></figure>
<p>在idea中进行配置另一项重要的配置（固定操作</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200617201117414.png" alt="整合jsp页面"></p>
<p>这样运行项目，即可访问相应的jsp页面！！！</p>
<h3 id="7-easyExcel"><a href="#7-easyExcel" class="headerlink" title="7.easyExcel"></a>7.easyExcel</h3><h4 id="POI"><a href="#POI" class="headerlink" title="POI"></a><code>POI</code></h4><p>导入依赖:根据excel的文件后缀类型选择对应的版本依赖即可（一般不适用这种方式，easyExcel更好用）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--03(xls)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--07(xlsx)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>基本的API</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Workbook wordkbook =<span class="keyword">new</span> HSSFWorkbook();<span class="comment">//创建一个Workbook对象</span></span><br><span class="line">wordkbook.createSheet();<span class="comment">//创建表名，如果不写参数，会有默认值</span></span><br><span class="line">Row row1=sheet.createRow(<span class="number">0</span>);<span class="comment">//根据里面的数字拿到对应的行，0默认为第一行</span></span><br><span class="line">Cell cell = row1.createCell(<span class="number">0</span>);<span class="comment">//根据行对象创建单元格，这里0为第一个</span></span><br><span class="line">cell.setCellValue(<span class="string">""</span>);<span class="comment">//可以给单元格赋值</span></span><br></pre></td></tr></tbody></table></figure>
<p>写入数据测试案例</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATH = <span class="string">"D:/IEDA_data/springboot-web-easyExcel/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrite03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//创建一个工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建一个自定义表名的工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet(<span class="string">"Horse Blog"</span>);</span><br><span class="line">        <span class="comment">//创建一个行</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建一个列(单元格)</span></span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//写入数据</span></span><br><span class="line">        cell.setCellValue(<span class="string">"今日访问量"</span>);</span><br><span class="line">        Cell cell1 = row.createCell(<span class="number">1</span>);</span><br><span class="line">        cell1.setCellValue(<span class="string">"888"</span>);</span><br><span class="line"></span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        Cell cell2 = row1.createCell(<span class="number">0</span>);</span><br><span class="line">        cell2.setCellValue(<span class="string">"访问时间"</span>);</span><br><span class="line">        Cell cell3 = row1.createCell(<span class="number">1</span>);</span><br><span class="line">        cell3.setCellValue(<span class="keyword">new</span> DateTime().toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建输出流进行写数据</span></span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(PATH + <span class="string">"access.xls"</span>));</span><br><span class="line">        workbook.write(outputStream);</span><br><span class="line">        outputStream.close();</span><br><span class="line">        System.out.println(<span class="string">"文件生成成功！！！"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><strong>需要注意的是03版本和07版本使用的API的不同</strong>，其他的都没有改变</p>
<p>POI03-HSSFWorkbook<br>POI07-XSSFWorkbook<br>SXSSF<br>HSSF：Excel97-2003版本，扩展名为.xls。一个sheet最大行数65536，最大列数256。</p>
<p>XSSF：Excel2007版本开始，扩展名为.xlsx。一个sheet最大行数1048576，最大列数16384。</p>
<p>SXSSF：是在XSSF基础上，POI3.8版本开始提供的支持低内存占用的操作方式，扩展名为.xlsx。</p>
<p>Excel版本兼容性是向下兼容。</p>
<blockquote>
<p>获取excel中的数据原理一样，只是所有的set方法变为get方法而已</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(PATH + <span class="string">"access07.xlsx"</span>);</span><br><span class="line">      Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream);</span><br><span class="line">      Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">      Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">      Cell cell = row.getCell(<span class="number">0</span>);</span><br><span class="line">      String stringCellValue = cell.getStringCellValue();</span><br><span class="line">      System.out.println(stringCellValue + <span class="string">":"</span> + row.getCell(<span class="number">1</span>).getStringCellValue());</span><br><span class="line">      inputStream.close();</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>判断数据类型并读取数据（最复杂的操作,但是形式都是固定的，一般写一次即可，也可以提取为工具类）</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断数据类型并读取数据</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRead07</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">       FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(PATH + <span class="string">"access07.xlsx"</span>);</span><br><span class="line">       Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(inputStream);</span><br><span class="line">       Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//获取第一行的所有标题</span></span><br><span class="line">       Row rowTitle = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">if</span> (rowTitle != <span class="keyword">null</span>) {</span><br><span class="line">           <span class="keyword">int</span> cellsCount = rowTitle.getPhysicalNumberOfCells();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cellsCount; i++) {</span><br><span class="line">               Cell cell = rowTitle.getCell(i);</span><br><span class="line">               <span class="keyword">if</span> (cell != <span class="keyword">null</span>) {</span><br><span class="line">                   String cellValue = cell.getStringCellValue();</span><br><span class="line">                   System.out.print(cellValue + <span class="string">"|"</span>);</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       System.out.println();</span><br><span class="line">       <span class="comment">//获取标题下面的所有行的数据（需要判断类型）</span></span><br><span class="line">       <span class="keyword">int</span> rowsCount = sheet.getPhysicalNumberOfRows();</span><br><span class="line">       <span class="comment">//从第二行开始，所有为1</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> rowNum = <span class="number">1</span>; rowNum &lt; rowsCount; rowNum++) {</span><br><span class="line">           Row rowData = sheet.getRow(rowNum);</span><br><span class="line">           <span class="keyword">if</span> (rowData != <span class="keyword">null</span>) {</span><br><span class="line">               <span class="keyword">int</span> cellsCount = rowData.getPhysicalNumberOfCells();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; cellsCount; cellNum++) {</span><br><span class="line">                   <span class="comment">//测试对应坐标是否正确</span></span><br><span class="line">                   System.out.print(<span class="string">"["</span> + (rowNum + <span class="number">1</span>) + <span class="string">"-"</span> + (cellNum + <span class="number">1</span>) + <span class="string">"]"</span>);</span><br><span class="line">                   <span class="comment">//读取对应的值</span></span><br><span class="line">                   Cell cell = rowData.getCell(cellNum);</span><br><span class="line">                   String cellValue = <span class="string">""</span>;</span><br><span class="line">                   <span class="keyword">if</span> (cell != <span class="keyword">null</span>) {</span><br><span class="line">                       <span class="comment">//类型匹配</span></span><br><span class="line">                       CellType cellTypeEnum = cell.getCellTypeEnum();</span><br><span class="line">                       <span class="keyword">switch</span> (cellTypeEnum) {</span><br><span class="line">                           <span class="keyword">case</span> STRING:</span><br><span class="line">                               cellValue = cell.getStringCellValue();</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                               cellValue = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="comment">//数字（日期和普通数字）</span></span><br><span class="line">                           <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                               <span class="comment">//判断是否日期并格式化输出</span></span><br><span class="line">                               <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) {</span><br><span class="line">                                   cellValue = <span class="keyword">new</span> DateTime(cell.getDateCellValue()).toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">                               } <span class="keyword">else</span> {</span><br><span class="line">                                   <span class="comment">//DecimalFormat 是 NumberFormat 的一个具体子类，用于格式化十进制数字（防止数字过大而展示为科学计数法的样式）</span></span><br><span class="line">                                   DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">"#"</span>);</span><br><span class="line">                                   cellValue = decimalFormat.format(cell.getNumericCellValue());</span><br><span class="line">                               }</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> BLANK:</span><br><span class="line">                               System.out.println(<span class="string">"数据为空"</span>);</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> ERROR:</span><br><span class="line">                               System.out.println(<span class="string">"数据类型错误"</span>);</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">default</span>:</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       }</span><br><span class="line">                       System.out.println(cellValue);</span><br><span class="line">                   }</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       inputStream.close();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="easyExcel"><a href="#easyExcel" class="headerlink" title="easyExcel"></a><code>easyExcel</code></h4><p>导入依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意它里面自带poi依赖，所有不需要下面的重复引入，如果重复带入会报ClassNotfound--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0-beta2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>先来个实体类方便插入测试</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName("tb_operational_log")</span></span><br><span class="line"><span class="meta">@ApiModel(value = "OperationalLog对象", description = "操作日志信息")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationalLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "日志ID"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "日志ID")</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作类型"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作类型")</span></span><br><span class="line">    <span class="keyword">private</span> String operType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作描述"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作描述")</span></span><br><span class="line">    <span class="keyword">private</span> String operDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作员ID"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作员ID")</span></span><br><span class="line">    <span class="keyword">private</span> String operUserId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作员名称"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作员名称")</span></span><br><span class="line">    <span class="keyword">private</span> String operUserName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作方法"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作方法")</span></span><br><span class="line">    <span class="keyword">private</span> String operMethod;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求参数"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求参数")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequParams;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求Body"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求Body")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequBody;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求IP"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求IP")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequIp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "请求URL"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求URL")</span></span><br><span class="line">    <span class="keyword">private</span> String operRequUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "操作状态"})</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作状态:1-成功,0-失败")</span></span><br><span class="line">    <span class="meta">@TableField(value = "is_success")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelIgnore</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "逻辑删除 1-未删除， 0-删除")</span></span><br><span class="line">    <span class="meta">@TableField(value = "is_deleted")</span></span><br><span class="line">    <span class="meta">@TableLogic(value = "1", delval = "0")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty({"操作日志", "创建时间"})</span></span><br><span class="line">    <span class="meta">@DateTimeFormat("yyyy-MM-dd HH:mm:ss")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "创建时间")</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>写入测试<code>controller</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@OperatingLog(operType = BlogConstants.EXPORT, operDesc = "导出操作日志")</span></span><br><span class="line"><span class="meta">@ApiOperation("导出操作日志")</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = "operational", value = "操作日志标记", type = "String", required = true)</span></span><br><span class="line"><span class="meta">@GetMapping("/oper/export/{operational}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">operLogExport</span><span class="params">(<span class="meta">@PathVariable("operational")</span> String operational)</span> </span>{</span><br><span class="line">    operationalLogService.operLogExport(operational);</span><br><span class="line">    <span class="keyword">return</span> R.ok().message(<span class="string">"日志导出成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>写入测试<code>service</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出操作日志(当达到百万级数据量的时候,就要考虑导出效率问题)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> operational</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operLogExport</span><span class="params">(String operational)</span> </span>{</span><br><span class="line">    List&lt;OperationalLog&gt; operationalLogs =             <span class="keyword">this</span>.list(newLambdaQueryWrapper&lt;OperationalLog().orderByDesc(OperationalLog::getGmtCreate));</span><br><span class="line">    <span class="comment">// 文件最终路径:文件夹路径+operational+当前系统毫秒数+当前日期</span></span><br><span class="line">    <span class="keyword">long</span> millis = System.currentTimeMillis();</span><br><span class="line">    String fileFinalPath = BlogConstants.EXPORT_FILE_PATH + operational + <span class="string">"_"</span> + millis + <span class="string">"_"</span> +</span><br><span class="line">            DateUtil.format(DateUtil.date(millis), <span class="string">"yyyy-MM-dd"</span>) + BlogConstants.EXCEL_FILE_SUFFIX;</span><br><span class="line">    EasyExcel.write(fileFinalPath, OperationalLog.class).sheet(<span class="string">"操作信息日志"</span>).doWrite(operationalLogs);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>easyExcel的数据读取操作：需要一个监听器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDataListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">DemoData</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DemoDataListener.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_COUNT = <span class="number">5</span>;</span><br><span class="line">    List&lt;DemoData&gt; list = <span class="keyword">new</span> ArrayList&lt;DemoData&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DemoDAO demoDAO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoDataListener</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span></span><br><span class="line">        demoDAO = <span class="keyword">new</span> DemoDAO();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> demoDAO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoDataListener</span><span class="params">(DemoDAO demoDAO)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.demoDAO = demoDAO;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个每一条数据解析都会来调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    one row value. Is is same as {<span class="doctag">@link</span> AnalysisContext#readRowHolder()}</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(DemoData data, AnalysisContext context)</span> </span>{</span><br><span class="line">        LOGGER.info(<span class="string">"解析到一条数据:{}"</span>, JSON.toJSONString(data));</span><br><span class="line">        System.out.println(JSON.toJSONString(data));</span><br><span class="line">        list.add(data);</span><br><span class="line">        <span class="comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= BATCH_COUNT) {</span><br><span class="line">            saveData();</span><br><span class="line">            <span class="comment">// 存储完成清理 list</span></span><br><span class="line">            list.clear();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有数据解析完成了 都会来调用(相当于AOP的方法处理效果)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext context)</span> </span>{</span><br><span class="line">        <span class="comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span></span><br><span class="line">        saveData();</span><br><span class="line">        LOGGER.info(<span class="string">"所有数据解析完成！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上存储数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">()</span> </span>{</span><br><span class="line">        LOGGER.info(<span class="string">"{}条数据，开始存储数据库！"</span>, list.size());</span><br><span class="line">        demoDAO.save(list);</span><br><span class="line">        LOGGER.info(<span class="string">"存储数据库成功！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>用于测试的假DAO</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设这个是你的DAO存储。当然还要这个类让spring管理，当然你不用需要存储，也不需要这个类。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDAO</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(List&lt;DemoData&gt; list)</span> </span>{</span><br><span class="line">        <span class="comment">// 如果是mybatis,尽量别直接调用多次insert,自己写一个mapper里面新增一个方法batchInsert,所有数据一次性插入</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>读取测试(填入相应的参数即可)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">easyRead</span><span class="params">()</span> </span>{</span><br><span class="line">        String fileName = PATH + <span class="string">"easyTest.xlsx"</span>;</span><br><span class="line">        EasyExcel.read(fileName,DemoData.class,<span class="keyword">new</span> DemoDataListener()).sheet(<span class="string">"网站访问信息"</span>).doRead();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="8-springboot统一返回"><a href="#8-springboot统一返回" class="headerlink" title="8.springboot统一返回"></a>8.springboot统一返回</h3><blockquote>
<p>创建返回结果枚举类ResultCodeEnum</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/12/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCodeEnum</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 状态码和响应消息根据业务来进行定制</span></span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="keyword">true</span>, <span class="number">20000</span>,<span class="string">"成功"</span>),</span><br><span class="line">    UNKNOWN_REASON(<span class="keyword">false</span>, <span class="number">20001</span>, <span class="string">"未知错误"</span>),</span><br><span class="line"></span><br><span class="line">    BAD_SQL_GRAMMAR(<span class="keyword">false</span>, <span class="number">21001</span>, <span class="string">"sql语法错误"</span>),</span><br><span class="line">    JSON_PARSE_ERROR(<span class="keyword">false</span>, <span class="number">21002</span>, <span class="string">"json解析异常"</span>),</span><br><span class="line">    PARAM_ERROR(<span class="keyword">false</span>, <span class="number">21003</span>, <span class="string">"参数不正确"</span>),</span><br><span class="line"></span><br><span class="line">    FILE_UPLOAD_ERROR(<span class="keyword">false</span>, <span class="number">21004</span>, <span class="string">"文件上传错误"</span>),</span><br><span class="line">    FILE_DELETE_ERROR(<span class="keyword">false</span>, <span class="number">21005</span>, <span class="string">"文件刪除错误"</span>),</span><br><span class="line">    EXCEL_DATA_IMPORT_ERROR(<span class="keyword">false</span>, <span class="number">21006</span>, <span class="string">"Excel数据导入错误"</span>),</span><br><span class="line"></span><br><span class="line">    VIDEO_UPLOAD_ALIYUN_ERROR(<span class="keyword">false</span>, <span class="number">22001</span>, <span class="string">"视频上传至阿里云失败"</span>),</span><br><span class="line">    VIDEO_UPLOAD_TOMCAT_ERROR(<span class="keyword">false</span>, <span class="number">22002</span>, <span class="string">"视频上传至业务服务器失败"</span>),</span><br><span class="line">    VIDEO_DELETE_ALIYUN_ERROR(<span class="keyword">false</span>, <span class="number">22003</span>, <span class="string">"阿里云视频文件删除失败"</span>),</span><br><span class="line">    FETCH_VIDEO_UPLOADAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22004</span>, <span class="string">"获取上传地址和凭证失败"</span>),</span><br><span class="line">    REFRESH_VIDEO_UPLOADAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22005</span>, <span class="string">"刷新上传地址和凭证失败"</span>),</span><br><span class="line">    FETCH_PLAYAUTH_ERROR(<span class="keyword">false</span>, <span class="number">22006</span>, <span class="string">"获取播放凭证失败"</span>),</span><br><span class="line"></span><br><span class="line">    URL_ENCODE_ERROR(<span class="keyword">false</span>, <span class="number">23001</span>, <span class="string">"URL编码失败"</span>),</span><br><span class="line">    ILLEGAL_CALLBACK_REQUEST_ERROR(<span class="keyword">false</span>, <span class="number">23002</span>, <span class="string">"非法回调请求"</span>),</span><br><span class="line">    FETCH_ACCESSTOKEN_FAILD(<span class="keyword">false</span>, <span class="number">23003</span>, <span class="string">"获取accessToken失败"</span>),</span><br><span class="line">    FETCH_USERINFO_ERROR(<span class="keyword">false</span>, <span class="number">23004</span>, <span class="string">"获取用户信息失败"</span>),</span><br><span class="line">    LOGIN_ERROR(<span class="keyword">false</span>, <span class="number">23005</span>, <span class="string">"登录失败"</span>),</span><br><span class="line"></span><br><span class="line">    COMMENT_EMPTY(<span class="keyword">false</span>, <span class="number">24006</span>, <span class="string">"评论内容必须填写"</span>),</span><br><span class="line"></span><br><span class="line">    PAY_RUN(<span class="keyword">false</span>, <span class="number">25000</span>, <span class="string">"支付中"</span>),</span><br><span class="line">    PAY_UNIFIEDORDER_ERROR(<span class="keyword">false</span>, <span class="number">25001</span>, <span class="string">"统一下单错误"</span>),</span><br><span class="line">    PAY_ORDERQUERY_ERROR(<span class="keyword">false</span>, <span class="number">25002</span>, <span class="string">"查询支付结果错误"</span>),</span><br><span class="line"></span><br><span class="line">    ORDER_EXIST_ERROR(<span class="keyword">false</span>, <span class="number">25003</span>, <span class="string">"课程已购买"</span>),</span><br><span class="line"></span><br><span class="line">    GATEWAY_ERROR(<span class="keyword">false</span>, <span class="number">26000</span>, <span class="string">"服务不能访问"</span>),</span><br><span class="line"></span><br><span class="line">    CODE_ERROR(<span class="keyword">false</span>, <span class="number">28000</span>, <span class="string">"验证码错误"</span>),</span><br><span class="line"></span><br><span class="line">    LOGIN_PHONE_ERROR(<span class="keyword">false</span>, <span class="number">28009</span>, <span class="string">"手机号码不正确"</span>),</span><br><span class="line">    LOGIN_MOBILE_ERROR(<span class="keyword">false</span>, <span class="number">28001</span>, <span class="string">"账号不正确"</span>),</span><br><span class="line">    LOGIN_PASSWORD_ERROR(<span class="keyword">false</span>, <span class="number">28008</span>, <span class="string">"密码不正确"</span>),</span><br><span class="line">    LOGIN_DISABLED_ERROR(<span class="keyword">false</span>, <span class="number">28002</span>, <span class="string">"该用户已被禁用"</span>),</span><br><span class="line">    REGISTER_MOBLE_ERROR(<span class="keyword">false</span>, <span class="number">28003</span>, <span class="string">"手机号已被注册"</span>),</span><br><span class="line">    REQUEST_TOKEN_ERROR(<span class="keyword">false</span>, <span class="number">28008</span>, <span class="string">"请求token失败"</span>),</span><br><span class="line">    LOGIN_AUTH(<span class="keyword">false</span>, <span class="number">28004</span>, <span class="string">"需要登录"</span>),</span><br><span class="line">    LOGIN_ACL(<span class="keyword">false</span>, <span class="number">28005</span>, <span class="string">"没有权限"</span>),</span><br><span class="line">    SMS_SEND_ERROR(<span class="keyword">false</span>, <span class="number">28006</span>, <span class="string">"短信发送失败"</span>),</span><br><span class="line">    SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL(<span class="keyword">false</span>, <span class="number">28007</span>, <span class="string">"短信发送过于频繁"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(Boolean success, Integer code, String message) {</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>创建返回结果实体类R.class</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = "全局统一返回结果")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "是否成功")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回码")</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回消息")</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回数据")</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功:无数据返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R对象:可以链式调用此类的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">ok</span><span class="params">()</span></span>{</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.SUCCESS.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.SUCCESS.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.SUCCESS.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误:无数据返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> R对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span></span>{</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(ResultCodeEnum.UNKNOWN_REASON.getSuccess());</span><br><span class="line">        r.setCode(ResultCodeEnum.UNKNOWN_REASON.getCode());</span><br><span class="line">        r.setMessage(ResultCodeEnum.UNKNOWN_REASON.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功:响应枚举类自定义的状态码和消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCodeEnum  自定义枚举类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">setResult</span><span class="params">(ResultCodeEnum resultCodeEnum)</span></span>{</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(resultCodeEnum.getSuccess());</span><br><span class="line">        r.setCode(resultCodeEnum.getCode());</span><br><span class="line">        r.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">success</span><span class="params">(Boolean success)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">message</span><span class="params">(String message)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">code</span><span class="params">(Integer code)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(String key, Object value)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重载map类型的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">data</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.setData(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>使用实例</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Api("后台管理讲师API")</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span>  <span class="comment">// 响应json类型数据</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin/edu/teacher")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("获取讲师列表")</span></span><br><span class="line">    <span class="meta">@GetMapping("/list")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;Teacher&gt; teachers = teacherService.list();</span><br><span class="line">        <span class="keyword">boolean</span> empty = CollectionUtils.isEmpty(teachers);</span><br><span class="line">        <span class="keyword">return</span> empty ? R.error().message(<span class="string">"资源未找到"</span>) : R.ok().data(<span class="string">"items"</span>, teachers);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="9-springboot异常处理-需要和统一响应结果集合配置"><a href="#9-springboot异常处理-需要和统一响应结果集合配置" class="headerlink" title="9.springboot异常处理(需要和统一响应结果集合配置)"></a>9.springboot异常处理(需要和统一响应结果集合配置)</h3><blockquote>
<p>@RestControllerAdvice:此注解说明这时一个全局异常处理的类</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 15:30</span></span><br><span class="line"><span class="comment"> * 原理：当系统捕获到异常时，会匹配最接近的异常方法BadSqlGrammarException.class，如果没有匹配到，就直接定位到Exception.class的异常方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用异常处理：只要出现异常，最终匹配的处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(Exception e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特定异常处理:sql语句错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BadSqlGrammarException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(BadSqlGrammarException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.BAD_SQL_GRAMMAR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特定异常处理：json解析异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(HttpMessageNotReadableException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.JSON_PARSE_ERROR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(MethodArgumentNotValidException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常处理：最方便灵活的（需要自定义一个异常类：GuliException.class）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(GuliException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(GuliException e)</span> </span>{</span><br><span class="line">        log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        <span class="keyword">return</span> R.error().message(e.getMessage()).code(e.getCode());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>自定义异常处理类：GuliException.class</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuliException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7683466324584252019L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受状态码和消息，并且R.error()默认的是否成功的结果为false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GuliException</span><span class="params">(Integer code, String message)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code=code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收枚举类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultCodeEnum</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GuliException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">this</span>.code = resultCodeEnum.getCode();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toString方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"GuliException{"</span> +</span><br><span class="line">                <span class="string">"code="</span> + code +</span><br><span class="line">                <span class="string">"message="</span> + <span class="keyword">this</span>.getMessage() +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>整体配置优化：自定义一个异常信息工具类ExceptionUtils：用于打印错误跟踪栈信息到控制台和日志文件中</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2019/9/25</span></span><br><span class="line"><span class="comment"> * 用于打印错误跟踪栈信息到控制台和日志文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMessage</span><span class="params">(Exception e)</span> </span>{</span><br><span class="line">        StringWriter sw = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            pw = <span class="keyword">new</span> PrintWriter(sw);</span><br><span class="line">            <span class="comment">// 将出错的栈信息输出到printWriter中</span></span><br><span class="line">            e.printStackTrace(pw);</span><br><span class="line">            pw.flush();</span><br><span class="line">            sw.flush();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (sw != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    sw.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e1) {</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (pw != <span class="keyword">null</span>) {</span><br><span class="line">                pw.close();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>使用实例：里面throw出自定义异常信息</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SendSmsUtils sendSmsUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties smsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mobile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendVerifyCode</span><span class="params">(String mobile)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(mobile) || !RegularMatchUtils.isMobile(mobile)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 生成6位验证码</span></span><br><span class="line">        String code = RandomUtils.generateCode(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 调用短信发送业务工具</span></span><br><span class="line">            JSONObject object = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            object.put(<span class="string">"code"</span>, code);</span><br><span class="line">            sendSmsUtils.sendSms(mobile, object.toString(), smsProperties.getSignName(), smsProperties.getTemplateCode());</span><br><span class="line">            <span class="comment">// 验证码存入redis:设置5分钟后过期</span></span><br><span class="line">            redisTemplate.opsForValue().set(mobile, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="comment">// 抛出自定义异常，响应信息更加明确，错误位置更加明朗！！！</span></span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="comment">// 里面也可以接收统一结果枚举类</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.SMS_SEND_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="10-SpringAop-Redis分布式锁（防重复提交）"><a href="#10-SpringAop-Redis分布式锁（防重复提交）" class="headerlink" title="10.SpringAop+Redis分布式锁（防重复提交）"></a>10.SpringAop+Redis分布式锁（防重复提交）</h3><h4 id="创建注解"><a href="#创建注解" class="headerlink" title="创建注解"></a>创建注解</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/27 15:10</span></span><br><span class="line"><span class="comment"> * 不重复提交(集合redis分布式锁)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoRepeatSubmit {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置请求锁定时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lockTime</span><span class="params">()</span> <span class="keyword">default</span> 10</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="创建加锁-解锁工具类"><a href="#创建加锁-解锁工具类" class="headerlink" title="创建加锁/解锁工具类"></a>创建加锁/解锁工具类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/27 15:51</span></span><br><span class="line"><span class="comment"> * 分布式锁工具类(不是最好的加锁/解锁方式)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockUtils</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey   加锁键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientId  加锁客户端唯一标识(采用UUID)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime   锁过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, String clientId, <span class="keyword">long</span> expireTime)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(lockKey, clientId, expireTime, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unLock</span><span class="params">(String lockKey, String clientId)</span> </span>{</span><br><span class="line">        String currentValue = redisTemplate.opsForValue().get(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(currentValue) &amp;&amp; StringUtils.equals(clientId, currentValue)) {</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForValue().getOperations().delete(lockKey);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="编写SpringAop环绕通知"><a href="#编写SpringAop环绕通知" class="headerlink" title="编写SpringAop环绕通知"></a>编写SpringAop环绕通知</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepeatSubmitAspect</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockUtils redisLockUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(noRepeatSubmit)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repeatSubmit</span><span class="params">(NoRepeatSubmit noRepeatSubmit)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = "repeatSubmit(noRepeatSubmit)", argNames = "joinPoint,noRepeatSubmit")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">noRepeatSubmit</span><span class="params">(ProceedingJoinPoint joinPoint, NoRepeatSubmit noRepeatSubmit)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="comment">// 获取默认锁定过期时间</span></span><br><span class="line">        <span class="keyword">int</span> lockTime = noRepeatSubmit.lockTime();</span><br><span class="line">        <span class="comment">// 获取设置锁的必要参数</span></span><br><span class="line">        ServletRequestAttributes r = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = r.getRequest();</span><br><span class="line">        <span class="comment">// 获取token</span></span><br><span class="line">        String token = request.getHeader(BlogConstants.TOKEN);</span><br><span class="line">        <span class="comment">// 获取请求的全方法名</span></span><br><span class="line">        String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        String fullMethodName = className + <span class="string">"."</span> + methodName;</span><br><span class="line">        <span class="comment">// 设置key</span></span><br><span class="line">        String key = token + <span class="string">"_"</span> + fullMethodName;</span><br><span class="line">        String clientId = IdUtil.fastSimpleUUID();</span><br><span class="line">        <span class="comment">// 开始加锁</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = redisLockUtils.tryLock(key, clientId, lockTime);</span><br><span class="line">        <span class="keyword">if</span> (tryLock) {</span><br><span class="line">            log.info(<span class="string">"tryLock success, key = {},clientId = {}"</span>, key, clientId);</span><br><span class="line">            Object result;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                result = joinPoint.proceed();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 最终执行:解锁</span></span><br><span class="line">                redisLockUtils.unLock(key, clientId);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.info(<span class="string">"tryLock fail, key = {}"</span>, key);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.REQUEST_ALREADY_SUBMIT);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="congtroller层添加注解示例-一般只添加在post请求接口上面"><a href="#congtroller层添加注解示例-一般只添加在post请求接口上面" class="headerlink" title="congtroller层添加注解示例(一般只添加在post请求接口上面)"></a>congtroller层添加注解示例(一般只添加在post请求接口上面)</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@OperatingLog(operType = BlogConstants.ADD,operDesc = "新增博客")</span></span><br><span class="line"><span class="meta">@ApiOperation(value = "保存博客", notes = "保存博客,增加用户积分")</span></span><br><span class="line"><span class="meta">@PostMapping("/save")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> BlogInfoVO blogInfoVO, HttpServletRequest request)</span> </span>{</span><br><span class="line">    blogService.saveBlog(blogInfoVO, request);</span><br><span class="line">    <span class="keyword">return</span> R.ok().message(<span class="string">"保存成功"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="11-Springboot-security-Json版"><a href="#11-Springboot-security-Json版" class="headerlink" title="11.Springboot-security(Json版)"></a>11.Springboot-security(Json版)</h3><h4 id="1-创建实体类User"><a href="#1-创建实体类User" class="headerlink" title="1. 创建实体类User"></a>1. 创建实体类User</h4><blockquote>
<p>实体类User继承UserDetails</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.security.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-10-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName("tb_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">UserDetails</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户是否可用：默认为1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户是否锁定：默认为1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean locked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id, String username, String password, Boolean enable, Boolean locked, List&lt;Role&gt; roles)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.enable = enable;</span><br><span class="line">        <span class="keyword">this</span>.locked = locked;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSerialVersionUID</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> serialVersionUID;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getEnabled</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(Boolean enabled)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.enable = enabled;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getLocked</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> locked;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocked</span><span class="params">(Boolean locked)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.locked = locked;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", enable="</span> + enable +</span><br><span class="line">                <span class="string">", locked="</span> + locked +</span><br><span class="line">                <span class="string">", roles="</span> + roles +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取当前用户的用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前账户是否未过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前账户是否未锁定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> locked;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前账户密码是否未过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前账户是否可用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取当前用户的所有角色信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) {</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleDescription()));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取当前用户的密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-创建UserDetailsServiceImpl"><a href="#2-创建UserDetailsServiceImpl" class="headerlink" title="2.创建UserDetailsServiceImpl"></a>2.创建UserDetailsServiceImpl</h4><blockquote>
<p>UserDetailsServiceImpl继承UserDetailsService</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.security.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.entity.Role;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.entity.UserRoleRelation;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.service.RoleService;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.service.UserRoleRelationService;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/4 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleRelationService userRoleRelationService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 通过用户输入的账户名判断该账户是否存在，存在才进行用户角色信息的查找，</span></span><br><span class="line"><span class="comment">     *                 然后才有DaoAuthenticationProvider校验密码,根据校验产生的异常信息响应数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>{</span><br><span class="line">        <span class="comment">// 用户是否存在</span></span><br><span class="line">        User currentUser = userService.getOne(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().lambda().eq(User::getUsername, username));</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(currentUser)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"该用户不存在！"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 设置roles</span></span><br><span class="line">        List&lt;String&gt; roleIds = userRoleRelationService.list(<span class="keyword">new</span> QueryWrapper&lt;UserRoleRelation&gt;().lambda().eq(UserRoleRelation::getUserId, currentUser.getId()))</span><br><span class="line">                .stream().map(UserRoleRelation::getRoleId).collect(Collectors.toList());</span><br><span class="line">        currentUser.setRoles(roleService.list(<span class="keyword">new</span> QueryWrapper&lt;Role&gt;().lambda().in(Role::getId, roleIds)));</span><br><span class="line">        <span class="comment">// 返回用户信息</span></span><br><span class="line">        <span class="keyword">return</span> currentUser;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-创建WebSecurityConfig"><a href="#3-创建WebSecurityConfig" class="headerlink" title="3.创建WebSecurityConfig"></a>3.创建WebSecurityConfig</h4><blockquote>
<p>WebSecurityConfig继承WebSecurityConfigurerAdapter</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.security.service.impl.UserDetailsServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/4 16:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        auth.userDetailsService(userDetailsService) <span class="comment">// 配置认证方式和加密方式</span></span><br><span class="line">                .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        http.authorizeRequests() </span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"root"</span>) <span class="comment">// 访问admin路径下的任何资源都需要root角色</span></span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 其他任何路径请求都必须授权</span></span><br><span class="line">                .and()</span><br><span class="line">                .exceptionHandling() <span class="comment">// 异常处理(权限拒绝、登录失效等)</span></span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 而在前后端分离的情况下（比如前台使用VUE或JQ等）我们需要的是在前台接收到"用户未登录"的提示信息，</span></span><br><span class="line"><span class="comment">                 * 所以我们接下来要做的就是屏蔽重定向的登录页面，并返回统一的json格式的返回体。</span></span><br><span class="line"><span class="comment">                 * 而实现这一功能的核心就是实现AuthenticationEntryPoint并在WebSecurityConfig中注入，</span></span><br><span class="line"><span class="comment">                 * 然后在configure(HttpSecurity http)方法中。</span></span><br><span class="line"><span class="comment">                 * AuthenticationEntryPoint主要是用来处理匿名用户访问无权限资源时的异常（即未登录，或者登录状态过期失效）</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> AuthenticationEntryPoint() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">                         <span class="comment">// 实际应该返json统一结果</span></span><br><span class="line">                        response.setContentType(<span class="string">"text/json;charset=utf-8"</span>);</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                        map.put(<span class="string">"status"</span>, <span class="number">403</span>);</span><br><span class="line">                        map.put(<span class="string">"msg"</span>, <span class="string">"请检查是否登录"</span>);</span><br><span class="line">                        response.getWriter().write(mapper.writeValueAsString(map));</span><br><span class="line">                        response.getWriter().flush();</span><br><span class="line">                        response.getWriter().close();</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin().permitAll() <span class="comment">// 默认登录路径"/login"</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() { <span class="comment">// 登录成功后的业务逻辑</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication auth)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">                         <span class="comment">// 实际应该返json统一结果</span></span><br><span class="line">                        Object principal = auth.getPrincipal();</span><br><span class="line">                        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                        PrintWriter out = response.getWriter();</span><br><span class="line">                        response.setStatus(<span class="number">200</span>);</span><br><span class="line">                        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                        map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                        map.put(<span class="string">"msg"</span>, principal);</span><br><span class="line">                        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        out.write(om.writeValueAsString(map));</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() { <span class="comment">// 登录失败后的业务逻辑</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">                        <span class="comment">// 实际应该返json统一结果</span></span><br><span class="line">                        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                        PrintWriter out = response.getWriter();</span><br><span class="line">                        response.setStatus(<span class="number">401</span>);</span><br><span class="line">                        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                        map.put(<span class="string">"status"</span>, <span class="number">401</span>);</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) {</span><br><span class="line">                            map.put(<span class="string">"msg"</span>, <span class="string">"账户被锁定，登录失败!"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) {</span><br><span class="line">                            map.put(<span class="string">"msg"</span>, <span class="string">"账户名或密码输入错误，登录失败!"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException) {</span><br><span class="line">                            map.put(<span class="string">"msg"</span>, <span class="string">"账户被禁用，登录失败!"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) {</span><br><span class="line">                            map.put(<span class="string">"msg"</span>, <span class="string">"账户已过期，登录失败!"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) {</span><br><span class="line">                            map.put(<span class="string">"msg"</span>, <span class="string">"密码已过期，登录失败!"</span>);</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            map.put(<span class="string">"msg"</span>, <span class="string">"登录失败!"</span>);</span><br><span class="line">                        }</span><br><span class="line">                        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        out.write(om.writeValueAsString(map));</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .and()</span><br><span class="line">                .logout().permitAll() <span class="comment">// 默认退出路径"/logout"</span></span><br><span class="line">                .logoutSuccessHandler(<span class="keyword">new</span> LogoutSuccessHandler() { <span class="comment">// 退出成功后的业务逻辑</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">                         <span class="comment">// 实际应该返json统一结果</span></span><br><span class="line">                        response.setContentType(<span class="string">"text/json;charset=utf-8"</span>);</span><br><span class="line">                        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">                        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                        map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                        map.put(<span class="string">"msg"</span>, <span class="string">"退出成功"</span>);</span><br><span class="line">                        response.getWriter().write(mapper.writeValueAsString(map));</span><br><span class="line">                        response.getWriter().flush();</span><br><span class="line">                        response.getWriter().close();</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .deleteCookies(<span class="string">"JSESSIONID"</span>)<span class="comment">//登出之后删除cookie</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="12-springboot整合rabbitmq实现邮件发送"><a href="#12-springboot整合rabbitmq实现邮件发送" class="headerlink" title="12.springboot整合rabbitmq实现邮件发送"></a>12.springboot整合rabbitmq实现邮件发送</h3><blockquote>
<p>实例效果：整合rabbitmq和quartz实现简单的高效率消息投递</p>
</blockquote>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><blockquote>
<p>用到的工具类和sql建表语句</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.common.util.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> To0To0/10/17 1To:ToTo</span></span><br><span class="line"><span class="comment"> * jackson序列化工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">// 统一日期格式yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">objToString</span><span class="params">(T obj)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> String ? (String) obj : objectMapper.writeValueAsString(obj);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.warn(<span class="string">"Parse object to String error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">objToStringPretty</span><span class="params">(T obj)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> obj <span class="keyword">instanceof</span> String ? (String) obj :</span><br><span class="line">                    objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(obj);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.warn(<span class="string">"Parse object to String error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">stringToObj</span><span class="params">(String str, Class&lt;T&gt; clazz)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(str) || clazz == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> clazz.equals(String.class) ? (T) str : objectMapper.readValue(str, clazz);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.warn(<span class="string">"Parse String to Object error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">stringToObj</span><span class="params">(String str, TypeReference&lt;T&gt; typeReference)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(str) || typeReference == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> (T) (typeReference.getType().equals(String.class) ? str : objectMapper.readValue(str,</span><br><span class="line">                    typeReference));</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.warn(<span class="string">"Parse String to Object error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">stringToObj</span><span class="params">(String str, Class&lt;?&gt; collectionClass, Class&lt;?&gt;... elementClasses)</span> </span>{</span><br><span class="line">        JavaType javaType = objectMapper.getTypeFactory().constructParametricType(collectionClass, elementClasses);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(str, javaType);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.warn(<span class="string">"Parse String to Object error"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.utils.ExceptionUtils;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.vo.SendMailInfoVO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.apache.bcel.classfile.Code;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/9 15:11</span></span><br><span class="line"><span class="comment"> * 邮件发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${spring.mail.username}")</span></span><br><span class="line">    <span class="keyword">private</span> String sendUsername;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收自定义Map类型的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendComplateMail</span><span class="params">(Map&lt;String, Object&gt; mapInfo)</span> </span>{</span><br><span class="line">        MimeMessage mimeMessage;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//设置发件人邮箱</span></span><br><span class="line">            helper.setFrom(sendUsername);</span><br><span class="line">            <span class="comment">//设置收件人邮箱（可以是字符串数组）</span></span><br><span class="line">            helper.setTo(String.valueOf(mapInfo.get(<span class="string">"to"</span>)));</span><br><span class="line">            <span class="comment">//设置邮件标题</span></span><br><span class="line">            helper.setSubject(String.valueOf(mapInfo.get(<span class="string">"title"</span>)));</span><br><span class="line">            <span class="comment">//设置邮件正文</span></span><br><span class="line">            helper.setText(String.valueOf(mapInfo.get(<span class="string">"html"</span>)), <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//开始发送</span></span><br><span class="line">            javaMailSender.send(mimeMessage);</span><br><span class="line">        } <span class="keyword">catch</span> (MessagingException e) {</span><br><span class="line">            log.error(<span class="string">"邮件发送失败！"</span>);</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送html模板邮件:接收网页参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendTo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 发送状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendHtmlMail</span><span class="params">(String title, String[] sendTo, String html)</span> <span class="keyword">throws</span> MessagingException </span>{</span><br><span class="line">        MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置发件人邮箱</span></span><br><span class="line">        helper.setFrom(sendUsername);</span><br><span class="line">        <span class="comment">//设置收件人邮箱（可以是字符串数组）</span></span><br><span class="line">        helper.setTo(sendTo);</span><br><span class="line">        <span class="comment">//设置邮件标题</span></span><br><span class="line">        helper.setSubject(title);</span><br><span class="line">        <span class="comment">//设置邮件正文</span></span><br><span class="line">        helper.setText(html, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//开始发送</span></span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">-- 消息持久化表结构</span><br><span class="line">DROP TABLE IF EXISTS `tb_message_log`;</span><br><span class="line">CREATE TABLE `tb_message_log` (</span><br><span class="line">  `id` CHAR(19) NOT NULL COMMENT '消息唯一标识',</span><br><span class="line">  `msg` TEXT COMMENT '消息内容：json格式化',</span><br><span class="line">  `exchange` VARCHAR(255) NOT NULL COMMENT '交换机',</span><br><span class="line">  `routing_key` VARCHAR(255) NOT NULL COMMENT '路由键',</span><br><span class="line">  `status` INT(11) UNSIGNED NOT NULL DEFAULT '0' COMMENT '状态: 0-投递中 1-投递成功 2-投递失败 3-消费成功',</span><br><span class="line">  `try_count` INT(11) UNSIGNED NOT NULL DEFAULT '0' COMMENT '重试次数',</span><br><span class="line">  `try_time` DATETIME DEFAULT NULL COMMENT '重试时间',</span><br><span class="line">  `gmt_create` DATETIME DEFAULT NULL COMMENT '创建时间',</span><br><span class="line">  `gmt_modified` DATETIME DEFAULT NULL COMMENT '更新时间',</span><br><span class="line">  `is_deleted` TINYINT(1) UNSIGNED DEFAULT '1' COMMENT '逻辑删除',</span><br><span class="line">  `version` BIGINT UNSIGNED DEFAULT '1' COMMENT '乐观锁',</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `unq_msg_id` (`id`) USING BTREE</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COMMENT='消息投递日志';</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-引入pom"><a href="#1-引入pom" class="headerlink" title="1. 引入pom"></a>1. 引入pom</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-编写application-yml信息配置"><a href="#2-编写application-yml信息配置" class="headerlink" title="2. 编写application.yml信息配置"></a>2. 编写application.yml信息配置</h4><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># rabbitMQ信息配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>    <span class="comment"># 默认可省略</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/horse</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">horse</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">horse</span></span><br><span class="line">    <span class="comment"># 开启投递成功回调 P -&gt; Exchange</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 开启投递消息到队列失败回调 Exchange -&gt; Queue</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 开启手动ACK确认模式 Queue -&gt; C</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 代表手动ACK确认</span></span><br><span class="line">        <span class="comment"># 一些基本参数的设置(也可以不设置,默认即可)</span></span><br><span class="line">        <span class="attr">concurrency:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">15</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-RabbitTemplate的配置"><a href="#3-RabbitTemplate的配置" class="headerlink" title="3. RabbitTemplate的配置"></a>3. RabbitTemplate的配置</h4><blockquote>
<p>主要是配置两个回调函数：</p>
<ul>
<li>消息投递回调函数:ConfirmCallback()</li>
<li>消息由Exchange发送到Queue时失败触发的回调函数：ReturnCallback()</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/17 12:49</span></span><br><span class="line"><span class="comment"> * rabbitmq模板操作bean组件示例的自定义注入配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRabbitConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageLogService messageLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CachingConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义消息序列化机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title">converter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">()</span> </span>{</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">        <span class="comment">// 触发setReturnCallback回调必须设置mandatory=true,否则Exchange没有找到Queue就会丢弃掉消息, 而不会触发回调</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置序列化机制</span></span><br><span class="line">        rabbitTemplate.setMessageConverter(converter());</span><br><span class="line">        <span class="comment">//确认消息发送成功，还是发送丢失, ConfirmCallback  只确认消息是否正确到达 Exchange 中</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 消息投递回调函数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 一般封装消息唯一标识(数据库中的组件id)</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack 投递结果:true or false</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败原因(投递成功时:cause=null)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>{</span><br><span class="line">                log.info(<span class="string">"消息发送到Exchange情况反馈:唯一标识：correlationData={},消息确认：ack={},原因：cause={}"</span>, correlationData.getId(),</span><br><span class="line">                        ack, cause);</span><br><span class="line">                <span class="keyword">if</span> (ObjectUtils.isNotEmpty(correlationData) &amp;&amp; StringUtils.isNotBlank(correlationData.getId())) {</span><br><span class="line">                    MessageLog messageLog = <span class="keyword">new</span> MessageLog().setId(correlationData.getId());</span><br><span class="line">                    <span class="keyword">if</span> (ack) {</span><br><span class="line">                        <span class="comment">// 成功发送到Exchange中后，更新消息发送的状态为投递————成功状态</span></span><br><span class="line">                        messageLog.setStatus(RabbitConstants.DELIVER_SUCCESS);</span><br><span class="line">                        messageLogService.updateById(messageLog);</span><br><span class="line">                        log.info(<span class="string">"投递到Exchange成功"</span>);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="comment">// 发送到Exchange中失败后，更新消息发送的状态为投递————失败状态</span></span><br><span class="line">                        messageLog.setStatus(RabbitConstants.DELIVER_FALSE);</span><br><span class="line">                        messageLogService.updateById(messageLog);</span><br><span class="line">                        log.info(<span class="string">"投递到Exchange失败"</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">// 消息由Exchange发送到Queue时失败触发的回调</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> RabbitTemplate.ReturnCallback() {</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 消息从Exchange到Queue失败回调</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> message 标记消息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyCode 响应码</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyText 相应内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange 交换机</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> routingKey 路由键</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        String routingKey)</span> </span>{</span><br><span class="line">                log.warn(<span class="string">"消息由Exchange发送到Queue时失败:message={},replyCode={},replyText={},exchange={},rountingKey={}"</span>,</span><br><span class="line">                        message, replyCode, replyText, exchange, routingKey);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-controller层API"><a href="#4-controller层API" class="headerlink" title="4. controller层API"></a>4. controller层API</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepeatSubmit</span></span><br><span class="line"><span class="meta">@OperatingLog(operType = BlogConstants.SEND, operDesc = "邮件发送管理")</span></span><br><span class="line"><span class="meta">@ApiOperation("发送群体邮件")</span></span><br><span class="line"><span class="meta">@PostMapping("/send/mail")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">sendMailToAllUser</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> SendMailInfoVO sendMailInfoVO)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(sendMailInfoVO)) {</span><br><span class="line">        <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">boolean</span> send = systemService.sendMailToAllUser(sendMailInfoVO);</span><br><span class="line">    <span class="keyword">return</span> send ? R.ok().message(<span class="string">"邮件发送成功"</span>) : R.error().message(<span class="string">"邮件发送失败"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="4-1-VO类"><a href="#4-1-VO类" class="headerlink" title="4.1 VO类"></a>4.1 VO类</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailInfoVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "邮件主题不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "邮件内容不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "邮件联系人不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String sendTo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于传递入库消息id的字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String messageId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-发送消息（生产者）"><a href="#5-发送消息（生产者）" class="headerlink" title="5. 发送消息（生产者）"></a>5. 发送消息（生产者）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageLogService messageLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送群体邮件(加持RabbitMQ消息机制)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendMailInfoVO 邮件信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 发送状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMailToAllUser</span><span class="params">(SendMailInfoVO sendMailInfoVO)</span> </span>{</span><br><span class="line">        <span class="comment">// 如果参数对象为空:直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(sendMailInfoVO)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 消息入库</span></span><br><span class="line">            MessageLog messageLog = <span class="keyword">new</span> MessageLog()</span><br><span class="line">                    .setMsg(JacksonUtils.objToString(sendMailInfoVO))</span><br><span class="line">                    .setExchange(RabbitConstants.EMAIL_EXCHANGE)</span><br><span class="line">                    .setRoutingKey(RabbitConstants.EMAIL_KEY);</span><br><span class="line">            messageLogService.save(messageLog);</span><br><span class="line">            <span class="comment">// 将入库生成的id写入返回数据中</span></span><br><span class="line">            CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(messageLog.getId());</span><br><span class="line">            <span class="comment">// 将入库生成的id写入消息中传递给消费者</span></span><br><span class="line">            String emailInfo = JacksonUtils.objToString(sendMailInfoVO.setMessageId(messageLog.getId()));</span><br><span class="line">            <span class="comment">// 发送消息到指定队列(无论消息是否发送成功,都不能影响业务逻辑的运行,所以要捕获异常)</span></span><br><span class="line">            rabbitTemplate.convertAndSend(RabbitConstants.EMAIL_EXCHANGE, RabbitConstants.EMAIL_KEY, emailInfo,</span><br><span class="line">                    correlationData);</span><br><span class="line">            <span class="comment">// 没有任何异常返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-监听消息（消费者）"><a href="#6-监听消息（消费者）" class="headerlink" title="6. 监听消息（消费者）"></a>6. 监听消息（消费者）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailUtils emailUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageLogService messageLogService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解式RabbitMQ消息监听器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emailInfo 传递的自定义内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            // 设置队列名称并持久化</span></span><br><span class="line"><span class="meta">            value = @Queue(name = RabbitConstants.EMAIL_QUEUE, durable = RabbitConstants.BOOLEAN_STRING),</span></span><br><span class="line"><span class="meta">            // 消费者对应队列绑定的交换机（必须和相应的生产者绑定相同的交换机）</span></span><br><span class="line"><span class="meta">            // ignoreDeclarationExceptions = "true":忽略声明异常，当交换机已存在的情况下，如果再进行声明应该发生异常，但是这里进行忽略操作。</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = RabbitConstants.EMAIL_EXCHANGE, ignoreDeclarationExceptions =</span></span><br><span class="line"><span class="meta">                    RabbitConstants.BOOLEAN_STRING),</span></span><br><span class="line"><span class="meta">            // 设置路由key，说明用于接收那些指定的信息,可设置多个路由Key</span></span><br><span class="line"><span class="meta">            key = {RabbitConstants.EMAIL_KEY}</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emailListener</span><span class="params">(Message message, Channel channel, String emailInfo)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 获取消息唯一标识</span></span><br><span class="line">        <span class="keyword">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="comment">// 设置重试次数</span></span><br><span class="line">        <span class="keyword">int</span> tryCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// json转化对象</span></span><br><span class="line">        SendMailInfoVO sendMailInfoVO = JacksonUtils.stringToObj(emailInfo, SendMailInfoVO.class);</span><br><span class="line">        <span class="comment">// 根据id查询消息</span></span><br><span class="line">        <span class="keyword">assert</span> sendMailInfoVO != <span class="keyword">null</span>;</span><br><span class="line">        String messageId = sendMailInfoVO.getMessageId();</span><br><span class="line">        MessageLog messageLog = messageLogService.getById(messageId);</span><br><span class="line">        <span class="comment">// 消息发送逻辑</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (ObjectUtils.isNotEmpty(messageLog) &amp;&amp; !RabbitConstants.CONSUME_SUCCESS.equals(messageLog.getStatus()) &amp;&amp; messageLog.getTryCount() &lt; RabbitConstants.RESEND_MAX_TIME) {</span><br><span class="line">                tryCount = messageLog.getTryCount();</span><br><span class="line">                <span class="comment">// 发送邮件</span></span><br><span class="line">                <span class="comment">// 将sendTo转换为字符串数组</span></span><br><span class="line">                String[] sendTo = StringUtils.split(sendMailInfoVO.getSendTo(), <span class="string">","</span>);</span><br><span class="line">                <span class="comment">// 调用邮件发送工具类</span></span><br><span class="line">                <span class="keyword">boolean</span> flag = emailUtils.sendHtmlMail(sendMailInfoVO.getTitle(), sendTo, sendMailInfoVO.getHtml());</span><br><span class="line">                <span class="keyword">if</span> (flag) {</span><br><span class="line">                    <span class="comment">// 邮件发送成功:更新消息状态</span></span><br><span class="line">                    messageLogService.updateById(<span class="keyword">new</span> MessageLog().setId(messageId).setStatus(RabbitConstants.CONSUME_SUCCESS));</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 消费确认:只确认当前这一条</span></span><br><span class="line"><span class="comment">                     * channel.basicNack(delivery.getEnvelope().getDeliveryTag(), false);</span></span><br><span class="line"><span class="comment">                     * deliveryTag:该消息的index</span></span><br><span class="line"><span class="comment">                     * multiple：是否批量 true:将一次性ack所有小于deliveryTag的消息。</span></span><br><span class="line"><span class="comment">                     * */</span></span><br><span class="line">                    channel.basicAck(tag, <span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="comment">// 发送异常:重新发送三次</span></span><br><span class="line">            <span class="keyword">if</span> (tryCount &lt; RabbitConstants.RESEND_MAX_TIME) {</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 重入队列的消息，会被再次重试发送，每重试一次，重试次数加“1”</span></span><br><span class="line"><span class="comment">                 * channel.basicNack(tag, false, true)</span></span><br><span class="line"><span class="comment">                 * deliveryTag:该消息的index</span></span><br><span class="line"><span class="comment">                 * multiple：是否批量 true:将一次性拒绝所有小于deliveryTag的消息。</span></span><br><span class="line"><span class="comment">                 * requeue：被拒绝的是否重新入队列</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                channel.basicNack(tag, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">                tryCount++;</span><br><span class="line">                messageLogService.updateById(<span class="keyword">new</span> MessageLog().setId(messageId).setTryCount(tryCount).setTryTime(<span class="keyword">new</span> Date()));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 当走到这一步时,代表消息已被消费（status=3）或者 重试次数达到上限,不再搭理这条消息 等情况-但不管是哪种情况，都需要将消息从队列中移除，防止下次项目重启时重新监听消费</span></span><br><span class="line">        <span class="comment">// 数据库中对应消息状态更新为:status=4:消费失败(这里按照自己的逻辑进行编写)</span></span><br><span class="line">        messageLogService.updateById(<span class="keyword">new</span> MessageLog().setId(messageId).setStatus(RabbitConstants.CONSUME_FALSE));</span><br><span class="line">        channel.basicAck(tag, <span class="keyword">false</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="7-quartz重新投递"><a href="#7-quartz重新投递" class="headerlink" title="7. quartz重新投递"></a>7. quartz重新投递</h4><blockquote>
<p>前提：项目中已经整合quartz,否则可以使用@Schedule来实现定时任务</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/15 11:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseJob</span> <span class="keyword">extends</span> <span class="title">Job</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 任务上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.constants.RabbitConstants;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.utils.ExceptionUtils;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.utils.JacksonUtils;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.entity.MessageLog;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.MessageLogService;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.vo.SendMailInfoVO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/17 15:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDeliveryJob</span> <span class="keyword">implements</span> <span class="title">BaseJob</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageLogService messageLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 任务上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 获取需要重新投递的消息列表</span></span><br><span class="line">            List&lt;MessageLog&gt; messageLogs = messageLogService.list(<span class="keyword">new</span> LambdaQueryWrapper&lt;MessageLog&gt;()</span><br><span class="line">                    .select(MessageLog::getId, MessageLog::getExchange, MessageLog::getRoutingKey, MessageLog::getMsg)</span><br><span class="line">                    .ne(MessageLog::getStatus, RabbitConstants.CONSUME_FALSE)</span><br><span class="line">                    .ne(MessageLog::getStatus, RabbitConstants.CONSUME_SUCCESS));</span><br><span class="line">            <span class="comment">// 重新投递</span></span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(messageLogs)) {</span><br><span class="line">                messageLogs.forEach(messageLog -&gt; {</span><br><span class="line">                    <span class="keyword">if</span> (ObjectUtils.isNotEmpty(messageLog) &amp;&amp; StringUtils.isNoneBlank(messageLog.getExchange(),</span><br><span class="line">                            messageLog.getRoutingKey(), messageLog.getMsg())) {</span><br><span class="line">                        <span class="comment">// 组装需要传递的信息(传递监听器需要的几个必要信息)</span></span><br><span class="line">                        SendMailInfoVO sendMailInfoVO = JacksonUtils.stringToObj(messageLog.getMsg(),</span><br><span class="line">                                SendMailInfoVO.class);</span><br><span class="line">                        String emailInfo = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (ObjectUtils.isNotEmpty(sendMailInfoVO)) {</span><br><span class="line">                            sendMailInfoVO.setMessageId(messageLog.getId());</span><br><span class="line">                            emailInfo = JacksonUtils.objToString(sendMailInfoVO);</span><br><span class="line">                        }</span><br><span class="line">                        <span class="comment">// 重新发送消息进队列</span></span><br><span class="line">                        rabbitTemplate.convertAndSend(RabbitConstants.EMAIL_EXCHANGE, RabbitConstants.EMAIL_KEY,</span><br><span class="line">                                emailInfo, <span class="keyword">new</span> CorrelationData(messageLog.getId()));</span><br><span class="line">                        log.info(<span class="string">"重新投递成功:消息id={}"</span>, messageLog.getId());</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">"重新投递失败:"</span> + ExceptionUtils.getMessage(e));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="13-Springboot整合Quartz实现任务调度"><a href="#13-Springboot整合Quartz实现任务调度" class="headerlink" title="13.Springboot整合Quartz实现任务调度"></a>13.Springboot整合Quartz实现任务调度</h3><blockquote>
<p>实现数据持久化，并实现调度任务简单的创建、暂停、恢复、更新、删除等基本操作</p>
</blockquote>
<h4 id="1-引入pom文件"><a href="#1-引入pom文件" class="headerlink" title="1. 引入pom文件"></a>1. 引入pom文件</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-quartz--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--druid:可以设置为Druid数据池（默认是C3p0数据池）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-配置application-yml信息"><a href="#2-配置application-yml信息" class="headerlink" title="2. 配置application.yml信息"></a>2. 配置application.yml信息</h4><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment"># quartz信息配置</span></span><br><span class="line">     <span class="attr">quartz:</span></span><br><span class="line">       <span class="attr">properties:</span></span><br><span class="line">         <span class="attr">org:</span></span><br><span class="line">           <span class="attr">quartz:</span></span><br><span class="line">             <span class="attr">scheduler:</span></span><br><span class="line">               <span class="attr">instanceName:</span> <span class="string">DefaultQuartzScheduler</span></span><br><span class="line">               <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">             <span class="attr">jobStore:</span></span><br><span class="line">               <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">               <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line">               <span class="attr">tablePrefix:</span> <span class="string">QRTZ_</span></span><br><span class="line">               <span class="attr">isClustered:</span> <span class="literal">false</span></span><br><span class="line">               <span class="attr">clusterCheckinInterval:</span> <span class="number">10000</span></span><br><span class="line">               <span class="attr">useProperties:</span> <span class="literal">true</span></span><br><span class="line">               <span class="attr">dataSource:</span> <span class="string">myDS</span>  <span class="comment"># 自定义数据源名称</span></span><br><span class="line">             <span class="attr">threadPool:</span></span><br><span class="line">               <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">               <span class="attr">threadCount:</span> <span class="number">10</span></span><br><span class="line">               <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">               <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br><span class="line">             <span class="attr">dataSource:</span></span><br><span class="line">               <span class="attr">myDS:</span></span><br><span class="line">                 <span class="attr">connectionProvider:</span></span><br><span class="line">                   <span class="attr">class:</span> <span class="string">com.horse.service.blog.handler.DruidProviderHandler</span>  <span class="comment"># 替换为自定义的druid数据源</span></span><br><span class="line">                 <span class="attr">URL:</span> <span class="string">jdbc:mysql://47.99.152.217:3306/xxxx?serverTimezone=GMT%2B8&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">                 <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">                 <span class="attr">password:</span> <span class="string">mysql123</span></span><br><span class="line">                 <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">                 <span class="attr">maxConnection:</span> <span class="number">10</span></span><br><span class="line">       <span class="comment"># 数据库持久化</span></span><br><span class="line">       <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">       <span class="attr">jdbc:</span></span><br><span class="line">         <span class="attr">initialize-schema:</span> <span class="string">never</span> <span class="comment"># 启动时是否执行建表语句(已经存在的任务,重启服务器的时候不会进行清空,并且自动拉取执行)</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-编写Druid数据源配置文件"><a href="#3-编写Druid数据源配置文件" class="headerlink" title="3. 编写Druid数据源配置文件"></a>3. 编写Druid数据源配置文件</h4><blockquote>
<p>基本保持不变即可</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horse.service.blog.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.quartz.utils.ConnectionProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的Quartz扩展类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidProviderHandler</span> <span class="keyword">implements</span> <span class="title">ConnectionProvider</span> </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 常量配置，与quartz.properties文件的key保持一致(去掉前缀)，同时提供set方法，Quartz框架自动注入值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JDBC连接串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String URL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String user;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库用户密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库最大连接数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> maxConnection;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库SQL查询每次连接返回执行到连接池，以确保它仍然是有效的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String validationQuery;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> validateOnCheckout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> idleConnectionValidationSeconds;</span><br><span class="line">    <span class="keyword">public</span> String maxCachedStatementsPerConnection;</span><br><span class="line">    <span class="keyword">private</span> String discardIdleConnectionsSeconds;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_DB_MAX_CONNECTIONS = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_DB_MAX_CACHED_STATEMENTS_PER_CONNECTION = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">private</span> DruidDataSource datasource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        <span class="keyword">return</span> datasource.getConnection();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        datasource.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.URL == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"DBPool could not be created: DB URL cannot be null"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.driver == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"DBPool driver could not be created: DB driver class name cannot be null!"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.maxConnection &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"DBPool maxConnectins could not be created: Max connections must be greater than zero!"</span>);</span><br><span class="line">        }</span><br><span class="line">        datasource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            datasource.setDriverClassName(<span class="keyword">this</span>.driver);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SchedulerException(<span class="string">"Problem setting driver class name on datasource: "</span> + e.getMessage(), e);</span><br><span class="line">            } <span class="keyword">catch</span> (SchedulerException e1) {</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        datasource.setUrl(<span class="keyword">this</span>.URL);</span><br><span class="line">        datasource.setUsername(<span class="keyword">this</span>.user);</span><br><span class="line">        datasource.setPassword(<span class="keyword">this</span>.password);</span><br><span class="line">        datasource.setMaxActive(<span class="keyword">this</span>.maxConnection);</span><br><span class="line">        datasource.setMinIdle(<span class="number">1</span>);</span><br><span class="line">        datasource.setMaxWait(<span class="number">0</span>);</span><br><span class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(DEFAULT_DB_MAX_CONNECTIONS);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.validationQuery != <span class="keyword">null</span>) {</span><br><span class="line">            datasource.setValidationQuery(<span class="keyword">this</span>.validationQuery);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.validateOnCheckout) {</span><br><span class="line">                datasource.setTestOnReturn(<span class="keyword">true</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                datasource.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">            }</span><br><span class="line">            datasource.setValidationQueryTimeout(<span class="keyword">this</span>.idleConnectionValidationSeconds);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getURL</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> URL;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setURL</span><span class="params">(String URL)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.URL = URL;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String user)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxConnection</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> maxConnection;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxConnection</span><span class="params">(<span class="keyword">int</span> maxConnection)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.maxConnection = maxConnection;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValidationQuery</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> validationQuery;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidationQuery</span><span class="params">(String validationQuery)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.validationQuery = validationQuery;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidateOnCheckout</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> validateOnCheckout;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidateOnCheckout</span><span class="params">(<span class="keyword">boolean</span> validateOnCheckout)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.validateOnCheckout = validateOnCheckout;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIdleConnectionValidationSeconds</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> idleConnectionValidationSeconds;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdleConnectionValidationSeconds</span><span class="params">(<span class="keyword">int</span> idleConnectionValidationSeconds)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.idleConnectionValidationSeconds = idleConnectionValidationSeconds;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDatasource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> datasource;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatasource</span><span class="params">(DruidDataSource datasource)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDiscardIdleConnectionsSeconds</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> discardIdleConnectionsSeconds;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiscardIdleConnectionsSeconds</span><span class="params">(String discardIdleConnectionsSeconds)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.discardIdleConnectionsSeconds = discardIdleConnectionsSeconds;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-自定义任务"><a href="#4-自定义任务" class="headerlink" title="4. 自定义任务"></a>4. 自定义任务</h4><blockquote>
<p>自定义（具有业务逻辑的任务类）并继承自定义的BaseJob接口类</p>
</blockquote>
<p>BaseJob接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseJob</span> <span class="keyword">extends</span> <span class="title">Job</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 任务上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>其他自定义任务类(随便两个示例)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationLogJob</span> <span class="keyword">implements</span> <span class="title">BaseJob</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperationalLogService operationalLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每5分钟执行一次拉取操作日志入库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 任务上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>{</span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.hasKey(BlogConstants.OPER_LOG_KEY)) {</span><br><span class="line">            Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(BlogConstants.OPER_LOG_KEY);</span><br><span class="line">            Collection&lt;Object&gt; values = entries.values();</span><br><span class="line">            List&lt;OperationalLog&gt; operationalLogArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            values.forEach(value -&gt; operationalLogArrayList.add((OperationalLog) value));</span><br><span class="line">            <span class="comment">// 批量保存数据</span></span><br><span class="line">            operationalLogService.saveBatch(operationalLogArrayList);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 立即删除redis中相应的数据</span></span><br><span class="line">        redisTemplate.delete(BlogConstants.OPER_LOG_KEY);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginLogJob</span> <span class="keyword">implements</span> <span class="title">BaseJob</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginLogService loginLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每10分钟执行一次拉取登录日志入库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 任务上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>{</span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.hasKey(BlogConstants.LOGIN_LOG_KEY)) {</span><br><span class="line">            Collection&lt;Object&gt; values = redisTemplate.opsForHash().entries(BlogConstants.LOGIN_LOG_KEY).values();</span><br><span class="line">            List&lt;LoginLog&gt; loginLogArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            values.forEach(value -&gt; loginLogArrayList.add((LoginLog) value));</span><br><span class="line">            loginLogService.saveBatch(loginLogArrayList);</span><br><span class="line">        }</span><br><span class="line">        redisTemplate.delete(BlogConstants.LOGIN_LOG_KEY);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-controller层接口"><a href="#5-controller层接口" class="headerlink" title="5. controller层接口"></a>5. controller层接口</h4><blockquote>
<p>包括调度任务的基本增删改查接口和相应的参数</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api("Quartz调度服务API")</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin/blog/job")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminQuartzController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzService quartzService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("根据任务名和任务组查询任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@GetMapping("/query")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">queryJobByNameAndGroup</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="meta">@RequestParam("jobGroup")</span> String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        ResponseQuartzInfoVO quartzInfoVO = quartzService.queryJobByNameAndGroup(jobName, jobGroup);</span><br><span class="line">        <span class="keyword">return</span> ObjectUtils.isNotEmpty(quartzInfoVO) ? R.ok().data(<span class="string">"item"</span>, quartzInfoVO) : R.error().message(<span class="string">"资源未找到"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = "分页查询任务列表", notes = "配合PageHelper分页插件")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "page", value = "当前页", dataType = "Integer", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "limit", value = "每页记录数", dataType = "Integer", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@GetMapping("/query/list/{page}/{limit}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">queryJobList</span><span class="params">(<span class="meta">@PathVariable("page")</span> Integer page, <span class="meta">@PathVariable("limit")</span> Integer limit)</span> </span>{</span><br><span class="line">        PageHelper.startPage(page, limit);</span><br><span class="line">        List&lt;ResponseQuartzInfoVO&gt; quartzInfoVOList = quartzService.queryJobList();</span><br><span class="line">        PageInfo&lt;ResponseQuartzInfoVO&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(quartzInfoVOList);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">"rows"</span>, pageInfo.getList()).data(<span class="string">"total"</span>, pageInfo.getTotal());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoRepeatSubmit</span></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.ADD,operDesc = "创建调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("创建任务")</span></span><br><span class="line">    <span class="meta">@PostMapping("/add")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">addJob</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> QuartzInfoVo quartzInfoVo)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(quartzInfoVo)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.addJob(quartzInfoVo);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"创建成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_CREATE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE,operDesc = "暂停调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("暂停任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@PostMapping("/pause")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">pauseJob</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName, <span class="meta">@RequestParam("jobGroup")</span> String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.pauseJob(jobName, jobGroup);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"暂停成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_PAUSE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE,operDesc = "恢复调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("恢复任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@PostMapping("/resume")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">resumeJob</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName, <span class="meta">@RequestParam("jobGroup")</span> String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.resumeJob(jobName, jobGroup);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"恢复成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_RESUME_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.UPDATE,operDesc = "更新调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("更新任务")</span></span><br><span class="line">    <span class="meta">@PutMapping("/update")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">updateJob</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> QuartzInfoVo quartzInfoVo)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(quartzInfoVo)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.updateJob(quartzInfoVo.getTriggerName(), quartzInfoVo.getTriggerGroup(),</span><br><span class="line">                    quartzInfoVo.getCronExpression());</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"更新成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_UPDATE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OperatingLog(operType = BlogConstants.REMOVE,operDesc = "删除调度任务")</span></span><br><span class="line">    <span class="meta">@ApiOperation("删除任务")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobName", value = "任务名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "jobGroup", value = "任务组", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "triggerName", value = "触发器名称", dataType = "String", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "triggerGroup", value = "触发器组", dataType = "String", required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/remove")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">removeJob</span><span class="params">(<span class="meta">@RequestParam("jobName")</span> String jobName,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("jobGroup")</span> String jobGroup,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("triggerName")</span> String triggerName,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestParam("triggerGroup")</span> String triggerGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(jobName, jobGroup, triggerName, triggerGroup)) {</span><br><span class="line">            <span class="keyword">return</span> R.setResult(ResultCodeEnum.PARAM_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            quartzService.removeJob(jobName, jobGroup, triggerName, triggerGroup);</span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"删除成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.JOB_DELETE_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="5-1-VO类"><a href="#5-1-VO类" class="headerlink" title="5.1 VO类"></a>5.1 VO类</h5><blockquote>
<p>QuartzInfoVo类和ResponseQuartzInfoVO类</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzInfoVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务名称不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务名称")</span></span><br><span class="line">    <span class="keyword">public</span> String jobName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务组不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务组")</span></span><br><span class="line">    <span class="keyword">public</span> String jobGroup;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务类名不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务类名")</span></span><br><span class="line">    <span class="keyword">public</span> String jobClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "任务描述不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("任务描述")</span></span><br><span class="line">    <span class="keyword">public</span> String jobDescription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "触发器名称不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("触发器名称")</span></span><br><span class="line">    <span class="keyword">public</span> String triggerName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "触发器组不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("触发器组")</span></span><br><span class="line">    <span class="keyword">public</span> String triggerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = "cron表达式不能为空")</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("cron表达式")</span></span><br><span class="line">    <span class="keyword">public</span> String cronExpression;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseQuartzInfoVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String jobGroup;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String jobClassName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String jobDescription;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String triggerName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String triggerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cronExpression;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String triggerState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prevFireTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nextFireTime;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-service层实现类"><a href="#6-service层实现类" class="headerlink" title="6. service层实现类"></a>6. service层实现类</h4><blockquote>
<p>controller层对应接口的实现</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzServiceImpl</span> <span class="keyword">implements</span> <span class="title">QuartzService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QuartzMapper quartzMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> quartzInfoVo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(QuartzInfoVo quartzInfoVo)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 启动调度器</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">        <span class="comment">// 创建JobDetails</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(reflectClass(quartzInfoVo.getJobClassName()).getClass())</span><br><span class="line">                .withIdentity(quartzInfoVo.getJobName(), quartzInfoVo.getJobGroup())</span><br><span class="line">                .withDescription(quartzInfoVo.getJobDescription())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 创建cron构建器</span></span><br><span class="line">        CronScheduleBuilder cronSchedule = CronScheduleBuilder.cronSchedule(quartzInfoVo.getCronExpression());</span><br><span class="line">        <span class="comment">// 创建触发器</span></span><br><span class="line">        CronTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                .withIdentity(quartzInfoVo.getTriggerName(), quartzInfoVo.getTriggerGroup())</span><br><span class="line">                .withSchedule(cronSchedule)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 建立关联</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(String jobName, String jobGroup)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        scheduler.pauseJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(String jobName, String jobGroup)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        scheduler.resumeJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerGroup</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeJob</span><span class="params">(String jobName, String jobGroup, String triggerName, String triggerGroup)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 暂停触发器</span></span><br><span class="line">        scheduler.pauseTrigger(TriggerKey.triggerKey(triggerName, triggerGroup));</span><br><span class="line">        <span class="comment">// 移除触发器中绑定的任务</span></span><br><span class="line">        scheduler.unscheduleJob(TriggerKey.triggerKey(triggerName, triggerGroup));</span><br><span class="line">        <span class="comment">// 删除任务</span></span><br><span class="line">        scheduler.deleteJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cronExpression</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateJob</span><span class="params">(String triggerName, String triggerGroup, String cronExpression)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 创建触发器唯一标识</span></span><br><span class="line">        TriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroup);</span><br><span class="line">        <span class="comment">// 创建表达式构建器(动态修改后不立即执行)</span></span><br><span class="line">        CronScheduleBuilder cronScheduler = CronScheduleBuilder.cronSchedule(cronExpression)</span><br><span class="line">                .withMisfireHandlingInstructionDoNothing();</span><br><span class="line">        <span class="comment">// 获取cron类型触发器</span></span><br><span class="line">        CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line">        <span class="comment">// 按照新的cron表达式重新构建触发器</span></span><br><span class="line">        trigger = trigger.getTriggerBuilder().withIdentity(triggerKey)</span><br><span class="line">                .withSchedule(cronScheduler)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 按新的trigger重新设置job执行</span></span><br><span class="line">        scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询任务列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ResponseQuartzInfoVO&gt; <span class="title">queryJobList</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> quartzMapper.queryJobList();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据任务名和任务组查询任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseQuartzInfoVO <span class="title">queryJobByNameAndGroup</span><span class="params">(String jobName, String jobGroup)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> quartzMapper.queryJobByNameAndGroup(jobName, jobGroup);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射获取类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 完整类路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BaseJob <span class="title">reflectClass</span><span class="params">(String className)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">return</span> (BaseJob) Class.forName(className).newInstance();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="14-springboot整合mongodb"><a href="#14-springboot整合mongodb" class="headerlink" title="14.springboot整合mongodb"></a>14.springboot整合mongodb</h3><blockquote>
<p>这里：==主要是整合GridFsTempLate的文件上传，文件查询显示，文件删除等操作==</p>
<p>其他对于文档的操作，直接面向百度编码</p>
</blockquote>
<h4 id="1-pom文件"><a href="#1-pom文件" class="headerlink" title="1.pom文件"></a>1.pom文件</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mongoDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-yaml配置"><a href="#2-yaml配置" class="headerlink" title="2. yaml配置"></a>2. yaml配置</h4><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># mongodb配置信息</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mongo123</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-controller测试接口"><a href="#3-controller测试接口" class="headerlink" title="3.controller测试接口"></a>3.controller测试接口</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.result.R;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.result.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.utils.ExceptionUtils;</span><br><span class="line"><span class="keyword">import</span> com.horse.common.util.utils.RenameImageUtils;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.base.exception.BlogException;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.service.BlogService;</span><br><span class="line"><span class="keyword">import</span> com.horse.service.blog.vo.ResponseBlogListVO;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.gridfs.GridFSBucket;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.gridfs.GridFSBuckets;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.gridfs.GridFSDownloadStream;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.client.gridfs.model.GridFSFile;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.bson.types.ObjectId;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.query.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.gridfs.GridFsResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.gridfs.GridFsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.Horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 项目接口测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/22 9:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(value = "AdminTestController", produces = MediaType.APPLICATION_JSON_VALUE, tags = "项目测试")</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin/test")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminTestController</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GridFsTemplate gridFsTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gridFsTemplate文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(httpMethod = "POST", value = "文件上传并使用GirdFS存储到mongoDB")</span></span><br><span class="line">    <span class="meta">@PostMapping("/upload/file")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">updateFile</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file, HttpServletResponse response)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 获取文件的源文件名</span></span><br><span class="line">            String originalFilename = file.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 获取文件流</span></span><br><span class="line">            InputStream inputStream = file.getInputStream();</span><br><span class="line">            <span class="comment">// 文件重命名</span></span><br><span class="line">            String newFileName = RenameImageUtils.getRandomImageName(originalFilename);</span><br><span class="line">            <span class="comment">// GirdFSTemplate上传到mongodb</span></span><br><span class="line">            ObjectId objectId = gridFsTemplate.store(inputStream, newFileName, file.getContentType());</span><br><span class="line">            log.info(<span class="string">"objectId:"</span> + objectId);</span><br><span class="line">            <span class="comment">// 根据id查询文件信息并返回</span></span><br><span class="line">            <span class="keyword">return</span> R.ok().message(<span class="string">"文件上传成功"</span>).data(<span class="string">"objectId"</span>, objectId.toString());</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.FILE_DELETE_ERROR);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID获取文件并返回页面(页面上可以直接显示文件内容，相当于文件预览的功能)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(httpMethod = "GET", value = "根据文件ID获取文件并返回输出流")</span></span><br><span class="line">    <span class="meta">@GetMapping("/query/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFileById</span><span class="params">(<span class="meta">@PathVariable("id")</span> String id, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 获取文件(这里也可以确定某一个数据库，然后再config文件总定义bucket的bean对象，然后直接注入即可)</span></span><br><span class="line">        GridFSFile fsFile = gridFsTemplate.findOne(<span class="keyword">new</span> Query(Criteria.where(<span class="string">"_id"</span>).is(id)));</span><br><span class="line">        GridFSBucket gridFSBucket = GridFSBuckets.create(mongoTemplate.getDb());</span><br><span class="line">        <span class="comment">// 打开下载流对象</span></span><br><span class="line">        <span class="keyword">if</span> (fsFile != <span class="keyword">null</span>) {</span><br><span class="line">            GridFSDownloadStream gridFSDownloadStream = gridFSBucket.openDownloadStream(fsFile.getObjectId());</span><br><span class="line">            <span class="comment">// 创建girdFsResource，传入下载流对象，获取流对象</span></span><br><span class="line">            GridFsResource gridFsResource = <span class="keyword">new</span> GridFsResource(fsFile, gridFSDownloadStream);</span><br><span class="line">            InputStream inputStream = gridFsResource.getInputStream();</span><br><span class="line">            <span class="comment">// 写入输出流</span></span><br><span class="line">            OutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> count;</span><br><span class="line">            <span class="keyword">while</span> ((count = inputStream.read(bytes)) != -<span class="number">1</span>) {</span><br><span class="line">                outputStream.write(bytes);</span><br><span class="line">            }</span><br><span class="line">            inputStream.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件（批量：forEach循环删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(httpMethod = "DELETE", value = "根据文件ID删除文件内容")</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/remove/{fileId}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">removeFileById</span><span class="params">(<span class="meta">@PathVariable("fileId")</span> String fileId)</span> </span>{</span><br><span class="line">        gridFsTemplate.delete(Query.query(Criteria.where(<span class="string">"_id"</span>).is(fileId)));</span><br><span class="line">        <span class="keyword">return</span> R.ok().message(<span class="string">"删除成功"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="设计模式概念"><a href="#设计模式概念" class="headerlink" title="设计模式概念"></a>设计模式概念</h3><blockquote>
<p>本质：是面向对象设计原则的实际应用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p>
<p><strong>面向对象编程（OOP）的七大原则：</strong></p>
<ol>
<li>开闭原则：对扩展开放，对修改关闭</li>
<li>里氏替换原则：继承必须确保超类所拥有的性质在子类中仍然成立</li>
<li>依赖倒置原则：要面向接口编程，不要面向实现编程</li>
<li>单一职责原则：控制类的粒度大小，将对象解耦、提高其内聚性</li>
<li>接口隔离原则：尽量做到为各个类建立他们需要的专用接口</li>
<li>迪米特法则：只与你的直接朋友交谈，不跟“陌生人”说话</li>
<li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</li>
</ol>
</blockquote>
<h3 id="基本设计模式"><a href="#基本设计模式" class="headerlink" title="基本设计模式"></a>基本设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><blockquote>
<p>单例模式：</p>
</blockquote>
<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><blockquote>
<p>工厂模式本质：</p>
<ul>
<li>实例化对象不再使用new对象的方式，而是用工厂方法代替</li>
<li>将选择实现类、创建对象进行统一管理和控制，从而将调用者跟我们的实现类解耦</li>
</ul>
<p>三种模式：</p>
<ul>
<li><strong>简单工厂模式（最简单、最常用）</strong><ul>
<li>用来生产同一等级中的任意产品（对于新增的产品，需要扩展原有的代码，不太符合开闭原则）</li>
<li>某种程度上不符合设计原则，但是实际使用最多。</li>
</ul>
</li>
<li>工厂方法模式<ul>
<li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li>
<li>不修改已有类的前提下，通过增加新的工厂类实现对其的扩展</li>
</ul>
</li>
<li>抽象工厂模式<ul>
<li>围绕一个超级工厂创建其他工厂，该超级工厂又被称为其他工厂的工厂</li>
<li>不可以简单的增加产品，而是增加一个产品集</li>
</ul>
</li>
</ul>
</blockquote>
<p>==示例:简单工厂模式==</p>
<p>Car.interface</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>CarFactory.class</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>WuLing.class</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>DaZong.class</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Restful风格（前后端不分离）"><a href="#Restful风格（前后端不分离）" class="headerlink" title="Restful风格（前后端不分离）"></a>Restful风格（前后端不分离）</h2><h3 id="基本使用步骤（put和delete请求）"><a href="#基本使用步骤（put和delete请求）" class="headerlink" title="基本使用步骤（put和delete请求）"></a>基本使用步骤（put和delete请求）</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">                   发送put请求，(下面的操作就是要把post请求转换成put请求)修改员工数据:</span><br><span class="line">                       <span class="number">1</span>、SpringMVC或springboot中配置HiddenHttpMethodFilter;</span><br><span class="line">                       <span class="number">2</span>、页面要有一个post表单</span><br><span class="line">                       <span class="number">3</span>、创建一个input项，name=<span class="string">"_method"</span>;value值就是我们指定的请求方式</span><br><span class="line">               --&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-HiddenHttpMethodFilter类进行配置开启"><a href="#1-HiddenHttpMethodFilter类进行配置开启" class="headerlink" title="1.HiddenHttpMethodFilter类进行配置开启"></a>1.HiddenHttpMethodFilter类进行配置开启</h4><figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">Springboot配置：</span></span><br><span class="line"><span class="comment">#开启Springboot中配置的HiddenHttpMethodFilter，spring boot2.0,默认是false关闭的</span></span><br><span class="line"><span class="comment">#用于将post请求转换成put，delete 请求的操作</span></span><br><span class="line"><span class="meta">spring.mvc.hiddenmethod.filter.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">SpringMVC配置：</span><br><span class="line"><span class="comment">&lt;!-- 支持GET、POST、PUT与DELETE请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-页面创建一个form表单，action-”post”-一般来说更新和删除都会有form表单"><a href="#2-页面创建一个form表单，action-”post”-一般来说更新和删除都会有form表单" class="headerlink" title="2.页面创建一个form表单，action=”post”(一般来说更新和删除都会有form表单)"></a>2.页面创建一个form表单，action=”post”(一般来说更新和删除都会有form表单)</h3><h4 id="put请求（-PutMapping）"><a href="#put请求（-PutMapping）" class="headerlink" title="put请求（@PutMapping）"></a>put请求（@PutMapping）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">"@{/emp}"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> th:value=<span class="string">"put"</span>/&gt;  <span class="comment">//这行必须写</span></span><br><span class="line">            &lt;!--添加提交被修改的员工id--&gt;</span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"id"</span> th:value=<span class="string">"${employee.id}"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>然后修改提交表单即可。</p>
<h4 id="delete请求（下面这样分开写是为了不让页面变形）-DeleteMapping"><a href="#delete请求（下面这样分开写是为了不让页面变形）-DeleteMapping" class="headerlink" title="delete请求（下面这样分开写是为了不让页面变形） @DeleteMapping"></a>delete请求（下面这样分开写是为了不让页面变形） <strong>@DeleteMapping</strong></h4><p>1.创建一个button删除按钮<strong>,并使用th:attr()添加自定义的属性（就是删除提交的url）</strong></p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span> th:attr=<span class="string">"delete_uri=@{/emp/{id}(id=${emp.id})}"</span> </span><br><span class="line">    	 value="删除"&gt;删除&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>2.在外面手动添加一个form表单</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!--删除按钮的表单--&gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> id=<span class="string">"deleteEmpForm"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"_method"</span> value=<span class="string">"delete"</span>/&gt;  <span class="comment">//这行必须写</span></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>3.使用js进行点击删除按钮提交表单时间绑定</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//绑定删除按钮单击提交表单事件</span></span><br><span class="line">    $(<span class="string">".deleteBtn"</span>).click(function () {</span><br><span class="line">    	<span class="comment">//为form表单添加action属性，url值从buttom按钮中获取</span></span><br><span class="line">    	<span class="comment">//一定要使用$(this)：表示当前点击的那个按钮，不能使用$(".del-btn"),要不然就会默认匹配第一个按钮</span></span><br><span class="line">        $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"delete_uri"</span>)).submit();</span><br><span class="line">        <span class="comment">//取消隐藏属性（固定的）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>这样点击提交就可以了。</p>
<h2 id="Swagger-ui（增强版）"><a href="#Swagger-ui（增强版）" class="headerlink" title="Swagger-ui（增强版）"></a>Swagger-ui（增强版）</h2><h4 id="1-pom文件-1"><a href="#1-pom文件-1" class="headerlink" title="1. pom文件"></a>1. pom文件</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--knife4j--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-单体架构用-package"><a href="#2-单体架构用-package" class="headerlink" title="2. 单体架构用(package)"></a>2. 单体架构用(package)</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySwaggerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiAdmin</span><span class="params">(Environment environment)</span> </span>{</span><br><span class="line">        <span class="comment">/*判断当前环境是否是dev环境,pro线上部署环境不需要接口文档信息*/</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .host(<span class="string">"localhost:8080"</span>)</span><br><span class="line">                .groupName(<span class="string">"admin"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.horse.blog.controller.admin"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiGithub</span><span class="params">(Environment environment)</span> </span>{</span><br><span class="line">        <span class="comment">/*判断当前环境是否是dev环境,pro线上部署环境不需要接口文档信息*/</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .host(<span class="string">"localhost:8080"</span>)</span><br><span class="line">                .groupName(<span class="string">"github"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.horse.blog.controller.github"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiKaptcha</span><span class="params">(Environment environment)</span> </span>{</span><br><span class="line">        <span class="comment">/*判断当前环境是否是dev环境,pro线上部署环境不需要接口文档信息*/</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .host(<span class="string">"localhost:8080"</span>)</span><br><span class="line">                .groupName(<span class="string">"kaptcha"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.horse.blog.controller.kaptcha"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiPortal</span><span class="params">(Environment environment)</span> </span>{</span><br><span class="line">        <span class="comment">/*判断当前环境是否是dev环境,pro线上部署环境不需要接口文档信息*/</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .host(<span class="string">"localhost:8080"</span>)</span><br><span class="line">                .groupName(<span class="string">"portal"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.horse.blog.controller.portal"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">apiVue</span><span class="params">(Environment environment)</span> </span>{</span><br><span class="line">        <span class="comment">/*判断当前环境是否是dev环境,pro线上部署环境不需要接口文档信息*/</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .enable(flag)</span><br><span class="line">                .host(<span class="string">"localhost:8080"</span>)</span><br><span class="line">                .groupName(<span class="string">"vue"</span>)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.horse.blog.controller.vue"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Horse Blog System"</span>)</span><br><span class="line">                .description(<span class="string">"Horse Blog System Interface documentation"</span>)</span><br><span class="line">                .version(<span class="string">"V2.0"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"horse"</span>, <span class="string">"http://www.horsemuzi.top"</span>, <span class="string">"3468449362@qq.com"</span>))</span><br><span class="line">                .license(<span class="string">"查看【Horse Blog 2.0】版本&lt;==&gt;公网IP：http:www.horsemuzi.top"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-分布式架构（URL）"><a href="#3-分布式架构（URL）" class="headerlink" title="3. 分布式架构（URL）"></a>3. 分布式架构（URL）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/30 12:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySwaggerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"webApi"</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//只显示api路径下的页面</span></span><br><span class="line">                .paths(Predicates.and(PathSelectors.regex(<span class="string">"/api/.*"</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">adminApiConfig</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"adminApi"</span>)</span><br><span class="line">                .apiInfo(adminApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//只显示admin路径下的页面</span></span><br><span class="line">                .paths(Predicates.and(PathSelectors.regex(<span class="string">"/admin/.*"</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"网站接口-API文档"</span>)</span><br><span class="line">                .description(<span class="string">"本文档描述了网站微服务接口定义"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"mabin"</span>, <span class="string">"http://www.horsemuzi.top"</span>, <span class="string">"3468449362@qq.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">adminApiInfo</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"后台管理系统-API文档"</span>)</span><br><span class="line">                .description(<span class="string">"本文档描述了后台管理系统微服务接口定义"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"mabin"</span>, <span class="string">"http://www.horsemuzi.top"</span>, <span class="string">"3468449362@qq.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>常用注解：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Api</td>
<td style="text-align:left"><strong>修饰整个类，</strong>描述Controller的作用</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td style="text-align:left">描述一个类的一个方法，或者一个接口（<strong>主要是接口</strong>）</td>
</tr>
<tr>
<td>@ApiParam</td>
<td style="text-align:left"><strong>接口</strong>方法中单个参数描述</td>
</tr>
<tr>
<td>@ApiModel</td>
<td style="text-align:left">用对象来接收参数（<strong>描述Model实体类</strong>）</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td style="text-align:left">用对象接收参数时，（<strong>描述实体类的一个字段</strong>）</td>
</tr>
<tr>
<td>@ApiResponse</td>
<td style="text-align:left">HTTP响应其中1个描述（<strong>对于响应的code,和相应的message含义的描述</strong>）</td>
</tr>
<tr>
<td>@ApiResponses</td>
<td style="text-align:left">HTTP响应整体描述（<strong>此注解是一个数组，里面包含所有的@ApiResponse注解描述</strong>）</td>
</tr>
<tr>
<td>@ApiIgnore</td>
<td style="text-align:left">使用该注解忽略这个API</td>
</tr>
<tr>
<td>@ApiError</td>
<td style="text-align:left">发生错误返回的信息</td>
</tr>
<tr>
<td>@ApiImplicitParam</td>
<td style="text-align:left">一个请求参数（<strong>对请求参数的name:参数名称，必须一致，value:参数含义，type:参数类型</strong>）</td>
</tr>
<tr>
<td>@ApiImplicitParams</td>
<td style="text-align:left">多个请求参数（<strong>里面是多个@ApiImplicitParam对每个参数的描述</strong>）</td>
</tr>
</tbody>
</table>
</div>
<h2 id="Mybatis动态SQL"><a href="#Mybatis动态SQL" class="headerlink" title="Mybatis动态SQL"></a>Mybatis动态SQL</h2><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><blockquote>
<p>set 元素会动态前置 SET 关键字，同时删除掉最后一个set属性语句的逗号</p>
<p>例如：因为用的是“if”元素，若最后一个“if”没有匹配上而前面的匹配上，SQL 语句的最后就会有一个逗号遗留</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBySet"</span> <span class="attr">parameterType</span>=<span class="string">"com.horse.service.blog.entity.Blog"</span>&gt;</span></span><br><span class="line">    UPDATE tb_blog tb</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"blog.title != null and blog.title != ''"</span>&gt;</span></span><br><span class="line">            tb.title = #{blog.title},</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"blog.version == null"</span>&gt;</span></span><br><span class="line">            tb.version = tb.version + 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    WHERE tb.id = #{blog.id}</span><br><span class="line">      and tb.is_deleted = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行SQL:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># 自动删除掉了title后面的逗号</span><br><span class="line">UPDATE tb_blog tb <span class="keyword">SET</span> tb.title <span class="operator">=</span> ? <span class="keyword">WHERE</span> tb.id <span class="operator">=</span> ? <span class="keyword">and</span> tb.is_deleted <span class="operator">=</span> </span><br></pre></td></tr></tbody></table></figure>
<h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h3><blockquote>
<p>有时我们不想应用到所有的条件，而只想从中择其一项。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。只要有一项条件满足要求，就不再执行后面条件的判断啦。</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogByChoose"</span> <span class="attr">parameterType</span>=<span class="string">"com.horse.service.blog.entity.Blog"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"com.horse.service.blog.entity.Blog"</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM tb_blog tb</span><br><span class="line">            WHERE tb.is_deleted = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"blog.title != null and blog.title != ''"</span>&gt;</span></span><br><span class="line">            AND tb.title LIKE #{blog.title}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"blog.version != null"</span>&gt;</span></span><br><span class="line">            &lt;![CDATA[</span><br><span class="line">            AND tb.version &gt;= 1</span><br><span class="line">            ]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            AND tb.id = #{blog.id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行SQL:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># title满足条件，所以后面的条件不在进行判断，直接执行<span class="keyword">sql</span>语句，如果两个<span class="keyword">when</span>标签中的条件都不满足，那么直接执行otherwise标签中的内容</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_blog tb <span class="keyword">WHERE</span> tb.is_deleted <span class="operator">=</span> <span class="number">1</span> <span class="keyword">AND</span> tb.title <span class="keyword">LIKE</span> ?</span><br></pre></td></tr></tbody></table></figure>
<h3 id="trim标签（不常用）"><a href="#trim标签（不常用）" class="headerlink" title="trim标签（不常用）"></a>trim标签（不常用）</h3><blockquote>
<p>常用属性：</p>
<ul>
<li>prefix=”where”   给第一符合条件的语句 加上前缀where</li>
<li>prefixOverrides=”and”  将最后一条语句的 前缀and 覆盖</li>
<li>suffix=”and”   给第一符合条件的语句 加上后缀 and</li>
<li>suffixOverrides=”and”   将最后一条语句的后缀 and </li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogByTrim"</span> <span class="attr">parameterType</span>=<span class="string">"com.horse.service.blog.entity.Blog"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">// 表示给第一个符合条件的语句前加 where，把最后一个语句的suffixOverrides="and" 指定的and 覆盖掉</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM tb_blog tb</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"or"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"blog.title != null and blog.title != ''"</span>&gt;</span></span><br><span class="line">                tb.title LIKE #{blog.title} AND</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"blog.id != null and blog.id != ''"</span>&gt;</span></span><br><span class="line">                tb.id = #{blog.id} AND</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行SQL:</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"># 自动在添加一个<span class="keyword">where</span>前缀，覆盖最后一个语句的后缀</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_blog tb <span class="keyword">where</span> tb.title <span class="keyword">LIKE</span> ? <span class="keyword">AND</span> tb.id <span class="operator">=</span> ? </span><br></pre></td></tr></tbody></table></figure>
<h3 id="foreach循环标签"><a href="#foreach循环标签" class="headerlink" title="foreach循环标签"></a>foreach循环标签</h3><blockquote>
<p>常用属性：</p>
<ul>
<li>collection: 要遍历的集合（list，set，map等）</li>
<li>item: 要遍历的集合元素</li>
<li>index：元素在集合中的索引（如果是map集合，index标识元素的对应的key）</li>
<li>open：遍历以什么开头 比如 open=”and id in (“</li>
<li>seprator： 遍历出来的元素以什么分隔</li>
<li>end： 遍历以什么结束 end=”)”</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">  //批量插入</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveCategoryAndBrand"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">       insert into tb_category_brand (category_id, brand_id) values</span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"cids"</span> <span class="attr">item</span>=<span class="string">"cid"</span> <span class="attr">index</span>=<span class="string">"index"</span>  <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">           (#{cid},#{brandId})</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">//批量删除</span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStockBySkuId"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">       delete from tb_stock where sku_id in</span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"skuIds"</span> <span class="attr">item</span>=<span class="string">"skuId"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">           #{skuId}</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">//批量查询和批量删除一样，都是使用关键字：in</span><br></pre></td></tr></tbody></table></figure>
<h3 id="树形结构（嵌套查询）"><a href="#树形结构（嵌套查询）" class="headerlink" title="树形结构（嵌套查询）"></a>树形结构（嵌套查询）</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">//集合嵌套查询：树形结构的那种数据查询（也可以使用下面的stream流进行数据操作...）    </span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"subjectTreeVo"</span> <span class="attr">type</span>=<span class="string">"com.horse.service.edu.entity.vo.SubjectTreeVo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sort"</span> <span class="attr">property</span>=<span class="string">"sort"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"children"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ofType</span>=<span class="string">"com.horse.service.edu.entity.vo.SubjectTreeVo"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">"listNestedSubject"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listNestedSubject"</span> <span class="attr">resultMap</span>=<span class="string">"subjectTreeVo"</span>&gt;</span></span><br><span class="line">        select id,title,sort from edu_subject where parent_id=#{parentId}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>模拟场景：老师对学生：一对多关系，学生多老师：多对一</p>
<p>注意：其实关系是不准确的，老师和学生应该是多对多的关系，这里重点是模拟场景关系，理解即可。</p>
</blockquote>
<h3 id="collection标签"><a href="#collection标签" class="headerlink" title="collection标签"></a>collection标签</h3><blockquote>
<p><strong>注意：</strong></p>
<ul>
<li>一对多单条数据查询<ul>
<li>collection嵌套结果查询方式适用</li>
</ul>
</li>
<li>一对多分页（多条）数据查询<ul>
<li>collection的嵌套结果方式也可以做（推荐使用）</li>
<li>collection的嵌套子查询方式适用（一般不推荐使用）</li>
</ul>
</li>
</ul>
</blockquote>
<p>xml文件</p>
<p>==推荐使用的方式（极其重要的使用方法）==</p>
<blockquote>
<p>分页查询博客列表，每个博客对应标签是一对多的关系</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogOneToManyTagMap"</span> <span class="attr">type</span>=<span class="string">"responseBlogListVO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tb_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tb_title"</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tb_picture"</span> <span class="attr">property</span>=<span class="string">"picture"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tb_flag"</span> <span class="attr">property</span>=<span class="string">"flag"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tb_views"</span> <span class="attr">property</span>=<span class="string">"views"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tc_id"</span> <span class="attr">property</span>=<span class="string">"categoryId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tc_name"</span> <span class="attr">property</span>=<span class="string">"categoryName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tbc_description"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tb_publish"</span> <span class="attr">property</span>=<span class="string">"publish"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tb_create"</span> <span class="attr">property</span>=<span class="string">"gmtCreate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"tags"</span> <span class="attr">ofType</span>=<span class="string">"tag"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"tt_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tt_name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBlogListByPage"</span> <span class="attr">resultMap</span>=<span class="string">"blogOneToManyTagMap"</span>&gt;</span></span><br><span class="line">        select blog.id           as tb_id,</span><br><span class="line">               blog.title        as tb_title,</span><br><span class="line">               blog.picture      as tb_picture,</span><br><span class="line">               blog.flag         as tb_flag,</span><br><span class="line">               blog.views        as tb_views,</span><br><span class="line">               blog.is_publish   as tb_publish,</span><br><span class="line">               blog.gmt_create   as tb_create,</span><br><span class="line">               tc.id           as tc_id,</span><br><span class="line">               tc.name         as tc_name,</span><br><span class="line">               tbc.description as tbc_description,</span><br><span class="line">               tt.id           as tt_id,</span><br><span class="line">               tt.name         as tt_name</span><br><span class="line">        from (</span><br><span class="line">        select id,title,picture,flag,views,is_publish,gmt_create,category_id from tb_blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            is_deleted=1</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null and title != ''"</span>&gt;</span></span><br><span class="line">                and title like concat('%',#{title},'%')</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        limit #{page},#{limit}</span><br><span class="line">        ) blog left JOIN tb_category tc</span><br><span class="line">                           ON blog.category_id = tc.id</span><br><span class="line">                 LEFT JOIN tb_blog_content tbc</span><br><span class="line">                           ON blog.id = tbc.blog_id</span><br><span class="line">                 LEFT JOIN tb_blog_tag tbt</span><br><span class="line">                           ON blog.id = tbt.blog_id</span><br><span class="line">                 LEFT JOIN tb_tag tt</span><br><span class="line">                           ON tbt.tag_id = tt.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>其他的简单方式</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌套结果方式 （推荐使用）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"oneToMany"</span> <span class="attr">type</span>=<span class="string">"com.horse.blog.entity.Teacher"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"TId"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"TName"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"TAge"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"studentList"</span> <span class="attr">ofType</span>=<span class="string">"com.horse.blog.entity.Student"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"SName"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"SAge"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"oneTeacherToManyStudent"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span> <span class="attr">resultMap</span>=<span class="string">"oneToMany"</span>&gt;</span></span><br><span class="line">       select tt.id as TId,tt.name as tName,tt.age as TAge,ts.name as SName,ts.age as SAge</span><br><span class="line">       from tb_teacher tt</span><br><span class="line">                inner join tb_teacher_student_relation ttsr on tt.id = ttsr.tid</span><br><span class="line">                inner join tb_student ts on ttsr.sid = ts.id</span><br><span class="line">       where tt.id = #{id}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--嵌套子查询方式（一般不使用，实际工作中查询效率极低）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"oneToManyTwo"</span> <span class="attr">type</span>=<span class="string">"com.horse.blog.entity.Teacher"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span> // ID的出处</span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"studentList"</span> <span class="attr">ofType</span>=<span class="string">"com.horse.blog.entity.Student"</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"getStudent"</span>/&gt;</span> // 这里的id来源就是上面的id,而且id的名字要相同</span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"oneTeacherToManyStudentTwo"</span> <span class="attr">resultMap</span>=<span class="string">"oneToManyTwo"</span>&gt;</span></span><br><span class="line">       select * from tb_teacher</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null and id != ''"</span>&gt;</span></span><br><span class="line">               id=#{id}</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultType</span>=<span class="string">"student"</span>&gt;</span></span><br><span class="line">       select ts.* from tb_teacher tt</span><br><span class="line">                inner join tb_teacher_student_relation ttsr on tt.id = ttsr.tid</span><br><span class="line">                inner join tb_student ts on ttsr.sid = ts.id</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null and id != ''"</span>&gt;</span></span><br><span class="line">               tt.id=#{id}  // 这里的id来自上一个查询出来的老师的id</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mapper文件</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="function">Teacher <span class="title">oneTeacherToManyStudent</span><span class="params">(<span class="meta">@Param("id")</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Teacher <span class="title">oneTeacherToManyStudentTwo</span><span class="params">(<span class="meta">@Param("id")</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="association标签"><a href="#association标签" class="headerlink" title="association标签"></a>association标签</h3><p>xml文件</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌套结果方式 （推荐使用）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ManyToOne"</span> <span class="attr">type</span>=<span class="string">"com.horse.blog.entity.Student"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"SId"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"SName"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"SAge"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"com.horse.blog.entity.Teacher"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"TName"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"TAge"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"ManyStudentToOneTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"ManyToOne"</span>&gt;</span></span><br><span class="line">       select ts.id as SId, ts.name SName, ts.age SAge, tt.name as TName, tt.age as TAge</span><br><span class="line">       from tb_student ts</span><br><span class="line">        inner join tb_teacher_student_relation ttsr on ts.id = ttsr.sid</span><br><span class="line">        inner join tb_teacher tt on tt.id = ttsr.tid</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--嵌套子查询方式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ManyToOneTwo"</span> <span class="attr">type</span>=<span class="string">"com.horse.blog.entity.Student"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"com.horse.blog.entity.Teacher"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"ManyStudentToOneTeacherTwo"</span> <span class="attr">resultMap</span>=<span class="string">"ManyToOneTwo"</span>&gt;</span></span><br><span class="line">       select * from tb_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">       select tt.id,tt.name,tt.age from tb_student ts</span><br><span class="line">        inner join tb_teacher_student_relation ttsr on ts.id = ttsr.sid</span><br><span class="line">        inner join tb_teacher tt on tt.id = ttsr.tid</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null and id != ''"</span>&gt;</span></span><br><span class="line">                ts.id=#{id}  // 这里的id是来自上一个查询的所有学生的集合中的id</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>mapper文件</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">ManyStudentToOneTeacher</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">ManyStudentToOneTeacherTwo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Teacher <span class="title">getTeacher</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="stream流集合嵌套查询"><a href="#stream流集合嵌套查询" class="headerlink" title="stream流集合嵌套查询"></a>stream流集合嵌套查询</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取课程分类的嵌套信息(只需要查询一次数据库，效率更高)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Subject&gt; <span class="title">listSubject</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Subject&gt; subjects = <span class="keyword">this</span>.list();</span><br><span class="line">    <span class="keyword">return</span> subjects.stream().filter(subject -&gt; StringUtils.equals(subject.getParentId(), <span class="string">"0"</span>))</span><br><span class="line">            .map(subject -&gt; subject.setChildren(getChildren(subject, subjects)))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Subject&gt; <span class="title">getChildren</span><span class="params">(Subject subject, List&lt;Subject&gt; subjects)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> subjects.stream().filter(subject1 -&gt; StringUtils.equals(subject1.getParentId(), subject.getId()))</span><br><span class="line">            .map(subject1 -&gt; subject1.setChildren(getChildren(subject1, subjects)))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="MP基础配置"><a href="#MP基础配置" class="headerlink" title="MP基础配置"></a>MP基础配置</h2><h3 id="mybatis-plus代码生成器"><a href="#mybatis-plus代码生成器" class="headerlink" title="mybatis-plus代码生成器"></a>mybatis-plus代码生成器</h3><p><strong>注意：查看官方文档，引入相应依赖即可</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * mybatis-plus代码生成器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">       <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">       AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">       <span class="comment">// 1、全局配置</span></span><br><span class="line">       GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">       <span class="comment">//尽量在一个新的工程中使用，在module中使用会有“奇效”</span></span><br><span class="line">       String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">       gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">       gc.setAuthor(<span class="string">"horse"</span>);</span><br><span class="line">       gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">       gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">       gc.setServiceName(<span class="string">"%sService"</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">       gc.setBaseResultMap(<span class="keyword">true</span>);  <span class="comment">//是否开启xml文件中的resultMap映射</span></span><br><span class="line">       gc.setBaseColumnList(<span class="keyword">true</span>); <span class="comment">//是否开启xml文件中的sql中的文件名</span></span><br><span class="line">       gc.setIdType(IdType.ASSIGN_ID);  <span class="comment">// 注意数据库的主键自增策略，进行相应的设置</span></span><br><span class="line">       gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">       <span class="comment">//是否自动配置swagger注解</span></span><br><span class="line">       gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">       mpg.setGlobalConfig(gc);</span><br><span class="line">       <span class="comment">//2、设置数据源</span></span><br><span class="line">       DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">       dsc.setUrl(<span class="string">"jdbc:mysql://47.99.152.217:3306/horse_vue_blog?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf"</span> +</span><br><span class="line">               <span class="string">"-8"</span> +</span><br><span class="line">               <span class="string">"&amp;serverTimezone=GMT%2B8"</span>);</span><br><span class="line">       dsc.setDriverName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">       dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">       dsc.setPassword(<span class="string">"mysql123"</span>);</span><br><span class="line">       dsc.setDbType(DbType.MYSQL);</span><br><span class="line">       mpg.setDataSource(dsc);</span><br><span class="line">       <span class="comment">//3、包的配置</span></span><br><span class="line">       PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">       <span class="comment">//下面两个加起来生成：com.horse.service.blog的包名</span></span><br><span class="line">       pc.setModuleName(<span class="string">"blog"</span>);</span><br><span class="line">       pc.setParent(<span class="string">"com.horse.service"</span>);</span><br><span class="line"></span><br><span class="line">       pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">       pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">       pc.setXml(<span class="string">"mapper.mapper"</span>);</span><br><span class="line">       pc.setService(<span class="string">"service"</span>);</span><br><span class="line">       pc.setServiceImpl(<span class="string">"service.impl"</span>);</span><br><span class="line">       pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">       mpg.setPackageInfo(pc);</span><br><span class="line">       <span class="comment">//4、策略配置</span></span><br><span class="line">       StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">       strategy.setTablePrefix(<span class="string">"tb_"</span>); <span class="comment">//去掉表前缀</span></span><br><span class="line">       strategy.setInclude(<span class="string">"tb_announcement"</span>);</span><br><span class="line">       <span class="comment">// 设置要映射的表名(可以写多个)：也可以省略不写具体生成那些表，就表示生成当前数据库中的全部表</span></span><br><span class="line">       strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">       strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">       strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">       <span class="comment">// 逻辑删除字段配置</span></span><br><span class="line">       strategy.setLogicDeleteFieldName(<span class="string">"is_deleted"</span>);</span><br><span class="line">       <span class="comment">// 自动填充配置</span></span><br><span class="line">       TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">"gmt_create"</span>, FieldFill.INSERT);</span><br><span class="line">       TableFill gmtModified = <span class="keyword">new</span> TableFill(<span class="string">"gmt_modified"</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">       ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       tableFills.add(gmtCreate);</span><br><span class="line">       tableFills.add(gmtModified);</span><br><span class="line">       strategy.setTableFillList(tableFills);</span><br><span class="line">       <span class="comment">// 乐观锁字段配置</span></span><br><span class="line">       strategy.setVersionFieldName(<span class="string">"version"</span>);</span><br><span class="line">       strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">       strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">       mpg.setStrategy(strategy);</span><br><span class="line">       <span class="comment">//执行</span></span><br><span class="line">       mpg.execute();</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="mybatis-plus常用插件配置"><a href="#mybatis-plus常用插件配置" class="headerlink" title="mybatis-plus常用插件配置"></a>mybatis-plus常用插件配置</h3><blockquote>
<p>这里注入bean即可，需要搭配相应“注解”使用</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除（高版本可不配置bean）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL执行效率插件（一般不使用）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile({"dev", "test"})</span><span class="comment">// 设置 dev test 环境开启</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">        performanceInterceptor.setMaxTime(<span class="number">50</span>).setFormat(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件（注意：在执行更新的时候，需要先把version的值查出来赋值，才能触发乐观锁操作）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="自动填充配置"><a href="#自动填充配置" class="headerlink" title="自动填充配置"></a>自动填充配置</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/20 21:47</span></span><br><span class="line"><span class="comment"> * 自动填充处理配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"createTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="mybatis-plus和pagehelper分页插件的jar冲突解决"><a href="#mybatis-plus和pagehelper分页插件的jar冲突解决" class="headerlink" title="mybatis-plus和pagehelper分页插件的jar冲突解决"></a><strong>mybatis-plus和pagehelper分页插件的jar冲突解决</strong></h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagehelper:移除掉org.mybatis:mybatis-spring:1.3.2,避免冲突--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="MP自定义XML文件和QueryWrapper的结合使用"><a href="#MP自定义XML文件和QueryWrapper的结合使用" class="headerlink" title="MP自定义XML文件和QueryWrapper的结合使用"></a>MP自定义XML文件和QueryWrapper的结合使用</h3><blockquote>
<p>注意：主要就是了解固定形式即可</p>
</blockquote>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200808194839654.png" alt="image-20200808194839654"></p>
<p>便于粘贴复制</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：一定要引入正确的jar包</span></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Constants;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;CourseCollectVo&gt; <span class="title">listCollects</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper query)</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">// 注意：一般sql中尽量再出现where关键字       </span><br><span class="line">            ${ew.customSqlSegment}</span><br><span class="line">// 如果前面已经出现了where关键字，那么下面就要使用</span><br><span class="line">			${ew.sqlSegment}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="MP常用操作"><a href="#MP常用操作" class="headerlink" title="MP常用操作"></a>MP常用操作</h2><h3 id="MP的and和or的嵌套"><a href="#MP的and和or的嵌套" class="headerlink" title="MP的and和or的嵌套"></a>MP的and和or的嵌套</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// A or (B and C)</span></span><br><span class="line">.eq(<span class="string">"a"</span>, <span class="string">"A"</span>).or(i -&gt; i.eq(<span class="string">"b"</span>, <span class="string">"B"</span>).eq(<span class="string">"c"</span>, <span class="string">"C"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// A or (B or C)</span></span><br><span class="line">.eq(<span class="string">"a"</span>, <span class="string">"A"</span>).or(i -&gt; i.eq(<span class="string">"b"</span>, <span class="string">"B"</span>).or().eq(<span class="string">"c"</span>, <span class="string">"C"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// A and (B and C)</span></span><br><span class="line">.eq(<span class="string">"a"</span>, <span class="string">"A"</span>).and(i -&gt; i.eq(<span class="string">"b"</span>, <span class="string">"B"</span>).eq(<span class="string">"c"</span>, <span class="string">"C"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// A and (B or C)</span></span><br><span class="line">.eq(<span class="string">"a"</span>, <span class="string">"A"</span>).and(i -&gt; i.eq(<span class="string">"b"</span>, <span class="string">"B"</span>).or().eq(<span class="string">"c"</span>, <span class="string">"C"</span>));</span><br></pre></td></tr></tbody></table></figure>
<p>示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Picture&gt; <span class="title">queryPictureList</span><span class="params">(Long page, Long limit, QueryPictureVO queryPictureVO)</span> </span>{</span><br><span class="line">        <span class="comment">// 构建查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Picture&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isNotEmpty(queryPictureVO)) {</span><br><span class="line">            String searchKey = queryPictureVO.getSearchKey();</span><br><span class="line">            String beginDate = queryPictureVO.getBeginDate();</span><br><span class="line">            String endDate = queryPictureVO.getEndDate();</span><br><span class="line">            queryWrapper.select(Picture::getId, Picture::getName, Picture::getAddress, Picture::getSite,</span><br><span class="line">                    Picture::getDescription, Picture::getGmtCreate)</span><br><span class="line">                    .ge(beginDate != <span class="keyword">null</span>, Picture::getGmtCreate, beginDate)</span><br><span class="line">                    .le(endDate != <span class="keyword">null</span>, Picture::getGmtCreate, endDate)</span><br><span class="line">                	<span class="comment">// 可能为空时，不要忘记“断言”操作</span></span><br><span class="line">                    .and(StringUtils.isNotBlank(searchKey), </span><br><span class="line">                         wrapper -&gt; wrapper.likeRight(Picture::getName, searchKey)</span><br><span class="line">                            .or().likeRight(Picture::getSite, searchKey)</span><br><span class="line">                            .or().likeRight(Picture::getDescription, searchKey));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.page(<span class="keyword">new</span> Page&lt;&gt;(page, limit), queryWrapper);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="MP字段置为null注意点"><a href="#MP字段置为null注意点" class="headerlink" title="MP字段置为null注意点"></a>MP字段置为null注意点</h3><blockquote>
<p>问题点：Mybatis-plus在更新的时候做了null判断，默认不更新为null的传参字段，所以在不写xml文件的前提下，代码层面进行字段置为 null 的操作需要进行注意写法。</p>
</blockquote>
<h4 id="问题展示"><a href="#问题展示" class="headerlink" title="问题展示"></a>问题展示</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有的需要更新的数据集合</span></span><br><span class="line">List&lt;PaymentGoods&gt; paymentGoods = <span class="keyword">this</span>.listByIds(idList);</span><br><span class="line"><span class="comment">// 遍历 更新字段值</span></span><br><span class="line">paymentGoods.forEach(good -&gt; good.setStatus(<span class="number">0</span>)</span><br><span class="line">                     .setReal_pay_amount(BigDecimal.ZERO)</span><br><span class="line">                     .setReal_pay_date(<span class="keyword">null</span>)</span><br><span class="line">                     .setRed_rush_back(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 执行更新</span></span><br><span class="line"><span class="comment">// 注意：这样更新，解析的SQL,上面置为 null 的字段，将不会进行SQL解析，mybatis-plus默认更新策略导致</span></span><br><span class="line"><span class="keyword">this</span>.updateBatchById(paymentGoods);</span><br></pre></td></tr></tbody></table></figure>
<p>SQL解析如下：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">UPDATE erp_payment_goods </span><br><span class="line"><span class="keyword">SET</span> status<span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">real_pay_amount<span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">red_rush_back<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> (pay_id <span class="keyword">IN</span> (<span class="string">'2486378'</span>,<span class="string">'2485840'</span>,<span class="string">'2485844'</span>));</span><br></pre></td></tr></tbody></table></figure>
<h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><blockquote>
<p>在需要更新的字段中调整验证注解</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(strategy=FieldStrategy.NOT_EMPTY)</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>改变更新写法，能实现的3种方式如下：</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1（字段写死，不易拓展维护，不推荐）</span></span><br><span class="line"><span class="keyword">this</span>.update(<span class="keyword">new</span> UpdateWrapper&lt;PaymentGoods&gt;()</span><br><span class="line">            .set(<span class="string">"status"</span>,<span class="number">0</span>)</span><br><span class="line">            .set(<span class="string">"real_pay_date"</span>,<span class="keyword">null</span>)</span><br><span class="line">            .in(<span class="string">"pay_id"</span>,idList));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2 （另一种方式的UpdateWrapper）</span></span><br><span class="line"><span class="keyword">this</span>.update(<span class="keyword">null</span>, Wrappers.&lt;PaymentGoods&gt;lambdaUpdate()</span><br><span class="line">            .set(PaymentGoods::getStatus,<span class="number">0</span>)</span><br><span class="line">            .set(PaymentGoods::getReal_pay_amount,BigDecimal.ZERO)</span><br><span class="line">            .set(PaymentGoods::getReal_pay_date,<span class="keyword">null</span>)</span><br><span class="line">            .set(PaymentGoods::getRed_rush_back,<span class="number">1</span>)</span><br><span class="line">            .in(PaymentGoods::getPay_id,idList));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式3 （LambdaUpdateWrapper方式，推荐使用）</span></span><br><span class="line"><span class="keyword">this</span>.update(<span class="keyword">new</span> LambdaUpdateWrapper&lt;PaymentGoods&gt;()</span><br><span class="line">            .set(PaymentGoods::getStatus,<span class="number">0</span>)</span><br><span class="line">            .set(PaymentGoods::getReal_pay_amount,BigDecimal.ZERO)</span><br><span class="line">            .set(PaymentGoods::getReal_pay_date,<span class="keyword">null</span>)</span><br><span class="line">            .set(PaymentGoods::getRed_rush_back,<span class="number">1</span>)</span><br><span class="line">            .in(PaymentGoods::getPay_id,idList));</span><br></pre></td></tr></tbody></table></figure>
<p>SQL解析如下：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">UPDATE erp_payment_goods </span><br><span class="line"><span class="keyword">SET</span> status<span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">real_pay_amount<span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">real_pay_date<span class="operator">=</span><span class="keyword">null</span>,</span><br><span class="line">red_rush_back<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> (pay_id <span class="keyword">IN</span> (<span class="string">'2486378'</span>,<span class="string">'2485840'</span>,<span class="string">'2485844'</span>));</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h2><h3 id="1-公共命令"><a href="#1-公共命令" class="headerlink" title="1.公共命令"></a>1.公共命令</h3><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">DEL key</span><br><span class="line">DUMP key：序列化给定key，返回被序列化的值</span><br><span class="line">EXISTS key：检查key是否存在</span><br><span class="line">EXPIRE key second：为key设定过期时间</span><br><span class="line">TTL key：返回key剩余时间</span><br><span class="line">PERSIST key：移除key的过期时间，key将持久保存</span><br><span class="line">KEY pattern：查询所有符号给定模式的key</span><br><span class="line">RANDOM key：随机返回一个key</span><br><span class="line">RANAME key newkey：修改key的名称</span><br><span class="line">MOVE key db：移动key至指定数据库中</span><br><span class="line">TYPE key：返回key所储存的值的类型</span><br></pre></td></tr></tbody></table></figure>
<p>这里不再进行命令方面的笔记，详情博客：(<strong>ctrl+点击</strong>)</p>
<p><a href="https://blog.csdn.net/qq_33423418/article/details/101351944/">https://blog.csdn.net/qq_33423418/article/details/101351944/</a></p>
<h3 id="2-redisTemplate整合"><a href="#2-redisTemplate整合" class="headerlink" title="2.redisTemplate整合"></a>2.redisTemplate整合</h3><p>引入pom依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring boot redis缓存引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lecttuce 缓存连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>自定义序列化机制</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedisConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义json序列化器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注入数据源</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line">        </span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key-value结构序列化数据结构</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash数据结构序列化方式,必须这样否则存hash 就是基于jdk序列化的</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 启用默认序列化方式</span></span><br><span class="line">        redisTemplate.setEnableDefaultSerializer(<span class="keyword">true</span>);</span><br><span class="line">        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        redisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存配置(可选配置)</span></span><br><span class="line"><span class="comment">     * 注意：配置此项主要是方便使用缓存注解的时候统一过期时间，如果不用缓存注解，那么可以在程序中定义过期时间，更加灵活。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> </span>{</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                <span class="comment">//过期时间600秒:600秒后会重新进行数据库查询</span></span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                <span class="comment">// 配置序列化</span></span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(connectionFactory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>配置yml信息</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="number">10000</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">shutdown-timeout:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
<p>注入使用</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="SSM配置文件"><a href="#SSM配置文件" class="headerlink" title="SSM配置文件"></a>SSM配置文件</h2><h3 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring configuration file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取datasource.properties中的数据库配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database-conf/datasource.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${c3p0.driverClass}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库的url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${c3p0.jdbcUrl}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库的用户名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${c3p0.user}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接数据库的密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${c3p0.password}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"${c3p0.initialPoolSize}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"${c3p0.maxPoolSize}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最小连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"${c3p0.minPoolSize}"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接的生存时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"${c3p0.maxIdleTime}"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 原理:控制数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启事务注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MyBatis与Spring整合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定Mapper映射文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MyBatis核心配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/mybatis-conf/mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 引入MyBaits分页插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 指定数据库类型 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>helperDialct=mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启Mapper接口扫描器: 扫描Dao层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.ssm.student.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启Spring IOC注解扫描器: 扫描Servie层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为sql映射文件中的输入/输出参数设置类型别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ssm.student.bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="springmvc-config-xml"><a href="#springmvc-config-xml" class="headerlink" title="springmvc-config.xml"></a>springmvc-config.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring-MVC configuration file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启用注解扫描器: 扫描被@Controller注解的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ssm.student.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/h-ui/**"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/easyui/**"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/system/login"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/system/get_cpacha"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ssm.student.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置文件上传解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定请求编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定指定允许上传文件的最大值(20MB) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"20971520"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/view/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动Spring: 加载Spring核心配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意: 使用classpath:path(防止异常:FileNotFoundException) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-conf/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置Spring MVC编码过滤器 (解析中文乱码配置)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring: 配置加载Spring文件的监听器（尽量配置这一项） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring MVC的前端核心控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring_mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载Spring MVC配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-conf/springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务器启动后立即加载Spring MVC配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring_mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Log日志配置文件"><a href="#Log日志配置文件" class="headerlink" title="Log日志配置文件"></a>Log日志配置文件</h2><h3 id="logback-config-xml"><a href="#logback-config-xml" class="headerlink" title="logback-config.xml"></a>logback-config.xml</h3><p>直接在springboot的配置文件中引入即可：</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">logging.config</span>=<span class="string">classpath:log/logback-spring.xml</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appender是configuration的子节点，是负责写日志的组件。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ConsoleAppender：把日志输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p (%file:%line\)- %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是sys.log --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"syslog"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>communityLog/community.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件名：log/sys.2017-12-05.0.log --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>communityLog/community.%d.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每产生一个日志文件，该日志文件的保存期限为30天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- pattern节点，用来设置日志的输入格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 记录日志的编码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.appley为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 级别依次为【从高到低】：FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.web.community"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"syslog"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="SpringCloud微服务（乐优商城）"><a href="#SpringCloud微服务（乐优商城）" class="headerlink" title="SpringCloud微服务（乐优商城）"></a>SpringCloud微服务（乐优商城）</h2><h3 id="项目中涉及到的工具集"><a href="#项目中涉及到的工具集" class="headerlink" title="项目中涉及到的工具集"></a>项目中涉及到的工具集</h3><p><code>QS工具</code></p>
<blockquote>
<p>QS是一个第三方库，我们可以用<code>npm install qs --save</code>来安装。不过我们在项目中已经集成了，大家无需安装</p>
</blockquote>
<p>qs主要有两个常用方法：</p>
<blockquote>
<p>查询字符串：可以简单理解为我们前后端不分离项目中提交表单时传递的数据，它不是一个json对象，而是仅仅最为普通表单请求方法。</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//将对象转换为查询字符串</span></span><br><span class="line">qs.stringify(person) 转换成查询字符串</span><br><span class="line"></span><br><span class="line"><span class="comment">//将查询字符串转换为对象</span></span><br><span class="line">qs.parse(string) 转换成json对象</span><br></pre></td></tr></tbody></table></figure>
<p><code>在本项目中使用qs工具的原因</code>：</p>
<p>在增加brand数据时，传递给后台的是这样的对象params:{name:xxx, letter:xxx, image:xxx ,cids:xxx},而后台中设计的Brand实体类中没有cids属性，所有我们不能使用@RequestBody（Brand brand）的方式接收参数，虽然可以创建一个DTO接收参数，但不是最优美的解决方式。这时，我们将params对象转变为查询字符串，那么在axios</p>
<p><code>实质</code>：我们一般在使用axios时，有一下原则：</p>
<p>axios处理请求体的原则会根据请求数据的格式来定：</p>
<ul>
<li><p>如果请求体是对象：会转为json对象发送，也就是后台需要使用@RequestBody的方式接收</p>
</li>
<li><p>如果请求体是String：会作为普通表单请求发送，但需要我们自己保证String的格式是键值对。</p>
<p>如：name=jack&amp;age=12</p>
</li>
</ul>
<h3 id="基本请求响应数据结构图"><a href="#基本请求响应数据结构图" class="headerlink" title="基本请求响应数据结构图"></a>基本请求响应数据结构图</h3><p><img src="C:\Users\马滨\Desktop\typoraImages/springboot.png" alt="springboot"></p>
<h3 id="以乐优商城为例整合简单的微服务架构、"><a href="#以乐优商城为例整合简单的微服务架构、" class="headerlink" title="以乐优商城为例整合简单的微服务架构、"></a>以乐优商城为例整合简单的微服务架构、</h3><h4 id="1-创建maven父工程-主要是依赖管理"><a href="#1-创建maven父工程-主要是依赖管理" class="headerlink" title="1.创建maven父工程(主要是依赖管理)"></a>1.创建maven父工程(主要是依赖管理)</h4><p><strong>注意：父工程的打包方式：pom  子工程的打包方式：jar，并且springboot和springcloud的版本一定要对应**</strong></p>
<p>基本pom.xml导入</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-web-leyou<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--pom打包方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--自动引入的子工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-web-registry<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-web-geteway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-web-item<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springboot-web-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pom版本管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springcloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">springcloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.starter.version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">mybatis.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.starter.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">druid.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pageHelper.starter.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">pageHelper.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastDFS.version</span>&gt;</span>1.26.2<span class="tag">&lt;/<span class="name">fastDFS.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper.starter.vertion</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">mapper.starter.vertion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">leyou.latest.version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">leyou.latest.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring-boot--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${springboot.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring-cloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${springcloud.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mybatis启动器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis.starter.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mapper启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mapper.starter.vertion}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 分页助手启动器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${pageHelper.starter.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mysql.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${druid.starter.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--fastDFS--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tobato<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${fastDFS.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${lombok.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log和测试相关--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${log4j.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${junit.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-创建以Eureka为中心的注册服务中心"><a href="#2-创建以Eureka为中心的注册服务中心" class="headerlink" title="2.创建以Eureka为中心的注册服务中心"></a>2.创建以Eureka为中心的注册服务中心</h4><p>pom.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Eureka:用于提供注册服务（注意：2.x版本要引入下面的依赖）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--莫名奇妙的依赖，但是JDK1.8之后的必须进行导入，否则报错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>application.yml配置文件</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：项目名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leyou-registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：Eureka服务注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务端实例</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment"># 表示是否向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>    <span class="comment"># false表示自己就是注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://${eureka.instance.hostname}:10086/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">10000</span></span><br></pre></td></tr></tbody></table></figure>
<p>创建主启动类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/27 17:06</span></span><br><span class="line"><span class="comment"> * 开启eureka注册服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(RegistryApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-创建基于Zuul的网关服务工程"><a href="#3-创建基于Zuul的网关服务工程" class="headerlink" title="3.创建基于Zuul的网关服务工程"></a>3.创建基于Zuul的网关服务工程</h4><p>pom.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入Eureka客户端服务依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Zuul网关路由服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>application.yml</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leyou-geteway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka/</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span>    <span class="comment">#拉取服务的间隔时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：Zuul网关服务基本配置</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span>  <span class="comment">#网关前缀</span></span><br><span class="line">  <span class="comment">#配置网关路由</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span> <span class="comment">#路由到商品的微服务(item-services是提供商品微服务模块被定义的的名字),目前只有一个微服务模块，后续也是以这种方式加入</span></span><br></pre></td></tr></tbody></table></figure>
<p>主启动类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/27 17:51</span></span><br><span class="line"><span class="comment"> * 开启zuul代理服务(注意注解)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeteWayApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(GeteWayApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>额外添加Config：用于解决ajax请求的跨域问题（刚开始可以不配置，后期在配置也一样）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/28 20:27</span></span><br><span class="line"><span class="comment"> * 在网关服务Module中配置CorsFilter:解决浏览器和服务器之间的跨域请求问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCorsFilterConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意：并不是这个包：org.apache.catalina.filters.CorsFilter。而是，spring-mvc框架中的包</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化cors配置对象</span></span><br><span class="line">        CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//设置允许跨域的域名（也就是允许在这个域名请求下的服务中进行另外的域名访问），注意：如果想要携带Cookie，这里的参数不能写“*”,必须写具体的域名</span></span><br><span class="line">        configuration.addAllowedOrigin(<span class="string">"http://manage.leyou.com"</span>);</span><br><span class="line">        <span class="comment">//设置是否允许携带Cookie</span></span><br><span class="line">        configuration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置允许的请求方法：一般为GET,POST,PUT,DELETE等。。。 注意："*" 代表所有</span></span><br><span class="line">        configuration.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">//设置允许携带的额请求头信息 注意："*" 代表所有</span></span><br><span class="line">        configuration.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化cors配置源对象</span></span><br><span class="line">        UrlBasedCorsConfigurationSource configurationSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        <span class="comment">//代表所有路径的请求都将经过上面配置的一系列过滤，最终决定是否允许这个请求进行跨域资源访问</span></span><br><span class="line">        configurationSource.registerCorsConfiguration(<span class="string">"/**"</span>, configuration);</span><br><span class="line">        <span class="comment">//返回CorsFilter实例，参数：上面配置的cors配置源对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configurationSource);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-创建用于管理微服务集群的微服务父工程（springboot-web-item）"><a href="#4-创建用于管理微服务集群的微服务父工程（springboot-web-item）" class="headerlink" title="4.创建用于管理微服务集群的微服务父工程（springboot-web-item）"></a>4.创建用于管理微服务集群的微服务父工程（springboot-web-item）</h4><h5 id="4-1-创建用于存放实体类的module-springboot-web-interface-将需要与数据库进行orm映射的pojo实体类放在此模块即可"><a href="#4-1-创建用于存放实体类的module-springboot-web-interface-将需要与数据库进行orm映射的pojo实体类放在此模块即可" class="headerlink" title="4.1 创建用于存放实体类的module(springboot-web-interface),将需要与数据库进行orm映射的pojo实体类放在此模块即可"></a><strong>4.1 创建用于存放实体类的module(springboot-web-interface),将需要与数据库进行orm映射的pojo实体类放在此模块即可</strong></h5><h5 id="4-2-创建真正的微服务模块（其实与一个springboot工程demo没什么区别）"><a href="#4-2-创建真正的微服务模块（其实与一个springboot工程demo没什么区别）" class="headerlink" title="4.2 创建真正的微服务模块（其实与一个springboot工程demo没什么区别）"></a>4.2 创建真正的微服务模块（其实与一个springboot工程demo没什么区别）</h5><p>pom.xml</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-web-item<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.item<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.service<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-item-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自定义module(这一点非常重要)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.interface<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-web-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入Eureka客户端服务依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid启动器(和上面那个用一个即可)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mapper启动器（简化mybatis，可以和原生的mybaits结合使用）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--actuator:提供测试接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>application.yml</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/leyou?serverTimezone=UTC&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mysql123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">50</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment">#配置：Druid数据源页面监控(配置之后可以直接在页面查看SQL监控)</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">druid</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">druid</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.css,*.png,*.ico,/druid/*"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：注册中心地址（指明这里的服务向那个服务中心进行注册）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">20</span>  <span class="comment">#过期时间</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment">#心跳时间（间隔5秒进行一次连通，确保服务仍然在）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：引入mybatis相关配置文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.item.entity.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：日志相关</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log/logback-spring.xml</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>整体结构目录</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200330120951466.png" alt="springboot-item-service"></p>
<p><strong>注意：这里使用的是springboot+通用mapper用于进化mybaits的sql语句编写，最下面的xxxMapper.xml文件还是原生的mapper配置文件，主要用于补充解决通用mapper不能解决的多表操作和其他一些动态sql的的问题</strong></p>
<h4 id="5-openFeign的基本使用（springboot-web-search搜索模块）"><a href="#5-openFeign的基本使用（springboot-web-search搜索模块）" class="headerlink" title="5.openFeign的基本使用（springboot-web-search搜索模块）"></a>5.openFeign的基本使用（springboot-web-search搜索模块）</h4><p>引入pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--item-interface微服务module--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.interface<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-item-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.leyou.common<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-web-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--openfeign:用于调取item微服务模块的数据--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>编写配置文件</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">search-service</span></span><br><span class="line"><span class="comment">#配置：elasticsearch基本信息</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.149</span><span class="number">.131</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span>  <span class="comment">#自动过滤json数据null字段</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span>  <span class="comment">#每隔5秒发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">20</span>  <span class="comment">#20秒不发送就过期</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://${eureka.instance.hostname}:10086/eureka/</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span>  <span class="comment">#拉取数据的间隔（保持数据不断线）</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>主启动类添加注解：<strong>@EnableFeignClients</strong> </p>
<p><strong>编写Client客户端接口 GoodsClient</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(name = "item-service")</span>  <span class="comment">//声明这是一个feign客户端接口，name的用于指向服务模块的名字（指明调用那个模块中的接口）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsClient</span> <span class="keyword">extends</span> <span class="title">GoodsApi</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p> <strong>GoodsApi：被抽取出来放在公共模块的接口类</strong>(里面整合好了方法指向的url地址，被client客户端继承，直接进行调用即可，至于url的匹配执行有别的服务模块进行)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsApi</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuId查询spuDetail的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/spu/detail/{spuId}")</span></span><br><span class="line">    <span class="function">SpuDetail <span class="title">querySpuDetailBySpuId</span><span class="params">(<span class="meta">@PathVariable("spuId")</span> Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据spuId查询商品的sku参数信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/sku/list")</span></span><br><span class="line">    <span class="function">List&lt;Sku&gt; <span class="title">querySkusBySpuId</span><span class="params">(<span class="meta">@RequestParam("id")</span> Long spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询商品列表分页结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rows</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/spu/page")</span></span><br><span class="line">    <span class="function">PageResults&lt;SpuBo&gt; <span class="title">queryGoodsByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "key", required = false)</span> String key,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "saleable", required = false)</span> Boolean saleable,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "page", defaultValue = "1")</span> Integer page,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "rows", defaultValue = "5")</span> Integer rows)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询品牌对象信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/brand/{id}")</span></span><br><span class="line">    <span class="function">Brand <span class="title">queryBranById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类（Category）主键集合ids循环查询分类的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/category")</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">queryCategoryNameByIds</span><span class="params">(<span class="meta">@RequestParam("ids")</span> List&lt;Long&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分组ID（group_id）查询具体的规格参数</span></span><br><span class="line"><span class="comment">     * 注意：如果页面没传递参数，则参数为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/spec/params")</span></span><br><span class="line">    <span class="function">List&lt;SpecParam&gt; <span class="title">querySpecParams</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "gid", required = false)</span> Long gid,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "cid", required = false)</span> Long cid,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "generic", required = false)</span> Boolean generic,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(value = "searching", required = false)</span> Boolean searching)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询spu信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/spu/{id}")</span></span><br><span class="line">    <span class="function">Spu <span class="title">querySpuById</span><span class="params">(<span class="meta">@PathVariable("id")</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类Id查询分组和每个分组里的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/spec/group/param/{cid}")</span></span><br><span class="line">    <span class="function">List&lt;SpecGroup&gt; <span class="title">queryGroupsWithParams</span><span class="params">(<span class="meta">@PathVariable("cid")</span> Long cid)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><strong>然后直接将client客户端进行bean注入，直接调用继承而来的接口方法即可，不需要考虑别的实现</strong></p>
<h4 id="6-Elasticsearch分布式搜索系统的整合使用-linux中安装elasticsearch和对应的ik分词器"><a href="#6-Elasticsearch分布式搜索系统的整合使用-linux中安装elasticsearch和对应的ik分词器" class="headerlink" title="6.Elasticsearch分布式搜索系统的整合使用(linux中安装elasticsearch和对应的ik分词器)"></a>6.Elasticsearch分布式搜索系统的整合使用(linux中安装elasticsearch和对应的ik分词器)</h4><p>引入pom依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--elasticsearch（注意版本冲突,我这里elasticsearch：7.50或者6.8.6（正在用的），对应启动器：最好较新一点）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>application.yml配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span>  <span class="comment">#新版本不写也可以</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.149</span><span class="number">.131</span><span class="string">:9300</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span>  <span class="comment">#自动过滤json数据null字段</span></span><br></pre></td></tr></tbody></table></figure>
<p>具体业务逻辑见代码…</p>
<h4 id="7-rabbitmq实现数据同步：数据库数据和elastisearch的数据同步更新（以elasticsearch搜索为例）"><a href="#7-rabbitmq实现数据同步：数据库数据和elastisearch的数据同步更新（以elasticsearch搜索为例）" class="headerlink" title="7.rabbitmq实现数据同步：数据库数据和elastisearch的数据同步更新（以elasticsearch搜索为例）"></a>7.rabbitmq实现数据同步：数据库数据和elastisearch的数据同步更新（以elasticsearch搜索为例）</h4><p>生产者：当生产者发生新增，更新，删除等改变数据的动作时，发送消息并携带信息到指定的交换机（exchange），</p>
<p>消费者(商品搜索服务和thymeleaf模板引擎页面静态化)：接收消息和携带的信息，并进行数据的更新，最终达到：只要数据库的信息改变，其依赖数据库信息的微服务模块中的数据信息也进行同步更新的效果。</p>
<p>引入pom依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot-amqp（数据同步）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置文件</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmq基本配置</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.149</span><span class="number">.131</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">exchange:</span> <span class="string">LEYOU.ITEM.EXCHANGE</span>  <span class="comment">#指定默认交换机（在具体发送消息时不需要再行指定交换机）</span></span><br></pre></td></tr></tbody></table></figure>
<p>生产者进行的操作：</p>
<p>当商品信息发生变化时，在进行本地数据库的更新的同时，向消息队列发送信息</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽取的发送消息的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String type, Long id)</span> </span>{</span><br><span class="line">    <span class="comment">/*对于发送消息到消息队列：要try-catch，无论消息发送是否成功，都不能影响业务本来的逻辑*/</span></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">/*convertAndSend（路由的key，携带的信息，具体看源码）*/</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"item."</span> + type, id);</span><br><span class="line">    } <span class="keyword">catch</span> (AmqpException e) {</span><br><span class="line">        log.info(<span class="string">"消息发送失败=&gt;消息类型：{},商品ID：{}"</span>, <span class="string">"item."</span> + type, id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>数据更新时，发送信息(在这里，新增商品的同时，发送消息)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> spuBo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGoods</span><span class="params">(SpuBo spuBo)</span> </span>{</span><br><span class="line">    <span class="comment">//新增spu</span></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    spuBo.setId(<span class="keyword">null</span>)</span><br><span class="line">            .setSaleable(<span class="keyword">true</span>)</span><br><span class="line">            .setValid(<span class="keyword">true</span>)</span><br><span class="line">            .setCreateTime(date)</span><br><span class="line">            .setLastUpdateTime(date);</span><br><span class="line">    spuMapper.insertSelective(spuBo);</span><br><span class="line">    <span class="comment">//新增spu_detail</span></span><br><span class="line">    SpuDetail spuDetail = spuBo.getSpuDetail()</span><br><span class="line">            .setSpuId(spuBo.getId());</span><br><span class="line">    spuDetailMapper.insertSelective(spuDetail);</span><br><span class="line">    <span class="comment">//新增sku和stock</span></span><br><span class="line">    saveSkuAndStock(spuBo, date);</span><br><span class="line">    <span class="comment">//发送增加商品的消息到消息队列====================》看这里，发送的消息</span></span><br><span class="line">    sendMsg(<span class="string">"insert"</span>, spuBo.getId());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>消费者：要进行监听，当监听到消息时，就获取此消息信息，进行具体的业务逻辑更新自己的信息</p>
<p>注解的解析：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    		//消费者绑定的具体队列信息</span></span><br><span class="line"><span class="meta">            value = @Queue(name = "LEYOU.SEARCH.SAVE.QUEUE", durable = "true"),</span></span><br><span class="line"><span class="meta">    		//消费者对应队列绑定的交换机（必须和相应的生产者绑定相同的交换机）</span></span><br><span class="line"><span class="meta">    // ignoreDeclarationExceptions = "true":忽略声明异常，当交换机已存在的情况下，如果再进行声明应该发生异常，但是这里进行忽略操作。</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = "LEYOU.ITEM.EXCHANGE", ignoreDeclarationExceptions = "true", type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    		//设置路由key，说明用于接收那些信息</span></span><br><span class="line"><span class="meta">            key = {"item.insert", "item.update"}</span></span><br></pre></td></tr></tbody></table></figure>
<p>创建rabbit监听类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListener</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SearchService searchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = "LEYOU.SEARCH.SAVE.QUEUE", durable = "true"),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = "LEYOU.ITEM.EXCHANGE", ignoreDeclarationExceptions = "true", type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = {"item.insert", "item.update"}</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        searchService.save(id);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>实现这个自定义的save方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步elasticsearch的数据(根据id查询数据库中的新增或更新后的信息，再重新冲入elasticsearch中，达到数据同步的效果)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Long id)</span> </span>{</span><br><span class="line">    Spu spu = <span class="keyword">this</span>.goodsClient.querySpuById(id);</span><br><span class="line">    Goods goods = <span class="keyword">this</span>.buildGoods(spu);</span><br><span class="line">    <span class="keyword">this</span>.goodsRepository.save(goods);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>主要是实现消息的发送和接收即可，具体更新和新增就是前面的逻辑而已…</p>
<p>8.用户注册的参数校验</p>
<p>依赖：web启动器内置的依赖(如果引入web启动器之后就不需要再引入下面的了)</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><strong>Hibernate Validator</strong>是Hibernate提供的一个开源框架，使用注解方式非常方便的实现服务端的数据校验</p>
<p><strong>具体注解含义和用法：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>Constraint</strong></th>
<th style="text-align:left"><strong>详细信息</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>@Valid</strong></td>
<td style="text-align:left">被注释的元素是一个对象，需要检查此对象的所有字段值</td>
</tr>
<tr>
<td><strong>@Null</strong></td>
<td style="text-align:left">被注释的元素必须为 null</td>
</tr>
<tr>
<td><strong>@NotNull</strong></td>
<td style="text-align:left">被注释的元素必须不为 null</td>
</tr>
<tr>
<td><strong>@AssertTrue</strong></td>
<td style="text-align:left">被注释的元素必须为 true</td>
</tr>
<tr>
<td><strong>@AssertFalse</strong></td>
<td style="text-align:left">被注释的元素必须为 false</td>
</tr>
<tr>
<td><strong>@Min(value)</strong></td>
<td style="text-align:left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td><strong>@Max(value)</strong></td>
<td style="text-align:left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td><strong>@DecimalMin(value)</strong></td>
<td style="text-align:left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td>
</tr>
<tr>
<td><strong>@DecimalMax(value)</strong></td>
<td style="text-align:left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td>
</tr>
<tr>
<td><strong>@Size(max, min)</strong></td>
<td style="text-align:left">被注释的元素的大小必须在指定的范围内</td>
</tr>
<tr>
<td><strong>@Digits (integer, fraction)</strong></td>
<td style="text-align:left">被注释的元素必须是一个数字，其值必须在可接受的范围内</td>
</tr>
<tr>
<td><strong>@Past</strong></td>
<td style="text-align:left">被注释的元素必须是一个过去的日期</td>
</tr>
<tr>
<td><strong>@Future</strong></td>
<td style="text-align:left">被注释的元素必须是一个将来的日期</td>
</tr>
<tr>
<td><strong>@Pattern(value)</strong></td>
<td style="text-align:left">被注释的元素必须符合指定的正则表达式</td>
</tr>
<tr>
<td><strong>@Email</strong></td>
<td style="text-align:left">被注释的元素必须是电子邮箱地址</td>
</tr>
<tr>
<td><strong>@Length</strong></td>
<td style="text-align:left">被注释的字符串的大小必须在指定的范围内</td>
</tr>
<tr>
<td><strong>@NotEmpty</strong></td>
<td style="text-align:left">被注释的字符串的必须非空</td>
</tr>
<tr>
<td><strong>@Range</strong></td>
<td style="text-align:left">被注释的元素必须在合适的范围内</td>
</tr>
<tr>
<td><strong>@NotBlank</strong></td>
<td style="text-align:left">被注释的字符串的必须非空</td>
</tr>
<tr>
<td><strong>@URL(protocol=,host=, port=,regexp=, flags=)</strong></td>
<td style="text-align:left">被注释的字符串必须是一个有效的url</td>
</tr>
<tr>
<td><strong>@CreditCardNumber</strong></td>
<td style="text-align:left">被注释的字符串必须通过Luhn校验算法，银行卡，信用卡等号码一般都用Luhn计算合法性</td>
</tr>
</tbody>
</table>
</div>
<p>使用实例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name = "tb_user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Length(min = 4, max = 30, message = "用户名只能在4~30位之间")</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Length(min = 4, max = 30, message = "密码只能在4~30位之间")</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = "^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$", message = "手机号码格式不正确")</span></span><br><span class="line">    <span class="keyword">private</span> String phone;<span class="comment">// 电话</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String salt;<span class="comment">// 密码的盐值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-阿里大于：短信微服务-整合rabbitmq和redis-实现消息队列监听和短信验证码5分钟失效"><a href="#8-阿里大于：短信微服务-整合rabbitmq和redis-实现消息队列监听和短信验证码5分钟失效" class="headerlink" title="8.阿里大于：短信微服务(整合rabbitmq和redis,实现消息队列监听和短信验证码5分钟失效)"></a>8.阿里大于：短信微服务(整合rabbitmq和redis,实现消息队列监听和短信验证码5分钟失效)</h4><h5 id="8-1-前端访问-获取手机号码"><a href="#8-1-前端访问-获取手机号码" class="headerlink" title="8.1 前端访问(获取手机号码)"></a>8.1 前端访问(获取手机号码)</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求发送短信验证码(给定参数：手机号和根据手机号随机生成的验证码传入消息队列)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping("/code")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">sendVerifyCode</span><span class="params">(<span class="meta">@RequestParam("phone")</span> String phone)</span> </span>{</span><br><span class="line">    Boolean bool = userService.sendVerifyCode(phone);</span><br><span class="line">    <span class="keyword">if</span> (bool == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (!bool) {</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().build();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="8-2-业务逻辑：实现消息队列的发送和redis的具体设置"><a href="#8-2-业务逻辑：实现消息队列的发送和redis的具体设置" class="headerlink" title="8.2 业务逻辑：实现消息队列的发送和redis的具体设置"></a>8.2 业务逻辑：实现消息队列的发送和redis的具体设置</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">//redis存储用户注册验证的的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"user:verify:"</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求发送短信验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">sendVerifyCode</span><span class="params">(String phone)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phone)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//正则校验手机号格式是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (!phone.matches(<span class="string">"^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//根据手机号生成6位验证码(工具类直接生成)</span></span><br><span class="line">        String code = NumberUtils.generateCode(<span class="number">6</span>);</span><br><span class="line">        Map&lt;String, String&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        msg.put(<span class="string">"phone"</span>, phone);</span><br><span class="line">        msg.put(<span class="string">"code"</span>, code);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//发送消息到rabbitmq消息队列（执行转换器和路由key,并发送msg消息到监听服务端）</span></span><br><span class="line">            amqpTemplate.convertAndSend(<span class="string">"LEYOU.SMS.EXCHANGE"</span>, <span class="string">"sms.verify.code"</span>, msg);</span><br><span class="line">            <span class="comment">//保存验证码数据到redis中(五分钟之后过期)</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(KEY_PREFIX + phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        } <span class="keyword">catch</span> (AmqpException e) {</span><br><span class="line">            log.info(<span class="string">"短信验证码：{}发送失败"</span>, code);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h5 id="8-3监听服务端：-监听rabbitmq消息队列，获取msg并发送短信"><a href="#8-3监听服务端：-监听rabbitmq消息队列，获取msg并发送短信" class="headerlink" title="8.3监听服务端： 监听rabbitmq消息队列，获取msg并发送短信"></a>8.3监听服务端： 监听rabbitmq消息队列，获取msg并发送短信</h5><p>具体操作：引入pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里云短信服务依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>阿里云访问密匙参数配置(参数不可泄漏)</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#参数配置（具体配置登录阿里云查找）</span></span><br><span class="line"><span class="attr">sms</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">service</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">accessKeyId</span>: <span class="string">LTAI4FpAkxvHDrQ2ZoBnBz**</span></span><br><span class="line">    <span class="attr">accessKeySecret</span>: <span class="string">MWCPkhImiyoklFEelO6m4d50gwao**</span></span><br><span class="line">    <span class="attr">signName</span>: <span class="string">自由商城</span></span><br><span class="line">    <span class="attr">verifyCodeTemplate</span>: <span class="string">SMS_187261429</span></span><br></pre></td></tr></tbody></table></figure>
<p>自我封装的发送短信的工具类（根据阿里云给的固定模按修改）</p>
<p>获取参数的javabean</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "sms.service")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String signName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String verifyCodeTemplate;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/7 9:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAcsClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数注入（自动注入属性配置类（SmsProperties）好像获取不到值）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> smsProperties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendSmsUtils</span><span class="params">(SmsProperties smsProperties)</span> </span>{</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(</span><br><span class="line">                <span class="string">"cn-hangzhou"</span>,</span><br><span class="line">                smsProperties.getAccessKeyId(),</span><br><span class="line">                smsProperties.getAccessKeySecret());</span><br><span class="line">        client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResponse <span class="title">sendSms</span><span class="params">(String telephone, String param, String signName, String templateId)</span> <span class="keyword">throws</span> ClientException </span>{</span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setSysDomain(<span class="string">"dysmsapi.aliyuncs.com"</span>);</span><br><span class="line">        request.setSysVersion(<span class="string">"2017-05-25"</span>);</span><br><span class="line">        request.setSysAction(<span class="string">"SendSms"</span>);</span><br><span class="line">        <span class="comment">// 接收短信的手机号码</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"PhoneNumbers"</span>, telephone);</span><br><span class="line">        <span class="comment">// 短信签名名称。请在控制台签名管理页面签名名称一列查看（必须是已添加、并通过审核的短信签名）。</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"SignName"</span>, signName);</span><br><span class="line">        <span class="comment">// 短信模板ID</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateCode"</span>, templateId);</span><br><span class="line">        <span class="comment">// 短信模板变量对应的实际值，JSON格式。</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateParam"</span>, param);</span><br><span class="line"></span><br><span class="line">        CommonResponse commonResponse = client.getCommonResponse(request);</span><br><span class="line">        log.info(<span class="string">"发送短信结果：{}"</span>, commonResponse.getData());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> commonResponse;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>服务端监听并发送短信消息</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SendSmsUtils sendSmsUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsProperties smsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听短信服务请求（rabbitmq）进行短信发送</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//注意监听消息队列的信息</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = "LEYOU.SMS.QUEUE", durable = "true"),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = "LEYOU.SMS.EXCHANGE", ignoreDeclarationExceptions = "true", type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = {"sms.verify.code"})</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenSms</span><span class="params">(Map&lt;String, String&gt; msg)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(msg)) {</span><br><span class="line">            <span class="comment">// 放弃处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        String phone = msg.get(<span class="string">"phone"</span>);</span><br><span class="line">        String code = msg.get(<span class="string">"code"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(phone, code)) {</span><br><span class="line">            <span class="comment">// 放弃处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//发送消息(code的类型必须时json字符串)</span></span><br><span class="line">        JsonObject jsonObject = <span class="keyword">new</span> JsonObject();</span><br><span class="line">        jsonObject.addProperty(<span class="string">"code"</span>, code);</span><br><span class="line">        <span class="comment">//填入参数手机号phone和生成的验证码code</span></span><br><span class="line">        CommonResponse commonResponse = <span class="keyword">this</span>.sendSmsUtils.sendSms(phone, jsonObject.toString(), smsProperties.getSignName(),</span><br><span class="line">                smsProperties.getVerifyCodeTemplate());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="9-简单短信验证码"><a href="#9-简单短信验证码" class="headerlink" title="9.简单短信验证码"></a>9.简单短信验证码</h4><p>基本工作和前面8的一样(去除了rabbitmq的消息队列服务，更加简洁方便)</p>
<p>controller层</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = "异步请求验证码", notes = "响应异步请求，调用发送验证码服务")</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@GetMapping("/code")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sendCode</span><span class="params">(<span class="meta">@RequestParam("phone")</span> String phone, RedirectAttributes redirectAttributes)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isBlank(phone)) {</span><br><span class="line">           redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"验证码获取失败，请填写正确的手机号！"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"redirect:/admin/registered"</span>;</span><br><span class="line">       }</span><br><span class="line">       String message;</span><br><span class="line">       <span class="comment">//发送验证码</span></span><br><span class="line">       <span class="keyword">boolean</span> sendStatus = userService.sendVerifyCode(phone);</span><br><span class="line">       <span class="keyword">if</span> (sendStatus) {</span><br><span class="line">           message = <span class="string">"验证码发送成功"</span>;</span><br><span class="line">           <span class="keyword">return</span> message;</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">           message = <span class="string">"验证码发送失败"</span>;</span><br><span class="line">           <span class="keyword">return</span> message;</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<p>service层</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGISTERED_KEY = <span class="string">"user:registered:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验手机号，实现发送验证码（redis:5分钟过期）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendVerifyCode</span><span class="params">(String phone)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(phone)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!phone.matches(<span class="string">"^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//使用工具类：根据手机号生成6位验证码</span></span><br><span class="line">        String code = NumberUtils.generateCode(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line"></span><br><span class="line">            JsonObject object = <span class="keyword">new</span> JsonObject();</span><br><span class="line">            object.addProperty(<span class="string">"code"</span>, code);</span><br><span class="line">            <span class="comment">//调用发送验证码服务</span></span><br><span class="line">            CommonResponse commonResponse = sendSmsUtils.sendSms(phone, object.toString(), smsProperties.getSignName(),</span><br><span class="line">                    smsProperties.getVerifyCodeTemplate());</span><br><span class="line">            <span class="comment">//存入redis:5分钟过期时间</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(REGISTERED_KEY + phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.info(<span class="string">"短信验证码:{}发送失败"</span>, code);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>发送短信的工具类sendSmsUtils</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SmsProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAcsClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数注入（自动注入属性配置类（SmsProperties）好像获取不到值）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> smsProperties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendSmsUtils</span><span class="params">(SmsProperties smsProperties)</span> </span>{</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(</span><br><span class="line">                <span class="string">"cn-hangzhou"</span>,</span><br><span class="line">                smsProperties.getAccessKeyId(),</span><br><span class="line">                smsProperties.getAccessKeySecret());</span><br><span class="line">        client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResponse <span class="title">sendSms</span><span class="params">(String telephone, String param, String signName, String templateId)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        CommonRequest request = <span class="keyword">new</span> CommonRequest();</span><br><span class="line">        request.setSysDomain(<span class="string">"dysmsapi.aliyuncs.com"</span>);</span><br><span class="line">        request.setSysVersion(<span class="string">"2017-05-25"</span>);</span><br><span class="line">        request.setSysAction(<span class="string">"SendSms"</span>);</span><br><span class="line">        <span class="comment">// 接收短信的手机号码</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"PhoneNumbers"</span>, telephone);</span><br><span class="line">        <span class="comment">// 短信签名名称。请在控制台签名管理页面签名名称一列查看（必须是已添加、并通过审核的短信签名）。</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"SignName"</span>, signName);</span><br><span class="line">        <span class="comment">// 短信模板ID</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateCode"</span>, templateId);</span><br><span class="line">        <span class="comment">// 短信模板变量对应的实际值，JSON格式。</span></span><br><span class="line">        request.putQueryParameter(<span class="string">"TemplateParam"</span>, param);</span><br><span class="line"></span><br><span class="line">        CommonResponse commonResponse = client.getCommonResponse(request);</span><br><span class="line">        log.info(<span class="string">"发送短信结果：{}"</span>, commonResponse.getData());</span><br><span class="line">        <span class="keyword">return</span> commonResponse;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="vue入门笔记"><a href="#vue入门笔记" class="headerlink" title="vue入门笔记"></a><code>vue</code>入门笔记</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en" xmlns:v-bind="http://www.w3.org/1999/xhtml"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .active {</span><br><span class="line">        color: red;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--vue对象的html模板--&gt;</span><br><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;!--调用计算属性--&gt;</span><br><span class="line">    &lt;span&gt;现在时间是：{{birth}}&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">    &lt;!--搜索监听watch--&gt;</span><br><span class="line">    &lt;input type="text" v-model="search" placeholder="触发监听事件..."&gt;&lt;br/&gt;</span><br><span class="line">    &lt;!--v-model=数据模型：双向绑定，可以同时改变数据模型中的数据值--&gt;</span><br><span class="line">    &lt;input type="text" v-model="num"/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;!--v-on:可以设置监听键盘事件，并且提供了按键修饰符和相应的别名--&gt;</span><br><span class="line">    &lt;input type="text" v-model="num" @keyup.enter="submit"/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;!--v-on:事件名="js表达式或者方法名"：绑定事件，可以简写成：@click="insc--&gt;</span><br><span class="line">    &lt;input type="button" value="鼠标左键点击事件.." @click="insc"/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type="button" value="鼠标左键点击事件（并使用（prevent）取消默认点击事件）.." @contextmenu.prevent="insc"/&gt;</span><br><span class="line">    &lt;!--{{}}:花括号里面本质上：js表达式，里面也可以进行逻辑运算--&gt;</span><br><span class="line">    &lt;!--单向绑定：声明式渲染，只能从数据模型中获取数据，不能改变数据模型中的值--&gt;</span><br><span class="line">    &lt;h2&gt;我是{{name}}，我有{{num}}万元&lt;/h2&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;!--&lt;span v-text="name"&gt;&lt;/span&gt;:将数据输出到元素内部，相当于th:text,会进行html的标签转义（推荐使用）--&gt;</span><br><span class="line">    &lt;!--&lt;span v-html="name"&gt;&lt;/span&gt;:将数据输出到元素内部，相当于th:utext,不会进行html的标签转义，一般不使用--&gt;</span><br><span class="line">    &lt;h2&gt;我是&lt;span v-text="name"&gt;&lt;/span&gt;，我有&lt;span v-text="num"&gt;&lt;/span&gt;万元&lt;/h2&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;!--v-model:复杂类型的双向绑定，根据所选项的值来判定数据模型是数组，字符串，或boolean类型的值，并且只有能在页面进行更改数据的元素才能进行双向绑定--&gt;</span><br><span class="line">    &lt;input type="checkbox" value="meizu" v-model="language"/&gt;魅族&lt;br/&gt;</span><br><span class="line">    &lt;input type="checkbox" value="oppo" v-model="language"/&gt;OPPO&lt;br/&gt;</span><br><span class="line">    &lt;input type="checkbox" value="vivo" v-model="language"/&gt;VIVO&lt;br/&gt;</span><br><span class="line">    您选购了&lt;span v-text="language.join(',')"&gt;&lt;/span&gt;手机</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;h3&gt;遍历数组&lt;/h3&gt;</span><br><span class="line">    &lt;ul v-for="(user,index) in users" :key="index" v-if="user.sex == 'woman'"&gt;</span><br><span class="line">        &lt;li v-text="index+1"&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li v-html="user.name"&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li v-text="user.age"&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li v-text="user.sex"&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!--遍历对象(可以拿到对象中的key和对应的value和index)  :key="index"作用：提高渲染效率，具体不知道什么用--&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for="(val,key,index) in user" :key="index"&gt;{{index+1}}--{{key}}--{{val}}&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;!--v-if="表达式"(推荐使用，两个效果相同，但效率更高)--&gt;</span><br><span class="line">    &lt;input type="button" value="点击隐藏或显示" @click="show=!show"&gt;&lt;br&gt;</span><br><span class="line">    &lt;span v-if="show"&gt;能看到我，说明我是true&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    &lt;!--v-show="表达式"--&gt;</span><br><span class="line">    &lt;span v-show="show"&gt;能看到我，说明我是true&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    &lt;!--v-bind的基本使用场景：</span><br><span class="line">        （根据条件判断是否激活样式显示）如果库存大于0，就激活加入购物车按钮的样式 或者</span><br><span class="line">        也可以进行属性的绑定，绑定之后，模板就会先到数据模型中寻找对应名称的属性值，若有就渲染显示出来</span><br><span class="line">        动态样式（v-bind:class）和静态样式（class）可以共存，</span><br><span class="line">         --&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;input type="text" v-model="store" placeholder="库存数量..."/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type="button" v-bind:class="{active: store &gt; 0}" class="" v-bind:value="buttonValue"/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--引入vue资源--&gt;</span><br><span class="line">&lt;script src="node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /*创建Vue实例*/</span><br><span class="line">    const app = new Vue({</span><br><span class="line">        el: "#app",  //选择器：所选择的容器就是此vue实例所在的容器</span><br><span class="line">        data: {     //定义数据模型（里面全部都是自定义的各种数据模型）</span><br><span class="line">            name: "木子",</span><br><span class="line">            num: 300,</span><br><span class="line">            language: [],</span><br><span class="line">            /*数组*/</span><br><span class="line">            users: [</span><br><span class="line">                {name: '&lt;span style="color: red;"&gt;java&lt;/span&gt;', age: 23, sex: 'man'},</span><br><span class="line">                {name: '&lt;span style="color: red;"&gt;php&lt;/span&gt;', age: 22, sex: 'woman'},</span><br><span class="line">                {name: '&lt;span style="color: red;"&gt;c++&lt;/span&gt;', age: 20, sex: 'man'},</span><br><span class="line">                {name: '&lt;span style="color: red;"&gt;javaScript&lt;/span&gt;', age: 18, sex: 'woman'},</span><br><span class="line">                {name: '&lt;span style="color: red;"&gt;python&lt;/span&gt;', age: 9, sex: 'man'},</span><br><span class="line">            ],</span><br><span class="line">            /*对象*/</span><br><span class="line">            user: {</span><br><span class="line">                name: 'java',</span><br><span class="line">                age: 23,</span><br><span class="line">                sex: 'man'</span><br><span class="line">            },</span><br><span class="line">            /*布尔类型数据*/</span><br><span class="line">            show: true,</span><br><span class="line">            store: 0,</span><br><span class="line">            buttonValue: "加入购物车",</span><br><span class="line">            birthday: 1529032123201, //毫秒值</span><br><span class="line">            search: "",</span><br><span class="line">        },</span><br><span class="line">        /*监听：里面的方法名必须和绑定的v-model="search"的数据模型的名字一样，newData:发生变化之后的值，oldData:放生变化之前的值*/</span><br><span class="line">        watch: {</span><br><span class="line">            search(newData, oldData) {</span><br><span class="line">                //发送axios请求到后台获取数据</span><br><span class="line">                console.log(newData + "==" + oldData);</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line">            insc() {</span><br><span class="line">                /*this:相当于vue实例对象：可以操作此vue实例里面的任何内容*/</span><br><span class="line">                this.num += 5;</span><br><span class="line">            },</span><br><span class="line">            submit() {</span><br><span class="line">                alert("提交成功...");</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        /*计算属性：其本质是一个属性。里面的方法必须要有返回值,并且自用当方法中的date发生改变时，才会重新进行计算结果，（与普通函数有本质区别），一般来说效率更高*/</span><br><span class="line">        computed: {</span><br><span class="line">            birth() {</span><br><span class="line">                const date = new Date(this.birthday);</span><br><span class="line">                return date.getFullYear() + "年" + date.getMonth() + "月" + date.getDay() + "日";</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        /*created()：创建vue实例之后，加载数据模板之前被执行的钩子函数(一般用于发送axios请求到服务器获取数据)*/</span><br><span class="line">        created() {</span><br><span class="line">            //axios</span><br><span class="line">            this.num = 10000; //这里就相当于num=10000覆盖了创建实例时声明的num=300数据模型的值（声明时的num的优先级更高）</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a><code>全局组件</code>和<code>局部组件</code></h3><p>全局组件：在当前页面的任意一个被vue绑定的div中，都可以使用该全局组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"component"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以定义的组件名来渲染显示组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*全局子组件:必须卸载vue实例的上面，而且是直接被Vue类声明的，否则不会生效*/</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">"counter"</span>, {</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'num++'</span>&gt;</span>点击num加1 -- num=</span><span class="template-variable">{{<span class="name">num</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>",</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*注意：component组件中data就是个函数，其return的返回值才是数据模型*/</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="comment">//必须使用return返回之后，才说明在data中注册了以和num属性，要和Vue实例中的data属性写法区别</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line">                num: 0,</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"><span class="javascript">    <span class="comment">/*父组件*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vue = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#component"</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="javascript">            num: <span class="number">0</span>,  <span class="comment">//这里的num并不是子组件中num,</span></span></span><br><span class="line">        },</span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>局部组件：只能在当前局部组件所在的div中才能使用该局部组件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tiny</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*局部子组件：必须显式引入vue实例中才能进行使用，并且不能和全局子组件一块使用，会被覆盖*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> smallComponent = {</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">span</span>&gt;</span>大家好，我是</span><span class="template-variable">{{<span class="name">name</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">                name: <span class="string">"刘德华"</span>,</span></span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"><span class="javascript">    <span class="comment">/*父组件*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vue = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#component"</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="javascript">            num: <span class="number">0</span>,  <span class="comment">//这里的num并不是子组件中num,</span></span></span><br><span class="line">        },</span><br><span class="line"><span class="javascript">        <span class="comment">/*声明注册局部子组件*/</span></span></span><br><span class="line">        components: {</span><br><span class="line"><span class="javascript">            <span class="comment">//key(在页面使用的组件名)--value(说明是哪个局部子组件)</span></span></span><br><span class="line">            tiny: smallComponent,</span><br><span class="line">       }</span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>父子组件通信</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"component"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@increvent="incr()":父组件的自定义事件（名字随便写）调用自己的函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span> <span class="attr">:num1</span>=<span class="string">"num"</span> @<span class="attr">increvent</span>=<span class="string">"incr()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /*父向子传递信息(单向通信)</span><br><span class="line">    * 首先：父组件使用子组件时，可以自定义属性（属性名任意，属性值是要传递的数据）</span><br><span class="line">    * 之后：子组件通过props（是个数组）接收父组件传递的数据（通过自定义的属性名）</span><br><span class="line">    * </span><br><span class="line"><span class="javascript">    * 子向父通信：<span class="built_in">this</span>.$emit(<span class="string">"父组件中的自定义事件名"</span>)</span></span><br><span class="line">    * */</span><br><span class="line"><span class="javascript">    <span class="comment">/*全局子组件:必须卸载vue实例的上面，而且是直接被Vue类声明的，否则不会生效*/</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">"counter"</span>, {</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">"num1"</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*另一种写法:理解即可，并没有真实的约束力*/</span></span></span><br><span class="line">/*        props: {</span><br><span class="line">            num1: {</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">                required: <span class="literal">true</span></span></span><br><span class="line">            }</span><br><span class="line">        },*/</span><br><span class="line"><span class="handlebars"><span class="xml">        template: "<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'sonFun'</span>&gt;</span>点击num加1 -- num=</span><span class="template-variable">{{<span class="name">num1</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>",</span></span></span><br><span class="line">        methods: {</span><br><span class="line"><span class="javascript">            <span class="comment">//通过触发子组件的方法，这样写可以触发调用父组件的方法，实现子组件的变化触发调用父组件，进而达到同步变化的效果</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">sonFun</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">                <span class="comment">//this.$emit("父组件中的自定义事件名"):固定写法</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">"increvent"</span>);</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"><span class="javascript">    <span class="comment">/*父组件*/</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vue = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#component"</span>,</span></span><br><span class="line">        data: {</span><br><span class="line"><span class="javascript">            num: <span class="number">0</span>,  <span class="comment">//这里的num用于传递给子组件使用</span></span></span><br><span class="line">        },</span><br><span class="line">        methods: {</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">incr</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.num++;</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a><code>vue-router</code></h3><p>1.安装<code>vue-router</code>组件</p>
<blockquote>
<p>npm install vue-router —save  (本地安装)</p>
</blockquote>
<p>2.vue页面引入vue-router</p>
<blockquote>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显式的声明使用组件</span></span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>3.编写路由配置</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入自定义组件</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">'../components/content'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../components/home'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter({</span><br><span class="line">  <span class="comment">//使用这种模式。url上面不会出现"#"号</span></span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  <span class="comment">//名称都是固定的写法</span></span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      <span class="comment">//配置路由路径</span></span><br><span class="line">      path: <span class="string">'/content'</span>,</span><br><span class="line">      <span class="comment">//自定义路由的名字</span></span><br><span class="line">      name: <span class="string">'content'</span>,</span><br><span class="line">      <span class="comment">//配置该路由路径要跳转的组件页面</span></span><br><span class="line">      component: Content</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">//配置的另一个路由</span></span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/home'</span>,</span><br><span class="line">      name: <span class="string">'home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>扩展：在页面里直接进行页面跳转（例如login登录页校验成功跳转main首页）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">"/main"</span>);  <span class="comment">//可以回退到上一级页面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//push方法会向 history 栈添加一个新的记录，而replace方法是替换当前的页面，</span></span><br><span class="line">不会向 history 栈添加一个新的记录</span><br><span class="line">&lt;router-link to="/05" replace&gt;05&lt;/router-link&gt;</span><br><span class="line"><span class="comment">// 一般使用replace来做404页面</span></span><br><span class="line"><span class="keyword">this</span>.$router.replace(<span class="string">'/'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 页面路由跳转 前进或者后退</span></span><br><span class="line"><span class="keyword">this</span>.$router.go(-<span class="number">1</span>) <span class="comment">// 后退</span></span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>扩展：嵌套路由并传递参数</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">     path: <span class="string">'/main'</span>,</span><br><span class="line">     name: <span class="string">'Main'</span>,</span><br><span class="line">     component: Main,</span><br><span class="line">     <span class="comment">//嵌套路由并开启参数接收功能</span></span><br><span class="line">     props: <span class="keyword">true</span>,</span><br><span class="line">    <span class="comment">//childred:表示这是一个嵌套路由，/:id/:username:绑定传递的参数</span></span><br><span class="line">     children: [</span><br><span class="line">       {path: <span class="string">'/user/profile/:id/:username'</span>, name: <span class="string">'userProfile'</span>, component: userProfile, props: <span class="keyword">true</span>},</span><br><span class="line">       {path: <span class="string">'/user/list'</span>, name: <span class="string">'userList'</span>, component: userList,},</span><br><span class="line">     ]</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<p><code>页面嵌套路由的跳转写法</code>:注意参数传递的写法</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1-1"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--嵌套路由必须使用v-bind绑定对象，name：传递相应的组件名， params:传递参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{name: 'userProfile',params: {id:1,username:'马滨'}}"</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">"1-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/list"</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>接收参数并展示的两种方法：</p>
<p><span class="github-emoji"><span>🅰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>原生方法展示</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  //直接使用$route.params.具体参数名</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{$route.params.id}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{$route.params.username}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><span class="github-emoji"><span>🅱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>上面路由配置的props:true就是为这里接收参数做准备的</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">先在跳转后的展示页面接收参数，再进行展示</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="comment">//props进行参数接收</span></span></span><br><span class="line"><span class="javascript">    name: <span class="string">"userProfile"</span>,</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'id'</span>, <span class="string">'username'</span>],</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{id}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{username}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><code>router和route的区别：</code></p>
<blockquote>
<p>1.router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。</p>
<p>举例：history对象</p>
<p>$router.push({path:’home’});本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录</p>
<p>方法：</p>
<p>$router.replace({path:’home’});//替换路由，没有历史记录</p>
<p>2.route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等</p>
</blockquote>
<p><code>重定向</code>路由配置:简单粗暴</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">, {</span><br><span class="line">      path: <span class="string">'/goHome'</span>,</span><br><span class="line">      name: <span class="string">'goHome'</span>,</span><br><span class="line">      <span class="comment">/*重定向到上面已经配置的/main路由路径*/</span></span><br><span class="line">      redirect: <span class="string">'/main'</span></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><code>404页面跳转</code>：一定放到路由配置的最下方</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> notFound from <span class="string">'../view/404'</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">      <span class="comment">/*如果上面没有匹配的路径，就走这个path  *代表任意路径:*/</span></span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      name: <span class="string">'notFound'</span>,</span><br><span class="line">      component: notFound,</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>
<p>4.在唯一入口文件main.js开启router路由功能</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//因为router文件夹下面只有一个路由文件index.js，所以这里引入文件夹就会自动扫描里面的index.js文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js：是整个前端工程的入口，配置的所有东西都需要在这里进行启用</span></span><br><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  <span class="comment">//启动配置好的路由(只需要这样简单的声明一下即可)</span></span><br><span class="line">  router,</span><br><span class="line"></span><br><span class="line">  components: {</span><br><span class="line">    App,</span><br><span class="line">  },</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<p>5.配置和开启配置完成之后，可以在显示的页面进行相关的跳转编写和展示</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;h1&gt;horse blog&lt;/h1&gt;</span><br><span class="line">    &lt;!--router-link：相当于html中的a标签，用于链接跳转--&gt;</span><br><span class="line">    &lt;router-link to="/home"&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to="/content"&gt;内容页&lt;/router-link&gt;</span><br><span class="line">    &lt;!--router-view：展示视图：展示由路由而进行跳转之后的页面内容--&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>router更多的路由配置用法(整合Element UI)</p>
<p><code>main.js中配置</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//导入elementUI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI from <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//安装ElementUI</span></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//启用Element UI(固定写法)</span></span><br><span class="line"> render: h =&gt; h(App)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="vue-axios封装"><a href="#vue-axios封装" class="headerlink" title="vue-axios封装"></a><code>vue-axios</code>封装</h3><blockquote>
<p>本地安装axios: npm install axios</p>
</blockquote>
<p>封装为request.js文件</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> { Message } <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> cookie <span class="keyword">from</span> <span class="string">'js-cookie'</span>  <span class="comment">// cookie的操作npm包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create({</span><br><span class="line">  baseURL: <span class="string">'http://localhost:9110'</span>,  <span class="comment">// axios的基础路径：每次请求时都会带上和自定义的路由拼接</span></span><br><span class="line">  timeout: <span class="number">5000</span> <span class="comment">// 请求超时时间（单位：秒）</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">    <span class="comment">// request发送请求时可以做的一些配置：例如：headers携带token进行鉴权访问等等...</span></span><br><span class="line">  config =&gt; {</span><br><span class="line">    <span class="comment">// 如果cookie中包含token</span></span><br><span class="line">    <span class="keyword">if</span> (cookie.get(<span class="string">'token'</span>)) {</span><br><span class="line">      <span class="comment">// 则发送后端api请求的时候携带token</span></span><br><span class="line">      config.headers[<span class="string">'token'</span>] = cookie.get(<span class="string">'token'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  },</span><br><span class="line">  error =&gt; {</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// 控制台打印错误信息：开发模式下使用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * code为非20000是抛错 可结合自己业务进行修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line">    <span class="keyword">if</span> (res.code === <span class="number">20000</span>) { <span class="comment">// 成功</span></span><br><span class="line">      <span class="keyword">return</span> response.data</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">23004</span>) { <span class="comment">// 获取用户信息失败</span></span><br><span class="line">      <span class="comment">// 清除cookie</span></span><br><span class="line">      cookie.set(<span class="string">'token'</span>, <span class="string">''</span>, { <span class="attr">domain</span>: <span class="string">'localhost'</span> })</span><br><span class="line">      <span class="keyword">return</span> response.data <span class="comment">// 不显示错误信息</span></span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">25000</span>) { <span class="comment">// 支付中</span></span><br><span class="line">      <span class="keyword">return</span> response.data <span class="comment">// 不显示错误信息</span></span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">28004</span>) { <span class="comment">// 鉴权失败:跳转到登录页</span></span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">'/login'</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      Message({</span><br><span class="line">        message: res.message,</span><br><span class="line">        type: <span class="string">'error'</span>,</span><br><span class="line">        duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      })</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'error'</span>)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></tbody></table></figure>
<p>引入和使用:在其他的js文件中进行引入并使用，然后引入该js文件在页面进行调用api接口</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// @ 符号在build/webpack.base.conf.js 中配置 表示 'src' 路径</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="comment">// 获取讲师列表</span></span><br><span class="line">  <span class="function"><span class="title">list</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> request({</span><br><span class="line">      url: <span class="string">'/admin/edu/teacher/list'</span>,</span><br><span class="line">      method: <span class="string">'get'</span></span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 分页查询讲师列表</span></span><br><span class="line">  <span class="function"><span class="title">pageList</span>(<span class="params">page, limit, selectObj</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> request({</span><br><span class="line">      url: <span class="string">`/admin/edu/teacher/list/<span class="subst">${page}</span>/<span class="subst">${limit}</span>`</span>,</span><br><span class="line">      method: <span class="string">'get'</span>,</span><br><span class="line">      params: selectObj <span class="comment">// params：传输表单或者URL拼接数据的提交方式</span></span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 根据ID删除讲师信息</span></span><br><span class="line">  <span class="function"><span class="title">removeById</span>(<span class="params">id</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> request({</span><br><span class="line">      url: <span class="string">`/admin/edu/teacher/remove/<span class="subst">${id}</span>`</span>,</span><br><span class="line">      method: <span class="string">'delete'</span></span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 保存讲师信息</span></span><br><span class="line">  <span class="function"><span class="title">save</span>(<span class="params">teacher</span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> request({</span><br><span class="line">      url: <span class="string">'/admin/edu/teacher/save'</span>,</span><br><span class="line">      method: <span class="string">'post'</span>,</span><br><span class="line">      data: teacher<span class="comment">// data：传输json类型的数据</span></span><br><span class="line">    })</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h3><h4 id="5-1-computed计算属性：他真的就是一个属性，只是写法和函数一样而已"><a href="#5-1-computed计算属性：他真的就是一个属性，只是写法和函数一样而已" class="headerlink" title="5.1 computed计算属性：他真的就是一个属性，只是写法和函数一样而已"></a>5.1 <code>computed</code>计算属性：他真的就是一个属性，只是写法和函数一样而已</h4><p><strong>注意</strong>：计算属性相当于把常用的函数计算的结果缓存起来，当再次进行调用的时候，不再执行函数，而直接返回缓存的计算结果，并且在使用差值表达式调用时：，这样调用</p>
<blockquote>
<p>computed和methods中的方法名不能重复，否则不生效</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">computed: {</span><br><span class="line">    getCurrentTimeTest2() {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date().getTime();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-2-watch监控"><a href="#5-2-watch监控" class="headerlink" title="5.2  watch监控"></a>5.2  <code>watch</code>监控</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//监控属性：通过watch给属性（result；上面data定义的属性）绑定函数，当属性的值发生变化时，就会触发该函数，并且可以接收	 两个参数newValue：属性改变后的值，oldValue:属性改变前的值</span></span><br><span class="line">        watch: {</span><br><span class="line">            result: function (newValue, oldValue) {</span><br><span class="line">                console.log(<span class="string">"result:"</span> + <span class="keyword">this</span>.result);</span><br><span class="line">                console.log(newValue + <span class="string">"==="</span> + oldValue);</span><br><span class="line">            }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="5-3-vue改变样式：一定条件下激活class中的样式"><a href="#5-3-vue改变样式：一定条件下激活class中的样式" class="headerlink" title="5.3  vue改变样式：一定条件下激活class中的样式"></a>5.3  <code>vue改变样式</code>：一定条件下激活class中的样式</h4><h5 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1.简单使用"></a>1.简单使用</h5><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--v-bind的基本使用场景：</span></span><br><span class="line"><span class="comment">      （根据条件判断是否激活样式显示）如果库存大于0，就激活加入购物车按钮的样式 或者</span></span><br><span class="line"><span class="comment">      也可以进行属性的绑定，绑定之后，模板就会先到数据模型中寻找对应名称的属性值，若有就渲染显示出来</span></span><br><span class="line"><span class="comment">      动态样式（v-bind:class）和静态样式（class）可以共存，</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"store"</span> <span class="attr">placeholder</span>=<span class="string">"库存数量..."</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-bind:class</span>=<span class="string">"{active: store &gt; 0}"</span> <span class="attr">class</span>=<span class="string">"test"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">v-bind:value</span>=<span class="string">"buttonValue"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-结合计算属性（功能强大）"><a href="#2-结合计算属性（功能强大）" class="headerlink" title="2.结合计算属性（功能强大）"></a>2.结合计算属性（功能强大）</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">     &lt;style&gt;</span><br><span class="line">        .test {</span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        .color {</span><br><span class="line">            background-color: teal;</span><br><span class="line">        }</span><br><span class="line">   &lt;/style&gt; </span><br><span class="line"><span class="comment">//点击按钮触发函数改变bool的值，并且触发计算属性changeStyle的值，从而实现计算属性改变vue样式的效果</span></span><br><span class="line">&lt;div :class="changeStyle" class="test"&gt;我是div&lt;/div&gt;</span><br><span class="line">    &lt;button type="button" v-model="bool" @click="changeBool"&gt;点击改变颜色&lt;/button&gt;</span><br><span class="line">        </span><br><span class="line">        data: {</span><br><span class="line">            bool: <span class="keyword">false</span></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line"> methods: {</span><br><span class="line">            changeBool() {</span><br><span class="line">                <span class="keyword">this</span>.bool = !<span class="keyword">this</span>.bool;</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//计算属性</span></span><br><span class="line">        computed: {</span><br><span class="line">            changeStyle() {</span><br><span class="line">                <span class="comment">//注意：return {里面返回的对应值的json字符串}</span></span><br><span class="line">                <span class="keyword">return</span> {</span><br><span class="line">                    color: <span class="keyword">this</span>.bool</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-数组语法：class绑定多个样式"><a href="#3-数组语法：class绑定多个样式" class="headerlink" title="3.数组语法：class绑定多个样式"></a>3.数组语法：class绑定多个样式</h5><p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200506104130100.png" alt="数组语法"></p>
<h5 id="4-style改变样式：也可以结合计算属性"><a href="#4-style改变样式：也可以结合计算属性" class="headerlink" title="4.style改变样式：也可以结合计算属性"></a>4.style改变样式：也可以结合计算属性</h5><p><strong>注意：属性名称必须用<code>驼峰命名</code>的方式书写，style里的内容是一个json键值对，所以用{ }包裹</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!--可以使用表达式和字符串拼接的方式--&gt;</span><br><span class="line">&lt;div :style="{backgroundColor:colorActive,fontSize:fontActive*2 + 'px'}" class="test"&gt; 我是你发也&lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">    data: {</span><br><span class="line">            colorActive: <span class="string">'green'</span>,</span><br><span class="line">            fontActive: <span class="number">20</span>,</span><br><span class="line">        },</span><br></pre></td></tr></tbody></table></figure>
<h5 id="5-style的数组用法"><a href="#5-style的数组用法" class="headerlink" title="5.style的数组用法"></a>5.style的数组用法</h5><p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200506105440820.png" alt="数组用法"></p>
<h3 id="6-vue进阶"><a href="#6-vue进阶" class="headerlink" title="6.vue进阶"></a>6.vue进阶</h3><p> <code>Vue实例用法</code></p>
<blockquote>
<p> 可以通过一个Vue对象（vm1）去操作另外一个Vue(vm2)对象：也就是可以在vm1实例对象中调用vm2实例对象中的data属性和methods中的方法等等。</p>
</blockquote>
<p><code>vue实例属性</code></p>
<blockquote>
<p>在Vue中直接通过对象.属性的方式调用的属性，都是data或者computed中的属性，它们仅仅被称为属性，而在Vue对象中的el,data,computed,…等也称为属性，但这是Vue的<code>实例属性</code>，通过vm1.$data的方式进行调用</p>
</blockquote>
<p><code>ref的使用：相当于id属性</code></p>
<blockquote>
<p>在vue中一般使用ref属性来代替id属性（id属性名字相同时不报错，一般不使用），这样就可以通过调用全局实例属性$refs来获取当前页面中ref标识的某个dom元素</p>
</blockquote>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">"mybtn1"</span> @<span class="attr">click</span>=<span class="string">"btnClick1"</span>&gt;</span>java<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">"mybtn2"</span> @<span class="attr">click</span>=<span class="string">"btnClick2"</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    methods: {</span><br><span class="line">        btnClick1() {</span><br><span class="line">//这样就可以获取指定dom元素</span><br><span class="line">            this.$refs.mybtn1.innerHTML="我是按钮"</span><br><span class="line">        },</span><br><span class="line">        btnClick2() {</span><br><span class="line">            this.$refs.mybtn2.innerHTML="我是另一个按钮"</span><br><span class="line">        }</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-1注册全局组件"><a href="#6-1注册全局组件" class="headerlink" title="6.1注册全局组件"></a>6.1注册全局组件</h4><p>在唯一入口文件<code>main.js</code>中进行全局组件的注册，注册之后组件可以在整个项目中进行使用</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> header <span class="keyword">from</span> <span class="string">'./components/header'</span></span><br><span class="line"><span class="keyword">import</span> bottom <span class="keyword">from</span> <span class="string">'./components/bottom'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*注册全局组件*/</span></span><br><span class="line">Vue.component(<span class="string">"myHeader"</span>, header);</span><br><span class="line">Vue.component(<span class="string">"myBottom"</span>, bottom);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="6-2注册局部组件"><a href="#6-2注册局部组件" class="headerlink" title="6.2注册局部组件"></a>6.2注册局部组件</h4><p>在想要使用某组件的vue中进行本地局部注册组件，那么此组件只能在当前vue页面才能被使用，和全局组件不同</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*注册局部组件*/</span></span><br><span class="line">  <span class="keyword">import</span> bottom <span class="keyword">from</span> <span class="string">'./components/bottom'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    name: <span class="string">'App'</span>,</span><br><span class="line">    <span class="comment">//必须显式的声明注册此组件</span></span><br><span class="line">    components: {</span><br><span class="line">        <span class="string">'myBottom'</span>: bottom,</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="7-符号"><a href="#7-符号" class="headerlink" title="7.@符号"></a>7.<code>@</code>符号</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//@:相当于src目录，      </span></span><br><span class="line">alias: {</span><br><span class="line">        <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">      }</span><br><span class="line"><span class="comment">//也就相当于在src路径下进行资源寻找</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/styles/index.scss'</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Elasticseatch命令语法"><a href="#Elasticseatch命令语法" class="headerlink" title="Elasticseatch命令语法"></a>Elasticseatch命令语法</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//匹配全部</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match_all"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//将字段进行分词后再进行匹配查询</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match"</span>: {</span><br><span class="line">      <span class="string">"title"</span>: <span class="string">"小米电视"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//多个字段属性匹配同一个词条（也就是增加了匹配字段）</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"multi_match"</span>: {</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"小米"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"title"</span>,<span class="string">"brand"</span>,<span class="string">"category"</span>]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//词条精确匹配（这里的词条不会被分词，而是拿这个词条整体去匹配该字段属性被分词后的所有词条）</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"term"</span>: {</span><br><span class="line">      <span class="string">"title"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"紫米"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//多词条匹配（增加了匹配的词条数而已）</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"terms"</span>: {</span><br><span class="line">      <span class="string">"title"</span>: [</span><br><span class="line">        <span class="string">"小米"</span>,</span><br><span class="line">        <span class="string">"电视"</span></span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//_source：规定查询的返回字段</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"_source"</span>: [<span class="string">"title"</span>,<span class="string">"price"</span>,<span class="string">"images"</span>],</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match_all"</span>: {}</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//布尔查询（bool）:自己体会吧...</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"bool"</span>: {</span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"match"</span>: {</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"小米"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"match"</span>: {</span><br><span class="line">            <span class="string">"brand"</span>: <span class="string">"小米"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"must_not"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"match"</span>: {</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"手机"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"term"</span>: {</span><br><span class="line">            <span class="string">"category"</span>: {</span><br><span class="line">              <span class="string">"value"</span>: <span class="string">"电"</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"match"</span>: {</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"电视"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//词条模糊匹配（就相当于词条可以存在偏差值的term查询（偏差值最大为：2））</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"fuzzy"</span>: {</span><br><span class="line">      <span class="string">"title"</span>: {</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"小米"</span>,</span><br><span class="line">        <span class="string">"fuzziness"</span>: <span class="number">1</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//对结果集进行过滤的操作：不影响评分等...(一般都是与bool查询集合使用)</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"bool"</span>: {</span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="string">"match"</span>: {</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"小米"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"filter"</span>: {</span><br><span class="line">          <span class="string">"range"</span>: {</span><br><span class="line">            <span class="string">"price"</span>: {</span><br><span class="line">              <span class="string">"gte"</span>: <span class="number">333</span>,</span><br><span class="line">              <span class="string">"lte"</span>: <span class="number">7777</span></span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//多查询结果集进行排序操作</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"query"</span>: {</span><br><span class="line">    <span class="string">"match"</span>: {</span><br><span class="line">      <span class="string">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  <span class="string">"sort"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"_score"</span>: {</span><br><span class="line">        <span class="string">"order"</span>: <span class="string">"asc"</span></span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"price"</span>: {</span><br><span class="line">        <span class="string">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line"><span class="comment">//聚合为桶：就相当于sql中的group by和聚合函数混合使用的效果差不多</span></span><br><span class="line"><span class="comment">//下面是：一个桶又嵌套了一个度量（聚合函数）和一个桶的实例（注意观察摆放位置即可...）</span></span><br><span class="line">GET item/_search</span><br><span class="line">{</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: {</span><br><span class="line">    <span class="string">"items"</span>: {</span><br><span class="line">      <span class="string">"terms"</span>: {</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"brand"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="string">"aggs"</span>: {</span><br><span class="line">        <span class="string">"avgCount"</span>: {</span><br><span class="line">          <span class="string">"avg"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        <span class="string">"category"</span>:{</span><br><span class="line">          <span class="string">"terms"</span>: {</span><br><span class="line">            <span class="string">"field"</span>: <span class="string">"category"</span></span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//查看索引的映射规则</span></span><br><span class="line">GET item/_mappings</span><br><span class="line"></span><br><span class="line"><span class="comment">//分词器的使用</span></span><br><span class="line">POST _analyze </span><br><span class="line">{</span><br><span class="line">  <span class="string">"analyzer"</span>:<span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"小米电视"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="微服务架构（基于谷粒商城）"><a href="#微服务架构（基于谷粒商城）" class="headerlink" title="微服务架构（基于谷粒商城）"></a>微服务架构（基于谷粒商城）</h2><p><strong>总结基本的组件架构和原理<span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></strong></p>
<h3 id="1-nacos-注册中心和配置中心（类似于eureka，但更加强悍）"><a href="#1-nacos-注册中心和配置中心（类似于eureka，但更加强悍）" class="headerlink" title="1. nacos:注册中心和配置中心（类似于eureka，但更加强悍）"></a>1. nacos:注册中心和配置中心（类似于eureka，但更加强悍）</h3><p><strong>nacos服务器：我在虚拟机中安装运行的</strong></p>
<p><span class="github-emoji"><span>🅰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>引入pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-cloud-starter-alibaba-nacos-discovery:注册中心，相当于eureka的作用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos-config:配置中心（比eureka多的功能）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><span class="github-emoji"><span>🅱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>主启动类开启注解@EnableDiscoveryClient</strong></p>
<p><span class="github-emoji"><span>⏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>配置文件进行相关配置</p>
<p>注册中心：一般在application.yml文件中配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-gateway</span></span><br><span class="line"><span class="string">//一般直接配置一个服务中心的端口号即可，其他的都是默认配置</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.149</span><span class="number">.131</span><span class="string">:8848</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置中心：必须在固定的配置文件中配置bootstrap.properties文件中进行配置</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#nacos配置中心：默认使用 bootstrap.properties 配置文件进行基本配置，固定名称</span></span><br><span class="line"><span class="comment">#服务模块名称(必须写)</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="comment">#配置中心地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">192.168.149.131:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面两个配置要根据nacos配置中心自定义命名空间和分组的信息进行具体配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置中心自定义命名空间ID</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">ed956bca-39b5-4731-8065-8c35192eab58</span></span><br><span class="line"><span class="comment">#配置中心自定义分组名称</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置中心显示：</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200421210311066.png" alt="配置中心配置"></p>
<p>直接启动服务，就直接可以在nacos的网页看见此服务已在注册中心中。</p>
<h3 id="2-springcloud-gateway-网关中心（类似于Zuul-更复杂而强悍）"><a href="#2-springcloud-gateway-网关中心（类似于Zuul-更复杂而强悍）" class="headerlink" title="2. springcloud-gateway:网关中心（类似于Zuul,更复杂而强悍）"></a>2. springcloud-gateway:网关中心（类似于Zuul,更复杂而强悍）</h3><p>引入pom,并且注册服务到nacos注册中心（切记）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-cloud-gateway--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>编写配置文件：网关服务的主要作用就是接收请求，按照一定的规则进行操作，并将请求转发到相应的服务模块</strong></p>
<p>配置知识很多：具体参照springcloud的官方文档慢慢学习</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#下面是常用的配置：(有些配置的写法前提是：已经将gateway服务注册到nacos（注册中心）中了)</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">          <span class="comment"># 配置gateway可以发现nacos中的微服务</span></span><br><span class="line">          <span class="attr">discovery:</span></span><br><span class="line">        	<span class="attr">locator:</span></span><br><span class="line">        	  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">routes:</span></span><br><span class="line">            <span class="comment">#路由到gulimall-product服务模块</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span>  <span class="comment">#路由的名称随便（见名知义）</span></span><br><span class="line">              <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span>  <span class="comment">#以负载均衡的模式（lb://xxx）路由到那个服务模块（必须写服务模块名称）</span></span><br><span class="line">              <span class="comment">#配置说明拦截什么样的路径请求</span></span><br><span class="line">              <span class="attr">predicates:</span>      </span><br><span class="line">                <span class="bullet">-</span> <span class="string">Path=/api/product/**</span>  </span><br><span class="line">              <span class="comment">#路径重写(动态截取路径：截取和转发的微服务模块controller层的请求路径相同的路径)</span></span><br><span class="line">              <span class="comment">#===不重写路径也没事的（只要网关服务不定义基础路径/api,那么就不用路径重写）===</span></span><br><span class="line">              <span class="attr">filters:</span></span><br><span class="line">               	<span class="comment">#例：/api/brand/list,截取重写成：/brand/list(形式一般是固定的，知识路径参数和截取的不一样)</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\{segment}</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">#第三方服务模块（oss...）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">third_party_route</span></span><br><span class="line">              <span class="attr">uri:</span> <span class="string">lb://gulimall-third-party</span></span><br><span class="line">              <span class="attr">predicates:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">Path=/api/thirdparty/**</span></span><br><span class="line">              <span class="attr">filters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">RewritePath=/api/thirdparty/(?&lt;segment&gt;.*),/$\{segment}</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#前端项目：带有/api前缀的全部路由到renren-fast路径（lb:负载均衡的进行路由）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">              <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">              <span class="attr">predicates:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">              <span class="comment">#路径重写</span></span><br><span class="line">              <span class="attr">filters:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\{segment}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="gateway统一解决跨域问题"><a href="#gateway统一解决跨域问题" class="headerlink" title="gateway统一解决跨域问题"></a>gateway统一解决跨域问题</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mabin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/8/14 15:25</span></span><br><span class="line"><span class="comment"> * 网关服务统一解决跨域问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span> </span>{</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="gateway配置全局过滤器"><a href="#gateway配置全局过滤器" class="headerlink" title="gateway配置全局过滤器"></a>gateway配置全局过滤器</h4><h5 id="token鉴权实例"><a href="#token鉴权实例" class="headerlink" title="token鉴权实例"></a><code>token鉴权实例</code></h5><p>需要用到的pom依赖</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关鉴权所需依赖:基于token--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--里面有JWTUtils工具类：你懂的...--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horse.college<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common_util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--排除spring-boot-starter-web，否则和gateway中的webflux冲突--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--将随着spring-boot-starter-web排除的servlet-api添加回来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤请求路径中需要鉴权的路径:进行token的鉴定(存在与否或者是正确与否)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取请求路径path</span></span><br><span class="line">        ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">        String path = request.getURI().getPath();</span><br><span class="line">        <span class="comment">// 匹配路由</span></span><br><span class="line">        AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">if</span> (antPathMatcher.match(<span class="string">"/api/**/auth/**"</span>, path)) {</span><br><span class="line">            List&lt;String&gt; tokenList = request.getHeaders().get(<span class="string">"token"</span>);</span><br><span class="line">            <span class="comment">// token是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(tokenList)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.out(exchange.getResponse());</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// token是否正确</span></span><br><span class="line">            <span class="keyword">if</span> (!JwtUtils.checkJwtTToken(tokenList.get(<span class="number">0</span>))) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.out(exchange.getResponse());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// token正常:放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义当前过滤器的优先级，值越小，优先级越高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回响应信息的辅助类(就是返回自定义组装的信息的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">out</span><span class="params">(ServerHttpResponse response)</span> </span>{</span><br><span class="line">        DataBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            paramsMap.put(<span class="string">"success"</span>, <span class="keyword">false</span>);</span><br><span class="line">            paramsMap.put(<span class="string">"code"</span>, <span class="number">28004</span>);</span><br><span class="line">            paramsMap.put(<span class="string">"data"</span>, <span class="string">""</span>);</span><br><span class="line">            paramsMap.put(<span class="string">"message"</span>, <span class="string">"鉴权失败"</span>);</span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            String message = mapper.writeValueAsString(paramsMap);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = message.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            buffer = response.bufferFactory().wrap(bytes);</span><br><span class="line">            <span class="comment">//指定编码，否则在浏览器中会中文乱码</span></span><br><span class="line">            response.getHeaders().add(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (JsonProcessingException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出http响应</span></span><br><span class="line">        <span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>页面的优化:响应拦截器判断是否出现自定义的鉴权失败错误码</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res.code === <span class="number">28004</span>) { <span class="comment">// 鉴权失败:跳转到登录页</span></span><br><span class="line">     <span class="built_in">window</span>.location.href = <span class="string">'/login'</span></span><br><span class="line">     <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>
<p>登录方法的优化：登录后按条件返回原来页面、</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line">    <span class="function"><span class="title">submitLogin</span>(<span class="params"></span>)</span> {</span><br><span class="line">      <span class="comment">// 调用远程服务接口,获取token</span></span><br><span class="line">      loginApi.login(<span class="built_in">this</span>.user).then(<span class="function"><span class="params">response</span> =&gt;</span> {</span><br><span class="line">        <span class="comment">// 将token写入cookie中</span></span><br><span class="line">        cookie.set(<span class="string">'token'</span>, response.data.token, { <span class="attr">domain</span>: <span class="string">'localhost'</span> })</span><br><span class="line">        <span class="comment">// 如果上一页是注册页:登录直接进入首页</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.referrer.indexOf(<span class="string">'register'</span>) !== -<span class="number">1</span>) { <span class="comment">// js原生方法:查询当前页面的上一页的路径path是否包含某个字符串,没有则返回-1</span></span><br><span class="line">          <span class="built_in">this</span>.$router.push({ <span class="attr">path</span>: <span class="string">'/'</span> })</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="comment">// 如果上一页不是注册页:登录直接返回上一页</span></span><br><span class="line">          history.go(-<span class="number">1</span>)</span><br><span class="line">        }</span><br><span class="line">      })</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>具体作用主要在配置转发这一块。。。</p>
<h3 id="3-OSS服务模块（必须提前配置好自己的oss服务器，一定要配置跨域问题）"><a href="#3-OSS服务模块（必须提前配置好自己的oss服务器，一定要配置跨域问题）" class="headerlink" title="3. OSS服务模块（必须提前配置好自己的oss服务器，一定要配置跨域问题）"></a>3. OSS服务模块（必须提前配置好自己的oss服务器，一定要配置跨域问题）</h3><p>文件上传原理：客户端请求本地应用服务器获取签名（关于oss服务器上传的具体配置信息），然后客户端再带着签名把文件上传到OSS服务器上面（<strong>好处：避免阿里云的密匙信息暴漏在前端页面</strong>）</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200421212621298.png" alt="image-20200421212621298"></p>
<p>引入pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--阿里云对象存储-OSS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>必要的参数配置application.yml</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">#oss对象存储</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span>	</span><br><span class="line">    <span class="attr">alicloud:</span></span><br><span class="line">      <span class="attr">access-key:</span> <span class="string">*******</span>   <span class="comment">#阿里云的访问key（大家都懂）</span></span><br><span class="line">      <span class="attr">secret-key:</span> <span class="string">********</span> <span class="comment">#阿里云的访问key</span></span><br><span class="line">      <span class="attr">oss:</span></span><br><span class="line">        <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span>  <span class="comment">#oss服务器的所在区域</span></span><br><span class="line">        <span class="attr">bucket:</span> <span class="string">gulimall-horse</span>  <span class="comment">#创建的存储容器bucket的名称</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后配置处理前端获取签名请求的方法(基本不用修改)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OSSController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OSS ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${spring.cloud.alicloud.oss.endpoint}")</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${spring.cloud.alicloud.oss.bucket}")</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${spring.cloud.alicloud.access-key}")</span></span><br><span class="line">    <span class="keyword">private</span> String accessId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端请求应用服务器获取签名，用于传输文件到oss</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping("/oss/policy")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">policy</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拼接处bucket的域名（也就是oss服务器的路径）</span></span><br><span class="line">        String host = <span class="string">"https://"</span> + bucket + <span class="string">"."</span> + endpoint;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户上传文件时指定的前缀（也就是相应的文件夹）。</span></span><br><span class="line">        String prefix = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        String dir = prefix + <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; respMap = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">long</span> expireTime = <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="number">1000</span>;</span><br><span class="line">            Date expiration = <span class="keyword">new</span> Date(expireEndTime);</span><br><span class="line">            PolicyConditions policyConds = <span class="keyword">new</span> PolicyConditions();</span><br><span class="line">            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, <span class="number">1048576000</span>);</span><br><span class="line">            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</span><br><span class="line"></span><br><span class="line">            String postPolicy = ossClient.generatePostPolicy(expiration, policyConds);</span><br><span class="line">            <span class="keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            String encodedPolicy = BinaryUtil.toBase64String(binaryData);</span><br><span class="line">            String postSignature = ossClient.calculatePostSignature(postPolicy);</span><br><span class="line"></span><br><span class="line">            respMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            respMap.put(<span class="string">"accessid"</span>, accessId);</span><br><span class="line">            respMap.put(<span class="string">"policy"</span>, encodedPolicy);</span><br><span class="line">            respMap.put(<span class="string">"signature"</span>, postSignature);</span><br><span class="line">            respMap.put(<span class="string">"dir"</span>, dir);</span><br><span class="line">            respMap.put(<span class="string">"host"</span>, host);</span><br><span class="line">            respMap.put(<span class="string">"expire"</span>, String.valueOf(expireEndTime / <span class="number">1000</span>));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">"data"</span>, respMap);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后前端获取响应之后，带着文件和签名进行上传操作即可…</p>
<h4 id="3-1-阿里云简单的文件上传"><a href="#3-1-阿里云简单的文件上传" class="headerlink" title="3.1 阿里云简单的文件上传"></a>3.1 阿里云简单的文件上传</h4><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="attr">keyid:</span> <span class="string">LTAI4G5VED5k6BKQUFhCZe**</span></span><br><span class="line">    <span class="attr">keysecret:</span> <span class="string">INHwRHY7a8MNlR0jsReJYXJ4kQP**</span></span><br><span class="line">    <span class="attr">bucketname:</span> <span class="string">gulimall-horse</span></span><br></pre></td></tr></tbody></table></figure>
<p>属性封装</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "aliyun.oss")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keyid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keysecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bucketname;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>service层业务逻辑</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssProperties ossProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流的形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> module 自定义：上传的文件所在的文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originFileName 文件的原始名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 可访问的URL地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(InputStream inputStream, String <span class="keyword">module</span>, String originFileName)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        String endpoint = ossProperties.getEndpoint();</span><br><span class="line">        String keyid = ossProperties.getKeyid();</span><br><span class="line">        String keysecret = ossProperties.getKeysecret();</span><br><span class="line">        String bucketname = ossProperties.getBucketname();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断oss实例是否存在：如果不存在则创建，如果存在则获取</span></span><br><span class="line">        OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, keyid, keysecret);</span><br><span class="line">        <span class="keyword">if</span> (!ossClient.doesBucketExist(bucketname)) {</span><br><span class="line">            <span class="comment">//创建bucket</span></span><br><span class="line">            ossClient.createBucket(bucketname);</span><br><span class="line">            <span class="comment">//设置oss实例的访问权限：公共读</span></span><br><span class="line">            ossClient.setBucketAcl(bucketname, CannedAccessControlList.PublicRead);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//构建日期路径：avatar/2019/02/26/文件名</span></span><br><span class="line">        String folder = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd"</span>).format(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//文件名：uuid.扩展名</span></span><br><span class="line">        String fileName = IdUtil.simpleUUID();</span><br><span class="line">        String fileExtension = originFileName.substring(originFileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//文件相对Bucket的全路径名</span></span><br><span class="line">        String key = <span class="keyword">module</span> + <span class="string">"/"</span> + folder + <span class="string">"/"</span> + fileName + fileExtension;</span><br><span class="line">        <span class="comment">//文件上传至阿里云</span></span><br><span class="line">        ossClient.putObject(ossProperties.getBucketname(), key, inputStream);</span><br><span class="line">        <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="comment">//返回url地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"https://"</span> + bucketname + <span class="string">"."</span> + endpoint + <span class="string">"/"</span> + key;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>controller层的API接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Api("阿里云文件上传")</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/admin/oss/file")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("文件上传")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "file", value = "文件", required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = "module", value = "模块", required = true, type = "String")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@PostMapping("/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam("file")</span> MultipartFile file, <span class="meta">@RequestParam("module")</span> String <span class="keyword">module</span>)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        InputStream inputStream = file.getInputStream();</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        String upload = fileService.upload(inputStream, <span class="keyword">module</span>, originalFilename);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.isBlank(upload) ? R.error().message(<span class="string">"文件上传失败"</span>) : R.ok().message(<span class="string">"文件上传成功"</span>).data(<span class="string">"url"</span>, upload);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2-阿里云简单的文件删除"><a href="#3-2-阿里云简单的文件删除" class="headerlink" title="3.2 阿里云简单的文件删除"></a>3.2 阿里云简单的文件删除</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 阿里云删除文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> url 文件的全路径名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFileByUrl</span><span class="params">(String url)</span> </span>{</span><br><span class="line"></span><br><span class="line">       String endpoint = ossProperties.getEndpoint();</span><br><span class="line">       String keyid = ossProperties.getKeyid();</span><br><span class="line">       String keysecret = ossProperties.getKeysecret();</span><br><span class="line">       String bucketname = ossProperties.getBucketname();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">       OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, keyid, keysecret);</span><br><span class="line">       <span class="comment">//拼接文件的访问链接</span></span><br><span class="line">       String host = <span class="string">"https://"</span> + bucketname + <span class="string">"."</span> + endpoint + <span class="string">"/"</span>;</span><br><span class="line">       <span class="comment">//获取文件的相对全路径名</span></span><br><span class="line">       String objectName = url.substring(host.length());</span><br><span class="line">       <span class="comment">// 删除文件。</span></span><br><span class="line">       ossClient.deleteObject(bucketname, objectName);</span><br><span class="line">       <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">       ossClient.shutdown();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-3-阿里云简单的视频上传"><a href="#3-3-阿里云简单的视频上传" class="headerlink" title="3.3 阿里云简单的视频上传"></a>3.3 阿里云简单的视频上传</h4><p>基本信息配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">vod:</span></span><br><span class="line">    <span class="attr">keyid:</span> <span class="string">LTAI4G5VED5k6BKQUFhCZe**</span></span><br><span class="line">    <span class="attr">keysecret:</span> <span class="string">INHwRHY7a8MNlR0jsReJYXJ4kQPt**</span></span><br><span class="line">    <span class="comment"># 自定义转码模版组ID（可不配置）</span></span><br><span class="line">    <span class="attr">templateGroupId:</span> <span class="string">8c76f35af529d4db22ca54243a54eebf</span></span><br><span class="line">    <span class="comment"># 自定义工作流ID（可不配置）</span></span><br><span class="line">    <span class="attr">workflowId:</span> <span class="string">c0c6b6e7215bca533bec938e0d880824</span></span><br></pre></td></tr></tbody></table></figure>
<p>属性获取配置类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "aliyun.vod")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VodProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keyid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String keysecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String templateGroupId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String workflowId;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>抽取的初始化客户端工具类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunVodSDKUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视频点播测试:初始化client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKeyId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessKeySecret</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultAcsClient <span class="title">initVodClient</span><span class="params">(String accessKeyId, String accessKeySecret)</span> </span>{</span><br><span class="line">        <span class="comment">// 点播服务接入区域(一般默认不变)</span></span><br><span class="line">        String regionId = <span class="string">"cn-shanghai"</span>;</span><br><span class="line">        DefaultProfile profile = DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>简单视频上传(controller层提供一个文件流和一个文件初始名即可)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VodProperties vodProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件流式视频上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalFileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  阿里云返回的上传成功的视频ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadVod</span><span class="params">(InputStream inputStream, String originalFileName)</span> </span>{</span><br><span class="line"></span><br><span class="line">        String title = StringUtils.substring(originalFileName, <span class="number">0</span>, originalFileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 上传视频:</span></span><br><span class="line"><span class="comment">         * 注意:title:去除扩展名的文件名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UploadStreamRequest request = <span class="keyword">new</span> UploadStreamRequest(vodProperties.getKeyid(), vodProperties.getKeysecret(),</span><br><span class="line">                title, originalFileName, inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为以下两个设置会产生费用,所以开发阶段可以先注释掉,生产环境再开启注释</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模板组ID(可选):自定义的转码模板</span></span><br><span class="line"><span class="comment">//        request.setTemplateGroupId(vodProperties.getTemplateGroupId());</span></span><br><span class="line">        <span class="comment">// 工作流ID(可选):智能审核文件</span></span><br><span class="line"><span class="comment">//        request.setWorkflowId(vodProperties.getWorkflowId());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开始上传</span></span><br><span class="line">        UploadVideoImpl uploader = <span class="keyword">new</span> UploadVideoImpl();</span><br><span class="line">        UploadStreamResponse response = uploader.uploadStream(request);</span><br><span class="line">        <span class="comment">// 获取VideoId</span></span><br><span class="line">        String videoId = response.getVideoId();</span><br><span class="line">        <span class="comment">//没有正确的返回videoId则说明上传失败</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(videoId)) {</span><br><span class="line">            log.error(<span class="string">"阿里云上传失败："</span> + response.getCode() + <span class="string">" - "</span> + response.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(ResultCodeEnum.VIDEO_UPLOAD_ALIYUN_ERROR);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> videoId;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-4-阿里云简单的视频删除-amp-amp-批量删除"><a href="#3-4-阿里云简单的视频删除-amp-amp-批量删除" class="headerlink" title="3.4 阿里云简单的视频删除&amp;&amp;批量删除"></a>3.4 阿里云简单的视频删除&amp;&amp;批量删除</h4><p>根据视频ID单个删除</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据viedoId删除视频信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClientException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeVodByVideoId</span><span class="params">(String videoId)</span> <span class="keyword">throws</span> ClientException </span>{</span><br><span class="line">        DefaultAcsClient client = AliyunVodSDKUtils.initVodClient(</span><br><span class="line">                vodProperties.getKeyid(),</span><br><span class="line">                vodProperties.getKeysecret());</span><br><span class="line">        DeleteVideoRequest request = <span class="keyword">new</span> DeleteVideoRequest();</span><br><span class="line">        request.setVideoIds(videoId);</span><br><span class="line">        client.getAcsResponse(request);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>批量删除（传入视频ID按要求拼接的字符串）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除阿里云视频</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoIdList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeVideoByIdList</span><span class="params">(List&lt;String&gt; videoIdList)</span> <span class="keyword">throws</span> ClientException </span>{</span><br><span class="line">        DefaultAcsClient client = AliyunVodSDKUtils.initVodClient(</span><br><span class="line">                vodProperties.getKeyid(),</span><br><span class="line">                vodProperties.getKeysecret());</span><br><span class="line">        DeleteVideoRequest request = <span class="keyword">new</span> DeleteVideoRequest();</span><br><span class="line">        <span class="comment">// 拼接多个ID,形成字符串</span></span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> size = videoIdList.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            stringBuilder.append(videoIdList.get(i));</span><br><span class="line">            <span class="keyword">if</span> (size - <span class="number">1</span> == i || size % <span class="number">20</span> == <span class="number">19</span>) {</span><br><span class="line">                <span class="comment">// 支持传入多个ID,多个用逗号分隔,每次产出ID不能超过20个</span></span><br><span class="line">                request.setVideoIds(stringBuilder.toString());</span><br><span class="line">                client.getAcsResponse(request);</span><br><span class="line">                <span class="comment">// 重置stringBuilder:下次循环使用</span></span><br><span class="line">                stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">20</span> &lt; <span class="number">19</span>) {</span><br><span class="line">                stringBuilder.append(<span class="string">","</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-springboot整合七牛云实现oss对象存储并回显"><a href="#4-springboot整合七牛云实现oss对象存储并回显" class="headerlink" title="4. springboot整合七牛云实现oss对象存储并回显"></a>4. springboot整合七牛云实现oss对象存储并回显</h3><p>引入pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--七牛配置依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 七牛云 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.2.0, 7.2.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>happy-dns-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>编写基本配置</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#七牛云基本配置</span></span><br><span class="line"><span class="comment"># bucket是创建的存储空间名</span></span><br><span class="line"><span class="comment"># path对应存储空间的访问域名(当前是测试域名)</span></span><br><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">JMqFBotOcQWbyYtJvugcwNS_qmndHhdW1WqhWu_O</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">yh_Hm51wY61g7Rj6CT_XXtU0SiWWLaCvPUMSD0c5</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">horse-blog</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">q9pedukg4.bkt.clouddn.com</span></span><br></pre></td></tr></tbody></table></figure>
<p>编写config扩展类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(QiniuProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuFileConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QiniuProperties qiniuProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 华东机房,配置自己空间所在的区域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> com.qiniu.storage.<span class="function">Configuration <span class="title">qiniuConfig</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> com.qiniu.storage.Configuration(Zone.zone0());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个七牛上传工具实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UploadManager <span class="title">uploadManager</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UploadManager(qiniuConfig());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证信息实例：用于获取上传凭证,相当于token令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Auth <span class="title">auth</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Auth.create(qiniuProperties.getAccessKey(), qiniuProperties.getSecretKey());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建七牛空间管理实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BucketManager <span class="title">bucketManager</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BucketManager(auth(), qiniuConfig());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">gson</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>配置文件读取类</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "qiniu")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>整合上传的方法（本例结合markdown上传图片进行演示）</p>
<p>service层封装的方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(QiNiuProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileServiceImpl</span> <span class="keyword">implements</span> <span class="title">UploadFileService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QiNiuProperties qiNiuProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛文件上传管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UploadManager uploadManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛认证管理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Auth auth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空间管理器:用于删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BucketManager bucketManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上传凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getUploadToken</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.auth.uploadToken(qiNiuProperties.getBucket(), <span class="keyword">null</span>, <span class="number">3600</span>, <span class="keyword">null</span>);</span><br><span class="line">    }   </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以流的形式上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件重命名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> QiniuException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(InputStream inputStream, String fileName)</span> <span class="keyword">throws</span> QiniuException </span>{</span><br><span class="line">        Response response = <span class="keyword">this</span>.uploadManager.put(inputStream, fileName, getUploadToken(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> retry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (response.needRetry() &amp;&amp; retry &lt; <span class="number">3</span>) {</span><br><span class="line">            response = <span class="keyword">this</span>.uploadManager.put(inputStream, fileName, getUploadToken(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            retry++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//解析结果:根据返回的路径可以直接访问上传的资源进行回显操作</span></span><br><span class="line">        DefaultPutRet putRet = JSON.parseObject(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">        String returnPath = <span class="string">"http://"</span> + qiniuProperties.getPath() + <span class="string">"/"</span> + putRet.key;</span><br><span class="line">        log.info(<span class="string">"文件名称={}"</span>, returnPath);</span><br><span class="line">        <span class="keyword">return</span> returnPath;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 七牛云删除文件（单个删除）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名(不是文件外链)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> QiniuException </span>{</span><br><span class="line">        <span class="keyword">this</span>.bucketManager.delete(qiNiuProperties.getBucket(), fileName);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>controller层进行调用（这里仅仅是markdown的用法，可能不尽相同，灵活运用）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">@ApiOperation(value = "markdown图片上传", notes = "依赖于七牛云实现图片上出回显")</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@PostMapping("/imageUpload")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> JSONObject <span class="title">imageUpload</span><span class="params">(<span class="meta">@RequestParam(value = "editormd-image-file")</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">       JSONObject res = <span class="keyword">new</span> JSONObject();</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           FileInputStream inputStream = (FileInputStream) file.getInputStream();</span><br><span class="line">           String imagePath = blogService.uploadFile(inputStream, FileNameUtils.generateFileName(file));  <span class="comment">//FileNameUtils：重命名文件工具类</span></span><br><span class="line">           res.put(<span class="string">"url"</span>, imagePath);</span><br><span class="line">           res.put(<span class="string">"success"</span>, <span class="number">1</span>);</span><br><span class="line">           res.put(<span class="string">"message"</span>, <span class="string">"上传成功！"</span>);</span><br><span class="line">       } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">           res.put(<span class="string">"success"</span>, <span class="number">0</span>);</span><br><span class="line">           res.put(<span class="string">"message"</span>, <span class="string">"上传失败！"</span>);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation("七牛云删除文件")</span></span><br><span class="line">   <span class="meta">@PostMapping("/inner/delete")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> R <span class="title">deleteFile</span><span class="params">(<span class="meta">@RequestBody</span> String fileName)</span> </span>{</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           uploadFileService.deleteFile(fileName);</span><br><span class="line">           <span class="keyword">return</span> R.ok().message(<span class="string">"七牛云删除成功"</span>);</span><br><span class="line">       } <span class="keyword">catch</span> (QiniuException e) {</span><br><span class="line">           log.error(ExceptionUtils.getMessage(e));</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BlogException(ResultCodeEnum.FILE_DELETE_ERROR);</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<p>自定义重命名工具类（好辣鸡啊！！！）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNameUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片重命名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateFileName</span><span class="params">(MultipartFile file)</span> </span>{</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取后缀</span></span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">// 返回重命名(雪花算法唯一ID)</span></span><br><span class="line">        <span class="keyword">return</span> IdUtil.createSnowflake(<span class="number">1</span>, <span class="number">1</span>).nextIdStr() + suffix;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><p><code>this</code>：默认指向调用它的那个对象，</p>
<h2 id="ES6的新特性"><a href="#ES6的新特性" class="headerlink" title="ES6的新特性"></a>ES6的新特性</h2><h3 id="解构表达式"><a href="#解构表达式" class="headerlink" title="解构表达式"></a><code>解构表达式</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*结构表达式解构数组*/</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">const</span> [x, y, z] = array;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"><span class="built_in">console</span>.log(z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = {</span><br><span class="line">    name: <span class="string">'马滨'</span>,</span><br><span class="line">    age: <span class="number">23</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">};</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"================================"</span>);</span><br><span class="line"><span class="comment">/*结构表达式解构对象，箭头函数的基本应用*/</span></span><br><span class="line"><span class="keyword">let</span> fun2 = <span class="function">(<span class="params">{name, age, sex}</span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    <span class="built_in">console</span>.log(sex);</span><br><span class="line">};</span><br><span class="line">fun2(person);</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200513090859817.png" alt="image-20200513090859817"></p>
<h3 id="函数的优化"><a href="#函数的优化" class="headerlink" title="函数的优化"></a><code>函数的优化</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fun3 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//在这个函数中应该判断b是否为空，传统的写法是这样的</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">null</span>) {</span><br><span class="line">        b = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//或者这样写(含义是：若b不为空，则b就是true，那么b=b,若b为空，则b就是false，那么b=1)</span></span><br><span class="line">    b = b || <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a / b);</span><br><span class="line">};</span><br><span class="line"><span class="comment">//参数b不传值，就为空，进行测试</span></span><br><span class="line">fun3(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6新语法：直接在参数上面进行优化判断：若b为空，那么b=1,若不为空，那么就不做判断</span></span><br><span class="line"><span class="keyword">let</span> fun3 = <span class="function">(<span class="params">a, b = <span class="number">1</span></span>) =&gt;</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(a / b);</span><br><span class="line">};</span><br><span class="line"><span class="comment">//参数b不传值，就为空，进行测试</span></span><br><span class="line">fun3(<span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a><code>map函数</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*map函数*/</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">//map中传入的是一个函数：把原数组中的各个元素都用此函数处理，然后在返回一个新的数组，和java中stream流中的map函数含义一样</span></span><br><span class="line"><span class="keyword">let</span> anies = arr.map(<span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(anies);</span><br></pre></td></tr></tbody></table></figure>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200513093333214.png" alt="image-20200513093333214"></p>
<h3 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a><code>reduce函数</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*reduce函数：接收一个函数（必须）和一个初始值（可选）</span></span><br><span class="line"><span class="comment">    * 第一个参数：函数可以接收两个参数：</span></span><br><span class="line"><span class="comment">    *   第一个参数是上一次reduce处理的结果</span></span><br><span class="line"><span class="comment">    *   第二个结果是数组中要处理的下一个元素</span></span><br><span class="line"><span class="comment">    * 第二个参数：初始值</span></span><br><span class="line"><span class="comment">    *   如果有初始值，那么函数中的第一个参数刚开始的值就是初始值，之后回复正常</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="comment">//没有初始值(这里就相当于累乘运算)</span></span><br><span class="line">    <span class="keyword">let</span> reduce = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b);</span><br><span class="line">    <span class="built_in">console</span>.log(reduce);</span><br><span class="line">    <span class="comment">//有初始值</span></span><br><span class="line">    <span class="keyword">let</span> number = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(number);</span><br></pre></td></tr></tbody></table></figure>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200513094409522.png" alt="image-20200513094409522"></p>
<h3 id="Object对象的扩展"><a href="#Object对象的扩展" class="headerlink" title="Object对象的扩展"></a><code>Object对象的扩展</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*Object顶级对象的扩展:就相当于java中的map里面的获取键值对的方法*/</span></span><br><span class="line"><span class="comment">//获取对象中所有的key，返回一个数组</span></span><br><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(person);</span><br><span class="line"><span class="built_in">console</span>.log(keys);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象中所有的value，返回一个数组</span></span><br><span class="line"><span class="keyword">let</span> values = <span class="built_in">Object</span>.values(person);</span><br><span class="line"><span class="built_in">console</span>.log(values);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象中所有的key:value，返回一个二维数组</span></span><br><span class="line"><span class="keyword">let</span> entries = <span class="built_in">Object</span>.entries(person);</span><br><span class="line"><span class="built_in">console</span>.log(entries);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newPerson = {</span><br><span class="line">    height: <span class="number">180</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">//将一个对象中的属性copy到另一个新的对象中</span></span><br><span class="line"><span class="keyword">let</span> assign = <span class="built_in">Object</span>.assign(newPerson, person);</span><br><span class="line"><span class="built_in">console</span>.log(assign);</span><br></pre></td></tr></tbody></table></figure>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200513095641368.png" alt="image-20200513095641368"></p>
<p><code>数组的方法扩展</code></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 数组扩展方法</span></span><br><span class="line"><span class="comment">   * find(callback)：传入一个回调函数，用于找出第一个符合条件的数据并返回</span></span><br><span class="line"><span class="comment">   *   具体:所有的数组成员依次执行此回调函数，直到找出第一个返回值为true的成员并返回，如果找不到，则返回undefined</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">a</span> =&gt;</span> a === <span class="number">3</span>));</span><br><span class="line">输出结果是：<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="UI框架：LayUI"><a href="#UI框架：LayUI" class="headerlink" title="UI框架：LayUI"></a>UI框架：LayUI</h2><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a><code>图标</code></h3><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//两种显示图标的方式</span></span><br><span class="line">&lt;%--使用样式引用--%&gt;</span><br><span class="line">&lt;i class="layui-icon layui-icon-face-smile" style="font-size: 30px;color: red;"&gt;&lt;/i&gt;</span><br><span class="line">&lt;%--使用unicode引用--%&gt;</span><br><span class="line">&lt;i class="layui-icon" style="font-size: 30px;color: silver;"&gt;&amp;#xe677;&lt;/i&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a><code>按钮</code></h3><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--只要是容器标签(a,span,buttom,...常用标签都可以)就可以承载定义按钮属性--%&gt;</span><br><span class="line">&lt;button class="layui-btn layui-btn-radius layui-btn-sm layui-btn-normal"&gt;百搭按钮&lt;/button&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://www.horsemuzi.top"</span>&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn layui-btn-warm"</span>&gt;</span><br><span class="line">        &lt;i class="layui-icon layui-icon-app"&gt; 应用&lt;/i&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn layui-btn-danger layui-btn-sm"</span>&gt;</span><br><span class="line">    &lt;i class="layui-icon layui-icon-android"&gt;&lt;/i&gt;安卓</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">按钮绑定事件（Jquery）</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*使用layui中的某个组件必须进行注册，才能使用*/</span></span><br><span class="line">    layui.use([<span class="string">"jquery"</span>], function () {</span><br><span class="line">        <span class="keyword">var</span> $ = layui.jquery;</span><br><span class="line">		...具体绑定操作...</span><br><span class="line">        $(<span class="string">".layui-btn"</span>).click(function () {</span><br><span class="line">            alert($(<span class="keyword">this</span>).html());</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a><code>导航</code></h3><p>使用之前一定要先加载element组件(否则动态效果无法渲染)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">layui.use([<span class="string">"element"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> element = layui.element;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>相关样式</p>
<ul>
<li>方向：<ul>
<li>水平方向（默认）</li>
<li>垂直方向 <code>layui-nav-tree</code>：就只会占有当前容器大小</li>
<li>垂直侧边栏<code>layui-nav-tree和layui-nav-side</code>:会占有当前屏幕的全部高度</li>
</ul>
</li>
<li>其他样式<ul>
<li><code>layui-nav-item</code>:代表导航菜单的一个子项<ul>
<li><code>layui-nav-child</code>:子项目中的子项目（也就是二级菜单）</li>
</ul>
</li>
<li><code>layui-nav-itemed</code>：默认展开当前菜单二级菜单</li>
<li><code>layui-this</code>:代表当前选中的菜单项</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-nav layui-bg-cyan"</span>&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-nav-item layui-this"</span>&gt;</span><br><span class="line">            &lt;a href="javascript:;"&gt;首页&lt;span class="layui-badge"&gt;10&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-nav-item"</span>&gt;</span><br><span class="line">            &lt;a href="javascript:;"&gt;类型&lt;span class="layui-badge-dot"&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-nav-item"</span>&gt;</span><br><span class="line">            &lt;a href=<span class="string">"javascript:;"</span>&gt;&lt;img src=<span class="string">"http://q9pedukg4.bkt.clouddn.com/0e12747b-2582-48b2-8d89-62c87e0ddffc.jpg"</span></span><br><span class="line">                                        <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-nav-img"</span></span><br><span class="line">                                        alt="无法加载"/&gt;我&lt;/a&gt;</span><br><span class="line">            &lt;dl <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-nav-child"</span>&gt;</span><br><span class="line">                &lt;dd&gt;&lt;a href="javascript:;"&gt;编辑资料&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                &lt;dd&gt;&lt;a href="javascript:;"&gt;更换头像&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">                &lt;dd&gt;&lt;a href="javascript:;"&gt;关于博主&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">            &lt;/dl&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a><code>选项卡</code></h3><p>相关样式</p>
<ul>
<li><code>layui-tab</code>:代表一个选项卡<ul>
<li><code>layui-tab-title</code>:代表选项卡的标题<ul>
<li><code>layui-this</code>:启动选中</li>
</ul>
</li>
<li><code>layui-tab-content</code>:代表选项卡标题所对应的内容包装体<ul>
<li><code>layui-tab-item</code>:具体的内容</li>
<li><code>layui-show</code>:启动显示</li>
</ul>
</li>
</ul>
</li>
<li><code>lay-allowClose="true"</code>：是否启动关闭按钮</li>
<li><code>lay-filter='demo'</code>:layui中可以定位找到元素的属性，和选择器差不多</li>
</ul>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-tab  layui-tab-brief"</span> lay-allowClose=<span class="string">"true"</span> lay-filter=<span class="string">"demoTab"</span>&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-tab-title"</span>&gt;</span><br><span class="line">        &lt;li class="layui-this myTab" lay-id="1"&gt;用户管理&lt;/li&gt;</span><br><span class="line">        &lt;li lay-id="2" class="myTab"&gt;权限管理&lt;/li&gt;</span><br><span class="line">        &lt;li lay-id="3" class="myTab"&gt;日志管理&lt;/li&gt;</span><br><span class="line">        &lt;li lay-id="4" class="myTab"&gt;商品管理&lt;/li&gt;</span><br><span class="line">        &lt;li lay-id="5" class="myTab"&gt;品牌管理&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-tab-content"</span>&gt;</span><br><span class="line">        &lt;div class="layui-tab-item layui-show"&gt;内容1&lt;/div&gt;</span><br><span class="line">        &lt;div class="layui-tab-item"&gt;内容2&lt;/div&gt;</span><br><span class="line">        &lt;div class="layui-tab-item"&gt;内容3&lt;/div&gt;</span><br><span class="line">        &lt;div class="layui-tab-item"&gt;内容4&lt;/div&gt;</span><br><span class="line">        &lt;div class="layui-tab-item"&gt;内容5&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn-group"</span>&gt;</span><br><span class="line">    &lt;button class="layui-btn layui-btn-radius layui-btn-sm layui-btn-normal" id="addTab"&gt;增加一个选项卡&lt;/button&gt;</span><br><span class="line">    &lt;button class="layui-btn layui-btn-radius layui-btn-sm layui-btn-normal" id="changeTab"&gt;切换选项卡&lt;/button&gt;</span><br><span class="line">    &lt;button class="layui-btn layui-btn-radius layui-btn-sm layui-btn-normal" id="deleteTab"&gt;删除一个选项卡&lt;/button&gt;</span><br><span class="line">    &lt;button class="layui-btn layui-btn-radius layui-btn-sm layui-btn-normal" id="deleteAll"&gt;删除多个选项卡&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*使用layui中的组件必须进行注册*/</span></span><br><span class="line">    layui.use([<span class="string">"jquery"</span>, <span class="string">"element"</span>], function () {</span><br><span class="line">        let $ = layui.jquery;</span><br><span class="line">        let element = layui.element;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*动态选项卡操作*/</span></span><br><span class="line">        $(<span class="string">"#addTab"</span>).click(function () {</span><br><span class="line">            <span class="comment">//增加选项卡</span></span><br><span class="line">            element.tabAdd(<span class="string">'demoTab'</span>, {</span><br><span class="line">                    title: <span class="string">'归档展示'</span>,</span><br><span class="line">                    content: <span class="string">'&lt;h1&gt;归档内容&lt;/h1&gt;'</span></span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#changeTab"</span>).click(function () {</span><br><span class="line">            切换选项卡</span><br><span class="line">            element.tabChange(<span class="string">'demoTab'</span>, <span class="string">"3"</span>);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        $(<span class="string">"#deleteTab"</span>).click(function () {</span><br><span class="line">            <span class="comment">//删除选项卡</span></span><br><span class="line">            element.tabDelete(<span class="string">'demoTab'</span>, <span class="string">"4"</span>);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除所有选项卡</span></span><br><span class="line">        $(<span class="string">"#deleteAll"</span>).click(function () {</span><br><span class="line">            <span class="comment">//获取所有的li标签</span></span><br><span class="line">            let lis = $(<span class="string">".myTab"</span>);</span><br><span class="line">            <span class="comment">//index:集合索引，value:每个li对象</span></span><br><span class="line">            $.each(lis, function (index, value) {</span><br><span class="line">                <span class="comment">//获取每个li对象的lay-id</span></span><br><span class="line">                let layId = value.getAttribute(<span class="string">"lay-id"</span>);</span><br><span class="line">                element.tabDelete(<span class="string">'demoTab'</span>, layId);</span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a><code>进度条</code></h3><p>相关样式：</p>
<ul>
<li><code>layui-progress</code>:代表进度条<ul>
<li><code>layui-progress-bar</code>：代表进度条里面的div</li>
<li><code>lay-percent="30%"</code>:代表进度条进度</li>
</ul>
</li>
<li><code>layui-progress-big</code>:代表大尺寸进度条（文本数字在进度条里面显示）</li>
<li><code>lay-showPercent="yes"</code>：是否开启文本数字等显示</li>
</ul>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-progress layui-progress-big"</span> lay-showPercent=<span class="string">"yes"</span>&gt;</span><br><span class="line">    &lt;div class="layui-progress-bar layui-bg-blue" lay-percent="30%" &gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200507151923493.png" alt="image-20200507151923493"></p>
<h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a><code>面板</code></h3><p>卡片面板很简单，下面是手风琴面板（展开一个面板，就关闭上一个面板）</p>
<p>相关样式：</p>
<ul>
<li><code>layui-collapse</code>:代表一个面板<ul>
<li><code>layui-colla-item</code>：代表一个面板项<ul>
<li><code>layui-colla-title</code>：一个面板项标题</li>
<li><code>layui-colla-content</code>：一个面板项内容</li>
</ul>
</li>
</ul>
</li>
<li><code>lay-accordion</code>：开启手风琴模式</li>
</ul>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--手风琴面板--%&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-collapse"</span> lay-accordion lay-filter=<span class="string">"test"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-colla-item"</span>&gt;</span><br><span class="line">        &lt;h2 class="layui-colla-title"&gt;面板标题1&lt;/h2&gt;</span><br><span class="line">        &lt;div class="layui-colla-content"&gt;面板内容1&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-colla-item"</span>&gt;</span><br><span class="line">        &lt;h2 class="layui-colla-title"&gt;面板标题2&lt;/h2&gt;</span><br><span class="line">        &lt;div class="layui-colla-content layui-show"&gt;面板内容2&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-colla-item"</span>&gt;</span><br><span class="line">        &lt;h2 class="layui-colla-title"&gt;面板标题3&lt;/h2&gt;</span><br><span class="line">        &lt;div class="layui-colla-content"&gt;面板内容3&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态获取面板信息:当折叠面板点击展开或收缩时触发，回调函数返回一个object参数，携带三个成员</span></span><br><span class="line">        element.on(<span class="string">'collapse(test)'</span>,function (data) {</span><br><span class="line">            console.log(data.show); <span class="comment">//得到当前面板的展开状态，true或者false</span></span><br><span class="line">            console.log(data.title.html()); <span class="comment">//获取当前标题区域中的html标签中的内容</span></span><br><span class="line">            console.log(data.content.html());<span class="comment">//获取当前内容区域中的html标签中的内容</span></span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure>
<h3 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a><code>时间线</code></h3><p>相关样式：</p>
<ul>
<li><code>layui-timeline</code>:代表一个时间线<ul>
<li><code>layui-timeline-item</code>：代表时间线中的一项<ul>
<li><code>layui-timeline-axis</code>：代表这是时间线中的一个轴点和竖线（可以使用图标，好看）</li>
<li><code>layui-timeline-content</code>：项中的内容<ul>
<li><code>layui-timeline-title</code>:内容中标题（简单的内容标题）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;fieldset <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-elem-field layui-field-title"</span> style=<span class="string">"margin-top: 30px;"</span>&gt;</span><br><span class="line">    &lt;legend&gt;博客归档&lt;/legend&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline"</span>&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-item"</span>&gt;</span><br><span class="line">        &lt;i class="layui-icon layui-icon-fire layui-timeline-axis"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-content layui-text"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-title"</span>&gt;</span><br><span class="line">                钢铁是怎样炼成的</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-item"</span>&gt;</span><br><span class="line">        &lt;i class="layui-icon layui-icon-face-smile layui-timeline-axis"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-content layui-text"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-title"</span>&gt;</span><br><span class="line">                钢铁是怎样炼成的</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-item"</span>&gt;</span><br><span class="line">        &lt;i class="layui-icon layui-icon-face-smile layui-timeline-axis"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-content layui-text"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-title"</span>&gt;</span><br><span class="line">                钢铁是怎样炼成的</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-item"</span>&gt;</span><br><span class="line">        &lt;i class="layui-icon layui-icon-loading-1 layui-anim layui-anim-rotate layui-anim-loop layui-timeline-axis"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-content layui-text"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-timeline-title"</span>&gt;</span><br><span class="line">                钢铁是怎样炼成的</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="动画-不重要"><a href="#动画-不重要" class="headerlink" title="动画(不重要)"></a><code>动画(不重要)</code></h3><ul>
<li><code>layui-anim</code>：代表动画<ul>
<li><code>layui-anim-rotate</code>：旋转一圈</li>
<li><code>layui-anim-loop</code>:循环旋转</li>
<li>…还有好几个，具体文档查看</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">&lt;i class="layui-icon layui-icon-loading-1 layui-anim layui-anim-rotate layui-anim-loop"&gt;&lt;/i&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a><code>滑块</code></h3><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div id="sliderDiv"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> 		<span class="comment">/*滑块的基本样式属性*/</span></span><br><span class="line">        slider.render({</span><br><span class="line">            elem: <span class="string">"#sliderDiv"</span>,</span><br><span class="line">            value: <span class="number">6</span>, <span class="comment">//初始值</span></span><br><span class="line">            min: <span class="number">0</span>,    <span class="comment">//最小值</span></span><br><span class="line">            max: <span class="number">50</span>,   <span class="comment">//最大值</span></span><br><span class="line">            step: <span class="number">3</span>,  <span class="comment">//设置步长</span></span><br><span class="line">            showstep: <span class="keyword">true</span>, <span class="comment">//开启以步长为基础的间隔点</span></span><br><span class="line">            setTips: function (data) {   <span class="comment">//自定义提示信息</span></span><br><span class="line">                <span class="keyword">return</span> data + <span class="string">'%'</span>;</span><br><span class="line">            },</span><br><span class="line">            theme: <span class="string">'#1c97f5'</span>,  <span class="comment">//自定义颜色</span></span><br><span class="line">            input: <span class="keyword">true</span>,  <span class="comment">//开启input输入框</span></span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure>
<h3 id="时间和日期选择器"><a href="#时间和日期选择器" class="headerlink" title="时间和日期选择器"></a><code>时间和日期选择器</code></h3><p>一般来说：默认的就够使用了</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-inline"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"dateTime"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input"</span> placeholder=<span class="string">"yyyy-MM-dd"</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*日期和时间选择器*/</span></span><br><span class="line">        laydate.render({</span><br><span class="line">            elem: <span class="string">'#dateTime'</span>, <span class="comment">//绑定元素</span></span><br><span class="line">            type: <span class="string">'datetime'</span>,  <span class="comment">//日期的类型...</span></span><br><span class="line">            range: <span class="keyword">true</span>,   <span class="comment">//开启左右面板范围选择</span></span><br><span class="line">            format: <span class="string">'yyyy-MM-dd'</span>,  <span class="comment">//显示格式化类型</span></span><br><span class="line">            value: <span class="keyword">new</span> Date(),  <span class="comment">//设置自动填充初始值：当前时间或其他</span></span><br><span class="line">            min: <span class="string">'2020-05-06'</span>,  <span class="comment">//范围最小值</span></span><br><span class="line">            max: <span class="string">'2020-05-30'</span>,  <span class="comment">//范围最大值</span></span><br><span class="line">            lang: <span class="string">'cn'</span>,    <span class="comment">//设置语言</span></span><br><span class="line">            calendar: <span class="keyword">true</span>, <span class="comment">//是否强调默认节假日</span></span><br><span class="line">            <span class="comment">//....还有好多</span></span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure>
<h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a><code>表单元素</code></h3><ul>
<li><code>layui-form</code>:代表一个form表单<ul>
<li><code>layui-form-item</code>：代表表单中的一项</li>
</ul>
</li>
</ul>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form"</span> action=<span class="string">"#"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-item"</span>&gt;</span><br><span class="line">        &lt;label class="layui-form-label"&gt;用户名&lt;/label&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-inline"</span>&gt;</span><br><span class="line">            <span class="comment">//required：注册浏览器所规定的必填字段</span></span><br><span class="line">			<span class="comment">//lay-verify：注册form模块需要验证的类型</span></span><br><span class="line">            &lt;input type=<span class="string">"text"</span> name=<span class="string">"title"</span> required lay-verify=<span class="string">"required"</span> placeholder=<span class="string">"请输入标题"</span> autocomplete=<span class="string">"off"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-item"</span>&gt;</span><br><span class="line">        &lt;label class="layui-form-label"&gt;选择框&lt;/label&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-inline"</span>&gt;</span><br><span class="line">            <span class="comment">//lay-search 来开启搜索匹配功能</span></span><br><span class="line">            &lt;select name=<span class="string">"city"</span> lay-verify=<span class="string">"required"</span> lay-search&gt;</span><br><span class="line">                &lt;option value=""&gt;&lt;/option&gt;</span><br><span class="line">                &lt;option value="0"&gt;北京&lt;/option&gt;</span><br><span class="line">                &lt;option value="1"&gt;上海&lt;/option&gt;</span><br><span class="line">                &lt;option value="2"&gt;广州&lt;/option&gt;</span><br><span class="line">                &lt;option value="3"&gt;深圳&lt;/option&gt;</span><br><span class="line">                &lt;option value="4"&gt;杭州&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-item"</span>&gt;</span><br><span class="line">        <span class="comment">//设置value="1"可自定义值，否则选中时返回的就是默认的on</span></span><br><span class="line">        &lt;label class="layui-form-label"&gt;复选框&lt;/label&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-block"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like[write]"</span> title=<span class="string">"写作"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like[read]"</span> title=<span class="string">"阅读"</span> checked&gt;</span><br><span class="line">            &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"like[dai]"</span> title=<span class="string">"发呆"</span> disabled&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-item"</span>&gt;</span><br><span class="line">        &lt;label class="layui-form-label"&gt;开关&lt;/label&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-block"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"1"</span> name=<span class="string">"switch"</span> lay-skin=<span class="string">"switch"</span> lay-text=<span class="string">"ON|OFF"</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">	<span class="comment">//富文本编辑器</span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-form-item layui-form-text"</span>&gt;</span><br><span class="line">        &lt;label class="layui-form-label"&gt;编辑器&lt;/label&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-input-block"</span>&gt;</span><br><span class="line">            &lt;textarea class="layui-textarea layui-hide" name="content" lay-verify="content" id="LAY_demo_editor"&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src="resources/layui/layui.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    layui.use([<span class="string">'form'</span>,<span class="string">'element'</span>,<span class="string">'jquery'</span>,<span class="string">'layedit'</span>], function () {</span><br><span class="line">        let form = layui.form;</span><br><span class="line">        let element = layui.element;</span><br><span class="line">        let jquery = layui.jquery;</span><br><span class="line">        let layedit = layui.layedit;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化一个富文本编辑器（这样富文本编辑器才能简单使用，但是图片上传仍需要额外配置）</span></span><br><span class="line">        let editIndex = layedit.build(<span class="string">'LAY_demo_editor'</span>);</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure>
<h3 id="表单对象操作"><a href="#表单对象操作" class="headerlink" title="表单对象操作"></a><code>表单对象操作</code></h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*监听表单提交*/</span></span><br><span class="line">      form.on(<span class="string">'submit(demo1)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span><br><span class="line">          <span class="built_in">console</span>.log(data.elem) <span class="comment">//被执行事件的元素DOM对象，一般为button对象</span></span><br><span class="line">          <span class="built_in">console</span>.log(data.form) <span class="comment">//被执行提交的form对象，一般在存在form标签时才会返回</span></span><br><span class="line">          <span class="built_in">console</span>.log(data.field) <span class="comment">//当前容器的全部表单字段，名值对形式：{name: value}</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//也可以使用ajax提交</span></span><br><span class="line">          <span class="comment">// $.post({})</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//取消表单默认提交行为。</span></span><br><span class="line">      });</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="layer弹出层（重点）"><a href="#layer弹出层（重点）" class="headerlink" title="layer弹出层（重点）"></a><code>layer弹出层（重点）</code></h3><h4 id="layer-alert-弹出层"><a href="#layer-alert-弹出层" class="headerlink" title="layer.alert():弹出层"></a><code>layer.alert()</code>:弹出层</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*layer.alert()*/</span></span><br><span class="line">      $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">          <span class="comment">//各种图标的含义</span></span><br><span class="line">          layer.alert(<span class="string">"修改成功"</span>, {<span class="attr">icon</span>: <span class="number">1</span>});</span><br><span class="line">          layer.alert(<span class="string">"修改失败"</span>,{<span class="attr">icon</span>:<span class="number">2</span>});</span><br><span class="line">          layer.alert(<span class="string">"确定删除"</span>,{<span class="attr">icon</span>:<span class="number">3</span>});</span><br><span class="line">          layer.alert(<span class="string">"锁定成功"</span>,{<span class="attr">icon</span>:<span class="number">4</span>});</span><br><span class="line">          layer.alert(<span class="string">"哭脸"</span>,{<span class="attr">icon</span>:<span class="number">5</span>});</span><br><span class="line">          layer.alert(<span class="string">"笑脸"</span>,{<span class="attr">icon</span>:<span class="number">6</span>});</span><br><span class="line">          layer.alert(<span class="string">"感叹号"</span>,{<span class="attr">icon</span>:<span class="number">7</span>});</span><br><span class="line"></span><br><span class="line">          <span class="comment">//也可以有回调函数index:是这个弹出层的索引</span></span><br><span class="line">          layer.alert(<span class="string">"跳转成功"</span>, {<span class="attr">icon</span>: <span class="number">1</span>}, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>{</span><br><span class="line">              alert(<span class="string">"OK"</span>);</span><br><span class="line">              layer.close(index);</span><br><span class="line">          })</span><br><span class="line">      })</span><br></pre></td></tr></tbody></table></figure>
<h4 id="layer-confirm-：询问层"><a href="#layer-confirm-：询问层" class="headerlink" title="layer.confirm()：询问层"></a><code>layer.confirm()</code>：询问层</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*layer.confirm():常用于删除询问操作*/</span></span><br><span class="line">     $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">         layer.confirm(<span class="string">"确定删除？"</span>, {<span class="attr">icon</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">"提示"</span>}, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>{</span><br><span class="line">             layer.alert(<span class="string">"删除成功"</span>, {<span class="attr">icon</span>: <span class="number">1</span>});</span><br><span class="line">             layer.close(index);</span><br><span class="line">         })</span><br><span class="line">     })</span><br></pre></td></tr></tbody></table></figure>
<h4 id="layer-prompt-输入层"><a href="#layer-prompt-输入层" class="headerlink" title="layer.prompt():输入层"></a><code>layer.prompt()</code>:输入层</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//formType: 1, //输入框类型，支持0（文本）默认1（密码）2（多行文本）</span></span><br><span class="line"><span class="comment">//value: '', //初始时的值，默认空字符</span></span><br><span class="line"><span class="comment">//maxlength: 140, //可输入文本的最大长度，默认500</span></span><br><span class="line"></span><br><span class="line">      $(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">          layer.prompt({</span><br><span class="line">              formType: <span class="number">2</span>,</span><br><span class="line">              value: <span class="string">'文本初始值'</span>,</span><br><span class="line">              title: <span class="string">'请输入信息...'</span>,</span><br><span class="line">              area: [<span class="string">'800px'</span>, <span class="string">'350px'</span>] <span class="comment">//自定义文本域宽高</span></span><br><span class="line">          },<span class="function"><span class="keyword">function</span> (<span class="params">value, index, elem</span>) </span>{</span><br><span class="line">              alert(value);</span><br><span class="line">              layer.close(index);</span><br><span class="line">          })</span><br><span class="line">      })</span><br></pre></td></tr></tbody></table></figure>
<h4 id="layer-msg-消息提示"><a href="#layer-msg-消息提示" class="headerlink" title="layer.msg():消息提示"></a><code>layer.msg()</code>:消息提示</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">//默认3秒自动关闭</span></span><br><span class="line">    layer.msg(<span class="string">"Hello"</span>, {<span class="attr">icon</span>: <span class="number">6</span>}, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        layer.alert(<span class="string">"yes"</span>);</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<h4 id="layer-tips-吸附层"><a href="#layer-tips-吸附层" class="headerlink" title="layer.tips():吸附层"></a><code>layer.tips()</code>:吸附层</h4><p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200507213634619.png" alt="效果"></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">//必须指定在那个按钮吸附</span></span><br><span class="line">    layer.tips(<span class="string">'提示'</span>, <span class="string">"#btn6"</span>, {</span><br><span class="line">        <span class="comment">//1:上；2:右；3:下；4:左</span></span><br><span class="line">        tips: <span class="number">2</span></span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
<h4 id="layer-open：原生弹出层"><a href="#layer-open：原生弹出层" class="headerlink" title="layer.open：原生弹出层"></a><code>layer.open</code>：原生弹出层</h4><h5 id="type-0情况"><a href="#type-0情况" class="headerlink" title="type=0情况"></a>type=0情况</h5><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*原生弹出方式：通过配置参数实现效果，其他的弹出层也都是基于此封装的*/</span></span><br><span class="line">       $(<span class="string">"#button1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">           <span class="keyword">let</span> openIndex = layer.open({</span><br><span class="line">               type: <span class="number">0</span>,   <span class="comment">//设置弹出类型：默认为0，1：页面层，2：iframe层</span></span><br><span class="line">               title: <span class="string">'提示'</span>, <span class="comment">//标题</span></span><br><span class="line">               content: <span class="string">'跳转成功'</span>, <span class="comment">//内容</span></span><br><span class="line">               skin: <span class="string">'layui-layer-lan'</span>, <span class="comment">//皮肤（默认最好看）</span></span><br><span class="line">               area: [<span class="string">'300px'</span>, <span class="string">'200px'</span>], <span class="comment">//宽高</span></span><br><span class="line">               offset: <span class="string">'auto'</span>, <span class="comment">//弹出位置，默认居中</span></span><br><span class="line">               icon: <span class="number">1</span>, <span class="comment">//只对type=0有效</span></span><br><span class="line">               btn: [<span class="string">'添加'</span>, <span class="string">'修改'</span>],  <span class="comment">//可以添加无限多个按钮</span></span><br><span class="line">               yes: <span class="function"><span class="keyword">function</span> (<span class="params">index, layero</span>) </span>{  <span class="comment">//按钮1的回调是yes，而从按钮2开始，则回调为btn2: function(){}，以此类推</span></span><br><span class="line">                   alert(layero + <span class="string">"按钮1回调"</span>);</span><br><span class="line">                   layer.close(index)</span><br><span class="line">               },</span><br><span class="line">               btn2: <span class="function"><span class="keyword">function</span> (<span class="params">index, layero</span>) </span>{</span><br><span class="line">                   alert(layero + <span class="string">"按钮2回调"</span>);</span><br><span class="line">                   layer.close(index);</span><br><span class="line">               },</span><br><span class="line">               cancel: <span class="function"><span class="keyword">function</span> (<span class="params">index, layero</span>) </span>{</span><br><span class="line">                   alert(index + <span class="string">"关闭时回调"</span>);</span><br><span class="line">               },</span><br><span class="line">               closeBtn: <span class="number">2</span>,  <span class="comment">//右上角关闭按钮的样式，默认是1</span></span><br><span class="line">               time: <span class="number">10000</span>,  <span class="comment">//设置多少毫秒关闭</span></span><br><span class="line">               anim: <span class="number">1</span>,  <span class="comment">//弹窗的出场动画，共0-6种，默认方式0</span></span><br><span class="line"></span><br><span class="line">               maxmin: <span class="literal">true</span>,  <span class="comment">//是否设置右上角最大化，最小化按钮，只对类型1，2有效</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//回调函数</span></span><br><span class="line">               success: <span class="function"><span class="keyword">function</span> (<span class="params">layero, index</span>) </span>{</span><br><span class="line">                   <span class="built_in">console</span>.log(index + <span class="string">"弹出后回调"</span>);</span><br><span class="line">               },</span><br><span class="line">           });</span><br><span class="line">           <span class="built_in">console</span>.log(openIndex);</span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure>
<h5 id="type-1情况"><a href="#type-1情况" class="headerlink" title="type=1情况"></a>type=1情况</h5><blockquote>
<p>区别：content: $(“#myDiv”), //内容可以是页面中的一段html代码，</p>
<div id="myDiv”>填充的内容…</div>

</blockquote>
<figure class=" highlight="" js"=""><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*原生弹出方式：通过配置参数实现效果，其他的弹出层也都是基于此封装的*/</span></span><br><span class="line">        $(<span class="string">"#button1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">let</span> openIndex = layer.open({</span><br><span class="line">                type: <span class="number">1</span>,   <span class="comment">//设置弹出类型：默认为0，1：页面层，2：iframe层</span></span><br><span class="line">                title: <span class="string">'提示'</span>, <span class="comment">//标题</span></span><br><span class="line">                content: $(<span class="string">"#myDiv"</span>), <span class="comment">//内容可以是部分页面</span></span><br><span class="line">                closeBtn: <span class="number">2</span>,  <span class="comment">//右上角关闭按钮的样式，默认是1</span></span><br><span class="line">                time: <span class="number">10000</span>,  <span class="comment">//设置多少毫秒关闭</span></span><br><span class="line">                anim: <span class="number">1</span>,  <span class="comment">//弹窗的出场动画，共0-6种，默认方式0</span></span><br><span class="line">                maxmin: <span class="literal">true</span>,  <span class="comment">//是否设置右上角最大化，最小化按钮，只对类型1，2有效                </span></span><br><span class="line">            });</span><br><span class="line">        })</span><br><span class="line"></span><br></pre></td></tr></tbody></table>
<h5 id="type-2情况（常用）"><a href="#type-2情况（常用）" class="headerlink" title="type=2情况（常用）"></a>type=2情况（常用）</h5><blockquote>
<p>content: ‘<a href="http://localhost:8080/simple.jsp">http://localhost:8080/simple.jsp</a>‘, //内容代表url</p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*原生弹出方式：通过配置参数实现效果，其他的弹出层也都是基于此封装的*/</span></span><br><span class="line">        $(<span class="string">"#button1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">let</span> openIndex = layer.open({</span><br><span class="line">                type: <span class="number">2</span>,   <span class="comment">//设置弹出类型：默认为0，1：页面层，2：iframe层</span></span><br><span class="line">                title: <span class="string">'提示'</span>, <span class="comment">//标题</span></span><br><span class="line">                content: <span class="string">'http://localhost:8080/simple.jsp'</span>, <span class="comment">//内容代表url</span></span><br><span class="line">                skin: <span class="string">'layui-layer-lan'</span>, <span class="comment">//皮肤（默认最好看）</span></span><br><span class="line">                area: [<span class="string">'300px'</span>, <span class="string">'200px'</span>], <span class="comment">//宽高</span></span><br><span class="line">                offset: <span class="string">'auto'</span>, <span class="comment">//弹出位置，默认居中</span></span><br><span class="line">                closeBtn: <span class="number">2</span>,  <span class="comment">//右上角关闭按钮的样式，默认是1</span></span><br><span class="line">                time: <span class="number">10000</span>,  <span class="comment">//设置多少毫秒关闭</span></span><br><span class="line">                anim: <span class="number">1</span>,  <span class="comment">//弹窗的出场动画，共0-6种，默认方式0</span></span><br><span class="line">                maxmin: <span class="literal">true</span>,  <span class="comment">//是否设置右上角最大化，最小化按钮，只对类型1，2有效   </span></span><br><span class="line">            });</span><br><span class="line">        })</span><br></pre></td></tr></tbody></table></figure>
<h3 id="数据表格"><a href="#数据表格" class="headerlink" title="数据表格"></a><code>数据表格</code></h3><h4 id="table基本搭建"><a href="#table基本搭建" class="headerlink" title="table基本搭建"></a>table基本搭建</h4><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//被应用的上方工具栏按钮</span></span><br><span class="line">&lt;div style=<span class="string">"display: none"</span> id=<span class="string">"btnTools"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-btn-group"</span>&gt;</span><br><span class="line">        &lt;button class="layui-btn layui-btn-sm layui-btn-normal"&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;button class="layui-btn layui-btn-sm layui-btn-warm"&gt;编辑&lt;/button&gt;</span><br><span class="line">        &lt;button class="layui-btn layui-btn-sm layui-btn-danger"&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被引用的右侧工具栏按钮</span></span><br><span class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"barDemo"</span>&gt;</span><br><span class="line">    &lt;a class="layui-btn layui-btn-xs" lay-event="edit"&gt;编辑&lt;/a&gt;</span><br><span class="line">    &lt;a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"layui-hide"</span> id=<span class="string">"tableId"</span> lay-filter=<span class="string">"tableFilter"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    layui.use([<span class="string">'form'</span>, <span class="string">'element'</span>, <span class="string">'jquery'</span>, <span class="string">'layedit'</span>, <span class="string">'layer'</span>, <span class="string">'table'</span>], function () {</span><br><span class="line">        let form = layui.form;</span><br><span class="line">        let element = layui.element;</span><br><span class="line">        let $ = layui.jquery;</span><br><span class="line">        let layedit = layui.layedit;</span><br><span class="line">        let layer = layui.layer;</span><br><span class="line">        let table = layui.table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*表格渲染的基本参数及含义*/</span></span><br><span class="line">        table.render({</span><br><span class="line">            elem: <span class="string">'#tableId'</span>  <span class="comment">//渲染的目标对象</span></span><br><span class="line">            , url: <span class="string">'resources/json/user.json'</span>  <span class="comment">//数据接口看，用于获取数据</span></span><br><span class="line">            , title: <span class="string">'用户数据表'</span>  <span class="comment">//数据导出时的标题（一般不使用）</span></span><br><span class="line">            , page: <span class="keyword">true</span>  <span class="comment">//是否开启分页</span></span><br><span class="line">            , toolbar: <span class="string">'#btnTools'</span> <span class="comment">//可以指定自定义工具条</span></span><br><span class="line">            , defaultToolbar: [<span class="string">'filter'</span>, <span class="string">'print'</span>]  <span class="comment">//自由配置头部工具栏右侧的图标按钮</span></span><br><span class="line">            , cellMinWidth: <span class="number">90</span>   <span class="comment">//设置列的最小默认宽度（一般默认即可）</span></span><br><span class="line">            , done: function (res, curr, count) {   <span class="comment">//表格数据渲染完毕的回调函数</span></span><br><span class="line">                console.log(res); <span class="comment">//后台url返回的json数据</span></span><br><span class="line">                console.log(curr); <span class="comment">//当前页是第几页b</span></span><br><span class="line">                console.log(count); <span class="comment">//数据总条数</span></span><br><span class="line">            }</span><br><span class="line">            , totalRow: <span class="keyword">true</span>  <span class="comment">//开启合并行</span></span><br><span class="line">            , limit: <span class="number">20</span>  <span class="comment">//设置每页显示的条数，默认为10</span></span><br><span class="line">            , limits: [<span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">100</span>] <span class="comment">//</span></span><br><span class="line">            , cols: [[     <span class="comment">//具体列数据</span></span><br><span class="line">                {type: <span class="string">'checkbox'</span>, fixed: <span class="string">'left'</span>}  <span class="comment">//显示左侧复选框（多用于批量参数的Id确定）</span></span><br><span class="line">                , {field: <span class="string">'id'</span>, title: <span class="string">'ID'</span>, width: <span class="number">80</span>, unresize: <span class="keyword">true</span>}</span><br><span class="line">                , {field: <span class="string">'username'</span>, title: <span class="string">'用户名'</span>, width: <span class="number">120</span>,}</span><br><span class="line">                , {</span><br><span class="line">                    field: <span class="string">'email'</span>, title: <span class="string">'邮箱'</span>, width: <span class="number">150</span>, templet: function (res) {</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'&lt;em&gt;'</span> + res.email + <span class="string">'&lt;/em&gt;'</span></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                , {</span><br><span class="line">                    field: <span class="string">'sex'</span>, title: <span class="string">'性别'</span>, width: <span class="number">80</span>, align: <span class="string">'center'</span>, templet: function (row) {</span><br><span class="line">                        <span class="keyword">return</span> row.sex == <span class="string">'1'</span> ? <span class="string">'男'</span> : <span class="string">'女'</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                , {field: <span class="string">'city'</span>, title: <span class="string">'城市'</span>, width: <span class="number">100</span>}</span><br><span class="line">                , {field: <span class="string">'sign'</span>, title: <span class="string">'签名'</span>}</span><br><span class="line">                , {field: <span class="string">'experience'</span>, title: <span class="string">'积分'</span>, width: <span class="number">80</span>, totalRow: <span class="keyword">true</span>, align: <span class="string">'center'</span>}</span><br><span class="line">                , {field: <span class="string">'ip'</span>, title: <span class="string">'IP'</span>, width: <span class="number">120</span>}</span><br><span class="line">                , {field: <span class="string">'logins'</span>, title: <span class="string">'登入次数'</span>, width: <span class="number">100</span>, totalRow: <span class="keyword">true</span>}</span><br><span class="line">                , {field: <span class="string">'joinTime'</span>, title: <span class="string">'加入时间'</span>, width: <span class="number">120</span>}</span><br><span class="line">                , {field: <span class="string">"right"</span>, title: <span class="string">'操作'</span>, toolbar: <span class="string">"#barDemo"</span>, width: <span class="number">150</span>, align: <span class="string">'center'</span>}</span><br><span class="line">            ]]</span><br><span class="line">        });</span><br><span class="line">    });</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="table事件监听"><a href="#table事件监听" class="headerlink" title="table事件监听"></a>table事件监听</h4><p>监听头部工具栏（<code>toolbar</code>）</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200508105237057.png" alt="image-20200508105237057"></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//监听头工具栏事件</span></span><br><span class="line">      table.on(<span class="string">'toolbar(tableFilter)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>{</span><br><span class="line">          <span class="keyword">switch</span> (obj.event) {</span><br><span class="line">              <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">                  layer.msg(<span class="string">'添加'</span>, {<span class="attr">icon</span>: <span class="number">1</span>});</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">'batchDelete'</span>:</span><br><span class="line">                  layer.msg(<span class="string">'批量删除'</span>, {<span class="attr">icon</span>: <span class="number">5</span>});</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">          }</span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure>
<p>监听复选框事件（<code>checkbox</code>）:主要用于批量删除</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//监听复选框事件</span></span><br><span class="line">      table.on(<span class="string">'checkbox(tableFilter)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>{</span><br><span class="line">          <span class="built_in">console</span>.log(obj.checked); <span class="comment">//当前是否选中状态</span></span><br><span class="line">          <span class="built_in">console</span>.log(obj.data); <span class="comment">//选中行的相关数据</span></span><br><span class="line">          <span class="built_in">console</span>.log(obj.type); <span class="comment">//如果触发的是全选，则为：all，如果触发的是单选，则为：one</span></span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure>
<p>监听行工具事件（<code>tool</code>）</p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200508111024139.png" alt="image-20200508111024139"></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//监听行工具事件</span></span><br><span class="line">     table.on(<span class="string">'tool(tableFilter)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>{</span><br><span class="line">         <span class="keyword">let</span> data = obj.data; <span class="comment">//获得当前行数据</span></span><br><span class="line">         <span class="keyword">let</span> layEvent = obj.event; <span class="comment">//获得 lay-event 对应的值</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (layEvent === <span class="string">'edit'</span>) {</span><br><span class="line">             layer.alert(<span class="string">"跳转成功"</span>, {<span class="attr">icon</span>: <span class="number">1</span>}, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>{</span><br><span class="line">                 layer.close(index);</span><br><span class="line">                 <span class="comment">//跳转编辑页面</span></span><br><span class="line">             })</span><br><span class="line">         }</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (layEvent === <span class="string">'del'</span>) {</span><br><span class="line">             layer.confirm(<span class="string">"确定删除？"</span>, {<span class="attr">icon</span>: <span class="number">3</span>}, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>{</span><br><span class="line">                 layer.close(index);</span><br><span class="line">                 <span class="comment">//向服务器发送相关请求和数据</span></span><br><span class="line">             })</span><br><span class="line">         }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><code>文件上传</code></h3><p>主要是利用upload模块，官网自行查看。。。</p>
<h3 id="第三方扩展插件dtree"><a href="#第三方扩展插件dtree" class="headerlink" title="第三方扩展插件dtree"></a>第三方扩展插件<code>dtree</code></h3><h4 id="基本使用-因为是第三方插件，所以要引入人家的样式资源"><a href="#基本使用-因为是第三方插件，所以要引入人家的样式资源" class="headerlink" title="基本使用:因为是第三方插件，所以要引入人家的样式资源"></a>基本使用:因为是第三方插件，所以要引入人家的样式资源</h4><p>具体监听方法和其他获取值的方法去文档查看</p>
<blockquote>
<p><a href="http://www.wisdomelon.com/DTreeHelper/">http://www.wisdomelon.com/DTreeHelper/</a></p>
</blockquote>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"> &lt;!--dtree树形组件--&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"resources/layui_ext/dtree/dtree.css"</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"resources/layui_ext/dtree/font/dtreefont.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--树形组件--&gt;</span><br><span class="line">&lt;ul id=<span class="string">"demoTree"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dtree"</span> data-id=<span class="string">"0"</span>&gt;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"resources/layui/layui.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    layui.extend({</span><br><span class="line">        dtree: <span class="string">'resources/layui_ext/dist/dtree'</span>  <span class="comment">//引入dtree.js并进行引用（不需要带后缀）</span></span><br><span class="line">    }).use([<span class="string">'form'</span>, <span class="string">'element'</span>, <span class="string">'jquery'</span>, <span class="string">'layer'</span>, <span class="string">'dtree'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">let</span> form = layui.form;</span><br><span class="line">        <span class="keyword">let</span> element = layui.element;</span><br><span class="line">        <span class="keyword">let</span> $ = layui.jquery;</span><br><span class="line">        <span class="keyword">let</span> layer = layui.layer;</span><br><span class="line">        <span class="keyword">let</span> dtree = layui.dtree;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> DemoTree = dtree.render({</span><br><span class="line">            elem: <span class="string">"#demoTree"</span>,</span><br><span class="line">            url: <span class="string">"resources/json/asyncTree1.json"</span> <span class="comment">// 使用url加载json数据，一般是从服务器获取（可与data加载同时存在）</span></span><br><span class="line">        });</span><br><span class="line">    });</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><h3 id="Docker基本操作命令"><a href="#Docker基本操作命令" class="headerlink" title="Docker基本操作命令"></a>Docker基本操作命令</h3><h4 id="cmder远程连接"><a href="#cmder远程连接" class="headerlink" title="cmder远程连接"></a>cmder远程连接</h4><blockquote>
<p>cmder远程连接服务器：ssh &lt;username&gt;@<ip地址>，然后按要求输入密码即可</ip地址></p>
<p>例如：<code>ssh root@192.168.149.131</code></p>
</blockquote>
<h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker version  #显示docker的版本信息</span><br><span class="line">docker info     #显示docker的详细信息</span><br><span class="line">docker --help #查询docker所有命令</span><br></pre></td></tr></tbody></table></figure>
<h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><p><code>docker images</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin ~]# docker images  #列出所有镜像</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/redis      latest              44d36d2c2374        3 months ago        98.2 MB</span><br><span class="line">docker.io/rabbitmq   3-management        6a98e7057e36        3 months ago        181 MB</span><br><span class="line">docker.io/mysql      5.7                 db39680b63ac        4 months ago        437 MB</span><br><span class="line">[root@centos7-mabin ~]# docker images -aq  #组合参数：列出所有镜像的ID</span><br><span class="line">44d36d2c2374</span><br><span class="line">6a98e7057e36</span><br><span class="line">db39680b63ac</span><br></pre></td></tr></tbody></table></figure>
<p><code>docker search</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin ~]# docker search mysql    #搜索指定镜像</span><br><span class="line">INDEX       NAME                                        DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/mysql                             MySQL is a widely used, open-source relati...   9504      [OK]       </span><br><span class="line">docker.io   docker.io/mariadb                           MariaDB is a community-developed fork of M...   3446      [OK]       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7-mabin ~]# docker search mysql --filter=STARS=5000  #过滤收藏数大于5000的mysql镜像</span><br><span class="line">INDEX       NAME              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/mysql   MySQL is a widely used, open-source relati...   9504      [OK]       </span><br></pre></td></tr></tbody></table></figure>
<p><code>docker pull</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin ~]# docker pull mysql:5.7  #指定版本拉取镜像（如果不添加版本信息，默认拉取最新版的镜像）</span><br></pre></td></tr></tbody></table></figure>
<p><code>docker rmi</code>和<code>docker rm</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">如果拉取的镜像已经运行过了，那么删除时，就要先删除运行形成的容器，然后才能删除镜像</span><br><span class="line">[root@centos7-mabin ~]# docker rm -f 184ef6d36701     #强制删除容器</span><br><span class="line"></span><br><span class="line">[root@centos7-mabin ~]# docker rmi -f 184ef6d36722  #强制删除镜像</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">批量删除镜像骚操作</span></span><br><span class="line">[root@centos7-mabin ~]# docker rmi -f $(docker images -aq)  # $(查询出所有镜像的ID)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><p><code>docker run</code>:容器运行</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run [可选参数] imageID</span><br><span class="line"></span><br><span class="line">docker run -d --name horse-rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.8.14-management</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常用参数说明</span></span><br><span class="line">--name="容器名字"  #设置启动容器的名字，例如：tomcat01,tomcat02...，用来区别容器</span><br><span class="line">-d  #后台方式运行</span><br><span class="line">-it #使用交互方式运行并进行容器进行交互查看信息</span><br><span class="line">-p  #端口映射，下面是几种不同的映射书写方式（指定容器的映射端口）</span><br><span class="line">	1.ip:主机端口：容器端口</span><br><span class="line">	2.主机端口：容器端口（常用）</span><br><span class="line">	3.容器端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试：启动centos镜像，并进入容器</span></span><br><span class="line">[root@centos7-mabin ~]# docker run -it 470671670cac /bin/bash</span><br><span class="line">[root@0e4c0367ab83 /]# ls   #查看容器内运行的centos，和外面的linux系统没有任何关系</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器</span></span><br><span class="line">[root@0e4c0367ab83 /]# exit  #退出容器，容器停止</span><br><span class="line">					 #ctrl+p+q  :退出容器，容器不停止</span><br></pre></td></tr></tbody></table></figure>
<p><code>docker ps</code>：容器管理</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker ps [命令参数]</span></span><br><span class="line">	-a:列出当前正在运行的容器和已经运行过的容器</span><br><span class="line">	-n=?:显示几个最近创建的容器（以创建时间倒序）</span><br><span class="line">	-q:只显示容器的编号ID</span><br><span class="line"><span class="meta">#</span><span class="bash">命令测试</span></span><br><span class="line">[root@centos7-mabin ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@centos7-mabin ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">0e4c0367ab83        470671670cac        "/bin/bash"              9 minutes ago       Exited (127) 53 seconds ago                       sleepy_euler</span><br><span class="line">184ef6d36701        6a98e7057e36        "docker-entrypoint..."   3 months ago        Exited (0) 5 weeks ago                            myrabbitmq</span><br><span class="line">2437f68c42ef        docker.io/redis     "docker-entrypoint..."   3 months ago        Exited (0) 2 months ago                           myredis</span><br><span class="line">ae7234cc1a73        mysql:5.7           "docker-entrypoint..."   4 months ago        Exited (0) 4 days ago                             mysqlTest01</span><br><span class="line">[root@centos7-mabin ~]# docker ps -n=2</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">0e4c0367ab83        470671670cac        "/bin/bash"              13 minutes ago      Exited (127) 4 minutes ago                       sleepy_euler</span><br><span class="line">184ef6d36701        6a98e7057e36        "docker-entrypoint..."   3 months ago        Exited (0) 5 weeks ago                           myrabbitmq</span><br><span class="line">[root@centos7-mabin ~]# docker ps -n=2 -aq</span><br><span class="line">0e4c0367ab83</span><br><span class="line">184ef6d36701</span><br></pre></td></tr></tbody></table></figure>
<p><code>docker rm</code>：容器删除</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker rm 容器id  #移除只送容器，正在运行的移除不掉</span><br><span class="line">docker rm -f $(docker ps -aq) #强制移除所有容器（常用）</span><br><span class="line">docker ps -aq | xarqs docker rm  #也可以移除所有容器（不常用）</span><br></pre></td></tr></tbody></table></figure>
<p><code>容器启动</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker start 容器id  #启动容器</span><br><span class="line">docker restart 容器id #重启容器</span><br><span class="line">docker stop 容器id  #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id #强制杀死容器</span><br></pre></td></tr></tbody></table></figure>
<h4 id="常用实例命令"><a href="#常用实例命令" class="headerlink" title="常用实例命令"></a>常用实例命令</h4><p>查看容器运行日志</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin ~]# docker logs -tf --tail 20 2437f68c42ef</span><br><span class="line">	-tf: 显示日志</span><br><span class="line">	--tails [number]:显示number条最新日志信息</span><br></pre></td></tr></tbody></table></figure>
<p>查看容器中进行信息</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin ~]# docker top 0e4c0367ab83  #查看容器进程信息（常用于 docker kill [PID]的杀死进程）</span><br><span class="line">UID                 PID                 PPID                C                   STIME               </span><br><span class="line">root                12291               12274               0                   09:18             </span><br></pre></td></tr></tbody></table></figure>
<p>查看容器的元数据（超级详细信息）</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin ~]# docker inspect 0e4c0367ab83  </span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Id": "0e4c0367ab83eb2f979e1f8f14becf161d81ae5a17fe1318aabf2fffe8c88916",</span><br><span class="line">        "Created": "2020-05-17T00:40:40.162351518Z",</span><br><span class="line">        "Path": "/bin/bash",</span><br><span class="line">        "Args": [],</span><br><span class="line">        "State": {</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 12291,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2020-05-17T01:18:21.812846334Z",</span><br><span class="line">            "FinishedAt": "2020-05-17T00:48:53.872787718Z"</span><br><span class="line">        },</span><br><span class="line">        "Image": "sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/0e4c0367ab83eb2f979e1f8f14becf161d81ae5a17fe1318aabf2fffe8c88916/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/0e4c0367ab83eb2f979e1f8f14becf161d81ae5a17fe1318aabf2fffe8c88916/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/0e4c0367ab83eb2f979e1f8f14becf161d81ae5a17fe1318aabf2fffe8c88916/hosts",</span><br><span class="line">        "LogPath": "",</span><br><span class="line">        "Name": "/sleepy_euler",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "MountLabel": "system_u:object_r:svirt_sandbox_file_t:s0:c385,c902",</span><br><span class="line">        "ProcessLabel": "system_u:system_r:svirt_lxc_net_t:s0:c385,c902",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": {</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": {</span><br><span class="line">                "Type": "journald",</span><br><span class="line">                "Config": {}</span><br><span class="line">            },</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": {},</span><br><span class="line">            "RestartPolicy": {</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            },</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "docker-runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": null,</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DiskQuota": 0,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": -1,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": 0,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0</span><br><span class="line">        },</span><br><span class="line">        "GraphDriver": {</span><br><span class="line">            "Name": "overlay2",</span><br><span class="line">            "Data": {</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/2bb04fec7fd4ae227daa977fc2602bd9091600ae502a50bf2340887cc3053688-init/diff:/var/lib/docker/overlay2/df7e7e32a5bd73cf65a5175fe19448941dc3f9909ff6a258919c07ea12f259fd/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/2bb04fec7fd4ae227daa977fc2602bd9091600ae502a50bf2340887cc3053688/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/2bb04fec7fd4ae227daa977fc2602bd9091600ae502a50bf2340887cc3053688/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/2bb04fec7fd4ae227daa977fc2602bd9091600ae502a50bf2340887cc3053688/work"</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": {</span><br><span class="line">            "Hostname": "0e4c0367ab83",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": true,</span><br><span class="line">            "AttachStdout": true,</span><br><span class="line">            "AttachStderr": true,</span><br><span class="line">            "Tty": true,</span><br><span class="line">            "OpenStdin": true,</span><br><span class="line">            "StdinOnce": true,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/bash"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "470671670cac",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": {</span><br><span class="line">                "org.label-schema.build-date": "20200114",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS",</span><br><span class="line">                "org.opencontainers.image.created": "2020-01-14 00:00:00-08:00",</span><br><span class="line">                "org.opencontainers.image.licenses": "GPL-2.0-only",</span><br><span class="line">                "org.opencontainers.image.title": "CentOS Base Image",</span><br><span class="line">                "org.opencontainers.image.vendor": "CentOS"</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        "NetworkSettings": {</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "9340199ec1197854d5306a91bfee1bf1bf62c574af92563b4216307f1a6f8c72",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": {},</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/9340199ec119",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "ef96e7ca5c54367d224b566bc03f77967f74c56104529d3caab7901330544e1d",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.2",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:02",</span><br><span class="line">            "Networks": {</span><br><span class="line">                "bridge": {</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "da11f83661a873c30bffbef389ae9e770b8965a0428efafce495e2407c91d313",</span><br><span class="line">                    "EndpointID": "ef96e7ca5c54367d224b566bc03f77967f74c56104529d3caab7901330544e1d",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.2",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:02"</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方式一：进入容器后开启一个新的终端，可以再里面进行操作（推荐使用）</span></span><br><span class="line">[root@centos7-mabin ~]# docker exec -it 0e4c0367ab83 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方式二：进入容器正在执行的终端，不会启动新的进程终端</span></span><br><span class="line">[root@centos7-mabin ~]# docker attach 0e4c0367ab83</span><br></pre></td></tr></tbody></table></figure>
<h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker cp 容器id:文件路径 目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">[root@0e4c0367ab83 home]# touch test.java  #进入容器新建文件</span><br><span class="line">[root@0e4c0367ab83 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@0e4c0367ab83 home]# exit  </span><br><span class="line">exit</span><br><span class="line">[root@centos7-mabin ~]# docker cp 0e4c0367ab83:/home/test.java /home  #拷贝文件（反向拷贝文件也可以）</span><br><span class="line">[root@centos7-mabin ~]# cd /home</span><br><span class="line">[root@centos7-mabin home]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 2 root  root    44 Jul  3  2019 DataShells</span><br><span class="line">drwxr-xr-x. 2 root  root    23 Apr 11 10:29 junit</span><br><span class="line">drwx------. 5 leyou leyou  172 Apr 13 15:35 leyou</span><br><span class="line">drwx------. 2 mabin mabin   83 Jun 28  2019 mabin</span><br><span class="line">drwxr-xr-x. 3 root  root  4096 Jun 27  2019 newdisk</span><br><span class="line">drwx------. 2  1001 mabin   83 Jun 26  2019 shasha</span><br><span class="line">drwxr-xr-x. 2 root  root    76 Apr 13 19:06 test</span><br><span class="line">-rw-r--r--. 1 root  root     0 May 17 09:35 test.java   #文件拷贝成功</span><br></pre></td></tr></tbody></table></figure>
<h4 id="docker部署常用环境实例"><a href="#docker部署常用环境实例" class="headerlink" title="docker部署常用环境实例"></a>docker部署常用环境实例</h4><p>nginx</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin home]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/nginx ... </span><br><span class="line">latest: Pulling from docker.io/library/nginx</span><br><span class="line">afb6ec6fdc1c: Pull complete </span><br><span class="line">b90c53a0b692: Pull complete </span><br><span class="line">11fa52a0fdc0: Pull complete </span><br><span class="line">Digest: sha256:30dfa439718a17baafefadf16c5e7c9d0a1cde97b4fd84f63b69e13513be7097</span><br><span class="line">Status: Downloaded newer image for docker.io/nginx:latest</span><br><span class="line">[root@centos7-mabin home]# docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/nginx      latest              9beeba249f3e        29 hours ago        127 MB</span><br><span class="line">[root@centos7-mabin home]# docker run -d --name=nginx01 -p 10010:80 9beeba249f3e  #注意端口映射</span><br><span class="line">7b4ff9f48ab1ed734ea451f4403fde2e3e304c4376e5d43b8c0ef372c49e1506</span><br><span class="line">[root@centos7-mabin home]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class="line">7b4ff9f48ab1        9beeba249f3e        "nginx -g 'daemon ..."   5 seconds ago       Up 4 seconds        0.0.0.0:10010-&gt;80/tcp   nginx01</span><br><span class="line">[root@centos7-mabin home]# curl localhost:10010 #利用curl请求web服务器，测试是否开启成功，直接浏览器访问也行</span><br></pre></td></tr></tbody></table></figure>
<h4 id="docker-commit镜像"><a href="#docker-commit镜像" class="headerlink" title="docker commit镜像"></a>docker commit镜像</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker commit [...] ：提交容器成为一个新的镜像副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">和git的提交命令类似</span></span><br><span class="line">docker commit -m="提交的描述信息" -a="作者" 容器id  目标镜像名:[TAG]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="docker容器数据卷-数据同步技术"><a href="#docker容器数据卷-数据同步技术" class="headerlink" title="docker容器数据卷(数据同步技术)"></a>docker容器数据卷(数据同步技术)</h3><blockquote>
<p>功能：容器数据的持久化和同步操作，容器间也可以数据共享，例如mysql等</p>
</blockquote>
<h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方式一：直接使用命令 -v [主机目录地址:容器目录地址] 来进行挂载</span></span><br><span class="line">		--privileged=true:容器运行时，给容器加上特权，不然没有操作挂载的目录的权限</span><br><span class="line">[root@centos7-mabin test]# docker run -it -v /home/test:/home --privileged=true centos /bin/bash  </span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213142.png" alt="容器启动挂载成功"></p>
<p>数据持久化和同步效果</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213153.png" alt="image-20200517140752038"></p>
<p>反向操作也可以实现数据同步（相当于v-model的双向绑定思想）</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213157.png" alt="image-20200517141025043"></p>
<blockquote>
<p>好处：我们以后只需要修改本地数据，就可以实现容器数据的自动同步了</p>
</blockquote>
<h4 id="匿名挂载和具名挂载和指定路径挂载"><a href="#匿名挂载和具名挂载和指定路径挂载" class="headerlink" title="匿名挂载和具名挂载和指定路径挂载"></a>匿名挂载和具名挂载和指定路径挂载</h4><p>通过<code>docker inspect 容器id</code>：来查看挂载的具体信息</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">匿名挂载（-v 容器内路径）</span></span><br><span class="line">[root@centos7-mabin test]# docker run -it -v /home --privileged=true centos /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">具名挂载（-v 卷名称:容器内路径）</span></span><br><span class="line">[root@centos7-mabin test]# docker run -it -v centos:/home --privileged=true centos /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定路径挂载（-v 宿主机路径:容器内路径）</span></span><br><span class="line">[root@centos7-mabin test]# docker run -it -v /home/test:/home --privileged=true centos /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：我们一般使用具名挂载和指定路径挂载的方式</span></span><br></pre></td></tr></tbody></table></figure>
<p>拓展：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">通过 -v 卷名：容器内路径:ro 或者rw 来改变挂载文件的读写权限</span><br><span class="line"><span class="meta">#</span><span class="bash"> ro:只读 (只能通过宿主机来操作数据，容器内部无法进行操作)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rw:可读写</span></span><br><span class="line">[root@centos7-mabin test]# docker run -it -v centos:/home:rw --privileged=true centos /bin/bash</span><br><span class="line">[root@centos7-mabin test]# docker run -it -v centos:/home:ro --privileged=true centos /bin/bash</span><br></pre></td></tr></tbody></table></figure>
<h4 id="数据卷容器-这里介绍多个容器间的数据同步"><a href="#数据卷容器-这里介绍多个容器间的数据同步" class="headerlink" title="数据卷容器(这里介绍多个容器间的数据同步)"></a>数据卷容器(这里介绍多个容器间的数据同步)</h4><p><code>valumes-form</code>:容器间挂载实现数据同步</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">实现容器centos01和容器centos02，容器centos03之间的数据同步</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">容器centos01作为父数据卷容器，将数据挂载同步到本地持久化</span></span><br><span class="line">[root@centos7-mabin test]# docker run --name=centos01 -it -v centos:/home --privileged=true centos /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">通过命令 【valumes-form centos01】  将容器centos02和03,分别挂载到centos01上面</span></span><br><span class="line">[root@centos7-mabin test]# docker run --name=centos02 -it -v centos:/home valumes-form centos01 --privileged=true centos /bin/bash</span><br><span class="line"></span><br><span class="line">[root@centos7-mabin test]# docker run --name=centos03 -it -v centos:/home valumes-form centos01 --privileged=true centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这样操作之后：可以实现多个容器之间的数据同步，并且父容器删除后，子容器同步的数消失（拷贝原理）</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><blockquote>
<p>dockerfile:用来构建docker镜像的文件，实质是一个命令参数脚本</p>
</blockquote>
<p>镜像构建步骤：</p>
<ol>
<li>编写一个dockerfile文件</li>
<li>docker build构建成为一个镜像</li>
<li>docker run 运行镜像</li>
<li>docker push发布镜像（DockerHub或者阿里云创库）</li>
</ol>
<h4 id="DockerFile常用基本指令-大写"><a href="#DockerFile常用基本指令-大写" class="headerlink" title="DockerFile常用基本指令(大写)"></a>DockerFile常用基本指令(大写)</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">FROM		#基础镜像，一切从这里开始</span><br><span class="line">MAINTAINER  #镜像是谁写的：姓名+邮箱</span><br><span class="line">RUN		    #镜像运行的时候需要运行的命令</span><br><span class="line">ADD			#添加层，例如：在构建镜像的时候添加tomcat,jdk等，添加相关压缩包会自动解压，</span><br><span class="line">WORKDIR     #指定镜像的工作目录</span><br><span class="line">VOLUME      #配置镜像挂载的目录</span><br><span class="line">EXPOSE		#暴漏端口配置</span><br><span class="line">CMD			#指定容器运行启动时要运行的命令，并且自由最后一条设置的有效（相当于命令替代）</span><br><span class="line">ENTRYPOINT  #指定容器运行启动时要运行的命令，可以追加命令</span><br><span class="line">ONBUILD     #基础指令</span><br><span class="line">COPY		#类似ADD，将文件拷贝到镜像中</span><br><span class="line">ENV			#构建镜像的时候设置环境变量</span><br></pre></td></tr></tbody></table></figure>
<h4 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h4><blockquote>
<p>创建一个自己的centos</p>
</blockquote>
<p>构建dockerfile文件</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.编写文件</span></span><br><span class="line">[root@centos7-mabin dockerfile]# cat dockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER horse-3468449362@qq.com</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim      #centos-8 yum会出错，额外配置（自己百度）</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 10010</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "----end----"</span><br><span class="line">CMD /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2.通过上面的文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker build -f dockerfile文件路径 -t 自定义镜像名:[TAG]</span></span><br><span class="line">[root@centos7-mabin dockerfile]# docker build -f dockerfile-centos -t mycentos:1.0 .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.运行生成的docker镜像</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213204.png" alt="image-20200517164629575"></p>
<blockquote>
<p>构建自己的tomcat服务器</p>
</blockquote>
<p>1.准备tomcat,jdk的安装包</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213207.png" alt="image-20200517170618249"></p>
<p>2.编写dockerfile文件，</p>
<blockquote>
<p>官方命名 “<strong>Dockerfile</strong>” ：当执行build命令时，会自动去寻找这个文件，就不再需要-f进行指定路径了</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin tar-gz]# cat Dockerfile </span><br><span class="line">FROM centos:centos7.7.1908</span><br><span class="line">MAINTAINER horse-3468449362@qq.com</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u251-linux-x64.tar.gz /usr/local</span><br><span class="line">ADD apache-tomcat-9.0.34.tar.gz /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/1.8.0_251</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.34</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.34</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.34/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.34/bin/logs/catalina.out</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>3.构建镜像</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">因为文件名字叫做Dockerfile，所以在文件所在的目录中，不需要再进行目录指定</span></span><br><span class="line">[root@centos7-mabin tar-gz]# docker build -t mytomcat .</span><br></pre></td></tr></tbody></table></figure>
<p>4.启动镜像并挂载容器卷</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin tar-gz]# docker run -d --name=myTomcat -p 8080:8080 -v /home/tar-gz/tomcat/test:/usr/local/apache-tomcat-9.0.34/webapps/test -v /home/tar-gz/tomcat/log:/usr/local/apache-tomcat-9.0.34/logs 708ee5fb9ff8</span><br></pre></td></tr></tbody></table></figure>
<p>5.如果要发布项目，就可以直接将项目的war包放入本地的<code>/home/tar-gz/tomcat/test</code>目录下，就可以同步到webapps目录下，直接可以进行访问。</p>
<p><code>但是我的测试失败了。。。不知道为什么？？？</code></p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote>
<p>​    线性结构：顺序存储结构（数组）和链式存储结构（链表）</p>
</blockquote>
<p><strong>常见的线性结构</strong>：数组，队列，链表，栈</p>
<p><strong>非线性结构</strong>：二维数组，多维数组，广义表，树结构，图结构</p>
<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a><code>稀疏数组</code></h3><blockquote>
<p>稀疏数组：当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存该数组</p>
</blockquote>
<p>处理方法：</p>
<ol>
<li>记录数组中一共有几行几列，有多少个不同的值</li>
<li>把具有不同值的元素的行列和相应的值记录在一个小规模的新数组中，从而达到说小程序规模的效果</li>
</ol>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213212.png" alt="稀疏数组转换图解"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_PATH = <span class="string">"D:\\IEDA_data\\LanQiaoBei\\file\\sparse.data"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 稀疏数组棋盘案例测试：二维数组&lt;==&gt;稀疏数组 的相互转换</span></span><br><span class="line"><span class="comment">         * 0：没有值，1：蓝棋子，2：黑棋子</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个二维数组，并设置蓝黑棋子的位置</span></span><br><span class="line">        <span class="keyword">int</span>[][] chessArr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        chessArr1[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将二维数组转化为稀疏数组</span></span><br><span class="line">        <span class="comment">//1.遍历二维数组，获取数组中非0数据的个数</span></span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : chessArr1) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) {</span><br><span class="line">                <span class="keyword">if</span> (anInt != <span class="number">0</span>) {</span><br><span class="line">                    zero++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//2.创建对应的稀疏数组sparseAr[zero+1][3]</span></span><br><span class="line">        <span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[zero + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//给稀疏数组第一行赋初始值</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>] = chessArr1.length;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>] = chessArr1[<span class="number">0</span>].length;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>] = zero;</span><br><span class="line">        <span class="comment">//3.将二维数组的有效数据存入到稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//用于记录是第几个有效数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArr1.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArr1[i].length; j++) {</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) {</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==============获取稀疏数组并保存稀疏数组到磁盘=============="</span>);</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(FILE_PATH)));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : sparseArr) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> sparse : ints) {</span><br><span class="line">                    System.out.printf(<span class="string">"%d\t"</span>, sparse);</span><br><span class="line">                    writer.write(sparse + <span class="string">","</span>);</span><br><span class="line">                }</span><br><span class="line">                writer.write(<span class="string">"\n"</span>);</span><br><span class="line">                writer.flush();</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    writer.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==============读取磁盘文件(利用list集合存放元素)并还原二维数组=============="</span>);</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        String line;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(FILE_PATH)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                String[] split = line.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">for</span> (String s : split) {</span><br><span class="line">                    list.add(Integer.parseInt(s));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    reader.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"磁盘读取转化稀疏数组..."</span>);</span><br><span class="line">        <span class="keyword">int</span>[][] sparseArr1 = <span class="keyword">new</span> <span class="keyword">int</span>[list.get(<span class="number">2</span>) + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i += <span class="number">3</span>) {</span><br><span class="line">            sparseArr1[j][<span class="number">0</span>] = list.get(i);</span><br><span class="line">            sparseArr1[j][<span class="number">1</span>] = list.get(i + <span class="number">1</span>);</span><br><span class="line">            sparseArr1[j][<span class="number">2</span>] = list.get(i + <span class="number">2</span>);</span><br><span class="line">            j++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : sparseArr1) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> chess : ints) {</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>, chess);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"开始还原..."</span>);</span><br><span class="line">        <span class="comment">//将稀疏数组还原为二位数组</span></span><br><span class="line">        <span class="comment">//1.先读取稀疏数组的第一行数据，并创建原始的二维数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] chessArr2 = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr1[<span class="number">0</span>][<span class="number">0</span>]][sparseArr1[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//2.读取稀疏数组的后几行数据，并赋值给二维数据即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArr1.length; i++) {</span><br><span class="line">            chessArr2[sparseArr1[i][<span class="number">0</span>]][sparseArr1[i][<span class="number">1</span>]] = sparseArr1[i][<span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : chessArr2) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> chess : ints) {</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>, chess);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213232.png" alt="运行结果"></p>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a><code>链表</code></h3><h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a><code>单向链表</code></h4><p><strong>链表结构特点</strong></p>
<ul>
<li>链表是以节点的方式来存储的，是链式存储的形式</li>
<li>每个节点都包含一个data域，一个next域：指向下一个节点</li>
<li>链表的各个节点不一定是连续的</li>
<li>链表分为带头结点和没有头节点的链表(头节点一般不存储数据，只是标识自己是头节点)，这个根据实际情况来确定定义</li>
</ul>
<p>java代码实现单项链表的增删改查和<code>几个简单的面试题</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//单向链表测试</span></span><br><span class="line">        HeroNode hero1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">        HeroNode hero2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">        HeroNode hero3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">        HeroNode hero4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>, <span class="string">"一丈青"</span>, <span class="string">"扈三娘"</span>);</span><br><span class="line"></span><br><span class="line">        SinglyLinkedList singlyLinkedList = <span class="keyword">new</span> SinglyLinkedList();</span><br><span class="line">        <span class="comment">//添加链表（并按序号排序插入）</span></span><br><span class="line">        singlyLinkedList.addHeroNodeByOrder(hero3);</span><br><span class="line">        singlyLinkedList.addHeroNodeByOrder(hero4);</span><br><span class="line">        singlyLinkedList.addHeroNodeByOrder(hero2);</span><br><span class="line">        singlyLinkedList.addHeroNodeByOrder(hero1);</span><br><span class="line">        System.out.println(<span class="string">"============添加后============"</span>);</span><br><span class="line">        singlyLinkedList.listHeroNode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//逆序打印链表节点（不破坏链表结构）</span></span><br><span class="line">        System.out.println(<span class="string">"============逆序打印后============"</span>);</span><br><span class="line">        singlyLinkedList.reversePrint(singlyLinkedList.getHead());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//链表反转（破坏链表结构）</span></span><br><span class="line">        System.out.println(<span class="string">"============反转后============"</span>);</span><br><span class="line">        singlyLinkedList.reverseHeroNode(singlyLinkedList.getHead());</span><br><span class="line">        singlyLinkedList.listHeroNode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改节点</span></span><br><span class="line">        singlyLinkedList.updateHeroNode(<span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">"林冲"</span>, <span class="string">"豹子头"</span>));</span><br><span class="line">        System.out.println(<span class="string">"============修改后============"</span>);</span><br><span class="line">        singlyLinkedList.listHeroNode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        singlyLinkedList.deleteHeroNode(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"============删除后============"</span>);</span><br><span class="line">        singlyLinkedList.listHeroNode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询链表的有效节点个数</span></span><br><span class="line">        System.out.println(<span class="string">"有效节点个数："</span> + singlyLinkedList.getEffectiveNode(singlyLinkedList.getHead()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询倒数第index个节点信息</span></span><br><span class="line">        System.out.println(<span class="string">"倒数第2个的节点信息："</span> + singlyLinkedList.getHeroNodeByIndex(singlyLinkedList.getHead(), <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除倒数第n个节点，并返回头节点</span></span><br><span class="line">        System.out.println(<span class="string">"===============删除倒数第n个节点，并返回头节点============="</span>);</span><br><span class="line">        System.out.println(<span class="string">"返回头节点:"</span> + singlyLinkedList.deleteHeroNodeByIndex(singlyLinkedList.getHead(), <span class="number">3</span>));</span><br><span class="line">        singlyLinkedList.listHeroNode();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个SinglyLinkedList类：管理我们的英雄对象（HeroNode）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedList</span> </span>{</span><br><span class="line">    <span class="comment">//首先定义一个头节点：不用于存储信息，只单纯当做头节点</span></span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getHead</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义增加节点的方法</span></span><br><span class="line"><span class="comment">     * 不考虑编号的顺序进行节点的添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeroNode</span><span class="params">(HeroNode heroNode)</span> </span>{</span><br><span class="line">        <span class="comment">//因为head头节点不能动，所以我们需要一个辅助变量temp</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//依次将节点对象后移，知道找到next==null的那个节点对象（也就是链表的最后一个节点）</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//当退出while循环时，temp肯定指向链表的最后一个节点（next==null），这时将此节点的next指向新节点</span></span><br><span class="line">        temp.next = heroNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据序号顺序将英雄插入到指定的位置，如果这个序号已经存在，则添加失败并给出提示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeroNodeByOrder</span><span class="params">(HeroNode heroNode)</span> </span>{</span><br><span class="line">        <span class="comment">//因为head头节点不能动，所以我们需要一个辅助变量temp</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//表示节点是否重复</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//找到当前可以插入节点的位置</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.id &gt; heroNode.id) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//序号已存在</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.id == heroNode.id) {</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//temp后移：遍历链表，进行位置查找</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            System.out.printf(<span class="string">"准备插入的英雄的序号%d已存在！\n"</span>, heroNode.id);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//位置找到，就在当前temp的后面插入即可</span></span><br><span class="line">            heroNode.next = temp.next;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id进行节点查询并修改节点信息（id不能修改）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateHeroNode</span><span class="params">(HeroNode heroNode)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        HeroNode temp = head.next;</span><br><span class="line">        <span class="comment">//表示是否找到该节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (temp.id == heroNode.id) {</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            temp.name = heroNode.name;</span><br><span class="line">            temp.nickname = heroNode.nickname;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.printf(<span class="string">"没有找到该序号为%d的英雄信息\n"</span>, heroNode.id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据序号删除节点信息</span></span><br><span class="line"><span class="comment">     * 需要找到被删除节点的前一个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHeroNode</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//是否匹配到可删除项</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//找到删除节点</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.id == id) {</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="comment">//被遗弃的那个节点会被jvm的垃圾回收机制自动回收删除</span></span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.printf(<span class="string">"没有找到该序号为%d的英雄信息\n"</span>, id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示链表（遍历）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listHeroNode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//判断链表是否为空(如果头节点的next==null,那么此链表一定为空)</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//循环遍历显示</span></span><br><span class="line">        HeroNode temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            <span class="comment">//将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计链表（除头节点外）的有效节点个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEffectiveNode</span><span class="params">(HeroNode heroNode)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        HeroNode temp = heroNode.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) {</span><br><span class="line">            length++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询倒数第index个的节点(除去不带信息的头节点)信息（因为单向链表不能逆向遍历，所以只能使用：正【总-index】= 逆【index】）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getHeroNodeByIndex</span><span class="params">(HeroNode heroNode, <span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (heroNode.next == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//获取链表的有效节点的个数</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="keyword">this</span>.getEffectiveNode(heroNode);</span><br><span class="line">        <span class="comment">//校验index</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; length) {</span><br><span class="line">            System.out.printf(<span class="string">"无法找到倒数第%d个的节点信息\n"</span>, index);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        HeroNode currentNode = heroNode.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - index; i++) {</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (currentNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.printf(<span class="string">"无法找到倒数第%d个的节点信息\n"</span>, index);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转单链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseHeroNode</span><span class="params">(HeroNode heroNode)</span> </span>{</span><br><span class="line">        <span class="comment">//如果链表为空或者只有一个节点，直接终止返回</span></span><br><span class="line">        <span class="keyword">if</span> (heroNode.next == <span class="keyword">null</span> || heroNode.next.next == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//反转操作</span></span><br><span class="line">        <span class="comment">//用于遍历的辅助变量</span></span><br><span class="line">        HeroNode currentNode = heroNode.next;</span><br><span class="line">        <span class="comment">//指向当前节点的下一个节点（用于暂时保存当前节点的下一个节点的信息）</span></span><br><span class="line">        HeroNode next;</span><br><span class="line">        <span class="comment">//用于反转的辅助链表</span></span><br><span class="line">        HeroNode reverseHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历原链表，每遍历一个节点，将此节点取出并放在新的reverseHead链表的最前端位置（reverseHead头节点的下一个节点），遍历完后，新链表的节点顺序就是倒序排列的了</span></span><br><span class="line">        <span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//暂时保存当前节点的下一个节点，用于下面的遍历赋值</span></span><br><span class="line">            next = currentNode.next;</span><br><span class="line">            <span class="comment">//每次都把当前节点的下一个节点指向新链表的最前端（这两句就相当于每次在新链表的最前端插入一个当前节点，就是插入操作）</span></span><br><span class="line">            currentNode.next = reverseHead.next;</span><br><span class="line">            reverseHead.next = currentNode;</span><br><span class="line">            <span class="comment">//当前节点后移</span></span><br><span class="line">            currentNode = next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//遍历之后，再把头节点进行替换即可</span></span><br><span class="line">        heroNode.next = reverseHead.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">deleteHeroNodeByIndex</span><span class="params">(HeroNode head, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//获取链表的有效节点个数</span></span><br><span class="line">        HeroNode temp = head.next;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) {</span><br><span class="line">            length++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//校验n的合法性</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || n &gt; length) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//遍历并找到倒数第n个节点的前一个节点</span></span><br><span class="line">        HeroNode currentNode = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - n; i++) {</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//删除倒数第n个节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode != <span class="keyword">null</span>) {</span><br><span class="line">            currentNode.next = currentNode.next.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序打印单链表：不改变链表的结构，（这里结合栈的 “先进后出” 原理进行操作）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heroNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">(HeroNode heroNode)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (heroNode.next == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//定义一个栈</span></span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历链表：将各个节点压入栈中</span></span><br><span class="line">        HeroNode currentNode = heroNode.next;</span><br><span class="line">        <span class="keyword">while</span> (currentNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//进栈</span></span><br><span class="line">            stack.push(currentNode);</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//出栈打印节点信息(每次输出之后，stack.size()都会减1，所以不能使用for循环遍历)</span></span><br><span class="line">        <span class="keyword">while</span> (stack.size() &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">//出栈</span></span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义HeroNode,每个HeroNode对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode next; <span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> id, String name, String nickname)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNode{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213240.png" alt="单向链表"></p>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a><code>双向链表</code></h4><p>双向链表：</p>
<ul>
<li>链表中具有next，和pre,分别指向当前节点的下一个和当前节点的上一个</li>
<li>可以直接找到某一节点并直接删除当前节点</li>
<li>其他的操作基本和单向链表的相同，只是逻辑稍微有点变化，增删改查操作甚至更加简单</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建节点信息</span></span><br><span class="line">        PersonNode hero1 = <span class="keyword">new</span> PersonNode(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">        PersonNode hero2 = <span class="keyword">new</span> PersonNode(<span class="number">2</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">        PersonNode hero3 = <span class="keyword">new</span> PersonNode(<span class="number">3</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">        PersonNode hero4 = <span class="keyword">new</span> PersonNode(<span class="number">4</span>, <span class="string">"一丈青"</span>, <span class="string">"扈三娘"</span>);</span><br><span class="line"></span><br><span class="line">        DoubleLinkedList doubleLinkedList = <span class="keyword">new</span> DoubleLinkedList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加节点信息并按id排序</span></span><br><span class="line">        doubleLinkedList.addDoubleLinkedByOrder(hero4);</span><br><span class="line">        doubleLinkedList.addDoubleLinkedByOrder(hero2);</span><br><span class="line">        doubleLinkedList.addDoubleLinkedByOrder(hero1);</span><br><span class="line">        doubleLinkedList.addDoubleLinkedByOrder(hero3);</span><br><span class="line">        System.out.println(<span class="string">"===========添加节点=========="</span>);</span><br><span class="line">        doubleLinkedList.listDoubleLinked();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改指定节点</span></span><br><span class="line">        doubleLinkedList.updateDoubleLinked(<span class="keyword">new</span> PersonNode(<span class="number">3</span>, <span class="string">"李逵"</span>, <span class="string">"黑旋风"</span>));</span><br><span class="line">        System.out.println(<span class="string">"===========修改节点=========="</span>);</span><br><span class="line">        doubleLinkedList.listDoubleLinked();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定节点</span></span><br><span class="line">        doubleLinkedList.deleteDoubleLinked(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"===========删除节点=========="</span>);</span><br><span class="line">        doubleLinkedList.listDoubleLinked();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span> </span>{</span><br><span class="line">    <span class="comment">//初始化一个头节点，不存放具体数据</span></span><br><span class="line">    <span class="keyword">private</span> PersonNode personNode = <span class="keyword">new</span> PersonNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersonNode <span class="title">getPersonNode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> personNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历双向链表（和单向链表相同）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listDoubleLinked</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.personNode.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        PersonNode tempNode = personNode.next;</span><br><span class="line">        <span class="keyword">while</span> (tempNode != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(tempNode);</span><br><span class="line">            tempNode = tempNode.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点到双向链表的尾部（有区别）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDoubleLinked</span><span class="params">(PersonNode personNode)</span> </span>{</span><br><span class="line">        PersonNode tempNode = <span class="keyword">this</span>.personNode;</span><br><span class="line">        <span class="comment">//遍历找到最后一个节点的位置</span></span><br><span class="line">        <span class="keyword">while</span> (tempNode.next != <span class="keyword">null</span>) {</span><br><span class="line">            tempNode = tempNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//添加节点</span></span><br><span class="line">        tempNode.next = personNode;</span><br><span class="line">        personNode.pre = tempNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据序号顺序将英雄插入到指定的位置，如果这个序号已经存在，则添加失败并给出提示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDoubleLinkedByOrder</span><span class="params">(PersonNode personNode)</span> </span>{</span><br><span class="line">        PersonNode tempNode = <span class="keyword">this</span>.personNode;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (tempNode.next != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (tempNode.next.id == personNode.id) {</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (tempNode.next.id &gt; personNode.id) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            tempNode = tempNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            System.out.printf(<span class="string">"序号为%d的节点信息已存在\n"</span>, personNode.id);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//插入到链表的中间的情况</span></span><br><span class="line">            <span class="keyword">if</span> (tempNode.next != <span class="keyword">null</span>) {</span><br><span class="line">                personNode.next = tempNode.next;</span><br><span class="line">                tempNode.next.pre = personNode;</span><br><span class="line">                tempNode.next = personNode;</span><br><span class="line">                personNode.pre = tempNode;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//添加到链表尾部的情况</span></span><br><span class="line">                tempNode.next = personNode;</span><br><span class="line">                personNode.pre = tempNode;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改双向链表中的节点（相同）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDoubleLinked</span><span class="params">(PersonNode personNode)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.personNode.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        PersonNode tempNode = <span class="keyword">this</span>.personNode.next;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (tempNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (tempNode.id == personNode.id) {</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            tempNode = tempNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            tempNode.name = personNode.name;</span><br><span class="line">            tempNode.nickname = personNode.nickname;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.printf(<span class="string">"未找到序号为%d的节点信息\n"</span>, personNode.id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除双向链表中的节点(不同)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDoubleLinked</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.personNode.next == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        PersonNode tempNode = <span class="keyword">this</span>.personNode.next;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//直接找到要删除的节点</span></span><br><span class="line">        <span class="keyword">while</span> (tempNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (tempNode.id == id) {</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            tempNode = tempNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="comment">//删除当前节点</span></span><br><span class="line">            tempNode.pre.next = tempNode.next;</span><br><span class="line">            <span class="comment">//避免删除的是最后一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (tempNode.next != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">//如果删除的是最后一个节点，就不需要下面的程序，否侧会出现空指针异常</span></span><br><span class="line">                tempNode.next.pre = tempNode.pre;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.printf(<span class="string">"未找到序号为%d的节点信息\n"</span>, id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义节点对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonNode</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="comment">//指向下一个节点</span></span><br><span class="line">    <span class="keyword">public</span> PersonNode next;</span><br><span class="line">    <span class="comment">//指向前一个节点</span></span><br><span class="line">    <span class="keyword">public</span> PersonNode pre;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonNode</span><span class="params">(<span class="keyword">int</span> id, String name, String nickname)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PersonNode{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213245.png" alt="双向链表"></p>
<h4 id="单环形链表和约瑟夫环"><a href="#单环形链表和约瑟夫环" class="headerlink" title="单环形链表和约瑟夫环"></a><code>单环形链表和约瑟夫环</code></h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213248.png" alt="约瑟夫场景介绍"></p>
<p>小孩出圈的思路分析</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213251.png" alt="思路分析"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        CircleSinglyLinkedList circleSinglyLinkedList = <span class="keyword">new</span> CircleSinglyLinkedList();</span><br><span class="line">        System.out.println(<span class="string">"=========构建单项环形链表并遍历=========="</span>);</span><br><span class="line">        circleSinglyLinkedList.addCircleLinked(<span class="number">5</span>);</span><br><span class="line">        circleSinglyLinkedList.listCircleLinked();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========约瑟夫环的小孩出圈测试=========="</span>);</span><br><span class="line">        circleSinglyLinkedList.JosupheCircleLinked(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个单项环形链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleSinglyLinkedList</span> </span>{</span><br><span class="line">    <span class="comment">//定义一个first头节点</span></span><br><span class="line">    <span class="keyword">private</span> Body firstNode = <span class="keyword">new</span> Body(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//创建环形链表(利用for循环)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCircleLinked</span><span class="params">(<span class="keyword">int</span> nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (nums &lt; <span class="number">1</span>) {</span><br><span class="line">            System.out.println(<span class="string">"环形节点个数不能小于1,请重新创建..."</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//根据循环创建</span></span><br><span class="line">        Body currentBody = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums; i++) {</span><br><span class="line">            <span class="comment">//根据编号，创建节点</span></span><br><span class="line">            Body body = <span class="keyword">new</span> Body(i);</span><br><span class="line">            <span class="comment">//如果是第一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">this</span>.firstNode = body;</span><br><span class="line">                <span class="comment">//构成一个节点的单向环</span></span><br><span class="line">                <span class="keyword">this</span>.firstNode.next = <span class="keyword">this</span>.firstNode;</span><br><span class="line">                <span class="comment">//辅助节点</span></span><br><span class="line">                currentBody = <span class="keyword">this</span>.firstNode;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                currentBody.next = body;</span><br><span class="line">                body.next = <span class="keyword">this</span>.firstNode;</span><br><span class="line">                currentBody = body;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历环形链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listCircleLinked</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (firstNode == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"当前链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        Body currentNode = <span class="keyword">this</span>.firstNode;</span><br><span class="line">        <span class="comment">//当最后一个节点的下一个等于第一个节点，就是遍历完毕</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            System.out.println(currentNode);</span><br><span class="line">            <span class="keyword">if</span> (currentNode.next == firstNode) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现约瑟夫环出圈问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startNo 开始报数的节点序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 每次报数出圈移动的次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 共有多少个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JosupheCircleLinked</span><span class="params">(<span class="keyword">int</span> startNo, <span class="keyword">int</span> countNum, <span class="keyword">int</span> nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.firstNode == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (startNo &lt; <span class="number">1</span> || startNo &gt; nums) {</span><br><span class="line">            System.out.println(<span class="string">"参数不合法，请重新输入..."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//进行出圈操作</span></span><br><span class="line">        <span class="comment">//创建辅助节点helper:事先helper应该执行环形链表的最后一个节点</span></span><br><span class="line">        Body helper = firstNode;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (helper.next == firstNode) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            helper = helper.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//小孩报数前：应该让helper和firstNode节点移动startNo-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startNo - <span class="number">1</span>; i++) {</span><br><span class="line">            firstNode = firstNode.next;</span><br><span class="line">            helper = helper.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//开始报数：让firstNode和helper节点同时移动countNum-1次（开始报数的小孩自己也报数一次，所以相当于移动countNum-1次），然后被指定的节点出圈，直到圈中只有一个节点为止</span></span><br><span class="line">        System.out.print(<span class="string">"出圈顺序为："</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">//直到圈中只有一个节点退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (helper == firstNode) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//让firstNode和helper节点同时移动countNum-1次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNum - <span class="number">1</span>; i++) {</span><br><span class="line">                firstNode = firstNode.next;</span><br><span class="line">                helper = helper.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//这时firstNode的节点就是要出圈的节点</span></span><br><span class="line">            System.out.printf(<span class="string">"%d==&gt;"</span>, firstNode.id);</span><br><span class="line">            <span class="comment">//删除要出圈的节点</span></span><br><span class="line">            firstNode = firstNode.next;</span><br><span class="line">            helper.next = firstNode;</span><br><span class="line">        }</span><br><span class="line">        System.out.printf(<span class="string">"%d\n"</span>, firstNode.id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Body类，表示一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> Body next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Body</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Body{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213256.png" alt="约瑟夫环"></p>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a><code>栈</code></h3><p>了解基本原理即可…</p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a><code>二叉树</code></h3><h4 id="1-基本二叉树"><a href="#1-基本二叉树" class="headerlink" title="1. 基本二叉树"></a>1. 基本二叉树</h4><blockquote>
<p>二叉树的前序、中序、后序三种方式相关操作：</p>
<ul>
<li>遍历演示</li>
<li>查找指定节点演示</li>
<li>删除指定节点要求和演示<ul>
<li>如果删除的节点是叶子节点，则直接删除；</li>
<li>如果删除的是非叶子节点，则直接删除该子树</li>
</ul>
</li>
</ul>
</blockquote>
<p>二叉树示例：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">B(1.宋江)</span><br><span class="line">B --&gt;C(2.吴用)</span><br><span class="line">C --&gt;E(6.右==武松)</span><br><span class="line">B --&gt;D(3.卢俊义)</span><br><span class="line">D --&gt;F(5.杨旭虎)</span><br><span class="line">D --&gt;G(4.林冲)</span><br><span class="line">H[二叉树示例图]</span><br></pre></td></tr></tbody></table></figure>
<p>递归遍历二叉树和查找指定节点</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建二叉树对象</span></span><br><span class="line">        BinaryTree binaryTree = <span class="keyword">new</span> BinaryTree();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建节点对象</span></span><br><span class="line">        HeroNode root = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">"宋江"</span>);</span><br><span class="line">        HeroNode node2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">"吴用"</span>);</span><br><span class="line">        HeroNode node3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">"卢俊义"</span>);</span><br><span class="line">        HeroNode node4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>, <span class="string">"林冲"</span>);</span><br><span class="line">        HeroNode node5 = <span class="keyword">new</span> HeroNode(<span class="number">5</span>, <span class="string">"杨旭虎"</span>);</span><br><span class="line">        HeroNode node6 = <span class="keyword">new</span> HeroNode(<span class="number">6</span>, <span class="string">"武松"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动创建二叉树</span></span><br><span class="line">        binaryTree.setRoot(root);</span><br><span class="line">        root.setLeft(node2);</span><br><span class="line">        root.setRight(node3);</span><br><span class="line">        node2.setRight(node6);</span><br><span class="line">        node3.setLeft(node5);</span><br><span class="line">        node3.setRight(node4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(<span class="string">"=====前序遍历====="</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====中序遍历====="</span>);</span><br><span class="line">        binaryTree.infixOrder();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====后序遍历====="</span>);</span><br><span class="line">        binaryTree.postOrder();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====前序遍历查找====="</span>);</span><br><span class="line">        binaryTree.preOrderSearch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====中序遍历查找====="</span>);</span><br><span class="line">        binaryTree.infixOrderSearch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====后序遍历查找====="</span>);</span><br><span class="line">        binaryTree.postOrderSearch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====删除指定节点====="</span>);</span><br><span class="line">        System.out.println(<span class="string">"删除前===&gt;"</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">        binaryTree.remvoeNode(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"删除后===&gt;"</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(HeroNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.root.preOrder();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"二叉树为空,无法遍历"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.root.infixOrder();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"二叉树为空,无法遍历"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.root.postOrder();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"二叉树为空,无法遍历"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历查找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderSearch</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            HeroNode heroNode = <span class="keyword">this</span>.root.preOrderSearch(id);</span><br><span class="line">            <span class="keyword">if</span> (heroNode != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"找到节点对象==&gt;"</span> + heroNode);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                System.out.println(<span class="string">"抱歉! 未找到节点对象"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历查找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrderSearch</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            HeroNode heroNode = <span class="keyword">this</span>.root.infixOrderSearch(id);</span><br><span class="line">            <span class="keyword">if</span> (heroNode != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"找到节点对象==&gt;"</span> + heroNode);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                System.out.println(<span class="string">"抱歉! 未找到节点对象"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历查找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderSearch</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            HeroNode heroNode = <span class="keyword">this</span>.root.postOrderSearch(id);</span><br><span class="line">            <span class="keyword">if</span> (heroNode != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"找到节点对象==&gt;"</span> + heroNode);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                System.out.println(<span class="string">"抱歉! 未找到节点对象"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除二叉树节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remvoeNode</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">// 如果只有一个root对象节点,这时因该立即判断root是不是要删除的节点,否则调用方法,进行递归删除</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.root.getId() == id) {</span><br><span class="line">                <span class="keyword">this</span>.root = <span class="keyword">null</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">this</span>.root.removeNode(id);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"抱歉! 这是空树,无法删除"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建节点对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> HeroNode left; <span class="comment">// 左节点对象</span></span><br><span class="line">    <span class="keyword">private</span> HeroNode right; <span class="comment">// 右节点对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLeft</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(HeroNode left)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getRight</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(HeroNode right)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNode{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历(递归)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 输出当前节点</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.left.preOrder();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.right.preOrder();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历(递归)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.left.infixOrder();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 输出当前节点</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.right.infixOrder();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后续遍历(递归)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.left.postOrder();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.right.postOrder();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 输出当前节点</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 查找的对象id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到返回HeroNode对象, 否则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">preOrderSearch</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="comment">// 判断当前节点(每次调用对象不同,this的指向也不同)是不是,若相等,则返回对象</span></span><br><span class="line">        System.out.println(<span class="string">"前序查找次数..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.id == id) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 判断当前节点的左子节点是否为空,不为空,则递归前序查找</span></span><br><span class="line">        <span class="comment">// 如果找到,则返回节点对象</span></span><br><span class="line">        HeroNode resultNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            resultNode = <span class="keyword">this</span>.left.preOrderSearch(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果临时节点对象不为空,说明找到,直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (resultNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> resultNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 向右递归前序查找</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            resultNode = <span class="keyword">this</span>.right.preOrderSearch(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 最终查找结束:无论是否找到,都要返回节点对象</span></span><br><span class="line">        <span class="keyword">return</span> resultNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">infixOrderSearch</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        HeroNode resultNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            resultNode = <span class="keyword">this</span>.left.infixOrderSearch(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (resultNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> resultNode;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"中序查找次数..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.id == id) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            resultNode = <span class="keyword">this</span>.right.infixOrderSearch(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> resultNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">postOrderSearch</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        HeroNode resultNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            resultNode = <span class="keyword">this</span>.left.postOrderSearch(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (resultNode != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> resultNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            resultNode = <span class="keyword">this</span>.right.postOrderSearch(id);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"后序查找次数..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.id == id) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> resultNode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 节点对象id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="comment">// 如果当前节点的左子节点不为空,并且就是要删除的节点,将将this.left=null,并且立即返回</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.left.id == id) {</span><br><span class="line">            <span class="keyword">this</span>.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果当前节点的右子节点不为空,并且就是要删除的节点,将将this.right=null,并且立即返回</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.right.id == id) {</span><br><span class="line">            <span class="keyword">this</span>.right = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果上面没有找到要删除的节点,就向左子树进行递归删除</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.left.removeNode(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 向右边递归删除</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">this</span>.right.removeNode(id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：分析各种方式的查找次数</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">=====前序遍历=====</span><br><span class="line">HeroNode{id=1, name='宋江'}</span><br><span class="line">HeroNode{id=2, name='吴用'}</span><br><span class="line">HeroNode{id=6, name='武松'}</span><br><span class="line">HeroNode{id=3, name='卢俊义'}</span><br><span class="line">HeroNode{id=5, name='杨旭虎'}</span><br><span class="line">HeroNode{id=4, name='林冲'}</span><br><span class="line">=====中序遍历=====</span><br><span class="line">HeroNode{id=2, name='吴用'}</span><br><span class="line">HeroNode{id=6, name='武松'}</span><br><span class="line">HeroNode{id=1, name='宋江'}</span><br><span class="line">HeroNode{id=5, name='杨旭虎'}</span><br><span class="line">HeroNode{id=3, name='卢俊义'}</span><br><span class="line">HeroNode{id=4, name='林冲'}</span><br><span class="line">=====后序遍历=====</span><br><span class="line">HeroNode{id=6, name='武松'}</span><br><span class="line">HeroNode{id=2, name='吴用'}</span><br><span class="line">HeroNode{id=5, name='杨旭虎'}</span><br><span class="line">HeroNode{id=4, name='林冲'}</span><br><span class="line">HeroNode{id=3, name='卢俊义'}</span><br><span class="line">HeroNode{id=1, name='宋江'}</span><br><span class="line">=====前序遍历查找=====</span><br><span class="line">前序查找次数...</span><br><span class="line">前序查找次数...</span><br><span class="line">找到节点对象==&gt;HeroNode{id=2, name='吴用'}</span><br><span class="line">=====中序遍历查找=====</span><br><span class="line">中序查找次数...</span><br><span class="line">找到节点对象==&gt;HeroNode{id=2, name='吴用'}</span><br><span class="line">=====后序遍历查找=====</span><br><span class="line">后序查找次数...</span><br><span class="line">后序查找次数...</span><br><span class="line">找到节点对象==&gt;HeroNode{id=2, name='吴用'}</span><br><span class="line">=====删除指定节点=====</span><br><span class="line">删除前===&gt;</span><br><span class="line">HeroNode{id=1, name='宋江'}</span><br><span class="line">HeroNode{id=2, name='吴用'}</span><br><span class="line">HeroNode{id=6, name='武松'}</span><br><span class="line">HeroNode{id=3, name='卢俊义'}</span><br><span class="line">HeroNode{id=5, name='杨旭虎'}</span><br><span class="line">HeroNode{id=4, name='林冲'}</span><br><span class="line">删除后===&gt;</span><br><span class="line">HeroNode{id=1, name='宋江'}</span><br><span class="line">HeroNode{id=2, name='吴用'}</span><br><span class="line">HeroNode{id=6, name='武松'}</span><br><span class="line">HeroNode{id=3, name='卢俊义'}</span><br><span class="line">HeroNode{id=4, name='林冲'}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-顺序存储二叉树"><a href="#2-顺序存储二叉树" class="headerlink" title="2. 顺序存储二叉树"></a>2. 顺序存储二叉树</h4><blockquote>
<p><strong>实际应用：堆排序</strong></p>
<p>特点：</p>
<ul>
<li>元素排列的顺序和数组array的排列顺序相同</li>
<li>通常只考虑完全二叉树</li>
<li>下标为n的元素的左子节点的下标为 2*n+1</li>
<li>下标为n的元素的右子节点的下标为 2*n+2</li>
<li>下标为n的元素的父节点的下标为 (n-1)/2</li>
</ul>
<p><strong>注意：n：表示二叉树中的的第几个元素（元素下标），按照0开始编号，和数组的元素下标编号相同</strong></p>
</blockquote>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">a(n==0 node1) --&gt;b(n==1 左node2)</span><br><span class="line">a(n==0 node1) --&gt;c(n==2 右node3)</span><br><span class="line">b(n==1 左node2) --&gt;d(n==3 左node4)</span><br><span class="line">b(n==1 左node2) --&gt;e(n==4 右node5)</span><br><span class="line">c(n==2 右node3) --&gt;f(n==5 左node6)</span><br><span class="line">c(n==2 右node3) --&gt;g(n==6 右node7)</span><br><span class="line">h[顺序存储二叉树]</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>上图的顺序存储二叉树的元素存储顺序就相当于array数组</p>
<p>array = [“node1”, “node2”, “node3”, “node4”, “node5”, “node6”, “node7”]</p>
</blockquote>
<p>实现：以遍历二叉树的方式实现array数组元素的输出</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTreeDemo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 创建一个数组</span></span><br><span class="line">        String[] array = <span class="keyword">new</span> String[]{<span class="string">"node1"</span>, <span class="string">"node2"</span>, <span class="string">"node3"</span>, <span class="string">"node4"</span>, <span class="string">"node5"</span>, <span class="string">"node6"</span>, <span class="string">"node7"</span>};</span><br><span class="line"></span><br><span class="line">        ArrayBinaryTree binaryTree = <span class="keyword">new</span> ArrayBinaryTree(array);</span><br><span class="line">        System.out.println(<span class="string">"=====前序遍历====="</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">        System.out.println(<span class="string">"\n=====中序遍历====="</span>);</span><br><span class="line">        binaryTree.infixOrder();</span><br><span class="line">        System.out.println(<span class="string">"\n=====后序遍历====="</span>);</span><br><span class="line">        binaryTree.postOrder();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayBinaryTree</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBinaryTree</span><span class="params">(String[] array)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历方法重载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.preOrder(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组的前序遍历(顺序存储二叉树)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 开始的数组下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"数组为空,无法按照顺序存储二叉树进行遍历"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 输出当前节点元素</span></span><br><span class="line">        System.out.print(array[index] + <span class="string">"\t"</span>);</span><br><span class="line">        <span class="comment">// 如果当前节点的左子节点下标不越界,则输出</span></span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; array.length) {</span><br><span class="line">            <span class="keyword">this</span>.preOrder(index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果当前节点的右子节点下标不越界,则输出</span></span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; array.length) {</span><br><span class="line">            <span class="keyword">this</span>.preOrder(index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.infixOrder(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infixOrder</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"数组为空,无法按照顺序存储二叉树进行遍历"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; array.length) {</span><br><span class="line">            <span class="keyword">this</span>.infixOrder(index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.print(array[index] + <span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; array.length) {</span><br><span class="line">            <span class="keyword">this</span>.infixOrder(index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.postOrder(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"数组为空,无法按照顺序存储二叉树进行遍历"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">1</span>) &lt; array.length) {</span><br><span class="line">            <span class="keyword">this</span>.postOrder(index * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> ((index * <span class="number">2</span> + <span class="number">2</span>) &lt; array.length) {</span><br><span class="line">            <span class="keyword">this</span>.postOrder(index * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.print(array[index] + <span class="string">"\t"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">=====前序遍历=====</span><br><span class="line">node1	node2	node4	node5	node3	node6	node7	</span><br><span class="line">=====中序遍历=====</span><br><span class="line">node4	node2	node5	node1	node6	node3	node7	</span><br><span class="line">=====后序遍历=====</span><br><span class="line">node4	node5	node2	node6	node7	node3	node1</span><br></pre></td></tr></tbody></table></figure>
<p>这玩意后面太他妈难了<span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>…</p>
<h3 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a><code>常用排序算法</code></h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213317.png" alt="冒泡排序"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个需要排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) {</span><br><span class="line">            array[i] = random.nextInt(<span class="number">8000000</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        bubbleSort(array);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"80000个数据耗时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>{</span><br><span class="line">        <span class="comment">//冒泡排序:每一趟排序都确定一个最大的放到最后（也就是冒泡到最上面）</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//在第n趟排序过程中是否有过任意一次交换（也就是如果在一趟排序中没有进行过交换，那么证明排序已经完成，后面的若干趟的排序操作不需要再进行了）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) {</span><br><span class="line">                    <span class="comment">//如果进行过交换，就置为true</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">int</span> temp = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//如果没有交换，那么就直接退出大循环</span></span><br><span class="line">            <span class="keyword">if</span> (!flag) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213321.png" alt="冒泡排序"></p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213324.png" alt="选择排序"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//定义一个需要排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) {</span><br><span class="line">            array[i] = random.nextInt(<span class="number">8000000</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        exchangeSort(array);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"80000个数据耗时："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换排序：每一次都找到较小的数放在最前面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exchangeSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">int</span> min = array[i];</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) {</span><br><span class="line">                <span class="keyword">if</span> (min &gt; array[j]) {</span><br><span class="line">                    min = array[j];</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//如果最小值的下标和当前大循环的索引i不相等时，将最小值赋值给array[i]</span></span><br><span class="line">            <span class="keyword">if</span> (minIndex != i) {</span><br><span class="line">                array[minIndex] = array[i];</span><br><span class="line">                array[i] = min;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213327.png" alt="交换排序"></p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200604154503674.png" alt="插入排序"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">            <span class="comment">//首先将待插入的数暂时保存（也就是每次要进行插入的数）</span></span><br><span class="line">            <span class="keyword">int</span> insertVal = array[i];</span><br><span class="line">            <span class="comment">//定义待插入数前面这个数的下标</span></span><br><span class="line">            <span class="keyword">int</span> insertIndex = i - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//insertIndex &gt;= 0:保证在给insertval找插入位置时，下标不越界</span></span><br><span class="line">            <span class="comment">//insertVal &lt; array[insertIndex]:说明还未找到插入位置</span></span><br><span class="line">            <span class="comment">//注意：（当条件改为：insertVal &gt; array[insertIndex]时，是从大到小排序的）</span></span><br><span class="line">            <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; array[insertIndex]) {</span><br><span class="line">                <span class="comment">//依次将前面排好序的进行后移一位，知道不满足循环条件</span></span><br><span class="line">                array[insertIndex + <span class="number">1</span>] = array[insertIndex];</span><br><span class="line">                insertIndex--;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//退出while后，说明已找到插入位置，直接进行值的插入</span></span><br><span class="line">            array[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213333.png" alt="插入排序"></p>
<h4 id="希尔排序-不太明白-但效率极高"><a href="#希尔排序-不太明白-但效率极高" class="headerlink" title="希尔排序(不太明白,但效率极高)"></a>希尔排序(不太明白,但效率极高)</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213336.png" alt="希尔排序"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序--移位法（也就是利用插入排序的思想）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSortInsert</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>{</span><br><span class="line">        <span class="comment">//希尔排序分组的除数固定值为2</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> divisor = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> step = array.length / divisor; step &gt; <span class="number">0</span>; step /= divisor) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; array.length; i++) {</span><br><span class="line">                <span class="keyword">int</span> insertIndex = i;</span><br><span class="line">                <span class="keyword">int</span> insertTemp = array[insertIndex];</span><br><span class="line">                <span class="keyword">if</span> (array[insertIndex] &lt; array[insertIndex - step]) {</span><br><span class="line">                    <span class="keyword">while</span> (insertIndex - step &gt;= <span class="number">0</span> &amp;&amp; insertTemp &lt; array[insertIndex - step]) {</span><br><span class="line">                        array[insertIndex] = array[insertIndex - step];</span><br><span class="line">                        insertIndex -= step;</span><br><span class="line">                    }</span><br><span class="line">                    array[insertIndex] = insertTemp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200604164824547.png" alt="希尔排序"></p>
<h4 id="归并排序（递归思想，效率极高）"><a href="#归并排序（递归思想，效率极高）" class="headerlink" title="归并排序（递归思想，效率极高）"></a>归并排序（递归思想，效率极高）</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213354.png" alt="归并排序"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序--分解和合并的完整结合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) {</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//向左递归分解</span></span><br><span class="line">            MergeSort(array, left, mid, temp);</span><br><span class="line">            <span class="comment">//向右递归分解</span></span><br><span class="line">            MergeSort(array, mid + <span class="number">1</span>, right, temp);</span><br><span class="line">            <span class="comment">//合并</span></span><br><span class="line">            merge(array, left, mid, right, temp);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序--合并的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 原始数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边有序序列的初始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid 中间索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边有序序列的最后索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp 辅助数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> rightInitialIndex = mid + <span class="number">1</span>; <span class="comment">//右边有序序列的初始索引</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">//指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先把左右两边的有序序列按照规则填充到temp数组中</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; rightInitialIndex &lt;= right) {</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt;= array[rightInitialIndex]) {</span><br><span class="line">                temp[t] = array[i];</span><br><span class="line">                t++;</span><br><span class="line">                i++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                temp[t] = array[rightInitialIndex];</span><br><span class="line">                t++;</span><br><span class="line">                rightInitialIndex++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//2.把所有某一边所有剩余的数据一次全部填充到temp中</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) {</span><br><span class="line">            temp[t] = array[i];</span><br><span class="line">            t++;</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (rightInitialIndex &lt;= right) {</span><br><span class="line">            temp[t] = array[rightInitialIndex];</span><br><span class="line">            t++;</span><br><span class="line">            rightInitialIndex++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//3.将当前temp数组中的元素拷贝到array中去</span></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftTemp = left;</span><br><span class="line">        <span class="keyword">while</span> (leftTemp &lt;= right) {</span><br><span class="line">            array[leftTemp] = temp[t];</span><br><span class="line">            leftTemp++;</span><br><span class="line">            t++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213406.png" alt="归并排序"></p>
<h4 id="基数排序（效率较高，数据量达到千万级别会发生内存爆炸）"><a href="#基数排序（效率较高，数据量达到千万级别会发生内存爆炸）" class="headerlink" title="基数排序（效率较高，数据量达到千万级别会发生内存爆炸）"></a>基数排序（效率较高，数据量达到千万级别会发生内存爆炸）</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213409.png" alt="基数排序"></p>
<p><img src="C:\Users\马滨\Desktop\typoraImages/image-20200604191532566.png" alt="基数排序"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (max &lt; array[i]) {</span><br><span class="line">            max = array[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//巧妙的利用字符串的长度代替最大值的位数</span></span><br><span class="line">    <span class="keyword">int</span> arrayMaxLength = (max + <span class="string">""</span>).length();</span><br><span class="line">    <span class="comment">//基数排序</span></span><br><span class="line">    <span class="comment">//固定：定义10个桶，每个桶的容量是数组的最大值（以空间换时间）</span></span><br><span class="line">    <span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][array.length];</span><br><span class="line">    <span class="comment">//定义一个数组：用于统计每个桶中放入元素的数量，桶中各个元素默认值是0</span></span><br><span class="line">    <span class="keyword">int</span>[] bucketElementsCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">1</span>; i &lt; arrayMaxLength; i++, n *= <span class="number">10</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : array) {</span><br><span class="line">            <span class="comment">//获取每个元素对应位的值</span></span><br><span class="line">            <span class="keyword">int</span> digitOfElement = value / n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//放入对应的桶中</span></span><br><span class="line">            <span class="comment">//bucketElementsCount[digitOfElement]++：统计数量的，默认值为0，在这里就把他理解成统计对应桶中元素数量的索引</span></span><br><span class="line">            bucket[digitOfElement][bucketElementsCount[digitOfElement]++] = value;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//取出数据放入原数组中</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历每一个桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; bucket.length; k++) {</span><br><span class="line">            <span class="keyword">if</span> (bucketElementsCount[k] &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; bucketElementsCount[k]; m++) {</span><br><span class="line">                    array[index++] = bucket[k][m];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//注意：第一轮处理后，需要将每个桶中统计的数量bucketElementsCount[k]置为0</span></span><br><span class="line">            bucketElementsCount[k] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213413.png" alt="基数排序"></p>
<h3 id="经典查找算法"><a href="#经典查找算法" class="headerlink" title="经典查找算法"></a><code>经典查找算法</code></h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213415.png" alt="二分查找"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">//测试程序，不必在意！！！</span></span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) {</span><br><span class="line">            array[i] = random.nextInt(<span class="number">8000000</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//自定义一个数组到随机生成的数组中：测试查找速度</span></span><br><span class="line">        array[<span class="number">6666</span>] = <span class="number">999999</span>;</span><br><span class="line">        array[<span class="number">7777</span>] = <span class="number">999999</span>;</span><br><span class="line">        array[<span class="number">55786</span>] = <span class="number">999999</span>;</span><br><span class="line"></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort();</span><br><span class="line">        sort.bucketSort(array);</span><br><span class="line">        List&lt;Integer&gt; indexList = binarySearchSame(array, <span class="number">0</span>, array.length - <span class="number">1</span>, <span class="number">999999</span>);</span><br><span class="line">        <span class="keyword">if</span> (indexList != <span class="keyword">null</span>) {</span><br><span class="line">            indexList.forEach(System.out::println);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"未找到"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分查找：原始数组必须是一个有序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 原始数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到返回下标，否则返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>{</span><br><span class="line">        <span class="comment">//当left &gt; right时：说明递归完真个数组，没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//进行递归查找</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> midVal = array[mid];</span><br><span class="line">        <span class="keyword">if</span> (findVal &lt; midVal) {</span><br><span class="line">            <span class="comment">//向左边递归查找</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch(array, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (findVal &gt; midVal) {</span><br><span class="line">            <span class="comment">//向右递归查找</span></span><br><span class="line">            <span class="keyword">return</span> binarySearch(array, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//如果刚好等于midVal,运气足够好，直接返回下标即可</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分查找：查找有序数组中所有符合findVal的值，并返回下标集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 找到返回下标集合，否则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">binarySearchSame</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>{</span><br><span class="line">        <span class="comment">//当left &gt; right时：说明递归完真个数组，没有找到</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//进行递归查找</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> midVal = array[mid];</span><br><span class="line">        <span class="keyword">if</span> (findVal &lt; midVal) {</span><br><span class="line">            <span class="comment">//向左边递归查找</span></span><br><span class="line">            <span class="keyword">return</span> binarySearchSame(array, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (findVal &gt; midVal) {</span><br><span class="line">            <span class="comment">//向右递归查找</span></span><br><span class="line">            <span class="keyword">return</span> binarySearchSame(array, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//在找到mid索引值后，不要立即返回，</span></span><br><span class="line">            <span class="comment">//应该向左或者向右继续扫描查找findVal，知道将数组中所有的findVal查找完毕并返回下标集合</span></span><br><span class="line">            List&lt;Integer&gt; indexList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//向左扫描</span></span><br><span class="line">            <span class="keyword">int</span> tempIndex = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (tempIndex &gt;= <span class="number">0</span> &amp;&amp; array[tempIndex] == findVal) {</span><br><span class="line">                indexList.add(tempIndex--);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//向右扫描</span></span><br><span class="line">            tempIndex = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (tempIndex &lt;= array.length - <span class="number">1</span> &amp;&amp; array[tempIndex] == findVal) {</span><br><span class="line">                indexList.add(tempIndex++);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//注意：加上第一个找到的值的索引mid</span></span><br><span class="line">            indexList.add(mid);</span><br><span class="line">            <span class="keyword">return</span> indexList;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h4><p>使用场景：</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213421.png" alt="插值查找"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213442.png" alt="插值查找"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插值查找：求mid的公式（固定的自适应公式）和二分查找的mid求法不一样，除此之外，基本一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">insertValueSearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>{</span><br><span class="line">        <span class="comment">//当left &gt; right时：说明递归完真个数组，没有找到</span></span><br><span class="line">        <span class="comment">//或者要查找的值小于有序数组中的最小值||大于最大值，也是无法找到的，可以直接终止返回</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right || findVal &lt; array[<span class="number">0</span>] || findVal &gt; array[array.length - <span class="number">1</span>]) {</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//固定公式：求mid</span></span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) * (findVal - array[left]) / (array[right] - array[left]);</span><br><span class="line">        <span class="keyword">int</span> midVal = array[mid];</span><br><span class="line">        <span class="keyword">if</span> (findVal &lt; midVal) {</span><br><span class="line">            <span class="keyword">return</span> insertValueSearch(array, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (findVal &gt; midVal) {</span><br><span class="line">            <span class="keyword">return</span> insertValueSearch(array, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="斐波那契（黄金分割法）查找-（难以理解，代码放在这）"><a href="#斐波那契（黄金分割法）查找-（难以理解，代码放在这）" class="headerlink" title="斐波那契（黄金分割法）查找==（难以理解，代码放在这）"></a>斐波那契（黄金分割法）查找==（难以理解，代码放在这）</h4><p>直接上代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契查找</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 要查找的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibSearch</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hight = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">//表示斐波那契分割数值的下标</span></span><br><span class="line">    <span class="keyword">int</span> mid; <span class="comment">//存放mid的值</span></span><br><span class="line">    <span class="keyword">int</span>[] f = fib(); <span class="comment">//获取斐波那契数列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取斐波那契分割数值的下标</span></span><br><span class="line">    <span class="keyword">while</span> (hight &gt; f[k] - <span class="number">1</span>) {</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span>[] temp = Arrays.copyOf(array, f[k]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = hight + <span class="number">1</span>; i &lt; temp.length; i++) {</span><br><span class="line">        temp[i] = array[hight];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//开始查找</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= hight) {</span><br><span class="line">        mid = low + f[k - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; temp[mid]) {</span><br><span class="line">            hight = mid - <span class="number">1</span>;</span><br><span class="line">            k--;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) {</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (mid &lt; hight) {</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> hight;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//循环结束未找到，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回斐波那契数列 maxSize的大小视情况而定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] fib() {</span><br><span class="line">    <span class="keyword">int</span>[] fibArray = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">    fibArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    fibArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; fibArray.length; i++) {</span><br><span class="line">        fibArray[i] = fibArray[i - <span class="number">1</span>] + fibArray[i - <span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> fibArray;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a><code>哈希表</code></h3><p><strong>功能：</strong>在一定程度上可以做缓存使用，相当于简单的redis的作用</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213447.png" alt="哈希表应用实例"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        HashTab hashTab = <span class="keyword">new</span> HashTab(<span class="number">7</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            System.out.println(<span class="string">"add: 添加员工"</span>);</span><br><span class="line">            System.out.println(<span class="string">"find: 查找员工"</span>);</span><br><span class="line">            System.out.println(<span class="string">"list: 显示员工"</span>);</span><br><span class="line">            System.out.println(<span class="string">"exit: 退出系统"</span>);</span><br><span class="line">            <span class="keyword">switch</span> (scanner.next()) {</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入员工id"</span>);</span><br><span class="line">                    <span class="keyword">int</span> id = scanner.nextInt();</span><br><span class="line">                    System.out.println(<span class="string">"请输入员工姓名"</span>);</span><br><span class="line">                    String name = scanner.next();</span><br><span class="line">                    Emp emp = <span class="keyword">new</span> Emp(id, name);</span><br><span class="line">                    hashTab.add(emp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"find"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入员工id"</span>);</span><br><span class="line">                    <span class="keyword">int</span> findId = scanner.nextInt();</span><br><span class="line">                    hashTab.findEmpById(findId);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"list"</span>:</span><br><span class="line">                    hashTab.list();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HashTab：管理多条链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTab</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashTab</span><span class="params">(<span class="keyword">int</span> size)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.empLinkedListArray = <span class="keyword">new</span> EmpLinkedList[size];</span><br><span class="line">        <span class="comment">//分别初始化每一条链表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            empLinkedListArray[i] = <span class="keyword">new</span> EmpLinkedList();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写:散列函数规则(取模法)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashFun</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id % <span class="keyword">this</span>.size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>{</span><br><span class="line">        <span class="comment">//根据员工id，确定该员工应该添加到那条链表</span></span><br><span class="line">        <span class="keyword">int</span> empLinkedListNum = <span class="keyword">this</span>.hashFun(emp.id);</span><br><span class="line">        <span class="comment">//调用链表的方法：将emp添加到哈希表中对应的链表中去</span></span><br><span class="line">        empLinkedListArray[empLinkedListNum].add(emp);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历哈希表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.size; i++) {</span><br><span class="line">            empLinkedListArray[i].list(i + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查找员工信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="comment">//使用散列函数：确定到那条链表查找信息</span></span><br><span class="line">        <span class="keyword">int</span> empLinkedListNum = hashFun(id);</span><br><span class="line">        Emp emp = empLinkedListArray[empLinkedListNum].findEmpById(id);</span><br><span class="line">        <span class="keyword">if</span> (emp != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"在第%d条链表中找到id=%d的员工\n"</span>, (empLinkedListNum + <span class="number">1</span>), emp.id);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"哈希表中不存在该员工信息！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Emp next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Emp{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示一条链表：无头结点的链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmpLinkedList</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//head:并不是空的头节点，而是直接指向第一个Emp对象</span></span><br><span class="line">    <span class="keyword">private</span> Emp head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加员工</span></span><br><span class="line">    <span class="comment">//假定：id自增长，我们添加员工的时候，只需要直接加载链表的最后一个即可，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>{</span><br><span class="line">        <span class="comment">//添加第一个员工</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">            head = emp;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果不是第一个员工</span></span><br><span class="line">        Emp currentEmp = head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (currentEmp.next == <span class="keyword">null</span>) {</span><br><span class="line">                currentEmp.next = emp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            currentEmp = currentEmp.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历员工链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> no)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.printf(<span class="string">"第%d条链表为空！\n"</span>, no);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        System.out.printf(<span class="string">"第%d条链表信息如下：\n"</span>, no);</span><br><span class="line">        Emp currentEmp = head;</span><br><span class="line">        <span class="keyword">while</span> (currentEmp != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.print(<span class="string">"===&gt;"</span> + currentEmp);</span><br><span class="line">            currentEmp = currentEmp.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查找员工信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(<span class="string">"链表为空！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        Emp currentEmp = head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (currentEmp.id == id) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (currentEmp.next == <span class="keyword">null</span>) {</span><br><span class="line">                currentEmp = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            currentEmp = currentEmp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> currentEmp;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a><code>动态规划</code></h3><p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213459.png" alt="image-20200606102951102"></p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213503.png" alt="image-20200606103004777"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProgramming</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] weight = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>};   <span class="comment">//商品的重量</span></span><br><span class="line">        <span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span>, <span class="number">3200</span>}; <span class="comment">//商品对应的价格</span></span><br><span class="line">        <span class="keyword">int</span> packageSize = <span class="number">5</span>; <span class="comment">//背包容量</span></span><br><span class="line">        <span class="keyword">int</span> goodsCount = value.length; <span class="comment">//商品个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//totalValue[i][j]:表示在前i个商品中能够装入容量为j的背包中的最大价值</span></span><br><span class="line">        <span class="keyword">int</span>[][] totalValue = <span class="keyword">new</span> <span class="keyword">int</span>[goodsCount + <span class="number">1</span>][packageSize + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//用于打印商品路径</span></span><br><span class="line">        <span class="keyword">int</span>[][] path = <span class="keyword">new</span> <span class="keyword">int</span>[goodsCount + <span class="number">1</span>][packageSize + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化第一行和第一列：全部置为0：也可以不进行处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalValue.length; i++) {</span><br><span class="line">            totalValue[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; totalValue[<span class="number">0</span>].length; j++) {</span><br><span class="line">            totalValue[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态规划处理:因为第一行和第一列都已经置为0，所以从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; totalValue.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; totalValue[<span class="number">0</span>].length; j++) {</span><br><span class="line">                <span class="keyword">if</span> (weight[i - <span class="number">1</span>] &gt; j) {</span><br><span class="line">                    totalValue[i][j] = totalValue[i - <span class="number">1</span>][j];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (totalValue[i - <span class="number">1</span>][j] &lt; value[i - <span class="number">1</span>] + totalValue[i - <span class="number">1</span>][j - weight[i - <span class="number">1</span>]]) {</span><br><span class="line">                        totalValue[i][j] = value[i - <span class="number">1</span>] + totalValue[i - <span class="number">1</span>][j - weight[i - <span class="number">1</span>]];</span><br><span class="line">                        path[i][j] = <span class="number">1</span>;</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        totalValue[i][j] = totalValue[i - <span class="number">1</span>][j];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出动态规划表</span></span><br><span class="line">        System.out.println(<span class="string">"==================动态规划表=================="</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : totalValue) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) {</span><br><span class="line">                System.out.printf(<span class="string">"%d\t"</span>, anInt);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"==================商品来源路径================="</span>);</span><br><span class="line">        <span class="keyword">int</span> i = path.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = path[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (path[i][j] == <span class="number">1</span>) {</span><br><span class="line">                System.out.printf(<span class="string">"第%d个商品价值%d放入背包\n"</span>, i, value[i - <span class="number">1</span>]);</span><br><span class="line">                j -= weight[i - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            i--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213510.png" alt="image-20200606103055500"></p>
<h2 id="SpringCloud微服务（谷粒学院）"><a href="#SpringCloud微服务（谷粒学院）" class="headerlink" title="SpringCloud微服务（谷粒学院）"></a>SpringCloud微服务（谷粒学院）</h2><h3 id="1-定义返回json的全局时间格式（jackson）"><a href="#1-定义返回json的全局时间格式（jackson）" class="headerlink" title="1.定义返回json的全局时间格式（jackson）"></a>1.定义返回json的全局时间格式（jackson）</h3><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注意：在字段上面定义json返回类型，可以覆盖全局配置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ApiModelProperty(value = "入驻时间")</span></span><br><span class="line">   <span class="meta">@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd")</span></span><br><span class="line">   <span class="keyword">private</span> Date joinDate;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果是null 和 “” 不返回</span></span><br><span class="line">   <span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line">   <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果null不返回</span></span><br><span class="line">   <span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line">   <span class="keyword">private</span> T data;</span><br></pre></td></tr></tbody></table></figure>
<p>复杂数据类型的转换</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference; <span class="comment">// 注意：引入正确的依赖</span></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;	</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">md6Test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>{</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"小明"</span>);</span><br><span class="line">        list.add(<span class="string">"小白"</span>);</span><br><span class="line">        list.add(<span class="string">"大白"</span>);</span><br><span class="line">        list.add(<span class="string">"刺客"</span>);</span><br><span class="line">        list.add(<span class="string">"伍六七"</span>);</span><br><span class="line">        <span class="comment">// 创建mapper对象:所有操作都基于此</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// list集合转json字符串</span></span><br><span class="line">        String jsonList = mapper.writeValueAsString(list);</span><br><span class="line">        System.out.println((<span class="string">"jsonList:"</span> + jsonList));</span><br><span class="line">        <span class="comment">// json的list集合字符串转list集合对象</span></span><br><span class="line">        List&lt;String&gt; listObject = mapper.readValue(jsonList, <span class="keyword">new</span> TypeReference&lt;&gt;() {</span><br><span class="line">        });</span><br><span class="line">        listObject.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">"南帝"</span>, <span class="string">"大理段王爷"</span>);</span><br><span class="line">        map.put(<span class="string">"北丐"</span>, <span class="string">"丐帮洪七公"</span>);</span><br><span class="line">        map.put(<span class="string">"东邪"</span>, <span class="string">"桃花岛黄老邪"</span>);</span><br><span class="line">        map.put(<span class="string">"西毒"</span>, <span class="string">"欧阳锋"</span>);</span><br><span class="line">        map.put(<span class="string">"中神通"</span>, <span class="string">"武当周伯通"</span>);</span><br><span class="line">        <span class="comment">// map转json</span></span><br><span class="line">        String jsonMap = mapper.writeValueAsString(map);</span><br><span class="line">        System.out.println(<span class="string">"jsonMap:"</span> + jsonMap);</span><br><span class="line">        <span class="comment">// json转map</span></span><br><span class="line">        Map&lt;String, Object&gt; mapObject = mapper.readValue(jsonMap, <span class="keyword">new</span> TypeReference&lt;&gt;() {</span><br><span class="line">        });</span><br><span class="line">        mapObject.forEach((key, value) -&gt; System.out.println(key + <span class="string">"==&gt;"</span> + value));</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-logback-spring-xml文件的基本配置（高级版）"><a href="#2-logback-spring-xml文件的基本配置（高级版）" class="headerlink" title="2.logback-spring.xml文件的基本配置（高级版）"></a>2.logback-spring.xml文件的基本配置（高级版）</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义：日志输出路径(绝对路径)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"F:/HorseSchool/service/service_edu/src/log"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台日志格式：彩色日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件日志格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%date{yyyy-MM-dd HH:mm:ss} |%-5level |%thread |%file:%line |%logger |%msg%n"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ENCODING"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--自定义：日志级别--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>${CONSOLE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志字符集--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志过滤器：此日志文件只记录INFO级别的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${FILE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志过滤器：此日志文件只记录WARN级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${FILE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志过滤器：此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${log.path}/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>${FILE_LOG_PATTERN}<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>${ENCODING}<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以灵活设置此处，从而控制日志的输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-阿里巴巴Sentinel-openFeign熔断保护"><a href="#3-阿里巴巴Sentinel-openFeign熔断保护" class="headerlink" title="3.阿里巴巴Sentinel+openFeign熔断保护"></a>3.阿里巴巴Sentinel+openFeign熔断保护</h3><blockquote>
<p>openFeign微服务的整合具体查看乐优商城部分笔记</p>
</blockquote>
<p>在服务模块中引入pom（父工程控制版本）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel：服务容错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置Sentinel的可视化监控界面</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#sentinel服务容错监控</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8081</span> <span class="comment">#跟控制台交流的端口，随意指定一个未使用的端口即可</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment"># 指定控制台服务的地址</span></span><br></pre></td></tr></tbody></table></figure>
<p>打开官方的jar的包（默认打开8080端口，一定要避免端口冲突）</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213519.png" alt="sentinel监控"></p>
<p>然后在浏览器输入：localhost:8080即可登录可视化界面（用户名和密码都是：sentinel）</p>
<p><img src="https://gitee.com/milubin/horse_second_images/raw/master/img/20210506213522.png" alt="image-20200808204138470"></p>
<p>登录即可进行具体配置（一定要使用接口，才能在界面上面看到并监控）</p>
<p>配置Sentinel的简单熔断保护</p>
<p>整合的feign远程调用接口(大家懂的…)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoveFileApi</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云：根据文件URL删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/admin/oss/file/remove")</span></span><br><span class="line">    <span class="function">R <span class="title">remove</span><span class="params">(<span class="meta">@RequestBody</span> String url)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>fallback = VodMediaServiceFallBack.class</p>
<p>含义：当远程调用服务出现错误异常的时候，这时就会触发熔断保护机制，使其他程序继续运行下去：调用OssFileServiceFallBack类中自定义输出结果，从而不会因为这个远程调用接口出现错误异常，而使真个程序的运行中断</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(name = "service-oss", fallback = OssFileServiceFallBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoveFileClient</span> <span class="keyword">extends</span> <span class="title">RemoveFileApi</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>简单整合Sentinel的熔断保护</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssFileServiceFallBack</span> <span class="keyword">implements</span> <span class="title">RemoveFileClient</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿里云：根据文件URL删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">remove</span><span class="params">(String url)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"远程服务异常===》开启本地服务熔断保护机制"</span>);</span><br><span class="line">        <span class="keyword">return</span> R.error().message(<span class="string">"服务调用超时"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Alibaba"><a href="#Alibaba" class="headerlink" title="Alibaba"></a>Alibaba</h2><blockquote>
<p>集合的自循环的add/remove时，一定要使用Iterator迭代器，不要使用forEach循环，否则会出现结果正确但报异常的情况</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 迭代器循环</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">            <span class="keyword">if</span> (iterator.next() == <span class="number">1</span>) {</span><br><span class="line">                iterator.remove();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">		<span class="comment">// ==========JDK8新特性============</span></span><br><span class="line">        <span class="comment">// 迭代器循环</span></span><br><span class="line">        list.removeIf(integer -&gt; integer == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误做法（结果正确，但是报异常）</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list) {</span><br><span class="line">            <span class="keyword">if</span> (integer == <span class="number">1</span>) {</span><br><span class="line">                list.remove(integer);</span><br><span class="line">            }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Stream流基础"><a href="#Stream流基础" class="headerlink" title="Stream流基础"></a>Stream流基础</h2><h3 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h3><p>list集合示例</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  list.add(<span class="string">"张三三"</span>);</span><br><span class="line">  list.add(<span class="string">"李四"</span>);</span><br><span class="line">  list.add(<span class="string">"王五"</span>);</span><br><span class="line">  list.add(<span class="string">"孙七"</span>);</span><br><span class="line">  list.add(<span class="string">"赵八"</span>);</span><br><span class="line">  list.add(<span class="string">"曹操"</span>);</span><br><span class="line">  list.add(<span class="string">"刘备"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote>
<p>返回符合过滤条件的值</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; tempList = list.stream()</span><br><span class="line">        .filter(e -&gt; e.contains(<span class="string">"张"</span>)) <span class="comment">// 过滤所有姓张的</span></span><br><span class="line">        .filter(e -&gt; e.length() == <span class="number">3</span>) <span class="comment">// 过滤所有姓名是3个字的</span></span><br><span class="line">        .collect(Collectors.toList()); <span class="comment">// 返回一个新的list集合</span></span><br><span class="line">tempList.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="limit-n"><a href="#limit-n" class="headerlink" title="limit(n)"></a>limit(n)</h4><blockquote>
<p>返回前n个元素数据值组成的Stream</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Set&lt;String&gt; tempSet = list.stream()</span><br><span class="line">    .limit(<span class="number">3</span>)</span><br><span class="line">    .collect(Collectors.toSet());</span><br><span class="line">tempSet.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="skip-n"><a href="#skip-n" class="headerlink" title="skip(n)"></a>skip(n)</h4><blockquote>
<p>跳过前n个元素的中间流操作，返回剩下的值(结合limit可以实现分页，但一般不会这么做！！！)</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Set&lt;String&gt; tempSet = list.stream()</span><br><span class="line">        .skip(<span class="number">3</span>)</span><br><span class="line">        .limit(<span class="number">2</span>)</span><br><span class="line">        .collect(Collectors.toSet());</span><br><span class="line">tempSet.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><blockquote>
<p>通过流中元素的 hashCode() 和 equals() 去除重复元素</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; tempList = list.stream()</span><br><span class="line">    .distinct()</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></tbody></table></figure>
<h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><blockquote>
<p>自然排序，流中元素需实现Comparable接口</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; tempList = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted()</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">tempList.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="sorted-Comparator-com"><a href="#sorted-Comparator-com" class="headerlink" title="sorted(Comparator com)"></a>sorted(Comparator com)</h4><blockquote>
<p>定制排序，自定义Comparator排序器(倒序)</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt; tempList = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted(<span class="keyword">new</span> Comparator&lt;String&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>{</span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            }</span><br><span class="line">        })  <span class="comment">// 实现自定义倒序排序</span></span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">tempList.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote>
<p>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; tempList = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .map(e-&gt;e.length()) <span class="comment">// 计算并返回每个元素的长度(注意返回的数据类型)</span></span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">tempList.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h4><blockquote>
<p>接收一个 Predicate 函数，当流中每个元素都符合该断言时才返回true，否则返回false</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> match = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .allMatch(e -&gt; e.length() &gt; <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"match:"</span> + match);</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>match:false</p>
</blockquote>
<h4 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h4><blockquote>
<p>接收一个 Predicate 函数，当流中每个元素都不符合该断言时才返回true，否则返回false</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> match = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .noneMatch(e -&gt; e.length() &gt; <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"match:"</span> + match);</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>match:true</p>
</blockquote>
<h4 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h4><blockquote>
<p>接收一个 Predicate 函数，只要流中有一个元素满足该断言则返回true，否则返回false</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> match = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .anyMatch(e -&gt; e.length() == <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"match:"</span> + match);</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>match:true</p>
</blockquote>
<h4 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h4><blockquote>
<p>返回流中第一个元素</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; first = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .findFirst();</span><br><span class="line">System.out.println(<span class="string">"first:"</span> + first);</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>first:Optional[张三三]</p>
</blockquote>
<h4 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h4><blockquote>
<p>返回流中的任意元素</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; first = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .findAny();</span><br><span class="line">System.out.println(<span class="string">"any:"</span> + any);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><blockquote>
<p>返回流中元素的总个数</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> count = list.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .count();</span><br><span class="line">System.out.println(<span class="string">"count:"</span> + count);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>reduce(T iden, BinaryOperator b)</td>
<td>给定初始值，可以将流中元素反复结合起来，得到一个值。返回 T</td>
</tr>
<tr>
<td>reduce(BinaryOperator b)</td>
<td>可以将流中元素反复结合起来，得到一个值。返回 Optional</td>
</tr>
</tbody>
</table>
</div>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// stream的 reduce归约操作</span></span><br><span class="line"><span class="comment">// 简单求和</span></span><br><span class="line">List&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">435</span>, <span class="number">6</span>, <span class="number">76</span>, <span class="number">234</span>));</span><br><span class="line"><span class="comment">// 未给定初始值的归约求和,返回一个 Optional 对象</span></span><br><span class="line">arrayList.stream().reduce(Integer::sum)</span><br><span class="line">        .ifPresent(integer -&gt; System.out.println(<span class="string">"&gt;&gt;&gt; 简单求和姿势1 - sum: "</span> + integer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定初始值0的归约求和</span></span><br><span class="line">Integer reduce = arrayList.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">System.out.println(<span class="string">"&gt;&gt;&gt; 简单求和姿势2 - sum: "</span> + reduce);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作对象某个字段</span></span><br><span class="line">ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User().setUsername(<span class="string">"aaa"</span>).setLoginCount(<span class="number">666L</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User().setUsername(<span class="string">"bbb"</span>).setLoginCount(<span class="number">888L</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User().setUsername(<span class="string">"ccc"</span>).setLoginCount(<span class="number">999L</span>));</span><br><span class="line"></span><br><span class="line">userList.stream().map(User::getLoginCount).reduce(Long::sum)</span><br><span class="line">        .ifPresent(loginCount -&gt; System.out.println(<span class="string">"&gt;&gt;&gt; 对象字段求和 - sum: "</span> + loginCount));</span><br></pre></td></tr></tbody></table></figure>
<h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><blockquote>
<p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例</p>
<p>注意：均是一些简单的操作，里借即可。</p>
</blockquote>
<h2 id="Jsoup爬虫基础"><a href="#Jsoup爬虫基础" class="headerlink" title="Jsoup爬虫基础"></a>Jsoup爬虫基础</h2><p>引入pom依赖</p>
<figure class="highlight xml"><figcaption><span>&lt;!--Jsoup--&gt;</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jsoup--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="爬取链接"><a href="#爬取链接" class="headerlink" title="爬取链接"></a>爬取链接</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup简单爬取网页图片链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    String url = <span class="string">"https://bing.lylares.com/"</span>;</span><br><span class="line">    <span class="comment">// 获取网页源代码</span></span><br><span class="line">    Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">60000</span>);</span><br><span class="line">    Elements elements = document.getElementsByClass(<span class="string">"media-content"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Element element : elements) {</span><br><span class="line">        <span class="comment">// 获取style属性中的内容</span></span><br><span class="line">        String style = element.attr(<span class="string">"style"</span>);</span><br><span class="line">        <span class="comment">// 分割得到目标字符串数据</span></span><br><span class="line">        String hrefBefore = style.split(<span class="string">"\\("</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (hrefBefore.contains(<span class="string">")"</span>)) {</span><br><span class="line">            String href = hrefBefore.substring(<span class="number">0</span>, hrefBefore.length() - <span class="number">1</span>);</span><br><span class="line">            System.out.println(href);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(hrefBefore);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="爬取图片"><a href="#爬取图片" class="headerlink" title="爬取图片"></a>爬取图片</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jsoup爬取摄图网图片(从第2页开始)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generateDate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String url = <span class="string">"https://699pic.com/photo-218808-0-new-all-0-all-all-"</span> + <span class="string">"%d"</span> + <span class="string">"-0-0-0-0-0-0-all-all"</span> + <span class="string">"%s"</span> +</span><br><span class="line">                <span class="string">".html"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">            String formatUrl = String.format(url, i, <span class="string">"-all"</span>);</span><br><span class="line">            System.out.println(formatUrl);</span><br><span class="line">            Document document = Jsoup.parse(<span class="keyword">new</span> URL(formatUrl), <span class="number">60000</span>);</span><br><span class="line">            <span class="comment">// 获取img标签内容</span></span><br><span class="line">            Elements elements = document.select(<span class="string">"img.lazy"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Element element : elements) {</span><br><span class="line">                <span class="comment">// 获取图片URL并添加安全协议</span></span><br><span class="line">                String imageUrl = <span class="string">"https:"</span> + element.attr(<span class="string">"data-original"</span>);</span><br><span class="line">                <span class="comment">// 创建一个连接对象</span></span><br><span class="line">                URL urlConn = <span class="keyword">new</span> URL(imageUrl);</span><br><span class="line">                <span class="comment">// 打开网址连接</span></span><br><span class="line">                URLConnection connection = urlConn.openConnection();</span><br><span class="line">                <span class="comment">// 获取数据中的数据流</span></span><br><span class="line">                InputStream inputStream = connection.getInputStream();</span><br><span class="line">                <span class="comment">// 获取图片名称(或者自己重命名)</span></span><br><span class="line">                String imageName = imageUrl.substring(imageUrl.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">                System.out.println(imageName);</span><br><span class="line">                <span class="comment">// 将数据流写入磁盘</span></span><br><span class="line">                OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"E:/image/"</span> + imageName));</span><br><span class="line">                <span class="comment">// 将输入流中的数据输出到输出流中</span></span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> count;</span><br><span class="line">                <span class="keyword">while</span> ((count = inputStream.read(b)) != -<span class="number">1</span>) {</span><br><span class="line">                    outputStream.write(b, <span class="number">0</span>, count);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Thread基础"><a href="#Thread基础" class="headerlink" title="Thread基础"></a>Thread基础</h2><h3 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1. 线程创建"></a>1. 线程创建</h3><h4 id="1-1-继承Thread类"><a href="#1-1-继承Thread类" class="headerlink" title="1.1 继承Thread类"></a>1.1 继承Thread类</h4><blockquote>
<p>实现方式：继承Thread类,重写run( )方法</p>
<p>不推荐使用：有OOP单继承局限性</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread的常用方法：</span></span><br><span class="line"><span class="comment"> * 1.currentThread():静态的，获取当前的线程</span></span><br><span class="line"><span class="comment"> * 2.getName():获取当前线程的名字</span></span><br><span class="line"><span class="comment"> * 3.setName():设置当前线程的名字</span></span><br><span class="line"><span class="comment"> * 4.yield():直接使用子线程的类名调用，降低解析成本。调用此方法的线程将会释放当前CPU的执行权，让CPU重新进行调度（礼让不一定			   成功，因为重新调度的那个线程可能依然是那个调用礼让方法的线程）</span></span><br><span class="line"><span class="comment"> * 5.join():若在A线程中调用B线程的join()方法，表示：当执行到此方法时，A线程停止执行，B线程全部执行完毕，</span></span><br><span class="line"><span class="comment"> *          A线程再接着join()之后的代码执行</span></span><br><span class="line"><span class="comment"> * 6.isAlive():判断某个线程是否还在存活状态，返回Boolean值</span></span><br><span class="line"><span class="comment"> * 7.sleep(long time):显式的让线程睡眠time毫秒</span></span><br><span class="line"><span class="comment"> * 8.setPriority(int newPriority):线程对象调用此方法，设置线程的优先级，一般为1-10的级别，默认为5</span></span><br><span class="line"><span class="comment"> *               注意：优先级的高低只是决定了当前线程抢占CPU执行权的概率变大了，并不意味着本线程一直执行下去</span></span><br><span class="line"><span class="comment"> * 9.getPriority():获取当前线程的优先级</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个子线程，完成1-100之间自然数的输出，同样的，主线程进行调用也执行同样的操作</span></span><br><span class="line"><span class="comment">     * 效果:子线程和主线程中方法由CPU任务调度器进行分配,交互调用主线程和子线程中的方法,交替随机输出</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建子线程对象</span></span><br><span class="line">        subThread subthread1 = <span class="keyword">new</span> subThread();</span><br><span class="line">        subThread subthread2 = <span class="keyword">new</span> subThread();</span><br><span class="line">        <span class="comment">// 设置线程优先级</span></span><br><span class="line">        subthread1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        subthread2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        <span class="comment">//只能创建多个对象，才能进行多个线程的启动和调用</span></span><br><span class="line">        subthread1.start();</span><br><span class="line">        subthread2.start();</span><br><span class="line">        <span class="comment">//主线程执行同样的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> +</span><br><span class="line">                    Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">            <span class="comment">//满足条件时，释放CPU执行权</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">//可以直接用子线程类名调用yield()方法，减少解析成本</span></span><br><span class="line">                subThread.yield();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    subthread1.join();</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"subthread1线程是否还在存活状态："</span> + subthread1.isAlive());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线程类:继承Thread类,重写run()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">subThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> +</span><br><span class="line">                    Thread.currentThread().getPriority() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="1-2-实现Runnable接口"><a href="#1-2-实现Runnable接口" class="headerlink" title="1.2 实现Runnable接口"></a>1.2 实现Runnable接口</h4><blockquote>
<p>实现方式：实现Runnable接口,重写run()方法</p>
<p>推荐使用：避免单继承局限性，方便同一个对象被多个线程使用</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableClass</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 开启线程:Thread对象(目标对象).start()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        RunnableTest target = <span class="keyword">new</span> RunnableTest();</span><br><span class="line">        <span class="comment">// 显式创建2个线程:同一个对象被多个线程使用</span></span><br><span class="line">        Thread threadOne = <span class="keyword">new</span> Thread(target, <span class="string">"线程1"</span>);</span><br><span class="line">        Thread threadTwo = <span class="keyword">new</span> Thread(target, <span class="string">"线程2"</span>);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        threadOne.start();</span><br><span class="line">        threadTwo.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线程:实现Runnable接口,重写run()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-线程零碎"><a href="#2-线程零碎" class="headerlink" title="2. 线程零碎"></a>2. 线程零碎</h3><h4 id="2-1-线程停止"><a href="#2-1-线程停止" class="headerlink" title="2.1 线程停止"></a>2.1 线程停止</h4><blockquote>
<p>推荐方法：使用一个标志位flag来终止线程运行</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableClass</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        RunnableTest target = <span class="keyword">new</span> RunnableTest();</span><br><span class="line">        <span class="comment">// 显式创建2个线程:同一个对象被多个线程使用</span></span><br><span class="line">        <span class="keyword">new</span> Thread(target, <span class="string">"线程1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(target, <span class="string">"线程2"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当main主线程达到某一条件时:调用stop方法切换标志位, 让线程停止</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"main==&gt;"</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>) {</span><br><span class="line">                <span class="comment">// 终止线程</span></span><br><span class="line">                target.stop();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线程:实现Runnable接口,重写run()方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">// 线程是否执行标志位</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 死循环:这里也可以直接使用for循环定义执行次数来终止线程运行</span></span><br><span class="line">        <span class="keyword">while</span> (flag) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + ++i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供停止线程的方法:改变标志位flag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2-线程睡眠"><a href="#2-2-线程睡眠" class="headerlink" title="2.2 线程睡眠"></a>2.2 线程睡眠</h4><blockquote>
<p>Thread.sleep(int)：使当前线程睡眠多少毫秒（此时线程处于就绪状态）</p>
<p>注意：每个对象都有一把锁，sleep不会释放锁（主要用于线程同步）</p>
</blockquote>
<p>睡眠排序法（有趣的排序方法…）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * 睡眠排序法：实际生活中一定不能使用的哟！！！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepSortThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SleepSortThread</span><span class="params">(<span class="keyword">int</span> temp)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.temp = temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 睡眠时间扩大64倍</span></span><br><span class="line">            Thread.sleep(temp &lt;&lt; <span class="number">6</span>);</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] array = {<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">10</span>};</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array) {</span><br><span class="line">            <span class="comment">// 创建多个线程:值越小,睡眠越先结束</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> SleepSortThread(i)).start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3-线程状态"><a href="#2-3-线程状态" class="headerlink" title="2.3 线程状态"></a>2.3 线程状态</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/21 18:24</span></span><br><span class="line"><span class="comment"> * 观测线程状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateClass</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="comment">// 创建线程:lambda方式实现线程体(新式写法，里面的相当于继承了Runnable接口的实现类)</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"循环执行结束..."</span>);</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程未启动:获取线程状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);  <span class="comment">// NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程已启动:获取线程状态</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);  <span class="comment">// RUNNABLE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程执行到结束状态</span></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED) {</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state); <span class="comment">// 一直是 TIMED_WAITING,最后一次输出的是 TERMINATED</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-4-线程守护"><a href="#2-4-线程守护" class="headerlink" title="2.4 线程守护"></a>2.4 线程守护</h4><blockquote>
<p>线程分类：</p>
<ol>
<li><p>用户线程</p>
<ul>
<li>main线程和我们写的运行的程序都是用户线程</li>
<li>JVM虚拟机必须确保用户线程执行完毕</li>
</ul>
<p>2.守护线程</p>
<ul>
<li>例如：gc垃圾处理机制</li>
<li>JVM虚拟机不用等待守护线程执行完毕</li>
</ul>
</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeamonThreadClass</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> God());</span><br><span class="line">        <span class="comment">// 设置上帝线程为守护线程:默认为false</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动人类线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Person()).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 执行结果:当人类线程执行完后,此线程立即停止,但是上帝守护线程不会立即结束,虚拟机不会管它,直到虚拟机停止,上帝守护线程才终止</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"人类一直活着..."</span> + i);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"game over!!!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            System.out.println(<span class="string">"上帝一直守护着人类..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-线程同步-并发"><a href="#3-线程同步-并发" class="headerlink" title="3. 线程同步(并发)"></a>3. 线程同步(并发)</h3><blockquote>
<p><strong>并发：多个线程访问同一个资源对象</strong></p>
<p><strong>解决方法</strong>：实现线程同步，线程同步其实就是一种等待机制,多个需要同时访问此资源对象的线程进入这个资源的等待池，形成队列，等待前面线程使用完毕，下一个线程再使用。</p>
</blockquote>
<h4 id="3-1-synchronized方法"><a href="#3-1-synchronized方法" class="headerlink" title="3.1 synchronized方法"></a>3.1 synchronized方法</h4><blockquote>
<p><strong>同步方法:  </strong>将操作共享数据的方法声明为synchronized,即此方法为同步方法，它能够保证当其中一个线程执行此方法时，其他线程在外等待，直至此线程执行完此方法</p>
<p><strong>注意</strong>：</p>
<ul>
<li>synchronized同步非静态方法:默认锁定的对象是调用当前调用此方法的对象实例(tr)，也就是this</li>
<li>synchronized同步(static)静态方法:默认锁定的对象是当前类对象（ThreadRunnable2.class）,和tr不一样</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadRunnable2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*创建三个线程，进行售票窗口的模拟操作*/</span></span><br><span class="line">        ThreadRunnable2 tr = <span class="keyword">new</span> ThreadRunnable2();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"孙悟空"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"至尊宝"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"白晶晶"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**实现Runnable接口的实现类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个窗口共享这100张票资源，并且在这里不需要设置为static属性</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部停止标志</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (flag) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                buy();</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronized同步方法:默认锁定的对象是当前类(ThreadRunnable2),也就是this.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// 切换线程标志位</span></span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 模拟延时:放大线程的并发问题</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 买票打印</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"买到"</span> + ticket-- + <span class="string">"号票"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2-synchronized代码块"><a href="#3-2-synchronized代码块" class="headerlink" title="3.2 synchronized代码块"></a>3.2 synchronized代码块</h4><blockquote>
<p><strong>同步监视器:</strong> 可以是任何对象，但是我们推荐使用那个变化(有增删改查的共享资源对象)的对象,并且是被多个线程共享的资源对象。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadRunnable2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * java实现线程的安全：线程的同步机制</span></span><br><span class="line"><span class="comment">         * 方式一：同步代码块</span></span><br><span class="line"><span class="comment">         * synchronized(同步监视器){</span></span><br><span class="line"><span class="comment">         *      需要同步的代码块</span></span><br><span class="line"><span class="comment">         *      }</span></span><br><span class="line"><span class="comment">         *注意：同步监视器:必须要是那个变化(增删改查)的对象,并且是被多个线程共享的资源对象</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        ThreadRunnable2 tr = <span class="keyword">new</span> ThreadRunnable2();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"孙悟空"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"至尊宝"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"白晶晶"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**实现Runnable接口的实现类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *多个窗口共享这100张票资源， 并且在这里不需要设置为static属性</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部停止标志</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (flag) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                buy();</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="comment">// synchronized同步代码块</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">            <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 切换线程标志位</span></span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 模拟延时:放大线程的并发问题</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">// 买票打印</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"买到"</span> + ticket-- + <span class="string">"号票"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-3-Lock锁"><a href="#3-3-Lock锁" class="headerlink" title="3.3 Lock锁"></a>3.3 Lock锁</h4><blockquote>
<p>lock锁：可以显式的加锁和解锁</p>
<ul>
<li>创建lock锁对象：private final ReentrantLock lock = new ReentrantLock();</li>
<li>其他的看下面的代码</li>
</ul>
<p>synchronized与lock的对比：</p>
<ul>
<li>Lock是显式锁（手动开启和关闭锁，一定不要忘记解锁），synchronized是隐式锁，出了自动域自动释放</li>
<li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li>
<li>Lock锁性能更好，扩展性更好</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadRunnable2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        ThreadRunnable2 tr = <span class="keyword">new</span> ThreadRunnable2();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"孙悟空"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"至尊宝"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(tr, <span class="string">"白晶晶"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**实现Runnable接口的实现类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadRunnable2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *多个窗口共享这100张票资源， 并且在这里不需要设置为static属性</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部停止标志</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (flag) {</span><br><span class="line">            lock.lock(); <span class="comment">// 显式加锁</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                buy();</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                lock.unlock(); <span class="comment">// 无论如何,必须解锁</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// 切换线程标志位</span></span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 模拟延时:放大线程的并发问题</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 买票打印</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"买到"</span> + ticket-- + <span class="string">"号票"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-线程通信"><a href="#4-线程通信" class="headerlink" title="4. 线程通信"></a>4. 线程通信</h3><h4 id="4-1-管通法"><a href="#4-1-管通法" class="headerlink" title="4.1 管通法"></a>4.1 管通法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> horse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/22 10:46</span></span><br><span class="line"><span class="comment"> * 线程通信:生产者--消费者问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCommunication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        SynContainer synContainer = <span class="keyword">new</span> SynContainer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> pro(synContainer), <span class="string">"生产者"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> cus(synContainer), <span class="string">"消费者==&gt;"</span>).start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者:只负责生产商品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pro</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    SynContainer synContainer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">pro</span><span class="params">(SynContainer synContainer)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.synContainer = synContainer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            <span class="comment">// 生产者一直生产商品</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            synContainer.push();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者:只负责消费商品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cus</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    SynContainer synContainer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">cus</span><span class="params">(SynContainer synContainer)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.synContainer = synContainer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">150</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 消费者一直消费商品</span></span><br><span class="line">            synContainer.pop();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲区:当有商品时,通知消费者消费,当消费之后,通知生产者生产,相当于卖货的店员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者生产商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 如果容器满了,等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">15</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"===="</span>);</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"生产了第"</span> + count + <span class="string">"件商品"</span>);</span><br><span class="line">        <span class="comment">// 有商品了:通知消费者进行消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者消费商品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 如果容器没有商品:通知生产者生产商品</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"+++++"</span>);</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 消费商品</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"消费了第"</span> + count + <span class="string">"件商品"</span>);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="comment">// 消费了商品:通知生产者可以继续进行生产了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2-信号灯法"><a href="#4-2-信号灯法" class="headerlink" title="4.2 信号灯法"></a>4.2 信号灯法</h4><blockquote>
<p>例如:</p>
<ul>
<li><p>当flag=true时,演员表演节目,通知观众观看;当flag=false时，演员等待</p>
</li>
<li><p>当flag=true时，观众等待，当flag=flase时,观众看节目,看完之后，通知演员可以继续表演节目</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlinkerFlag</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 线程通信: 信号灯法</span></span><br><span class="line"><span class="comment">         * 例如: 演员表演节目,观众观看节目,当flag=true时,演员有节目,通知观众观看,当观众看完节目时,通知演员可以继续表演节目</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Actor(tv)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Watcher(tv)).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者--演员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(TV tv)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 开始表演节目:累计50场</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            <span class="comment">// 演员表演节目</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"倚天屠龙记"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"神雕侠侣"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者--观众</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            <span class="comment">// 观众观看节目</span></span><br><span class="line">            <span class="keyword">this</span>.tv.watch();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品--节目</span></span><br><span class="line"><span class="comment"> * 流程:演员表演,观众等待 flag= true</span></span><br><span class="line"><span class="comment"> * 观众观看,演员等待 flag = false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>{</span><br><span class="line"></span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;  <span class="comment">// 是否表演/等待的标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演员表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span> </span>{</span><br><span class="line">        <span class="comment">// flag=false:演员等待</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// flag=true:演员表演</span></span><br><span class="line">        System.out.println(<span class="string">"演员表演节目==&gt;"</span> + voice);</span><br><span class="line">        <span class="comment">// 更新标志位</span></span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">        <span class="comment">// 更新节目单</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="comment">// 唤醒观众线程:通知观众可以观看节目了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观众观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// flag=true:观众等待</span></span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// flag=false:观众观看</span></span><br><span class="line">        System.out.println(<span class="string">"观众观看节目===&gt;"</span> + voice);</span><br><span class="line">        <span class="comment">// 更新标志位</span></span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">        <span class="comment">// 唤醒演员线程:通知演员可以表演节目了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-3-线程池"><a href="#4-3-线程池" class="headerlink" title="4.3 线程池"></a>4.3 线程池</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlinkerFlag</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">		<span class="comment">// 就这里开启线程的方式不一样：使用了线程池</span></span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="comment">// 创建一个指定大小的线程池(忽略报错),参数:线程池的大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 开始执行线程</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> Actor(tv));</span><br><span class="line">        service.execute(<span class="keyword">new</span> Watcher(tv));</span><br><span class="line">        <span class="comment">// 关闭线程连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者--演员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(TV tv)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 开始表演节目:累计50场</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            <span class="comment">// 演员表演节目</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"倚天屠龙记"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"神雕侠侣"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者--观众</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) {</span><br><span class="line">            <span class="comment">// 观众观看节目</span></span><br><span class="line">            <span class="keyword">this</span>.tv.watch();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品--节目</span></span><br><span class="line"><span class="comment"> * 流程:演员表演,观众等待 flag= true</span></span><br><span class="line"><span class="comment"> * 观众观看,演员等待 flag = false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>{</span><br><span class="line"></span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;  <span class="comment">// 是否表演/等待的标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演员表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span> </span>{</span><br><span class="line">        <span class="comment">// flag=false:演员等待</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// flag=true:演员表演</span></span><br><span class="line">        System.out.println(<span class="string">"演员表演节目==&gt;"</span> + voice);</span><br><span class="line">        <span class="comment">// 更新标志位</span></span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">        <span class="comment">// 更新节目单</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="comment">// 唤醒观众线程:通知观众可以观看节目了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观众观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// flag=true:观众等待</span></span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// flag=false:观众观看</span></span><br><span class="line">        System.out.println(<span class="string">"观众观看节目===&gt;"</span> + voice);</span><br><span class="line">        <span class="comment">// 更新标志位</span></span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">        <span class="comment">// 唤醒演员线程:通知演员可以表演节目了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Nginx基础"><a href="#Nginx基础" class="headerlink" title="Nginx基础"></a>Nginx基础</h2><h3 id="1-nginx功能"><a href="#1-nginx功能" class="headerlink" title="1. nginx功能"></a>1. nginx功能</h3><blockquote>
<p><strong>反向代理：</strong>客户端不需要做任何配置，只需要将请求发送到反向代理服务器，由反向代理服务器去选择真正的目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的时法相代理服务器的地址，隐藏了真实服务器的IP地址。</p>
<p><strong>负载均衡：</strong>当单个服务器不能解决问题时，我们可以增加服务器的数量，将请求分发到各个服务器上，将请求分发到多个服务器上，将负载分发到不同的服务器上，这就是负载均衡的原理。</p>
<p><strong>动静分离：</strong>为加快网站的解析速度，可以把动态资源和静态资源由不同的服务器来解析，加快解析熟读，降低服务器的压力。</p>
</blockquote>
<h3 id="2-nginx命令"><a href="#2-nginx命令" class="headerlink" title="2. nginx命令"></a>2. nginx命令</h3><blockquote>
<p>注意：必须要在nginx的安装目录下才能使用nginx的相关命令</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查看配置是否正确</td>
<td style="text-align:left">nginx -t</td>
</tr>
<tr>
<td style="text-align:left">查看版本号</td>
<td style="text-align:left">nginx -v</td>
</tr>
<tr>
<td style="text-align:left">启动nginx</td>
<td style="text-align:left">start nginx</td>
</tr>
<tr>
<td style="text-align:left">强制停止nginx</td>
<td style="text-align:left">nginx -s stop</td>
</tr>
<tr>
<td style="text-align:left">优雅停止nginx</td>
<td style="text-align:left">nginx -s quit</td>
</tr>
<tr>
<td style="text-align:left">重新加载nginx（一般在修改配置文件后使用）</td>
<td style="text-align:left">nginx -s reload</td>
</tr>
<tr>
<td style="text-align:left">windows下查看nginx进程（是否启动）</td>
<td style="text-align:left">tasklist /fi “imagename eq nginx.exe”</td>
</tr>
<tr>
<td style="text-align:left">Liunx查看已经开放的端口号</td>
<td style="text-align:left">firewall-cmd —list-all</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-反向代理"><a href="#3-反向代理" class="headerlink" title="3. 反向代理"></a>3. 反向代理</h3><h4 id="3-1-代理配置"><a href="#3-1-代理配置" class="headerlink" title="3.1 代理配置"></a>3.1 代理配置</h4><blockquote>
<p>反向代理实例1：直接反向代理，通过访问域名（manage.leyou.com）来间接访问服务器中的tomcat服务器（47.99.152.217:8080）</p>
<ul>
<li>准备工作：manage.leyou.com映射成127.0.0.1</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">  server {</span><br><span class="line">      listen       80;  # 监听端口</span><br><span class="line">      server_name  manage.leyou.com;  # 监听地址</span><br><span class="line"></span><br><span class="line"># 反向代理转发配置</span><br><span class="line">      location / {</span><br><span class="line">	proxy_pass http:<span class="comment">//47.99.152.217:8080;  # 代理转发目标地址</span></span><br><span class="line">	proxy_connect_timeout 600; # 连接超时时间（默认也可以）</span><br><span class="line">	proxy_read_timeout 600; # 请求读超时时间（默认也可以）</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">      location = /50x.html {</span><br><span class="line">          root   html;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>反向代理实例2：<strong>根据访问的路径不同跳转到不同端口的服务中</strong></p>
<ul>
<li>准备工作:两台不同端口的tomcat服务器，分别放置不同的路径和页面，</li>
<li>实现效果：<ul>
<li>当访问manage.leyou.com:9001/vod/xxx.jsp路径时，转发到第一个location配置路径中去；</li>
<li>当访问manage.leyou.com:9001/edu/xxx.jsp路径时，转发到第二个location配置路径中去</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">  server {</span><br><span class="line">      listen       9001;  # 监听端口</span><br><span class="line">      server_name  manage.leyou.com;  # 监听地址</span><br><span class="line"></span><br><span class="line"># 反向代理转发配置(一个server中可以配置多个location)</span><br><span class="line">      location ~ /vod/ {</span><br><span class="line">	proxy_pass http:<span class="comment">//47.99.152.217:8080;  # 代理转发目标地址</span></span><br><span class="line">	proxy_connect_timeout 600; # 连接超时时间（默认也可以）</span><br><span class="line">	proxy_read_timeout 600; # 请求读超时时间（默认也可以）</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">location ~ /edu/ {</span><br><span class="line">	proxy_pass http:<span class="comment">//47.99.152.217:8081;  # 代理转发目标地址</span></span><br><span class="line">	proxy_connect_timeout 600; # 连接超时时间（默认也可以）</span><br><span class="line">	proxy_read_timeout 600; # 请求读超时时间（默认也可以）</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">      location = /50x.html {</span><br><span class="line">          root   html;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2-location匹配规则"><a href="#3-2-location匹配规则" class="headerlink" title="3.2 location匹配规则"></a>3.2 location匹配规则</h4><blockquote>
<p>优先级：(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ,* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
</blockquote>
<p>具体介绍：</p>
<blockquote>
<p>注意：</p>
<ul>
<li>规则不能混合使用</li>
<li>以下说明都是根据第一个server配置为基础</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">       listen       <span class="number">8861</span>;</span><br><span class="line">       server_name  abc.com;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-2-1-“-”"><a href="#3-2-1-“-”" class="headerlink" title="3.2.1 “=”"></a>3.2.1 “=”</h5><blockquote>
<p>“=”：地址要完全一致才能匹配成功</p>
</blockquote>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">location = / {</span><br><span class="line">   .....</span><br><span class="line">}</span><br><span class="line"># 只匹配 http://abc.com</span><br><span class="line">#  http://abc.com [匹配成功]</span><br><span class="line">#  http://abc.com/index [匹配失败]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-2-1-“-”-1"><a href="#3-2-1-“-”-1" class="headerlink" title="3.2.1 “~”"></a>3.2.1 “~”</h5><blockquote>
<p>“~”：大小写敏感，只要地址中包含此地址段并且大小写一致，即可匹配成功</p>
</blockquote>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">location ~ /Example/ {</span><br><span class="line">   .....</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">#http://abc.com/Example/  [匹配成功]</span><br><span class="line">#http://abc.com/example/  [匹配失败]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-2-3-“-“"><a href="#3-2-3-“-“" class="headerlink" title="3.2.3  “~*“"></a>3.2.3  “~*“</h5><blockquote>
<p>“~*”:大小写不敏感，只要只要地址中包含此地址段，即可匹配成功</p>
</blockquote>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">location ~* /Example/ {</span><br><span class="line">   .....</span><br><span class="line">}</span><br><span class="line"># 则会忽略 uri 部分的大小写</span><br><span class="line">#http://abc.com/test/Example/  [匹配成功]</span><br><span class="line">#http://abc.com/example/  [匹配成功]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-2-4-“-”"><a href="#3-2-4-“-”" class="headerlink" title="3.2.4 “^~”"></a>3.2.4 “^~”</h5><blockquote>
<p>“^~”：只匹配以配置的uri开头的</p>
</blockquote>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">location ^~ /index/ {</span><br><span class="line">   .....</span><br><span class="line">}</span><br><span class="line">#以 /index/ 开头的请求，都会匹配上</span><br><span class="line">#http://abc.com/index/index.page   [匹配成功]</span><br><span class="line">#http://abc.com/error/error.page [匹配失败]</span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-2-5-“-”"><a href="#3-2-5-“-”" class="headerlink" title="3.2.5 “@”"></a>3.2.5 “@”</h5><blockquote>
<p>“@”:nginx的内部跳转（不常用）</p>
</blockquote>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">location /index/ {</span><br><span class="line">    error_page <span class="number">404</span> <span class="meta">@index_error</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">location <span class="meta">@index_error</span> {</span><br><span class="line">   .....</span><br><span class="line">}</span><br><span class="line">#以 /index/ 开头的请求，如果链接的状态为 404。则会匹配到 @index_error 这条规则上。 </span><br></pre></td></tr></tbody></table></figure>
<h5 id="3-2-6-无匹配符"><a href="#3-2-6-无匹配符" class="headerlink" title="3.2.6 无匹配符"></a>3.2.6 无匹配符</h5><blockquote>
<ul>
<li>不加任何规则则时，默认是大小写敏感，前缀匹配，相当于加了“~”与“^~”</li>
<li>只有 “/” 表示匹配所有uri</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">location /index/ {</span><br><span class="line">    ......</span><br><span class="line">}</span><br><span class="line">#http://abc.com/index   [匹配成功]</span><br><span class="line">#http://abc.com/index/index.page   [匹配成功]</span><br><span class="line">#http://abc.com/test/index   [匹配失败（不是前缀）]</span><br><span class="line">#http://abc.com/Index   [匹配失败(大小写错误)]</span><br><span class="line"></span><br><span class="line"># 匹配到所有uri</span><br><span class="line">location / {</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-负载均衡"><a href="#4-负载均衡" class="headerlink" title="4. 负载均衡"></a>4. 负载均衡</h3><blockquote>
<p>  实例：当访问47.99.152.217:80/edu/xxx.jsp页面时，由于配置了服务流，所以默认会以<strong>轮询</strong>的方式转发到服务流中的其中一个服务器上，也就相当于访问47.99.152.217:808x/edu/xxx.jsp页面，此方式被称为负载均衡。</p>
<p>分配策略：</p>
<ul>
<li>轮询：默认策略，每个请求按照时间顺序逐一分配到不同服务器，如果服务器宕机，就自动剔除。</li>
<li>权重(weight)：代表权重，默认为1，权重越高被分配的客户端越多，此服务器被分配到的概率越大。</li>
<li>ip_hash：每个请求按照访问ip的hash结果分配，这样只要ip访问过并被分配过服务器之后，以后再次方位，分配的都将是同一个服务器（可以有效解决session共享问题）</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">	</span><br><span class="line">	# 创建服务流（myServer:自定义的服务流名称）</span><br><span class="line">    # 默认轮询策略</span><br><span class="line">	upstream myServer {</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8080</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8081</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8082</span>;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">     # 权重策略+失败重试</span><br><span class="line">     # 在fail_timeout时间内失败了max_fails次后，则任务该上游服务器不可用给，然后将该服务器地址剔除掉。fail_timeout的时间后会再次将该服务器加入到存活列表中，进行请求重试。</span><br><span class="line">	upstream myServer {</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8080</span> weight=<span class="number">5</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">60</span>s;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8081</span> weight=<span class="number">10</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">60</span>s;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8082</span> weight=<span class="number">8</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">60</span>s;</span><br><span class="line">	}</span><br><span class="line">    </span><br><span class="line">      # ip_hash方式</span><br><span class="line">	upstream myServer {</span><br><span class="line">         ip_hash               # 只要添上这一句，就是ip_hash分配策略</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8080</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8081</span>;</span><br><span class="line">		server <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>:<span class="number">8082</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    server {</span><br><span class="line">        listen       <span class="number">80</span>;  # 监听端口</span><br><span class="line">        server_name  <span class="number">47.99</span><span class="number">.152</span><span class="number">.217</span>;  # 监听地址</span><br><span class="line"></span><br><span class="line">		# 反向代理转发配置(一个server中可以配置多个location)</span><br><span class="line">        location / {</span><br><span class="line">			proxy_pass http:<span class="comment">//myServer;  # 负载均衡的服务流名称</span></span><br><span class="line">			proxy_connect_timeout <span class="number">600</span>; # 连接超时时间（默认也可以）</span><br><span class="line">			proxy_read_timeout <span class="number">600</span>; # 请求读超时时间（默认也可以）</span><br><span class="line">        }</span><br><span class="line">		</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5. 动静分离"></a>5. 动静分离</h3><blockquote>
<p>小知识点：</p>
<ul>
<li><code>alias</code>是把location的值替换掉</li>
<li><code>root</code>是拼接location的值（包括”/“符号）</li>
<li>autoindex on：自动展示访问的文件夹列表文件</li>
</ul>
<p>准备工作：此C:\Users\马滨\Pictures\WebBg\index_bg.jpg路径下存在一张图片</p>
<p>==注意： 静态资源的文件路径不能包含有空格，否则直接报错！！！==</p>
</blockquote>
<p>root方式：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">  server {</span><br><span class="line">      listen       80;  # 监听端口</span><br><span class="line">      server_name  localhost;  # 监听地址</span><br><span class="line"></span><br><span class="line"># root方式：配置访问静态图片</span><br><span class="line">      location /WebBg/ {</span><br><span class="line">	root C:/Users/马滨/Pictures;</span><br><span class="line">	autoindex on;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">      location = /50x.html {</span><br><span class="line">          root   html;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<p>alias方式：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">  server {</span><br><span class="line">      listen       80;  # 监听端口</span><br><span class="line">      server_name  localhost;  # 监听地址</span><br><span class="line"></span><br><span class="line"># alias方式：配置访问静态图片</span><br><span class="line">      location /WebBg/ {</span><br><span class="line">	alias C:/Users/马滨/Pictures/WebBg/;</span><br><span class="line">	autoindex on;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">      location = /50x.html {</span><br><span class="line">          root   html;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<h3 id="6-IP限流"><a href="#6-IP限流" class="headerlink" title="6. IP限流"></a>6. IP限流</h3><blockquote>
<p>配置步骤：</p>
<ul>
<li>配置限流的具体策略参数</li>
<li>设置限流</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"># 配置限流的具体策略参数</span><br><span class="line">   # limit_req_zone需要定义在定义在http块中</span><br><span class="line"># $binary_remote_addr：保存客户端IP的二进制形式</span><br><span class="line"><span class="meta"># zone：定义IP状态及URL访问频率的共享内存区域。zone=keyword：标识区域的名字（自定义名称），冒号后面跟区域大小（16000个IP地址的状态信息约1MB，所以示例中区域可以存储160000个IP地址）</span></span><br><span class="line"><span class="meta"># rate：定义最大请求速率，示例中速率不超过每秒100个请求</span></span><br><span class="line">limit_req_zone $binary_remote_addr zone=mylimit:<span class="number">10</span>m rate=<span class="number">100</span>r/s;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">location /platform/file/ {</span><br><span class="line">	proxy_connect_timeout   <span class="number">300</span>;</span><br><span class="line">	proxy_send_timeout      <span class="number">600</span>;</span><br><span class="line">	proxy_read_timeout      <span class="number">600</span>;</span><br><span class="line">	proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">	proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">	proxy_set_header X-Forwarded-Scheme  $scheme;</span><br><span class="line">	proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">	proxy_pass http:<span class="comment">//fapi-test/viewOnline/;</span></span><br><span class="line">	# 设置限流</span><br><span class="line">	<span class="meta"># burst：表示排队的大小</span></span><br><span class="line">	<span class="meta"># nodelay：表示不限制单个请求间的时间</span></span><br><span class="line">	limit_req zone=mylimit burst=<span class="number">20</span> nodelay;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="7-限流白名单"><a href="#7-限流白名单" class="headerlink" title="7. 限流白名单"></a>7. 限流白名单</h4><blockquote>
<p>通过配置IP白名单结合IP限流的配置，实现白名单功能配置。</p>
</blockquote>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># geo指令：定义一个 $whitelist 白名单，默认值为1，表示所有ip都受限制。如果客户端ip和白名单列出的IP相匹配，则对应的值为0，表示不受限制</span></span><br><span class="line">	geo $whitelist {</span><br><span class="line">		defalut <span class="number">1</span>;</span><br><span class="line">		<span class="number">192.168</span><span class="number">.1</span><span class="number">.120</span> <span class="number">0</span>;</span><br><span class="line">        <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="meta"># map指令：将上面 $whitelist 值为1的，也就是受限制ip，映射为客户端IP。将 $whitelist 值为0的，也就是白名单IP，映射为空字符串</span></span><br><span class="line">	<span class="built_in">map</span> $whitelist $limit_key {</span><br><span class="line">		<span class="number">1</span> $binary_remote_addr;</span><br><span class="line">		<span class="number">0</span> <span class="string">""</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	# 限流参数配置</span><br><span class="line">	# limit_req_zone 和 limit_conn_zone 指令对于键值为空值的将被忽略，从而实现对白名单中的IP不做限制</span><br><span class="line">	# $binary_remote_addr：保存客户端IP的二进制形式</span><br><span class="line">	<span class="meta"># zone：定义IP状态及URL访问频率的共享内存区域。zone=keyword：标识区域的名字（自定义名称），冒号后面跟区域大小（16000个IP地址的状态信息约1MB，所以示例中区域可以存储160000个IP地址）</span></span><br><span class="line">	<span class="meta"># rate：定义最大请求速率，示例中速率不超过每秒100个请求</span></span><br><span class="line">	limit_req_zone $limit_key zone=mylimit:<span class="number">10</span>m rate=<span class="number">100</span>r/s;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	location /platform/file/ {</span><br><span class="line">		proxy_connect_timeout   <span class="number">300</span>;</span><br><span class="line">		proxy_send_timeout      <span class="number">600</span>;</span><br><span class="line">		proxy_read_timeout      <span class="number">600</span>;</span><br><span class="line">		proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">		proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">		proxy_set_header X-Forwarded-Host $host;</span><br><span class="line">		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">		proxy_set_header X-Forwarded-Scheme  $scheme;</span><br><span class="line">		proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">		proxy_pass http:<span class="comment">//fapi-test/viewOnline/;</span></span><br><span class="line">		# 设置ip限流</span><br><span class="line">		<span class="meta"># burst：表示排队的大小(缓存的大小)</span></span><br><span class="line">		<span class="meta"># nodelay：表示不限制单个请求间的时间</span></span><br><span class="line">		limit_req zone=mylimit burst=<span class="number">20</span> nodelay;</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="8-日志分析命令"><a href="#8-日志分析命令" class="headerlink" title="8. 日志分析命令"></a>8. 日志分析命令</h4><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 统计IP访问量</span></span><br><span class="line">awk <span class="string">'{print $1}'</span> access.log | sort -n | uniq | wc -l</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看某一时间段的IP访问量(4-5点)</span></span><br><span class="line">grep <span class="string">"07/Apr/2017:0[4-5]"</span> access.log | awk <span class="string">'{print $1}'</span> | sort | uniq -c| sort -nr | wc -l   </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看访问最频繁的前100个IP</span></span><br><span class="line">awk <span class="string">'{print $1}'</span> access.log | sort -n |uniq -c | sort -rn | head -n 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看访问100次以上的IP</span></span><br><span class="line">awk <span class="string">'{print $1}'</span> access.log | sort -n |uniq -c |awk <span class="string">'{if($1 &gt;100) print $0}'</span>|sort -rn</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询某个IP的详细访问情况,按访问频率排序</span></span><br><span class="line">grep <span class="string">'104.217.108.66'</span> access.log |awk <span class="string">'{print $7}'</span>|sort |uniq -c |sort -rn |head -n 100   </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 页面访问统计</span></span><br><span class="line"><span class="comment"># 查看访问最频的页面(TOP100)</span></span><br><span class="line">awk <span class="string">'{print $7}'</span> access.log | sort |uniq -c | sort -rn | head -n 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看访问最频的页面([排除php页面】(TOP100)</span></span><br><span class="line">grep -v <span class="string">".php"</span>  access.log | awk <span class="string">'{print $7}'</span> | sort |uniq -c | sort -rn | head -n 100          </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看页面访问次数超过100次的页面</span></span><br><span class="line">cat access.log | cut -d <span class="string">' '</span> -f 7 | sort |uniq -c | awk <span class="string">'{if ($1 &gt; 100) print $0}'</span> | less</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看最近1000条记录，访问量最高的页面</span></span><br><span class="line">tail -1000 access.log |awk <span class="string">'{print $7}'</span>|sort|uniq -c|sort -nr|less</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 每秒请求量统计</span></span><br><span class="line"><span class="comment"># 统计每秒的请求数,top100的时间点(精确到秒)</span></span><br><span class="line">awk <span class="string">'{print $4}'</span> access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 每分钟请求量统计</span></span><br><span class="line"><span class="comment"># 统计每分钟的请求数,top100的时间点(精确到分钟)</span></span><br><span class="line">awk <span class="string">'{print $4}'</span> access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 每小时请求量统计</span></span><br><span class="line"><span class="comment"># 统计每小时的请求数,top100的时间点(精确到小时)</span></span><br><span class="line">awk <span class="string">'{print $4}'</span> access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 性能分析</span></span><br><span class="line"><span class="comment"># 在nginx log中最后一个字段加入$request_time</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列出传输时间超过 3 秒的页面，显示前20条</span></span><br><span class="line"> </span><br><span class="line">cat access.log|awk <span class="string">'($NF &gt; 3){print $7}'</span>|sort -n|uniq -c|sort -nr|head -20</span><br><span class="line"><span class="comment"># 列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</span></span><br><span class="line"> </span><br><span class="line">cat access.log|awk <span class="string">'($NF &gt; 1 &amp;&amp;  $7~/\.php/){print $7}'</span>|sort -n|uniq -c|sort -nr|head -100</span><br><span class="line"><span class="comment"># 蜘蛛抓取统计</span></span><br><span class="line"><span class="comment"># 统计蜘蛛抓取次数</span></span><br><span class="line"> </span><br><span class="line">grep <span class="string">'Baiduspider'</span> access.log |wc -l</span><br><span class="line"><span class="comment"># 统计蜘蛛抓取404的次数</span></span><br><span class="line"> </span><br><span class="line">grep <span class="string">'Baiduspider'</span> access.log |grep <span class="string">'404'</span> | wc -l</span><br><span class="line"> </span><br><span class="line"><span class="comment"># TCP连接统计</span></span><br><span class="line"><span class="comment"># 查看当前TCP连接数</span></span><br><span class="line">netstat -tan | grep <span class="string">"ESTABLISHED"</span> | grep <span class="string">":80"</span> | wc -l</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 用tcpdump嗅探80端口的访问看看谁最高</span></span><br><span class="line">tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F<span class="string">"."</span> <span class="string">'{print $1"."$2"."$3"."$4}'</span> | sort | uniq -c | sort -nr</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Thread并发编程"><a href="#Thread并发编程" class="headerlink" title="Thread并发编程"></a>Thread并发编程</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><blockquote>
<p><strong>并行：</strong>(concurrent)是同一时间应对多件事情的能力</p>
<p><strong>并发：</strong>(parallel)是同一时间动手做多件事情的能力</p>
<p><strong>临界区</strong>：对共享资源同时存在读写操作的代码片段</p>
<p><strong>volatile（易变关键字）：</strong>它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存(一般来说，多线程中共享的布尔值标志位都应该使用volatile关键字修饰)</p>
</blockquote>
<p>window下查看进程命令</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>tasklist \</td>
<td>findstr “PID”</td>
<td>根据PID查询任务进程</td>
</tr>
<tr>
<td>taskkill -pid PID -f</td>
<td>强制杀死PID进程</td>
</tr>
<tr>
<td>netstat -ano \</td>
<td>findstr  “端口号”</td>
<td>根据端口号查询任务PID</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-线程基础"><a href="#2-线程基础" class="headerlink" title="2. 线程基础"></a>2. 线程基础</h3><h4 id="2-1-lambda精简代码"><a href="#2-1-lambda精简代码" class="headerlink" title="2.1 lambda精简代码"></a>2.1 lambda精简代码</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadBase</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// lambda方式创建线程(基于Runnable接口的线程实现)</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        },<span class="string">"线程壹号"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Callable接口创建线程(lambda的方式)，带有返回值的线程</span></span><br><span class="line">        FutureTask&lt;String&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"===&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 返回一个字符串类型的数据</span></span><br><span class="line">            <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(task, <span class="string">"线程贰号"</span>).start();</span><br><span class="line">        <span class="comment">// 当线程执行完毕之后,输出返回结果</span></span><br><span class="line">        System.out.println(<span class="string">"返回结果:"</span> + task.get());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-2-线程设计模式"><a href="#2-2-线程设计模式" class="headerlink" title="2.2 线程设计模式"></a>2.2 线程设计模式</h4><blockquote>
<p>Thread.sleep(2000)</p>
<ul>
<li>调用sleep会让当前线程从运行状态（Running）进入阻塞状态（Timed Waiting）</li>
<li>其他线程可以使用interrupt方法打断当前正在运行的线程，这时sleep会抛出InterruptedException异常<ul>
<li>打断正在sleep的线程：会清空打断状态Thread.currentThread().isInterrupted()==false</li>
<li>打断正在运行的线程：不会清空打断状态Thread.currentThread().isInterrupted()==true</li>
</ul>
</li>
<li>睡眠结束后的线程不一定立即执行，仍然回到就绪状态排队，等待CPU进行调度</li>
<li>优雅写法：TimeUnit.SECONDS.sleep(2L);</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadBase</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2L</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"执行了..."</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                System.out.println(<span class="string">"捕获异常类名==&gt;"</span> + e.getClass().getName());</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程壹号"</span>);</span><br><span class="line">        System.out.println(<span class="string">"start之前线程状态:"</span> + thread.getState());</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">"start之后线程状态:"</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程睡眠1秒: 这时,thread线程处于阻塞状态</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">"start之后线程状态==&gt;"</span> + thread.getState());</span><br><span class="line">        <span class="comment">// 打断thread线程: 这时会打断当前线程的睡眠,然后抛出被打断的异常</span></span><br><span class="line">        thread.interrupt();</span><br><span class="line">        System.out.println(<span class="string">"睡眠线程打断标记==&gt;"</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">start之前线程状态:NEW</span><br><span class="line">start之后线程状态:RUNNABLE</span><br><span class="line">start之后线程状态==&gt;TIMED_WAITING</span><br><span class="line">捕获异常类名==&gt;java.lang.InterruptedException</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">	at java.base/java.util.concurrent.TimeUnit.sleep(TimeUnit.java:446)</span><br><span class="line">	at thread.ThreadBase.lambda$main$0(ThreadBase.java:16)</span><br><span class="line">	at java.base/java.lang.Thread.run(Thread.java:835)</span><br><span class="line">睡眠线程打断标记==&gt;false</span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-2-1-两阶段终止模式"><a href="#2-2-1-两阶段终止模式" class="headerlink" title="2.2.1 两阶段终止模式"></a>2.2.1 两阶段终止模式</h5><blockquote>
<p>两阶段终止模式：利用打断标记布尔值进行判断，优雅的结束线程,也被成为“信号灯法”</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadBase</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        twoStageTermination termination = <span class="keyword">new</span> twoStageTermination();</span><br><span class="line">        termination.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程睡眠3.5秒(刚好在thread线程处于sleep的时候进行打断)</span></span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">	    <span class="comment">// 打断thread线程</span></span><br><span class="line">        termination.stop();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两阶段终止模式: 利用打断标记优雅的结束线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">twoStageTermination</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 创建具体线程</span></span><br><span class="line">        thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                <span class="comment">// 如果打断标记为true,则料理后事,结束线程(结束循环,线程自动结束)</span></span><br><span class="line">                <span class="keyword">if</span> (thread.isInterrupted()) {</span><br><span class="line">                    System.out.println(<span class="string">"料理后事,准备结束线程..."</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 否则执行一些逻辑操作</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="comment">// 在sleep时期内被打断,会报出异常InterruptedException,并清除打断标记(false),所以在catch中要重新设置打断标记</span></span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">                    <span class="comment">// 在执行逻辑的时候被打断,属于正常打断,不会出现异常不会清除打断标记(true)</span></span><br><span class="line">                    System.out.println(<span class="string">"执行业务逻辑操作..."</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">"sleep时期被打断..."</span>);</span><br><span class="line">                    <span class="comment">// 重新设置打断标记</span></span><br><span class="line">                    thread.interrupt();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },<span class="string">"业务逻辑线程"</span>);</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打断线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>volatile优化两阶段终止模式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Termination termination = <span class="keyword">new</span> Termination();</span><br><span class="line">        termination.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        System.out.println(<span class="string">"停止监控"</span>);</span><br><span class="line">        <span class="comment">// 打断thread线程</span></span><br><span class="line">        termination.stop();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两阶段终止模式: 利用打断标记优雅的结束线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Termination</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否停止的标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 创建具体线程</span></span><br><span class="line">        thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                <span class="comment">// 如果打断标记为true,则料理后事,结束线程(结束循环,线程自动结束)</span></span><br><span class="line">                <span class="keyword">if</span> (flag) {</span><br><span class="line">                    System.out.println(<span class="string">"料理后事,准备结束线程..."</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">"执行业务逻辑..."</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">"sleep时期打断..."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"业务逻辑线程"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打断线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">执行业务逻辑操作...</span><br><span class="line">执行业务逻辑操作...</span><br><span class="line">执行业务逻辑操作...</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at java.base/java.lang.Thread.sleep(Thread.java:340)</span><br><span class="line">	at java.base/java.util.concurrent.TimeUnit.sleep(TimeUnit.java:446)</span><br><span class="line">	at thread.twoStageTermination.lambda$start$0(ThreadBase.java:48)</span><br><span class="line">	at java.base/java.lang.Thread.run(Thread.java:835)</span><br><span class="line">sleep时期被打断...</span><br><span class="line">料理后事,准备结束线程...</span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-2-2-犹豫模式"><a href="#2-2-2-犹豫模式" class="headerlink" title="2.2.2 犹豫模式"></a>2.2.2 犹豫模式</h5><blockquote>
<p>Balking犹豫模式：应用场景：防止重复启动同一个线程</p>
<p>含义：当一个线程发现另一个线程或本线程已经做了某一件现同的事情的时候，那么本线程就无需再做了，直接结束(return;)返回即可</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        </span><br><span class="line">        Termination termination = <span class="keyword">new</span> Termination();</span><br><span class="line">        <span class="comment">// 启动多个线程测试(是否会重复启动气孔线程)</span></span><br><span class="line">        termination.start();</span><br><span class="line">        termination.start();</span><br><span class="line">        termination.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        System.out.println(<span class="string">"停止监控"</span>);</span><br><span class="line">        <span class="comment">// 打断thread线程</span></span><br><span class="line">        termination.stop();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两阶段终止模式: 利用打断标记优雅的结束线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Termination</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line">    <span class="comment">// 防止启动多个线程(犹豫模式)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> starting = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 创建具体线程</span></span><br><span class="line">        thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="comment">// 要加锁：保证starting标识的原子性</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                <span class="keyword">if</span> (starting) {</span><br><span class="line">                    System.out.println(<span class="string">"线程已经启动完成了,请立即退回..."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                starting = <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                <span class="comment">// 如果打断标记为true,则料理后事,结束线程(结束循环,线程自动结束)</span></span><br><span class="line">                <span class="keyword">if</span> (flag) {</span><br><span class="line">                    System.out.println(<span class="string">"料理后事,准备结束线程..."</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">"执行业务逻辑..."</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">"sleep时期打断..."</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"业务逻辑线程"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打断线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-2-3-同步模式"><a href="#2-2-3-同步模式" class="headerlink" title="2.2.3 同步模式"></a>2.2.3 同步模式</h5><h6 id="2-2-3-1-顺序执行"><a href="#2-2-3-1-顺序执行" class="headerlink" title="2.2.3.1 顺序执行"></a>2.2.3.1 顺序执行</h6><blockquote>
<p>顺序执行==》wait¬ify: 保证线程2始终在线程1之前运行<span class="github-emoji"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 共享锁对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">// 线程贰号是否运行过标志</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isRun = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        Thread threadOne = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) {</span><br><span class="line">                <span class="keyword">while</span> (!isRun) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;进入等待"</span>);</span><br><span class="line">                        LOCK.wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始运行"</span>);</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程1号"</span>);</span><br><span class="line"></span><br><span class="line">        Thread threadTwo = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始运行"</span>);</span><br><span class="line">                isRun = <span class="keyword">true</span>;</span><br><span class="line">                LOCK.notify();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程2号"</span>);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        threadOne.start();</span><br><span class="line">        <span class="comment">// 故意等待1秒（下过更明显）</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        threadTwo.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>顺序执行==》await&amp;signal：保证线程2始终在线程1之前运行</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line">    <span class="comment">// 共享锁对象</span></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock LOCK = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// 条件变量</span></span><br><span class="line">    <span class="keyword">static</span> Condition condition = LOCK.newCondition();</span><br><span class="line">    <span class="comment">// 线程贰号是否运行过标志</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isRun = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        Thread threadOne = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            LOCK.lock();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">while</span> (!isRun) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;进入等待"</span>);</span><br><span class="line">                        condition.await();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始运行"</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                LOCK.unlock();</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }, <span class="string">"线程1号"</span>);</span><br><span class="line"></span><br><span class="line">        Thread threadTwo = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            LOCK.lock();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始运行"</span>);</span><br><span class="line">                isRun = <span class="keyword">true</span>;</span><br><span class="line">                condition.signal();</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                LOCK.unlock();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程2号"</span>);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        threadOne.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        threadTwo.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>顺序执行==》park&amp;unpark: 保证线程2始终在线程1之前运行（更加简单）</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        Thread threadOne = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="comment">// 让threadOne进入等待</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始运行"</span>);</span><br><span class="line">        }, <span class="string">"线程1号"</span>);</span><br><span class="line"></span><br><span class="line">        Thread threadTwo = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始运行"</span>);</span><br><span class="line">            <span class="comment">// 唤醒threadOne线程</span></span><br><span class="line">            LockSupport.unpark(threadOne);</span><br><span class="line">        }, <span class="string">"线程2号"</span>);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        threadOne.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        threadTwo.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上述运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">线程2号==&gt;开始运行</span><br><span class="line">线程1号==&gt;开始运行</span><br></pre></td></tr></tbody></table></figure>
<h6 id="2-2-3-2-交替执行"><a href="#2-2-3-2-交替执行" class="headerlink" title="2.2.3.2 交替执行"></a>2.2.3.2 交替执行</h6><blockquote>
<p>wait&amp;natifyAll: 交替执行</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 要求: 3个线程各自循环5次,打印内容为: abc abc abc abc abc 交替输出</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        WaitNotify wn = <span class="keyword">new</span> WaitNotify(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"a"</span>, <span class="number">1</span>, <span class="number">2</span>), <span class="string">"Thread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"b"</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">"Thread2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"c"</span>, <span class="number">3</span>, <span class="number">1</span>), <span class="string">"Thread3"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待唤醒逻辑类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始标记：默认为 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="comment">// 循环次数： 默认为 5</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaitNotify</span><span class="params">(<span class="keyword">int</span> flag, <span class="keyword">int</span> loopNumber)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印逻辑: 当flag==waitFlag时,打印当前线程内容str,并且更新flag为nextFlag,唤醒所有线程,否则进行等待,直到被唤醒而且flag符合条件,打印内容</span></span><br><span class="line"><span class="comment">     *  逻辑: str -- waitFlag -- nextFlag</span></span><br><span class="line"><span class="comment">     *      a -- 1 -- 2</span></span><br><span class="line"><span class="comment">     *      b -- 2 -- 3</span></span><br><span class="line"><span class="comment">     *      c -- 3 -- 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 打印内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitFlag 等待标记</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextFlag 下一个打印标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, <span class="keyword">int</span> waitFlag, <span class="keyword">int</span> nextFlag)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) {</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">                <span class="keyword">while</span> (flag != waitFlag) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        <span class="keyword">this</span>.wait();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 标记对应成功</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + str);</span><br><span class="line">                <span class="comment">// 更新标记</span></span><br><span class="line">                flag = nextFlag;</span><br><span class="line">                <span class="comment">// 唤醒所有线程(自由waitFlag符合条件的才能进行下次打印，其他的还是进入等待)</span></span><br><span class="line">                <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>await&amp;signal：交替执行</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 要求: 3个线程各自循环5次,打印内容为: abc abc abc abc abc 交替输出</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        WaitNotify wn = <span class="keyword">new</span> WaitNotify(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 创建3个休息室</span></span><br><span class="line">        Condition one = wn.newCondition();</span><br><span class="line">        Condition two = wn.newCondition();</span><br><span class="line">        Condition three = wn.newCondition();</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"a"</span>, one, two), <span class="string">"Thread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"b"</span>, two, three), <span class="string">"thread2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"c"</span>, three, one), <span class="string">"thread3"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程: 初始化唤醒one休息室中的线程ThreadOne</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        wn.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            one.signal();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            wn.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待唤醒逻辑类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> <span class="keyword">extends</span> <span class="title">ReentrantLock</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaitNotify</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印逻辑: 先让所有的线程都进入各自的休息室等待,然后主线程初始化唤醒one休息室内的线程,然后进行打印,然后唤醒下一个two休息室内的线程,继续大运,往复循环...</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 打印内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentCondition 当前条件变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextCondition 下一个条件变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, Condition currentCondition, Condition nextCondition)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) {</span><br><span class="line">            <span class="keyword">this</span>.lock();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    currentCondition.await();  <span class="comment">// 当此休息室内的线程被唤醒，继续执行await下面的语句</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + str);</span><br><span class="line">                    nextCondition.signal();</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="keyword">this</span>.unlock();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>park&amp;unpark：交替执行</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Thread threadOne;</span><br><span class="line">    <span class="keyword">static</span> Thread threadTwo;</span><br><span class="line">    <span class="keyword">static</span> Thread threadThree;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 要求: 3个线程各自循环5次,打印内容为: abc abc abc abc abc 交替输出</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        WaitNotify wn = <span class="keyword">new</span> WaitNotify(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启三个线程</span></span><br><span class="line">        threadOne = <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"a"</span>, threadTwo), <span class="string">"Thread1"</span>);</span><br><span class="line">        threadTwo = <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"b"</span>, threadThree), <span class="string">"Thread2"</span>);</span><br><span class="line">        threadThree = <span class="keyword">new</span> Thread(() -&gt; wn.print(<span class="string">"c"</span>, threadOne), <span class="string">"Thread3"</span>);</span><br><span class="line">        threadOne.start();</span><br><span class="line">        threadTwo.start();</span><br><span class="line">        threadThree.start();</span><br><span class="line">        <span class="comment">// 主线程默认唤醒threadOne线程</span></span><br><span class="line">        LockSupport.unpark(threadOne);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待唤醒逻辑类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaitNotify</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印逻辑: 调用park()方法的调用者默认每次就是当前线程,每个线程都先等待着,然后被唤醒后,就接着去唤醒下一个线程nextThread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextThread 下一个线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, Thread nextThread)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) {</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + str);</span><br><span class="line">            LockSupport.unpark(nextThread);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上述运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">Thread1==&gt;a</span><br><span class="line">Thread2==&gt;b</span><br><span class="line">Thread3==&gt;c</span><br><span class="line">Thread1==&gt;a</span><br><span class="line">Thread2==&gt;b</span><br><span class="line">Thread3==&gt;c</span><br><span class="line">Thread1==&gt;a</span><br><span class="line">Thread2==&gt;b</span><br><span class="line">Thread3==&gt;c</span><br><span class="line">Thread1==&gt;a</span><br><span class="line">Thread2==&gt;b</span><br><span class="line">Thread3==&gt;c</span><br><span class="line">Thread1==&gt;a</span><br><span class="line">Thread2==&gt;b</span><br><span class="line">Thread3==&gt;c</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-3-lock锁（防死锁）"><a href="#2-3-lock锁（防死锁）" class="headerlink" title="2.3 lock锁（防死锁）"></a>2.3 lock锁（防死锁）</h4><h5 id="2-3-1-可打断"><a href="#2-3-1-可打断" class="headerlink" title="2.3.1 可打断"></a>2.3.1 可打断</h5><blockquote>
<p>可打断：当此线程获取不到锁一直处于阻塞状态的时候，可以调用interrupt方法打断此线程。 使其不会一直处在阻塞状态,无限制的等待下去</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"尝试获取锁..."</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * reentrantLock.lockInterruptibly():可打断的lock锁</span></span><br><span class="line"><span class="comment">                 *       1. 如果获取锁的过程中,没有其他线程的竞争,此线程会获取到锁对象</span></span><br><span class="line"><span class="comment">                 *       2. 如果有竞争就进入阻塞队列,可以被其他线程调用interrupt方法打断,并抛出异常</span></span><br><span class="line"><span class="comment">                 * 注意: 如果是不可中断模式，那么即使使用了 interrupt 也不会让等待中断</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                reentrantLock.lockInterruptibly();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"获取锁过程被打断..."</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"成功获取锁..."</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程壹号"</span>);</span><br><span class="line"></span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"主线程竞争锁,并先获得..."</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 打断thread线程,使其不会一直处在阻塞状态,无限制的等待下去</span></span><br><span class="line">        thread.interrupt();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-3-2-锁超时"><a href="#2-3-2-锁超时" class="headerlink" title="2.3.2 锁超时"></a>2.3.2 锁超时</h5><blockquote>
<p>锁超时：当此线程无法及时获取到锁的时候，就执行finally释放锁，防止线程无限制等待下去。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"尝试获取锁..."</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 如果再规定时间内,main主线程释放了锁,那么此线程仍然可以获取到锁(reentrantLock.tryLock(1,TimeUnit.SECONDS) == true)</span></span><br><span class="line">                <span class="comment">// 否则返回false,无法获取到锁(当tryLock里面设置的参数为1时)</span></span><br><span class="line">                <span class="comment">// tryLock里面无参数：表示获取不到，就立即释放</span></span><br><span class="line">                <span class="keyword">if</span> (!reentrantLock.tryLock(<span class="number">3</span>,TimeUnit.SECONDS)) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"获取锁失败..."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">"被打断,获取不到锁"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"成功获取锁..."</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程壹号"</span>);</span><br><span class="line"></span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"主线程竞争锁,并先获得...,再启动thread线程"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：（等待3秒）</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">main主线程竞争锁,并先获得...,再启动thread线程</span><br><span class="line">线程壹号尝试获取锁...</span><br><span class="line">线程壹号成功获取锁...</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：（等待1秒）</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">main主线程竞争锁,并先获得...,再启动thread线程</span><br><span class="line">线程壹号尝试获取锁...</span><br><span class="line">线程壹号获取锁失败...</span><br></pre></td></tr></tbody></table></figure>
<h5 id="2-3-3-条件变量"><a href="#2-3-3-条件变量" class="headerlink" title="2.3.3 条件变量"></a>2.3.3 条件变量</h5><blockquote>
<p>Condition: Lock锁特有的功能，支持多个条件变量（也就是：可以定义多个休息室，当线程不满足条件时，可以到各自专门的休息室内，最后，条件满足时，再到指定的休息室中唤醒此线程，synchronized加锁的情况：所有不满足条件的线程只能到同一间休息室内。）</p>
<p>使用要点：</p>
<ul>
<li>使用await前必须先获取lock锁</li>
<li>await 执行后，会释放锁，进入 conditionObject 等待</li>
<li>await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁</li>
<li>竞争 lock 锁成功后，从 await 后继续执行</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock ROOM = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建两个休息室</span></span><br><span class="line">    <span class="keyword">static</span> Condition conditionSmoke = ROOM.newCondition();</span><br><span class="line">    <span class="keyword">static</span> Condition conditionBreakfast = ROOM.newCondition();</span><br><span class="line">    <span class="comment">// 创建两个标识</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasSmoke = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasBreakfast = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程:没有烟到对应的休息室等待,有烟开始干活的线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            ROOM.lock();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 没有烟:等待</span></span><br><span class="line">                <span class="keyword">while</span> (!hasSmoke) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(<span class="string">"没有烟==&gt;进入conditionSmoke休息室内等待"</span>);</span><br><span class="line">                        conditionSmoke.await();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 有烟: 开始干活</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始干活"</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                ROOM.unlock();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程壹号"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程:功能相同</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            ROOM.lock();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 没早餐: 等待</span></span><br><span class="line">                <span class="keyword">while</span> (!hasBreakfast) {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        System.out.println(<span class="string">"没有烟==&gt;进入conditionBreakfast休息室内等待"</span>);</span><br><span class="line">                        conditionBreakfast.await();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 有早餐: 开始干活</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;开始干活"</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                ROOM.unlock();</span><br><span class="line">            }</span><br><span class="line">        }, <span class="string">"线程贰号"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 2秒后烟送到</span></span><br><span class="line">        SendSmoke();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 1秒后早餐送到</span></span><br><span class="line">        SendBreakfast();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendSmoke</span><span class="params">()</span> </span>{</span><br><span class="line">        ROOM.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(<span class="string">"烟送到了..."</span>);</span><br><span class="line">            hasSmoke = <span class="keyword">true</span>;</span><br><span class="line">            conditionSmoke.signal();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            ROOM.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendBreakfast</span><span class="params">()</span> </span>{</span><br><span class="line">        ROOM.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(<span class="string">"早餐送到了..."</span>);</span><br><span class="line">            hasBreakfast = <span class="keyword">true</span>;</span><br><span class="line">            conditionBreakfast.signal();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            ROOM.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">没有烟==&gt;进入conditionBreakfast休息室内等待</span><br><span class="line">没有烟==&gt;进入conditionSmoke休息室内等待</span><br><span class="line">烟送到了...</span><br><span class="line">线程壹号==&gt;开始干活</span><br><span class="line">早餐送到了...</span><br><span class="line">线程贰号==&gt;开始干活</span><br></pre></td></tr></tbody></table></figure>
<h4 id="2-4-CAS无锁并发"><a href="#2-4-CAS无锁并发" class="headerlink" title="2.4 CAS无锁并发"></a>2.4 CAS无锁并发</h4><blockquote>
<p>CAS和volatile可以实现无锁并发：使用于线程数少，多核CPU的场景下</p>
<p>和synchronized锁比较：</p>
<ul>
<li>CAS基于乐观锁思想：最乐观的估计，不怕别的线程来修改共享变量资源，就算修改了也没有关系，自己再循环重试呗，</li>
<li>synchronized锁基于悲观锁思想：最悲观的估计，每时每刻都要防着其他线程来修改共享变量资源，我获取到锁，我就要执行完操作后才释放锁，其他线程才能竞争锁，才有机会。</li>
<li>CAS体现的是无锁并发、无阻塞并发。<ul>
<li>因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一</li>
<li>但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</li>
</ul>
</li>
</ul>
</blockquote>
<p>两种方式的代码示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicOperationalThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 加锁测试</span></span><br><span class="line">        Account.updateMoney(<span class="keyword">new</span> AccountUnsafe(<span class="number">10000</span>));</span><br><span class="line">        <span class="comment">// 无锁测试</span></span><br><span class="line">        Account.updateMoney(<span class="keyword">new</span> AccountSafe(<span class="number">10000</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Account</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">getBalance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣钱(每次-10元)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">(Integer money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 静态方法：可直接调用</span></span><br><span class="line"><span class="comment">     * 启动1000个线程同时操作10000元,直至余额等于0为止</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateMoney</span><span class="params">(Account account)</span> </span>{</span><br><span class="line">        List&lt;Thread&gt; threadList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 创建1000个线程:开始扣钱,直到余额等于0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            threadList.add(<span class="keyword">new</span> Thread(() -&gt; account.deductMoney(<span class="number">10</span>)));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 开启所有线程</span></span><br><span class="line">        threadList.forEach(Thread::start);</span><br><span class="line">        <span class="comment">// 设置所有1000个线程在main主线程之前执行完毕</span></span><br><span class="line">        threadList.forEach(thread -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                thread.join();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"余额:"</span> + account.getBalance() + <span class="string">"==&gt;执行时间:"</span> + (end - begin) + <span class="string">"ms"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加锁的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountUnsafe</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountUnsafe</span><span class="params">(Integer balance)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">            <span class="keyword">return</span> balance;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣钱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 每次扣的钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">(Integer money)</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">            balance -= money;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无锁的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSafe</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里的类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> AtomicInteger balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountSafe</span><span class="params">(Integer balance)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="keyword">new</span> AtomicInteger(balance);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBalance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> balance.get(); <span class="comment">// 获取当前balance值</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">(Integer money)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">// 获取余额最新值</span></span><br><span class="line">            <span class="keyword">int</span> prev = balance.get();</span><br><span class="line">            <span class="comment">// 获取修改后的余额</span></span><br><span class="line">            <span class="keyword">int</span> next = prev - money;</span><br><span class="line">            <span class="comment">// 真正进行修改的原子操作</span></span><br><span class="line">            <span class="comment">// 原理: 受限prev值先和主存中的balance的值进行比较,如果相等就返回true,就将balance的值置为next,跳出循环;</span></span><br><span class="line">            <span class="comment">// 否则就返回false,再次进行此循环,直到跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (balance.compareAndSet(prev, next)) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">余额:0==&gt;执行时间:63ms</span><br><span class="line">余额:0==&gt;执行时间:53ms</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-原子工具类"><a href="#3-原子工具类" class="headerlink" title="3. 原子工具类"></a>3. 原子工具类</h3><h4 id="3-1-原子基本数据类型"><a href="#3-1-原子基本数据类型" class="headerlink" title="3.1 原子基本数据类型"></a>3.1 原子基本数据类型</h4><blockquote>
<p>AtomicInteger、AtomicLong、AtomicBoolean等基本数据类型</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicClassTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        AtomicBoolean atomicBoolean = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">        AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面使用原子Integer演示(其他的原理相同)</span></span><br><span class="line">        AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++</span></span><br><span class="line">        System.out.println(i.getAndIncrement());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i</span></span><br><span class="line">        System.out.println(i.incrementAndGet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i</span></span><br><span class="line">        System.out.println(i.decrementAndGet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span></span><br><span class="line">        System.out.println(i.getAndDecrement());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并加值（i = 0, 结果 i = 5, 返回 0）</span></span><br><span class="line">        System.out.println(i.getAndAdd(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加值并获取（i = 5, 结果 i = 0, 返回 0）</span></span><br><span class="line">        System.out.println(i.addAndGet(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）</span></span><br><span class="line">        <span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">        System.out.println(i.getAndUpdate(p -&gt; p - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span></span><br><span class="line">        <span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">        System.out.println(i.updateAndGet(p -&gt; p + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）</span></span><br><span class="line">        <span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">        <span class="comment">// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的</span></span><br><span class="line">        <span class="comment">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final</span></span><br><span class="line">        System.out.println(i.getAndAccumulate(<span class="number">10</span>, (p, x) -&gt; p + x));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0）</span></span><br><span class="line">        <span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">        System.out.println(i.accumulateAndGet(-<span class="number">10</span>, (p, x) -&gt; p + x));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="3-2-原子引用"><a href="#3-2-原子引用" class="headerlink" title="3.2 原子引用"></a>3.2 原子引用</h4><blockquote>
<p>原子引用：AtomicReference和AtomicInteger非常类似，不同之处就在于AtomicInteger是对整数的封装，底层采用的是compareAndSwapInt实现CAS，比较的是数值是否相等，而AtomicReference则对应普通的对象引用，底层使用的是compareAndSwapObject实现CAS，比较的是两个对象的地址是否相等。也就是它可以保证你在修改对象引用时的线程安全性。</p>
</blockquote>
<p>对于BigDecimal大数的原子操作示例：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicOperationalThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 加锁测试</span></span><br><span class="line">        Account.updateMoney(<span class="keyword">new</span> AccountUnsafe(<span class="keyword">new</span> BigDecimal(<span class="string">"10000"</span>)));</span><br><span class="line">        <span class="comment">// 无锁测试</span></span><br><span class="line">        Account.updateMoney(<span class="keyword">new</span> AccountSafe(<span class="keyword">new</span> BigDecimal(<span class="string">"10000"</span>)));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Account</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">BigDecimal <span class="title">getBalance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣钱(每次-10元)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">(BigDecimal money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 启动1000个线程同时操作10000元,直至余额等于0为止</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateMoney</span><span class="params">(Account account)</span> </span>{</span><br><span class="line">        List&lt;Thread&gt; threadList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 创建1000个线程:开始扣钱,直到余额等于0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            threadList.add(<span class="keyword">new</span> Thread(() -&gt; account.deductMoney(<span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>))));</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 开启所有线程</span></span><br><span class="line">        threadList.forEach(Thread::start);</span><br><span class="line">        <span class="comment">// 将所有线程再main主线程之前执行</span></span><br><span class="line">        threadList.forEach(thread -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                thread.join();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"余额:"</span> + account.getBalance() + <span class="string">"==&gt;执行时间:"</span> + (end - begin) + <span class="string">"ms"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加锁的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountUnsafe</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountUnsafe</span><span class="params">(BigDecimal balance)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">            <span class="keyword">return</span> balance;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣钱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 每次扣的钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">(BigDecimal money)</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {</span><br><span class="line">            balance = balance.subtract(money);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无锁的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSafe</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明变量为原子引用类型</span></span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;BigDecimal&gt; balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountSafe</span><span class="params">(BigDecimal balance)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="keyword">new</span> AtomicReference&lt;&gt;(balance);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> balance.get(); <span class="comment">// 获取当前balance值</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">(BigDecimal money)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="comment">// 获取余额最新值</span></span><br><span class="line">            BigDecimal prev = balance.get();</span><br><span class="line">            <span class="comment">// 获取修改后的余额(掉用相关方法)</span></span><br><span class="line">            BigDecimal next = prev.subtract(money);</span><br><span class="line">            <span class="comment">// 真正进行修改的原子操作</span></span><br><span class="line">            <span class="comment">// 原理: 受限prev值先和主存中的balance的值进行比较,如果相等就返回true,就将balance的值置为next,跳出循环;</span></span><br><span class="line">            <span class="comment">// 否则就返回false,再次进行此循环,直到跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (balance.compareAndSet(prev, next)) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">余额:0==&gt;执行时间:68ms</span><br><span class="line">余额:0==&gt;执行时间:59ms</span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-线程池"><a href="#4-线程池" class="headerlink" title="4. 线程池"></a>4. 线程池</h3><h4 id="4-1-线程池种类"><a href="#4-1-线程池种类" class="headerlink" title="4.1 线程池种类"></a>4.1 线程池种类</h4><p><code>newFixedThreadPool</code></p>
<blockquote>
<p>newFixedThreadPool：适用于任务量已知，相对耗时的任务</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorThreadPool</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建固定线程数量的线程池(创建的是非守护线程)</span></span><br><span class="line">        <span class="comment">// 实现线程工厂ThreadFactory: 自定义线程名称</span></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>, <span class="keyword">new</span> ThreadFactory() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义线程名称</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"线程"</span> + atomicInteger.getAndIncrement() + <span class="string">"号"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 开启第一个线程</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启第二个线程</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结束线程</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>newCachedThreadPool</code></p>
<blockquote>
<p>newCachedThreadPool：整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线程。 适合任务数比较密集，但每个任务执行时间较短的情况。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorThreadPool</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newCachedThreadPool(<span class="keyword">new</span> ThreadFactory() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义线程名称</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"线程"</span> + atomicInteger.getAndIncrement() + <span class="string">"号"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启第一个线程</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启第二个线程</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束线程</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>newSingleThreadExecutor</code></p>
<blockquote>
<p>newSingleThreadExecutor：希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程也不会被释放。</p>
<p>区别：</p>
<ul>
<li>自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而这个线程池还会新建一个线程，保证池的正常工作。</li>
<li>Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改，而Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorThreadPool</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newSingleThreadExecutor(<span class="keyword">new</span> ThreadFactory() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义线程名称</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"线程"</span> + atomicInteger.getAndIncrement() + <span class="string">"号"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启第一个线程</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启第二个线程</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束线程</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-2-任务提交"><a href="#4-2-任务提交" class="headerlink" title="4.2 任务提交"></a>4.2 任务提交</h4><p><code>execute和submit</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorThreadPool</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newSingleThreadExecutor(<span class="keyword">new</span> ThreadFactory() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义线程名称</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"线程"</span> + atomicInteger.getAndIncrement() + <span class="string">"号"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// execute提交任务</span></span><br><span class="line">        threadPool.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// submit提交任务: 有返回值</span></span><br><span class="line">        Future&lt;Integer&gt; future = threadPool.submit(<span class="keyword">new</span> Callable&lt;&gt;() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                    <span class="keyword">int</span> finalValue = i;</span><br><span class="line">                    atomicInteger.updateAndGet(operand -&gt; operand + finalValue);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> atomicInteger.get();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">// 输出返回结果</span></span><br><span class="line">        System.out.println(<span class="string">"Callable返回值:"</span> + future.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束所有线程</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>invokeAll</code></p>
<blockquote>
<p>提交 tasks 中所有任务</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorThreadPool</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">3</span>, <span class="keyword">new</span> ThreadFactory() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义线程名称</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"线程"</span> + atomicInteger.getAndIncrement() + <span class="string">"号"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// invokeAll无过期时间方式(参数中可以设置过期时间)</span></span><br><span class="line">        List&lt;Future&lt;String&gt;&gt; futures = threadPool.invokeAll(Arrays.asList(</span><br><span class="line">                () -&gt; {</span><br><span class="line">                    System.out.println(<span class="string">"开始执行..."</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"one"</span>;</span><br><span class="line">                },</span><br><span class="line">                () -&gt; {</span><br><span class="line">                    System.out.println(<span class="string">"开始执行..."</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"two"</span>;</span><br><span class="line">                },</span><br><span class="line">                () -&gt; {</span><br><span class="line">                    System.out.println(<span class="string">"开始执行..."</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"three"</span>;</span><br><span class="line">                }</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历输出返回结果</span></span><br><span class="line">        futures.forEach(stringFuture -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"value==&gt;"</span> + stringFuture.get());</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            } <span class="keyword">catch</span> (ExecutionException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结束所有线程</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><code>invokeAny</code></p>
<blockquote>
<p>提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorThreadPool</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">3</span>, <span class="keyword">new</span> ThreadFactory() {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义线程名称</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"线程"</span> + atomicInteger.getAndIncrement() + <span class="string">"号"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 参数中也可以设置超时时间</span></span><br><span class="line">        String result = threadPool.invokeAny(Arrays.asList(</span><br><span class="line">                () -&gt; {</span><br><span class="line">                    System.out.println(<span class="string">"开始执行..."</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"one"</span>;</span><br><span class="line">                },</span><br><span class="line">                () -&gt; {</span><br><span class="line">                    System.out.println(<span class="string">"开始执行..."</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"two"</span>;</span><br><span class="line">                },</span><br><span class="line">                () -&gt; {</span><br><span class="line">                    System.out.println(<span class="string">"开始执行..."</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"three"</span>;</span><br><span class="line">                }</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"result:"</span> + result);</span><br><span class="line">        <span class="comment">// 结束所有线程</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果：</p>
<figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">开始执行...</span><br><span class="line">开始执行...</span><br><span class="line">开始执行...</span><br><span class="line">result:one</span><br></pre></td></tr></tbody></table></figure>
<h4 id="4-3-线程池关闭"><a href="#4-3-线程池关闭" class="headerlink" title="4.3 线程池关闭"></a>4.3 线程池关闭</h4><blockquote>
<ul>
<li>shutdown()方法：在结束之前，已经提交的任务会执行完毕，调用shutdown方法后，再提交的任务就不再执行。</li>
<li>shutdownNow()方法：调用此方法后，正在执行的方法都会以（）的方式被打断，已提交进入队列但还没有执行的任务，会以<code>List&lt;Runnable&gt;</code>的方式返回。</li>
</ul>
</blockquote>
<h2 id="Redis进阶"><a href="#Redis进阶" class="headerlink" title="Redis进阶"></a>Redis进阶</h2><h3 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p><strong>Redis命令参考网站：</strong><a href="http://redisdoc.com/">http://redisdoc.com </a></p>
<blockquote>
<ul>
<li>Redis非关系型数据库，默认有16个分库，一般我们默认使用第0个库</li>
<li>Redis中命令不区分大小写</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1  <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; DBSIZE <span class="comment"># 查询当前数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name horse <span class="comment"># 设置一个string类型的键值数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name <span class="comment"># 获取key对应的值</span></span><br><span class="line"><span class="string">"horse"</span></span><br><span class="line">127.0.0.1:6379&gt; DBSIZE <span class="comment"># 当前数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 当前数据库的所有key</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; flushdb <span class="comment"># 清空当前数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; flushall <span class="comment"># 清空所有（16个）数据库数据</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><strong>Redis是单线程的！！！</strong></p>
<ul>
<li>Redis是基于内存的操作，CPU性能不是Redis的性能瓶颈，Redis的性能瓶颈是根据机器的内存和网络带宽来影响的。</li>
<li>Redis是C语言写的，官方数据表示100000+QPS,完全不比同时使用key-value的Menecache性能差。</li>
</ul>
<p><strong>Redis单线程为什么仍然还那么快？</strong></p>
<ul>
<li>人们常有的误区：<ol>
<li>高性能的服务器一定是多线程的</li>
<li>多线程的效率一定比单线程的效率高</li>
</ol>
</li>
<li>why：Redis是将所有的数据全部放进内存中，如果使用多线程操作的话，在这期间会有CPU上下文切换的操作，比较耗时，影响效率，而Redis使用单线程去操作数据，一条线进行到底，效率会更高。对于内存来讲，没有CPU切换的效率是最高的，多次读写都是在一个CPU上面，所以Redis的效率也很高。</li>
</ul>
</blockquote>
<h4 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h4><blockquote>
<p>redis中关于key的命令演示</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name horse</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 22</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *  # 设置两个key-value键值对</span><br><span class="line">1) "name"</span><br><span class="line">2) "age"</span><br><span class="line">127.0.0.1:6379&gt; EXISTS name age sex  # 查询key是否存在（结果：只存在前两个，sex不存在）</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; move name  # 移除一个key-value键值对</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "age"</span><br><span class="line">127.0.0.1:6379&gt; expire age 30  # 为key-value键值对设置过期时间（单位：秒）</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl age # 查看当前key的剩余时间</span><br><span class="line">(integer) 25</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) 23</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) 21</span><br><span class="line">127.0.0.1:6379&gt; type age # 查看当前key的类型（set关键字设置的都是string类型的）</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis基本数据类型"><a href="#Redis基本数据类型" class="headerlink" title="Redis基本数据类型"></a>Redis基本数据类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><blockquote>
<p>String类型是Redis中最常用的一种数据类型，据说，90%的程序员只会使用String类型（当然这是玩笑话）</p>
<p>使用场景：</p>
<ul>
<li>Redis计数器（浏览量计数，秒杀限流…）<ul>
<li>incr/decr命令的自增/自减操作实现</li>
</ul>
</li>
<li>统计多单位的数量（同时统计用户的文章数量，粉丝数量，评论数量等）<ul>
<li>mset/mget命令的批量设置/获取操作实现</li>
</ul>
</li>
<li>对象缓存存储：（就是我们常用的缓存数据到内存中的方式）<ul>
<li>例如：blog:{id} {json内容}</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name horse</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"horse"</span><br><span class="line">127.0.0.1:6379&gt; EXISTS name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; APPEND name @muzi  # 追加key为name的值（如果这个key不存在，相当于set命令）和Java中append方法效果相同</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; STRLEN name  # 获取key的长度</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"horse@muzi"</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用场景：redis计数器（原子操作）</span></span><br><span class="line">127.0.0.1:6379&gt; set views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">"0"</span><br><span class="line">127.0.0.1:6379&gt; INCR views  # 自增+1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">"1"</span><br><span class="line">127.0.0.1:6379&gt; INCR views</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; incr views</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10 # 可以设置步长,执行增量（自增+10）</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; DECRby views 5 # 自减-5</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; decr views  # 自减-1</span><br><span class="line">(integer) 7</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取字符串range</span></span><br><span class="line">127.0.0.1:6379&gt; set content horsemuzi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get content</span><br><span class="line">"horsemuzi"</span><br><span class="line">127.0.0.1:6379&gt; getrange content 0 4  # 截取字符串：从下标0开始到下标4结束（包含头尾）</span><br><span class="line">"horse"</span><br><span class="line">127.0.0.1:6379&gt; getrange content 0 -1  # 获取全部字符串，和get命令效果相同（-1：表示到最后位置）</span><br><span class="line">"horsemuzi"</span><br><span class="line">127.0.0.1:6379&gt; setrange content 1 xxxx # 从指定下标开始替换相应的字符串</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; get content</span><br><span class="line">"hxxxxmuzi"</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line"><span class="meta">#</span><span class="bash"> setex(<span class="built_in">set</span> with expire) :带有过期时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setnx(<span class="built_in">set</span> <span class="keyword">if</span> not exist): 不存在则设置（在分布式锁中常用）</span></span><br><span class="line">127.0.0.1:6379&gt; setex name 60 horse  # 设置过期时间</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 57</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey "redis"  # 如果mykey不存在，则返回1，表明设置成功</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey "mogoDB"  # 如果mykey已存在，则返回0，表明设置不成功</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "mykey"</span><br><span class="line">2) "name"</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl mykey # -1:表示永久存在，没有时间限制</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量操作键值对</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3  # 同时设置多个key-value键值对</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "k3"</span><br><span class="line">2) "k1"</span><br><span class="line">3) "k2"</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3  # 同时获取多个key值</span><br><span class="line">1) "v1"</span><br><span class="line">2) "v2"</span><br><span class="line">3) "v3"</span><br><span class="line">127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4  # msetnx命令：是一个原子性的操作，要么一起成功，要么一起（当k1值已存在，所以设置失败）</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis中可以设置一个user:1对象为key,json字符串内容为对象内容，进行存储，redis支持这样的操作（常用操作：读取对应的json字符串，然后解析其内容进行使用）</span></span><br><span class="line">127.0.0.1:6379&gt; set user:1 {name:horse,age:3}</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get user:1</span><br><span class="line">"{name:horse,age:3}"</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">getset命令：先获取后设置</span><br><span class="line">127.0.0.1:6379&gt; getset k1 v11 # 如果当前key存在，则返回当前key原来的值，再将当前key值修改新的值为v11</span><br><span class="line">"v1"</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">"v11"</span><br><span class="line">127.0.0.1:6379&gt; getset k4 v4  # 如果当前key不存在，则返回nil,并且设置当前key的值</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">"v4"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><blockquote>
<p>List类型：我们可以将redis中的list类型改造成栈、队列、阻塞队列等…（如果使用MQ消息队列太重量级的话，可以适当进行改造）</p>
<ul>
<li>改造模拟逻辑：<ul>
<li>消息队列：lpush(左边进) —&gt; rpop(右边出)</li>
<li>栈：lpush(左边进) —&gt; lpop(左边出)</li>
</ul>
</li>
</ul>
<p>特点：</p>
<ul>
<li><p><strong>list中可以存在重复值</strong></p>
</li>
<li><p>list实际上是一个链表，左边和右边都可以插入值</p>
<ul>
<li><p>如果移除了某个list中的所有值，list成为空链表，那么此时这个链表也就不复存在啦</p>
</li>
<li><p>在两边插入或者改变值，效率最高，越往中间，效率越低（链表特性）</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">lpush：将一个值或多个值，push进列表的头部（从左边开始插入）</span><br><span class="line">lpop：从左边开始移除一个元素</span><br><span class="line">rpush：将一个值或者多个值，push进列表的尾部（从右边开始插入）</span><br><span class="line">rpop： 从右边开始移除一个元素</span><br><span class="line">lindex：通过索引下标获取list中的对应的某个值</span><br><span class="line">llen：获取list的长度</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one two three  # 将一个值或多个值，push进列表的头部（从左边开始插入）</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1 # 获取list中的区间值</span><br><span class="line">1) "three"</span><br><span class="line">2) "two" </span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  # 获取list中全部的值</span><br><span class="line">1) "three"</span><br><span class="line">2) "two"</span><br><span class="line">3) "one"</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list four five  # 将一个值或者多个值，push进列表的尾部（从右边开始插入）</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "three"</span><br><span class="line">2) "two"</span><br><span class="line">3) "one"</span><br><span class="line">4) "four"</span><br><span class="line">5) "five"</span><br><span class="line">127.0.0.1:6379&gt; lpop list  # 从左边开始移除一个元素</span><br><span class="line">"three"</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "two"</span><br><span class="line">2) "one"</span><br><span class="line">3) "four"</span><br><span class="line">4) "five"</span><br><span class="line">127.0.0.1:6379&gt; rpop list # 从右边开始移除一个元素</span><br><span class="line">"five"</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "two"</span><br><span class="line">2) "one"</span><br><span class="line">3) "four"</span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 1  # 通过索引下标获取list中的对应的某个值</span><br><span class="line">"one"</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "two"</span><br><span class="line">2) "one"</span><br><span class="line">3) "four"</span><br><span class="line">127.0.0.1:6379&gt; llen list  # 获取list的长度</span><br><span class="line">(integer) 3</span><br><span class="line">=================================================================================================================</span><br><span class="line">lrem：使用场景：根据uid取消关注等（移除指定的值）</span><br><span class="line">127.0.0.1:6379&gt; lpush list one  # list中可以存储重复的值</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "one"</span><br><span class="line">2) "two"</span><br><span class="line">3) "one"</span><br><span class="line">4) "four"</span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 two  # 移除指定数量的list中指定的值（根据值进行精确匹配）</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "one"</span><br><span class="line">2) "one"</span><br><span class="line">3) "four"</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 one  # 移除指定数量的匹配值</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "four"</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 four # 移除指定数量的匹配值（list中匹配的值如果小于指定删除的数量值，则匹配值全部删除）</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">ltrim：截取指定长度list中的值</span><br><span class="line">127.0.0.1:6379&gt; rpush user:list horse horse1 horse2 horse3</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange user:list 0 -1</span><br><span class="line">1) "horse"</span><br><span class="line">2) "horse1"</span><br><span class="line">3) "horse2"</span><br><span class="line">4) "horse3"</span><br><span class="line">127.0.0.1:6379&gt; LTRIM user:list 1 2  # 通过索引下标截取指定的长度（这时，user:list中就只有截取的值，而不是截取剩下的值）</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange user:list 0 -1</span><br><span class="line">1) "horse1"</span><br><span class="line">2) "horse2"</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">rpoplpush：（组合命令：也可以使用上面的命令，先pop，再push,效果一样）移除列表的最后一个元素，将此元素移动到新的列表中去</span><br><span class="line">lset：更新list中执行索引下标的值（该下标对应的值必须存在，否则报错！！！）</span><br><span class="line">127.0.0.1:6379&gt; lpush list one two three four</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1  # 查看list原来值</span><br><span class="line">1) "four"</span><br><span class="line">2) "three"</span><br><span class="line">3) "two"</span><br><span class="line">4) "one"</span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH list new:list  # 执行操作</span><br><span class="line">"one"</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 # 再查看list中的值（右边最后一个元素已经被pop出去）</span><br><span class="line">1) "four"</span><br><span class="line">2) "three"</span><br><span class="line">3) "two"</span><br><span class="line">127.0.0.1:6379&gt; lrange new:list 0 -1  # 查看新列表的值</span><br><span class="line">1) "one"</span><br><span class="line">127.0.0.1:6379&gt; LSET new:list 0 two  # 更新list中执行索引下标的值（该下标对应的值必须存在，否则报错！！！）</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange new:list 0 -1  # 查看：修改成功</span><br><span class="line">1) "two"</span><br><span class="line">127.0.0.1:6379&gt; LPOP new:list  # 弹出该值（此时new:list中没有任何值）</span><br><span class="line">"two"</span><br><span class="line">127.0.0.1:6379&gt; lrange new:list 0 -1</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; LSET new:list 0 two  # 更新指定索引的值，果然报错</span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">linsert：将某个value值插入到列表中某个值的前面或者后面</span><br><span class="line">127.0.0.1:6379&gt; lpush list one two three four</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "four"</span><br><span class="line">2) "three"</span><br><span class="line">3) "two"</span><br><span class="line">4) "one"</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list before three other_value # 在three值前面插入一个值</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "four"</span><br><span class="line">2) "other_value"</span><br><span class="line">3) "three"</span><br><span class="line">4) "two"</span><br><span class="line">5) "one"</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list after three after_value # # 在three值后面插入一个值</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) "four"</span><br><span class="line">2) "other_value"</span><br><span class="line">3) "three"</span><br><span class="line">4) "after_value"</span><br><span class="line">5) "two"</span><br><span class="line">6) "one"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><blockquote>
<p>Set类型：类似于Java中的Set集合一样，是无需不重复集合</p>
<p>特性：</p>
<ul>
<li>set中的值不能重复（和list的区别）</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">sadd：给<span class="built_in">set</span>中添加元素</span><br><span class="line">smembers： 查看指定<span class="built_in">set</span>的所有成员元素</span><br><span class="line">sismember： 查看<span class="built_in">set</span>中指定成员元素是否存在，存在返回 1，否则返回 0</span><br><span class="line">scard：获取<span class="built_in">set</span>的成员元素的数量</span><br><span class="line">srem：移除<span class="built_in">set</span>中指定的元素（如果存在，直接移除，否则不进行移除）</span><br><span class="line">srandmember：随机返回指定数量的成员元素，如果不指定，默认返回一个</span><br><span class="line">spop：随机删除指定数量的成员元素，如果不指定，默认删除一个</span><br><span class="line">smvoe：将<span class="built_in">set</span>中指定的成员元素移动到另外一个新的<span class="built_in">set</span>中（如果新集合不存在，就新建一个）</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> one two three three  <span class="comment"># 给set中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span>  <span class="comment"># 查看指定set的所有成员元素</span></span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"one"</span></span><br><span class="line">3) <span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER <span class="built_in">set</span> one  <span class="comment"># 查看set中指定成员元素是否存在，存在返回 1，否则返回 0</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER <span class="built_in">set</span> four</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; scard <span class="built_in">set</span>  <span class="comment"># 获取set的成员元素的数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; srem <span class="built_in">set</span> one <span class="comment"># 移除set中指定的元素（如果存在，直接移除，否则不进行移除）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; srem <span class="built_in">set</span> four</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span>  <span class="comment"># 查看移除成功</span></span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> one four five six seven eight nine ten</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line"> 1) <span class="string">"two"</span></span><br><span class="line"> 2) <span class="string">"four"</span></span><br><span class="line"> 3) <span class="string">"six"</span></span><br><span class="line"> 4) <span class="string">"seven"</span></span><br><span class="line"> 5) <span class="string">"three"</span></span><br><span class="line"> 6) <span class="string">"eight"</span></span><br><span class="line"> 7) <span class="string">"ten"</span></span><br><span class="line"> 8) <span class="string">"five"</span></span><br><span class="line"> 9) <span class="string">"nine"</span></span><br><span class="line">10) <span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span>  <span class="comment"># 随机返回一个成员元素</span></span><br><span class="line"><span class="string">"ten"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">"six"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">"three"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span> 2 <span class="comment"># 随即返回执行数量的成员元素</span></span><br><span class="line">1) <span class="string">"four"</span></span><br><span class="line">2) <span class="string">"nine"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span> 2</span><br><span class="line">1) <span class="string">"four"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">127.0.0.1:6379&gt; spop <span class="built_in">set</span>  <span class="comment"># 随机删除set中的一个成员元素</span></span><br><span class="line"><span class="string">"one"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"ten"</span></span><br><span class="line">2) <span class="string">"five"</span></span><br><span class="line">3) <span class="string">"two"</span></span><br><span class="line">4) <span class="string">"six"</span></span><br><span class="line">5) <span class="string">"seven"</span></span><br><span class="line">6) <span class="string">"eight"</span></span><br><span class="line">7) <span class="string">"nine"</span></span><br><span class="line">8) <span class="string">"four"</span></span><br><span class="line">9) <span class="string">"three"</span></span><br><span class="line">127.0.0.1:6379&gt; spop <span class="built_in">set</span> 5  <span class="comment"># 删除set中指定数量的成员元素</span></span><br><span class="line">1) <span class="string">"three"</span></span><br><span class="line">2) <span class="string">"four"</span></span><br><span class="line">3) <span class="string">"nine"</span></span><br><span class="line">4) <span class="string">"eight"</span></span><br><span class="line">5) <span class="string">"six"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"ten"</span></span><br><span class="line">2) <span class="string">"five"</span></span><br><span class="line">3) <span class="string">"two"</span></span><br><span class="line">4) <span class="string">"seven"</span></span><br><span class="line">127.0.0.1:6379&gt; SMOVE <span class="built_in">set</span> new:<span class="built_in">set</span> five  <span class="comment"># 将set中指定的成员元素移动到另外一个新的set中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span>  <span class="comment"># 查看set成员元素</span></span><br><span class="line">1) <span class="string">"ten"</span></span><br><span class="line">2) <span class="string">"two"</span></span><br><span class="line">3) <span class="string">"seven"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS new:<span class="built_in">set</span>  <span class="comment"># 查看新的set中成员元素</span></span><br><span class="line">1) <span class="string">"five"</span></span><br><span class="line">=================================================================================================================</span><br><span class="line">微博、B栈的共同关注，共同爱好、等功能实现（并集可以实现）</span><br><span class="line">逻辑：将A用户的关注的UP主放进一个set1中，将B用户的关注的UP主也放进一个se2t中，set1和set2的交集就是两个用户的共同关注，其他的功能实现也是类似</span><br><span class="line">127.0.0.1:6379&gt; sadd one:<span class="built_in">set</span> a b c d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; sadd two:<span class="built_in">set</span> c d e f g</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; sdiff one:<span class="built_in">set</span> two:<span class="built_in">set</span>  <span class="comment"># 差集</span></span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">127.0.0.1:6379&gt; sinter one:<span class="built_in">set</span> two:<span class="built_in">set</span>  <span class="comment"># 交集 （共同好友的功能可以这样实现）</span></span><br><span class="line">1) <span class="string">"d"</span></span><br><span class="line">2) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; sunion one:<span class="built_in">set</span> two:<span class="built_in">set</span>  <span class="comment"># 并集</span></span><br><span class="line">1) <span class="string">"c"</span></span><br><span class="line">2) <span class="string">"g"</span></span><br><span class="line">3) <span class="string">"f"</span></span><br><span class="line">4) <span class="string">"e"</span></span><br><span class="line">5) <span class="string">"d"</span></span><br><span class="line">6) <span class="string">"b"</span></span><br><span class="line">7) <span class="string">"a"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><blockquote>
<p>Hash类型：本质和String类型的key-value数据差不多，只不过value值在这里是一个Map集合而已。</p>
<p>使用场景：</p>
<ul>
<li>适用于存储一些经常变更的数据，比如存储一个user:1对象，存储它的name，age，sex等字段信息，随时可以准确变更，而存储为String的话，如果只更新user:1中的某个字段值，还需要把整个user:1对象覆盖掉来进行更新字段数据，怎样太慢，而hash可以进行准确的字段数据更新，操作更加方便。</li>
<li>总之：Hash适合存储对象，String适合存储字符串，使用时要合理选择。</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">hash的命令和String的命令相似，只是要以h开头</span><br><span class="line">hset：set一个kye为log,值为 001-one的map键值对</span><br><span class="line">hget：获取一个值</span><br><span class="line">hmset：set多个key-value值</span><br><span class="line">hmget：获取多个key-value值</span><br><span class="line">hgetall：查看所有key为log的所有hash值（包括key和对应的value）</span><br><span class="line">hlen：查看hash的字段数量（一个key里面有多少个key-value键值对）</span><br><span class="line">HEXISTS：查看hash指定字段是否存在，不存在返回0，存在返回1</span><br><span class="line">hkeys：只获取hash的所有key值</span><br><span class="line">hvals：只获取hash的所有value值</span><br><span class="line">HINCRBY：指定增量，增加数值(指定增量为负数，相当于进行减法操作)</span><br><span class="line">hsetnx：如果字段值不存在就设置，否则就不设置</span><br><span class="line">127.0.0.1:6379&gt; hset log 001 one  # set一个kye为log,值为 001-one的map键值对</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget log 001  # 获取一个值</span><br><span class="line">"one"</span><br><span class="line">127.0.0.1:6379&gt; hmset log 002 two 003 three 004 four  # set多个key-value值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget log 001 002 003 004  # 获取多个key-value值</span><br><span class="line">1) "one"</span><br><span class="line">2) "two"</span><br><span class="line">3) "three"</span><br><span class="line">4) "four"</span><br><span class="line">127.0.0.1:6379&gt; HGETALL log  # 查看所有key为log的所有hash值（包括key和对应的value）</span><br><span class="line">1) "001"</span><br><span class="line">2) "one"</span><br><span class="line">3) "002"</span><br><span class="line">4) "two"</span><br><span class="line">5) "003"</span><br><span class="line">6) "three"</span><br><span class="line">7) "004"</span><br><span class="line">8) "four"</span><br><span class="line">127.0.0.1:6379&gt; HLEN log  # 查看hash的字段数量（一个key里面有多少个key-value键值对）</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; HDEL log 002  # 删除hash指定的key字段，对应的value也就消失了</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL log</span><br><span class="line">1) "001"</span><br><span class="line">2) "one"</span><br><span class="line">3) "003"</span><br><span class="line">4) "three"</span><br><span class="line">5) "004"</span><br><span class="line">6) "four"</span><br><span class="line">127.0.0.1:6379&gt; hlen log  # 再次查看长度（删除成功）</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS log oo3  # 查看hash指定字段是否存在，不存在返回0，存在返回1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS log 004</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hkeys log  # 只获取hash的所有key值</span><br><span class="line">1) "001"</span><br><span class="line">2) "003"</span><br><span class="line">3) "004"</span><br><span class="line">127.0.0.1:6379&gt; hvals log  # 只获取hash的所有value值</span><br><span class="line">1) "one"</span><br><span class="line">2) "three"</span><br><span class="line">3) "four"</span><br><span class="line">127.0.0.1:6379&gt; hset blog views 0  </span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY blog views 10  # 指定增量，增加数值</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; hincrby blog views -5  # 指定增量为负数，相当于进行减法操作</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; hsetnx blog name "blogName"  # 如果字段值不存在就设置，否则就不设置</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hsetnx  blog name "name"  # 字段值已存在，没有设置成功</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; HGETALL blog  # 查看所有key-value</span><br><span class="line">1) "views"</span><br><span class="line">2) "5"</span><br><span class="line">3) "name"</span><br><span class="line">4) "blogName"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h4><blockquote>
<p>Zset类型：和set类型，list类型都差不多，只不过增加了一个score的标志（可以根据score进行一些逻辑操作）</p>
<p>使用场景：</p>
<ul>
<li>排序：班级成绩排序，工资表排序</li>
<li>设置权重：例如，将普通消息的score设置为1，重要消息score设置为2，然后根据score的值来判断消息类型，进行业务逻辑操作</li>
<li>各种排行榜的实现…</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">zadd：往zset中设置一个值或多个值</span><br><span class="line">127.0.0.1:6379&gt; zadd zset 1 one  # 往zset中设置一个值</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zset 2 two 3 three 4 four  # 一次设置多个值</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1  # 查看所有值</span><br><span class="line">1) "one"</span><br><span class="line">2) "two"</span><br><span class="line">3) "three"</span><br><span class="line">4) "four"</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">zrange：默认从小到大按照score（score若相等，按照字典顺序）的值排列成员</span><br><span class="line">zrevrange：默认从大到小按照score（score若相等，按照字典顺序）的值排列成员</span><br><span class="line">ZRANGEBYSCORE：显式整个有序集（-inf：负无穷，+inf：正无穷）默认按照升序排列</span><br><span class="line">zcount：显示在-inf到+inf区间内的成员数量(获取指定区间的成员数量)</span><br><span class="line">zcard：显示整个zset中的成员数量</span><br><span class="line">zrevrangebyscore：逆序排列所有成员</span><br><span class="line">zrem：移除zset中指定的一个或多个成员，返回移除成功的个数，被移除成员不存在，则返回0</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 1100 horse 2200 muzi 3300 lili 4400 shasha 5500 siyu</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1  # 默认从小到大按照score（score若相等，按照字典顺序）的值排列成员</span><br><span class="line">1) "horse"</span><br><span class="line">2) "muzi"</span><br><span class="line">3) "lili"</span><br><span class="line">4) "shasha"</span><br><span class="line">5) "siyu"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf  # 显式整个有序集（-inf：负无穷，+inf：正无穷）</span><br><span class="line">1) "horse"</span><br><span class="line">2) "muzi"</span><br><span class="line">3) "lili"</span><br><span class="line">4) "shasha"</span><br><span class="line">5) "siyu"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores  # 显示整个有序集及成员的 score 值</span><br><span class="line"> 1) "horse"</span><br><span class="line"> 2) "1100"</span><br><span class="line"> 3) "muzi"</span><br><span class="line"> 4) "2200"</span><br><span class="line"> 5) "lili"</span><br><span class="line"> 6) "3300"</span><br><span class="line"> 7) "shasha"</span><br><span class="line"> 8) "4400"</span><br><span class="line"> 9) "siyu"</span><br><span class="line">10) "5500"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores limit 1 3  # 显示整个有序集成员的score值并且条跳过1个查询3个</span><br><span class="line">1) "muzi"</span><br><span class="line">2) "2200"</span><br><span class="line">3) "lili"</span><br><span class="line">4) "3300"</span><br><span class="line">5) "shasha"</span><br><span class="line">6) "4400"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 4000 withscores  # 显示 &lt;=4000 的成员</span><br><span class="line">1) "horse"</span><br><span class="line">2) "1100"</span><br><span class="line">3) "muzi"</span><br><span class="line">4) "2200"</span><br><span class="line">5) "lili"</span><br><span class="line">6) "3300"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary 4000 +inf withscores  # 显示 &gt;=4000 的成员</span><br><span class="line">1) "shasha"</span><br><span class="line">2) "4400"</span><br><span class="line">3) "siyu"</span><br><span class="line">4) "5500"</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1 withscores</span><br><span class="line"> 1) "horse"</span><br><span class="line"> 2) "1100"</span><br><span class="line"> 3) "muzi"</span><br><span class="line"> 4) "2200"</span><br><span class="line"> 5) "lili"</span><br><span class="line"> 6) "3300"</span><br><span class="line"> 7) "shasha"</span><br><span class="line"> 8) "4400"</span><br><span class="line"> 9) "siyu"</span><br><span class="line">10) "5500"</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores  # 默认从大到小按照score（score若相等，按照字典顺序）的值排列成员</span><br><span class="line"> 1) "siyu"</span><br><span class="line"> 2) "5500"</span><br><span class="line"> 3) "shasha"</span><br><span class="line"> 4) "4400"</span><br><span class="line"> 5) "lili"</span><br><span class="line"> 6) "3300"</span><br><span class="line"> 7) "muzi"</span><br><span class="line"> 8) "2200"</span><br><span class="line"> 9) "horse"</span><br><span class="line">10) "1100"</span><br><span class="line">127.0.0.1:6379&gt; zcount salary -inf +inf  # 显示在-inf到+inf区间内的成员数量(获取指定区间的成员数量)</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; zcard salary  # 显示整个zset中的成员数量</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE salary 6000 2000 withscores  # 逆序排列salary从6000到2000之间的成员</span><br><span class="line">1) "siyu"</span><br><span class="line">2) "5500"</span><br><span class="line">3) "shasha"</span><br><span class="line">4) "4400"</span><br><span class="line">5) "lili"</span><br><span class="line">6) "3300"</span><br><span class="line">7) "muzi"</span><br><span class="line">8) "2200"</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE salary +inf -inf withscores  # 逆序排列所有成员</span><br><span class="line"> 1) "siyu"</span><br><span class="line"> 2) "5500"</span><br><span class="line"> 3) "shasha"</span><br><span class="line"> 4) "4400"</span><br><span class="line"> 5) "lili"</span><br><span class="line"> 6) "3300"</span><br><span class="line"> 7) "muzi"</span><br><span class="line"> 8) "2200"</span><br><span class="line"> 9) "horse"</span><br><span class="line">10) "1100"</span><br><span class="line">127.0.0.1:6379&gt; ZREM salary siyu lili  # 移除zset中指定的一个或多个成员，返回移除成功的个数，被移除成员不存在，则返回0</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREM salary sss  # 被移除成员不存在，则返回0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) "horse"</span><br><span class="line">2) "muzi"</span><br><span class="line">3) "shasha"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis特殊数据类型"><a href="#Redis特殊数据类型" class="headerlink" title="Redis特殊数据类型"></a>Redis特殊数据类型</h3><h4 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h4><blockquote>
<p>Geospatial类型：地理位置相关业务可以使用，例如：朋友定位，附近的人，打车距离计算等等，一般来说，平常开发用不到，但是也是非常有用的。</p>
<ul>
<li><p>geo底层的实现原理其实就是zset，可以使用zset的有关命令来操作geo</p>
</li>
<li><p>使用之前，必须使用程序将位置的经纬度输入里面，才能进行一些操作</p>
</li>
<li>经纬度的顺序不能写反</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">geoadd：将给定的空间元素添加到指定的键里面（用户必须先输入经度， 然后再输入纬度 ==&gt; 参数顺序：（经度 维度 地点名称）</span><br><span class="line">geopos：获取当前城市的经度和维度（一个或者多个）</span><br><span class="line">GEODIST：获取两个位置之间的距离（单位：m,km,mi：英里，ft:英尺）如果位置不存在，则返回为空</span><br><span class="line">		使用场景：两人之间的距离计算</span><br><span class="line">georadius： 以给定经纬度位置为中心（110 30）寻找方圆1000km之内的位置元素（可以配合参数，设置返回结果）</span><br><span class="line">		使用场景：微信附近的人</span><br><span class="line">GEORADIUSBYMEMBER：返回指定位置周围的其他元素（这里直接使用位置，而不是经纬度）</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.408 39.904 beijing  # 输入一个空间元素到china:city的键里面</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.445 31.213 shanghai</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 117.246 39.117 tianjing</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.549 29.581 chongqing</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd chain:city 126.645 45.758 haerbin 123.964 47.343 qiqihaer  #一次输入多个空间元素到china:city的键里面</span><br><span class="line">(integer) 2</span><br><span class="line">=================================================================================================================</span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing  # 获取当前城市的经度和维度（一个或者多个）</span><br><span class="line">1) 1) "116.40800267457962036"</span><br><span class="line">   2) "39.90399988166036138"</span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing chongqing</span><br><span class="line">1) 1) "116.40800267457962036"</span><br><span class="line">   2) "39.90399988166036138"</span><br><span class="line">2) 1) "106.54900163412094116"</span><br><span class="line">   2) "29.58100070345364685"</span><br><span class="line"> =================================================================================================================</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqing km  # 获取两个位置之间的距离（单位：m,km,mi：英里，ft:英尺），如果位置不存在，则返回为空</span><br><span class="line">"1457.4843"</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqing m</span><br><span class="line">"1457484.3470"</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqing mi</span><br><span class="line">"905.6410"</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqing ft</span><br><span class="line">"4781772.7919"</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqin km</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">=================================================================================================================</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 35 1000 km  # 以给定经纬度位置为中心（110 30）寻找方圆1000km之内的位置元素</span><br><span class="line">1) "chongqing"</span><br><span class="line">2) "tianjing"</span><br><span class="line">3) "beijing"</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 35 1000 km withdist  # 同时返回位置元素与中心位置的距离</span><br><span class="line">1) 1) "chongqing"</span><br><span class="line">   2) "684.3945"</span><br><span class="line">2) 1) "tianjing"</span><br><span class="line">   2) "789.0899"</span><br><span class="line">3) 1) "beijing"</span><br><span class="line">   2) "785.4967"</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 35 1000 km withdist withcoord  # 同时返回位置元素的经纬度</span><br><span class="line">1) 1) "chongqing"</span><br><span class="line">   2) "684.3945"</span><br><span class="line">   3) 1) "106.54900163412094116"</span><br><span class="line">      2) "29.58100070345364685"</span><br><span class="line">2) 1) "tianjing"</span><br><span class="line">   2) "789.0899"</span><br><span class="line">   3) 1) "117.24599987268447876"</span><br><span class="line">      2) "39.11699937833952134"</span><br><span class="line">3) 1) "beijing"</span><br><span class="line">   2) "785.4967"</span><br><span class="line">   3) 1) "116.40800267457962036"</span><br><span class="line">      2) "39.90399988166036138"</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 35 1000 km withdist withcoord asc  # 按照距离的由近及远的顺序返回</span><br><span class="line">1) 1) "chongqing"</span><br><span class="line">   2) "684.3945"</span><br><span class="line">   3) 1) "106.54900163412094116"</span><br><span class="line">      2) "29.58100070345364685"</span><br><span class="line">2) 1) "beijing"</span><br><span class="line">   2) "785.4967"</span><br><span class="line">   3) 1) "116.40800267457962036"</span><br><span class="line">      2) "39.90399988166036138"</span><br><span class="line">3) 1) "tianjing"</span><br><span class="line">   2) "789.0899"</span><br><span class="line">   3) 1) "117.24599987268447876"</span><br><span class="line">      2) "39.11699937833952134"</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 35 1000 km withdist withcoord desc # 按照距离的由远及近的顺序返回</span><br><span class="line">1) 1) "tianjing"</span><br><span class="line">   2) "789.0899"</span><br><span class="line">   3) 1) "117.24599987268447876"</span><br><span class="line">      2) "39.11699937833952134"</span><br><span class="line">2) 1) "beijing"</span><br><span class="line">   2) "785.4967"</span><br><span class="line">   3) 1) "116.40800267457962036"</span><br><span class="line">      2) "39.90399988166036138"</span><br><span class="line">3) 1) "chongqing"</span><br><span class="line">   2) "684.3945"</span><br><span class="line">   3) 1) "106.54900163412094116"</span><br><span class="line">      2) "29.58100070345364685"</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 35 1000 km withdist withcoord count 2 desc  # 限制返回2个位置元素</span><br><span class="line">1) 1) "tianjing"</span><br><span class="line">   2) "789.0899"</span><br><span class="line">   3) 1) "117.24599987268447876"</span><br><span class="line">      2) "39.11699937833952134"</span><br><span class="line">2) 1) "beijing"</span><br><span class="line">   2) "785.4967"</span><br><span class="line">   3) 1) "116.40800267457962036"</span><br><span class="line">      2) "39.90399988166036138"</span><br><span class="line">      </span><br><span class="line">=================================================================================================================</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km withcoord withdist asc  # 返回指定位置周围的其他元素</span><br><span class="line">1) 1) "beijing"</span><br><span class="line">   2) "0.0000"</span><br><span class="line">   3) 1) "116.40800267457962036"</span><br><span class="line">      2) "39.90399988166036138"</span><br><span class="line">2) 1) "tianjing"</span><br><span class="line">   2) "113.2837"</span><br><span class="line">   3) 1) "117.24599987268447876"</span><br><span class="line">      2) "39.11699937833952134"</span><br><span class="line">=================================================================================================================</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1  # 底层的实现原理是zset，所以zset的命令在geo这里仍然适用</span><br><span class="line">1) "chongqing"</span><br><span class="line">2) "shanghai"</span><br><span class="line">3) "tianjing"</span><br><span class="line">4) "beijing"</span><br><span class="line">5) "qiqihaer"</span><br><span class="line">6) "haerbin"</span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijing chongqing  # 移除两个元素</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class="line">1) "shanghai"</span><br><span class="line">2) "tianjing"</span><br><span class="line">3) "qiqihaer"</span><br><span class="line">4) "haerbin"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h4><blockquote>
<p>Hyperloglog类型：计算基数数量的数据类型</p>
<ul>
<li><p>什么是基数？</p>
<ul>
<li><p>基数：不重复的元素的数量（可以接收一定的误差）</p>
</li>
<li><p>例如：A:{1,2,3,6,7},B:{1,3,5,6},那么A和B中不重复的元素是1，2，3，5，6，7那么返回的基数数量就是6个</p>
<p>使用场景：</p>
</li>
<li><p>网页的UV统计（一个人访问一个统战多次，但是还算是一个人的这样统计）</p>
<ul>
<li>传统方式：set保存用户id，set中元素不允许重复，所有以set中的数据量作为统计基准</li>
<li>set方式如果保存大量id，会比较占内存，如果单纯计数的话，会比较浪费内存</li>
<li>所有可以使用Hyperloglog统计UV</li>
</ul>
</li>
</ul>
</li>
<li><p>优点：占用的内存是固定的，存储2^64^不同的元素时，只需要12KB内存大小，如果从存储内存角度来比较的话，Hyperloglog是统计操作的首选</p>
</li>
<li><p>缺点：官方给出会有0.81%的错误率，但是统计任务的话，可以忽略不计</p>
</li>
</ul>
<p>总结：</p>
<ul>
<li>如果允许容错，使用Hyperloglog</li>
<li>如果不允许容错，可以使用set或者其他的数据类型</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">pfadd：创建Hyperloglog类型的一组元素，如果设置的元素已经存在，则不会进行更新操作，设置失败，返回0，否则返回1</span><br><span class="line">PFMERGE：合并两组元素，返回并集结果</span><br><span class="line">pfcount：返回Hyperloglog类型组中元素的数量</span><br><span class="line">127.0.0.1:6379&gt; pfadd user:views 1 2 3 4 5  # 创建第一组key为user:views的元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd user:views 2  # 如果设置的元素已经存在，则不会进行更新操作，设置失败，返回0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; pfadd user:views 6 # 如果设置的元素不存在，则进行更新操作，设置成功，返回1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd user:id 4 5 6 7 8 9 10  # 创建第二组key为user:id的元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE user user:views user:id  # 合并两组元素，返回并集结果</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount user  # 返回一组元素的数量</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; pfcount user:views user:id  # 也可以直接统计并返回多组元素的数量</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h4><blockquote>
<p>Bitmap类型：位图数据结构，都是操作二进制位来进行记录，就只有0和1两个状态</p>
<p>使用场景：</p>
<ul>
<li>统计用户某段时间内是否活跃，是否登录，是否打卡等等，只要是只有两个状态的，否可以使用bitmap来实现。</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">周一到周日表示标志：1 2 3 4 ... 7 数字表示</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 1 1  <span class="comment"># 设置一周之中每天是否打卡（0：未打卡，1：打卡）</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 7 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 2  <span class="comment"># 查看某一天是否有打卡</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT sign  <span class="comment"># 统计这周的打卡天数</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><blockquote>
<p><strong>重点：Redis单条命令是保证原子性的，但是Redis事务不保证原子性</strong></p>
<p>例如：对同一个账户，在一个事务操作有两条命令，第一条命令：+100元，第二条命令：-100元，在MySQL中，事务具有原子性，如果第一条命令失败了，那么第二条命令不会被执行，所有mysql事务遵循ACID原则，但是在Redis中，如果第一条命令在运行时发生错误，那么第二条命令仍然会被执行，最终会导致数据错误，所以在Redis事务不保证原子性。</p>
<p><strong>重点：Redis事务没有隔离级别的概念</strong></p>
<ul>
<li>所有的命令先设置在事务中，并没有直接被执行，而是当发起执行命令的时候，按照Redis事务的特点进行执行。</li>
<li>不会出现MySQL等关系型数据库中的脏读、幻读、等影响。</li>
</ul>
<p>Redis事物本质：一组命令的集合！一个食物中所有的命令都会被序列化，在事务的执行过程中，会按照书勋执行。</p>
<p>特点：</p>
<ul>
<li>一次性：一次执行完毕</li>
<li>顺序性：按照命令的先后循序执行</li>
<li>排他性：在事务执行过程中，不能执行其他的命令</li>
</ul>
<p>Redis事务的具体命令操作</p>
<ul>
<li>开启事务：multi</li>
<li>命令入队：写入基本的命令操作</li>
<li>执行事务：exec</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">演示：正常执行事务的流程</span><br><span class="line">127.0.0.1:6379&gt; multi  # 开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2  # 命令入队</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3  # 命令入队</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2  # 命令入队</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; APPEND k1 @horse</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec  # 执行事务（入队的命令按照顺序执行成功）</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) "v2"</span><br><span class="line">4) 1) "v1"</span><br><span class="line">   2) "v3"</span><br><span class="line">5) (integer) 8</span><br><span class="line">6) "v1@horse"</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">演示：放弃事务（放弃事务之后，之前入队的所有命令都不会被执行）</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD  # 取消事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k3  # 事务中的命令不会被执行，所以这里获取不到值</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">1) (nil)</span><br><span class="line">2) (nil)</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">演示：编译异常（如果代码有问题，或者命令有错，编译时就没有通过，那么此时事务中所有的命令都不会被执行）</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k1 @horse</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k2   # 这里代码命令错误（但是事务并没有消失）</span><br><span class="line">(error) ERR wrong number of arguments for 'getset' command</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec  # 开启事务时报错（之前入队的命令，全部没有执行）</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1  # 无法获取值</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; mget k2 k3</span><br><span class="line">1) (nil)</span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">演示：运行时异常（例如：1/0这样异常，如果发生运行时异常，那么执行命令的时候，其他命令可以正常执行，而发生异常的命令会被抛出异常，完全不影响其他正常命令的执行）</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 "horse"  # 先设置一个值</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1  # 将这个k1自增（语法没有错误，但是只有integer类型的数据可以自增，所以这里会报错）</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range  # 第二条命令报错，但是下面的命令仍然正常执行，毫不影响</span><br><span class="line">3) OK</span><br><span class="line">4) OK</span><br><span class="line">5) 1) "horse"</span><br><span class="line">   2) "v2"</span><br><span class="line">   3) "v3"</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Watch监视"><a href="#Watch监视" class="headerlink" title="Watch监视"></a>Watch监视</h4><blockquote>
<p>Watch监视：相当于乐观锁的思维逻辑</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">=================================================================================================================</span><br><span class="line">演示：正常执行成功</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money  <span class="comment"># 设置监视money对象（监视money的值是否会发生改变）</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget money out</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment"># 事务正常执行成功，money的数据在事务执行期间没有发生变动；</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br><span class="line">3) 1) <span class="string">"80"</span></span><br><span class="line">   2) <span class="string">"20"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">演示：在事务执行之前，另一条redis的线程修改了money的值，导致整个事务执行失败</span><br><span class="line">=================================================================================================================</span><br><span class="line">redis事务线程：当执行<span class="built_in">exec</span>时，首先会比较money的值是否被改变过，如果改变过，则事务执行失败，否则事务执行成功</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget money out</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment"># 当执行事务后，返回值为空（是因为另一条redis的线程修改了money的值，导致整个事务执行失败）</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line"><span class="string">"1000"</span></span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">另一条线程：改变money的值</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 1000  <span class="comment"># 修改money=1000</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get money  <span class="comment"># 修改成功</span></span><br><span class="line"><span class="string">"1000"</span></span><br><span class="line"></span><br><span class="line">=================================================================================================================</span><br><span class="line">如果发现事务执行失败，必须先解锁，获取最新值，再次监视，进行事务执行</span><br><span class="line">127.0.0.1:6379&gt; get money  <span class="comment"># 查看money的当前值</span></span><br><span class="line"><span class="string">"1000"</span></span><br><span class="line">127.0.0.1:6379&gt; UNWATCH  <span class="comment"># 解除对所有key值的watch监视</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money  <span class="comment"># 重新监视（相当于 select version 的操作）</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 100</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget money out</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>  <span class="comment"># 执行成功</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 900</span><br><span class="line">2) (<span class="built_in">integer</span>) 100</span><br><span class="line">3) 1) <span class="string">"900"</span></span><br><span class="line">   2) <span class="string">"100"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis代码演示"><a href="#Redis代码演示" class="headerlink" title="Redis代码演示"></a>Redis代码演示</h3><blockquote>
<p>对于Java对Redid的API的操作练习，后面有时间统一进行。</p>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">===============================================string============================================================</span><br><span class="line">    </span><br><span class="line">        ValueOperations&lt;String, Object&gt; stringTemplate = redisTemplate.opsForValue();</span><br><span class="line">        <span class="comment">// 如果不存在就设置key(setpx)</span></span><br><span class="line">        stringTemplate.setIfAbsent(<span class="string">"name"</span>, <span class="string">"horse"</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">        stringTemplate.setIfAbsent(<span class="string">"name"</span>, <span class="string">"muzi"</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 判断key是否存在(exists)</span></span><br><span class="line">        redisTemplate.hasKey(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 移除key的过期时间,使其变成永不过期的key(persist)</span></span><br><span class="line">        redisTemplate.persist(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 判断key对应信息的类型(type)</span></span><br><span class="line">        System.out.println(redisTemplate.type(<span class="string">"name"</span>));</span><br><span class="line">        <span class="comment">// 追加key为name的值()append</span></span><br><span class="line">        stringTemplate.append(<span class="string">"name"</span>, <span class="string">"@muzi"</span>);</span><br><span class="line">        <span class="comment">// 获取当前key的大小(strlen)</span></span><br><span class="line">        System.out.println(stringTemplate.size(<span class="string">"name"</span>));</span><br><span class="line">        <span class="comment">// 将旧的key设置为value，并且返回旧的key</span></span><br><span class="line">        System.out.println(stringTemplate.getAndSet(<span class="string">"name"</span>, <span class="string">"horsemuzi"</span>));</span><br><span class="line">        <span class="comment">// 自增/自减</span></span><br><span class="line">        stringTemplate.setIfAbsent(<span class="string">"age"</span>, <span class="number">22</span>);</span><br><span class="line">        stringTemplate.increment(<span class="string">"age"</span>, <span class="number">20</span>);</span><br><span class="line">        stringTemplate.increment(<span class="string">"age"</span>);</span><br><span class="line">        stringTemplate.decrement(<span class="string">"age"</span>, <span class="number">10</span>);</span><br><span class="line">        stringTemplate.decrement(<span class="string">"age"</span>);</span><br><span class="line">        System.out.println(stringTemplate.get(<span class="string">"age"</span>));</span><br><span class="line">        <span class="comment">// 批量获取key</span></span><br><span class="line">        List&lt;Object&gt; list = stringTemplate.multiGet(<span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"name"</span>, <span class="string">"age"</span>)));</span><br><span class="line">===============================================hash============================================================</span><br><span class="line">		HashOperations&lt;String, Object, Object&gt; hashTemplate = redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置一个值</span></span><br><span class="line">        hashTemplate.put(<span class="string">"log"</span>, <span class="string">"log01"</span>, <span class="string">"第一条日志对象"</span>);</span><br><span class="line">        <span class="comment">// 设置一个值,不存在才设置</span></span><br><span class="line">        hashTemplate.putIfAbsent(<span class="string">"log"</span>, <span class="string">"log02"</span>, <span class="string">"第二条日志"</span>);</span><br><span class="line">        hashTemplate.putIfAbsent(<span class="string">"log"</span>, <span class="string">"log03"</span>, <span class="string">"第三条日志"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取变量中的指定map键是否有值,如果存在该map键则获取值，没有则返回null</span></span><br><span class="line">        System.out.println(hashTemplate.get(<span class="string">"log"</span>, <span class="string">"log01"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有key-value集合</span></span><br><span class="line">        Map&lt;Object, Object&gt; logs = hashTemplate.entries(<span class="string">"log"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; log : logs.entrySet()) {</span><br><span class="line">            System.out.println(log.getKey() + <span class="string">"===&gt;"</span> + log.getValue());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 获取所有key的集合</span></span><br><span class="line">        Set&lt;Object&gt; keys = hashTemplate.keys(<span class="string">"log"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : keys) {</span><br><span class="line">            System.out.println(<span class="string">"key:"</span> + key);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有value的集合</span></span><br><span class="line">        List&lt;Object&gt; values = hashTemplate.values(<span class="string">"log"</span>);</span><br><span class="line">        values.forEach(System.out::println);    </span><br><span class="line">    </span><br><span class="line">         <span class="comment">// 判断指定字段是否存在</span></span><br><span class="line">        System.out.println(hashTemplate.hasKey(<span class="string">"log"</span>, <span class="string">"log02"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定字段(可一次删除多个)</span></span><br><span class="line">        System.out.println(hashTemplate.delete(<span class="string">"log"</span>, <span class="string">"log02"</span>));</span><br><span class="line"></span><br><span class="line">===============================================list============================================================</span><br><span class="line">    	ListOperations&lt;String, Object&gt; listTemplate = redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">        listTemplate.leftPush(<span class="string">"list"</span>, <span class="number">1</span>);</span><br><span class="line">        listTemplate.leftPushAll(<span class="string">"list"</span>, Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">        listTemplate.rightPush(<span class="string">"list"</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 如果索引为3的值存在就在其前面添加一个值</span></span><br><span class="line">        listTemplate.leftPush(<span class="string">"list"</span>, <span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取列表指定范围内的元素</span></span><br><span class="line">        List&lt;Object&gt; list = listTemplate.range(<span class="string">"list"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定索引处的值</span></span><br><span class="line">        System.out.println(listTemplate.index(<span class="string">"list"</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置指定索引处元素的值</span></span><br><span class="line">        listTemplate.set(<span class="string">"list"</span>, <span class="number">0</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除并获取列表中第一个元素</span></span><br><span class="line">        System.out.println(listTemplate.leftPop(<span class="string">"list"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除并获取列表最后一个元素</span></span><br><span class="line">        System.out.println(listTemplate.rightPop(<span class="string">"list"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从一个队列的右边弹出一个元素并将这个元素放入另一个指定队列的最左边</span></span><br><span class="line">        listTemplate.rightPopAndLeftPush(<span class="string">"list"</span>, <span class="string">"new:list"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除集合中值等于value的元素(index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素; index&lt;0, 从尾部开始删除第一个值等于value的元素)</span></span><br><span class="line">        listTemplate.remove(<span class="string">"list"</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取list长度</span></span><br><span class="line">        System.out.println(listTemplate.size(<span class="string">"list"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剪切list</span></span><br><span class="line">        listTemplate.trim(<span class="string">"list"</span>, <span class="number">0</span>, <span class="number">4</span>);   </span><br><span class="line">    </span><br><span class="line"> ===============================================set============================================================ </span><br><span class="line">		SetOperations&lt;String, Object&gt; setTemplate = redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">        setTemplate.add(<span class="string">"set"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>);</span><br><span class="line"></span><br><span class="line">        setTemplate.add(<span class="string">"other:set"</span>, <span class="string">"eight"</span>, <span class="string">"one"</span>, <span class="string">"five"</span>, <span class="string">"nine"</span>, <span class="string">"ten"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取集合的大小</span></span><br><span class="line">        System.out.println(setTemplate.size(<span class="string">"set"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取set集合的所有成员元素</span></span><br><span class="line">        System.out.println(setTemplate.members(<span class="string">"set"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除元素(单个值、多个值)</span></span><br><span class="line">        setTemplate.remove(<span class="string">"set"</span>, <span class="string">"two"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除并且返回一个随机的元素</span></span><br><span class="line">        System.out.println(setTemplate.pop(<span class="string">"set"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断集合是否包含value</span></span><br><span class="line">        System.out.println(setTemplate.isMember(<span class="string">"set"</span>, <span class="string">"seven"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取两个集合的交集</span></span><br><span class="line">        System.out.println(setTemplate.intersect(<span class="string">"set"</span>, <span class="string">"other:set"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取两个集合的交集并存储到新的集合中</span></span><br><span class="line">        setTemplate.intersectAndStore(Arrays.asList(<span class="string">"set"</span>, <span class="string">"other:set"</span>), <span class="string">"new:set"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取两个或者多个集合的并集</span></span><br><span class="line">        System.out.println(setTemplate.union(<span class="string">"set"</span>, <span class="string">"other:set"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取两个或者多个集合的差集</span></span><br><span class="line">        System.out.println(setTemplate.difference(<span class="string">"set"</span>, <span class="string">"other:set"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机返回集合中指定数量的元素</span></span><br><span class="line">        System.out.println(setTemplate.randomMembers(<span class="string">"set"</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(setTemplate.scan(<span class="string">"set"</span>, ScanOptions.NONE));</span><br><span class="line">     </span><br><span class="line">===============================================zset============================================================   </span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zsetTemplate = redisTemplate.opsForZSet();</span><br><span class="line">        zsetTemplate.add(<span class="string">"salary"</span>, <span class="string">"horse"</span>, <span class="number">1100</span>);</span><br><span class="line">        zsetTemplate.add(<span class="string">"salary"</span>, <span class="string">"muzi"</span>, <span class="number">2200</span>);</span><br><span class="line">        zsetTemplate.add(<span class="string">"salary"</span>, <span class="string">"lili"</span>, <span class="number">3300</span>);</span><br><span class="line">        zsetTemplate.add(<span class="string">"salary"</span>, <span class="string">"shasha"</span>, <span class="number">4400</span>);</span><br><span class="line">        zsetTemplate.add(<span class="string">"salary"</span>, <span class="string">"siyu"</span>, <span class="number">5500</span>);</span><br><span class="line">        zsetTemplate.add(<span class="string">"salary"</span>, <span class="string">"caixia"</span>, <span class="number">6600</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取集合大小</span></span><br><span class="line">        System.out.println(zsetTemplate.size(<span class="string">"salary"</span>));</span><br><span class="line">        System.out.println(zsetTemplate.zCard(<span class="string">"salary"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回score在1000-4000区间内的成员数量</span></span><br><span class="line">        System.out.println(zsetTemplate.count(<span class="string">"salary"</span>, <span class="number">1000</span>, <span class="number">4000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取集合中给定区间的元素</span></span><br><span class="line">        System.out.println(zsetTemplate.range(<span class="string">"salary"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加元素的score值，并返回增加后的值</span></span><br><span class="line">        System.out.println(zsetTemplate.incrementScore(<span class="string">"salary"</span>, <span class="string">"horse"</span>, <span class="number">500</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列</span></span><br><span class="line">        System.out.println(zsetTemplate.rank(<span class="string">"salary"</span>, <span class="string">"muzi"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回元素在集合的排名,按元素的score值由大到小排列</span></span><br><span class="line">        System.out.println(zsetTemplate.reverseRank(<span class="string">"salary"</span>, <span class="string">"muzi"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照Score值查询集合中的元素，结果从小到大排序</span></span><br><span class="line">        System.out.println(zsetTemplate.rangeByScore(<span class="string">"salary"</span>, Double.MIN_VALUE, Double.MAX_VALUE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照Score值查询集合中的元素，结果从大到小排序</span></span><br><span class="line">        System.out.println(zsetTemplate.reverseRangeByScore(<span class="string">"salary"</span>, Double.MIN_VALUE, Double.MAX_VALUE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照Score值查询集合中的元素，结果从小到大排序,返回值带有score值,并且跳过第一个,返回3个</span></span><br><span class="line">        System.out.println(zsetTemplate.rangeByScoreWithScores(<span class="string">"salary"</span>, Double.MIN_VALUE, Double.MAX_VALUE, <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取集合中key、value元素对应的score值</span></span><br><span class="line">        System.out.println(zsetTemplate.score(<span class="string">"salary"</span>, <span class="string">"horse"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除指定score范围的集合成员</span></span><br><span class="line">        System.out.println(zsetTemplate.removeRangeByScore(<span class="string">"salary"</span>, <span class="number">2000</span>, <span class="number">3000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合（和iterator一模一样）</span></span><br><span class="line">        Cursor&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; salarys = zsetTemplate.scan(<span class="string">"salary"</span>, ScanOptions.NONE);</span><br><span class="line">        <span class="keyword">while</span> (salarys.hasNext()) {</span><br><span class="line">            ZSetOperations.TypedTuple&lt;Object&gt; next = salarys.next();</span><br><span class="line">            System.out.println(next.getValue() + <span class="string">"==="</span> + next.getScore());</span><br><span class="line">        }    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">===============================================hyperloglog=======================================================</span><br><span class="line">        <span class="comment">// 基数统计(占用空间小)</span></span><br><span class="line">        HyperLogLogOperations&lt;String, Object&gt; hyperLogLogTemplate = redisTemplate.opsForHyperLogLog();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第一组key为user:views的元素</span></span><br><span class="line">        hyperLogLogTemplate.add(<span class="string">"user:views"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        hyperLogLogTemplate.add(<span class="string">"other:views"</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接统计多组元素的基数(不重复的数的数量)</span></span><br><span class="line">        System.out.println(hyperLogLogTemplate.size(<span class="string">"user:views"</span>, <span class="string">"other:views"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先合并多组元素,再统计</span></span><br><span class="line">        hyperLogLogTemplate.union(<span class="string">"new:views"</span>, <span class="string">"user:views"</span>, <span class="string">"other:views"</span>);</span><br><span class="line">        System.out.println(hyperLogLogTemplate.size(<span class="string">"new:views"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除一组元素</span></span><br><span class="line">        hyperLogLogTemplate.delete(<span class="string">"user:views"</span>);    </span><br><span class="line"></span><br><span class="line">===============================================bitmap=======================================================</span><br><span class="line"> 		ValueOperations&lt;String, Object&gt; stringTemplate = redisTemplate.opsForValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟周一到周日的签到效果,true: 签到,false: 未签到</span></span><br><span class="line">        stringTemplate.setBit(<span class="string">"user:1001"</span>, <span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">        stringTemplate.setBit(<span class="string">"user:1001"</span>, <span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">        stringTemplate.setBit(<span class="string">"user:1001"</span>, <span class="number">3</span>, <span class="keyword">true</span>);</span><br><span class="line">        stringTemplate.setBit(<span class="string">"user:1001"</span>, <span class="number">4</span>, <span class="keyword">false</span>);</span><br><span class="line">        stringTemplate.setBit(<span class="string">"user:1001"</span>, <span class="number">5</span>, <span class="keyword">true</span>);</span><br><span class="line">        stringTemplate.setBit(<span class="string">"user:1001"</span>, <span class="number">6</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取某一天是否签到</span></span><br><span class="line">        System.out.println(stringTemplate.getBit(<span class="string">"user:1001"</span>, <span class="number">3</span>));</span><br><span class="line">	   <span class="comment">// 获取签到总天数</span></span><br><span class="line">        Long count = redisTemplate.execute((RedisCallback&lt;Long&gt;) cou -&gt; cou.bitCount(<span class="string">"user:1001"</span>.getBytes()));</span><br><span class="line">        System.out.println(<span class="string">"一周签到天数:"</span> + count);</span><br><span class="line"></span><br><span class="line">===============================================watch监控+事务演示=============================================</span><br><span class="line">	    ValueOperations&lt;String, Object&gt; stringTemplate = redisTemplate.opsForValue();</span><br><span class="line"></span><br><span class="line">        stringTemplate.set(<span class="string">"money"</span>, <span class="number">100</span>);</span><br><span class="line">        stringTemplate.set(<span class="string">"out"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// watch监控(如果有另一个线程在事务执行期间,修改了这个money值,那么此事务不会执行)</span></span><br><span class="line">        redisTemplate.watch(<span class="string">"money"</span>);</span><br><span class="line">		<span class="comment">// 模拟另一个线程修改money的值</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            stringTemplate.increment(<span class="string">"money"</span>, <span class="number">1000</span>);</span><br><span class="line">        }).start();</span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        redisTemplate.multi();</span><br><span class="line">        stringTemplate.decrement(<span class="string">"money"</span>, <span class="number">20</span>);</span><br><span class="line">        stringTemplate.increment(<span class="string">"out"</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 执行事务总的命令</span></span><br><span class="line">        redisTemplate.exec();</span><br><span class="line">        System.out.println(stringTemplate.multiGet(Arrays.asList(<span class="string">"money"</span>, <span class="string">"out"</span>)));</span><br><span class="line">		<span class="comment">// 结果：[1100, 0] 表明事务没有执行</span></span><br><span class="line">		</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h3><blockquote>
<p>Redis.conf文件基本配置了解</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">===============================================网络===============================================</span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1  <span class="comment"># 此redis绑定的ip,如果设置为“*”则表示：可以任意客户端ip访问</span></span><br><span class="line">protected-mode yes <span class="comment"># 开始保护模式</span></span><br><span class="line">port 6379 <span class="comment"># 默认端口号</span></span><br><span class="line"></span><br><span class="line">===============================================通用===============================================</span><br><span class="line">daemonize yes <span class="comment"># 以守护进程的方式运行（也就是可以允许后台运行）默认是no,我们需要自己开启为yes</span></span><br><span class="line">datebases 16 <span class="comment"># 数据库的数量，默认有16个</span></span><br><span class="line">alaas-show-logo yes <span class="comment"># 是否总是显示开启redis时的logo样式（无关紧要）</span></span><br><span class="line"></span><br><span class="line">===============================================持久化===============================================</span><br><span class="line"><span class="comment"># 持久化：设置在规定时间内，执行了多少次操作后就持久化数据到rdb文件中（这个我们也可以进行自定义配置）</span></span><br><span class="line"><span class="comment"># redis是内存型数据库，如果没有持久化，那么数据断电就是消失</span></span><br><span class="line">save 900 1 <span class="comment"># 如果900s内，至少有1个key进行修改，那么就进行持久化操作</span></span><br><span class="line">save 300 10 <span class="comment">#  如果300s内，至少有10个key进行修改，那么就进行持久化操作</span></span><br><span class="line">save 60 10000 <span class="comment">#  如果60s内，至少有10000个key进行修改，那么就进行持久化操作</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes  <span class="comment"># 如果持久化出错，是否还需要继续工作</span></span><br><span class="line"></span><br><span class="line">rdbcompression yes  <span class="comment"># 是否压缩rdb文件，需要消耗一些cpu资源</span></span><br><span class="line"></span><br><span class="line">rdbchecksum yes  <span class="comment"># 保存rdb文件的时候，是否进行错误的检查校验</span></span><br><span class="line"></span><br><span class="line">dir ./  <span class="comment"># 设置rdb文件保存的位置目录</span></span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb  <span class="comment"># 设置rdb方式持久化产生的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># aof的配置，全部默认即可，只是了解一下</span></span><br><span class="line">appendonly no  <span class="comment">#时候开启rof持久化模式，默认不开启，因为在大多数情况下，rdb持久化模式完全够用</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span>  <span class="comment"># 设置持久化文件的名字</span></span><br><span class="line">appendfsync everysec  <span class="comment"># 每秒执行一次同步，但是可能会丢失这1s的值</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>Redis的密码设置（命令版）:redis默认是没有密码的，当我们使用命令设置完密码之后，需要进行登录，才能进行正常的工作。</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get requirepass  # 获取redis的密码，默认为空</span><br><span class="line">1) "requirepass"</span><br><span class="line">2) ""</span><br><span class="line">127.0.0.1:6379&gt; config set requirepass "redis123"  # 设置redis的密码</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; auth redis123  # 使用密码进行登录redis</span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; config get requirepass  # 再次查看redis的密码</span><br><span class="line">1) "requirepass"</span><br><span class="line">2) "redis123"</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><h4 id="RDB模式"><a href="#RDB模式" class="headerlink" title="RDB模式"></a>RDB模式</h4><blockquote>
<p>为什么要进行持久化？</p>
<ul>
<li>Redis是内存型数据库，如果不将内存中的数据状态保存到磁盘中，那么服务器进程退出，服务器中的数据也都会随之消失，所以Redis提供了持久化的功能。</li>
</ul>
<p>主要持久化方式：</p>
<ul>
<li>RDB持久化模式（一般不需要再进行配置文件的修改，直接使用即可）</li>
</ul>
<p>优缺点：</p>
<ul>
<li>RDB优点：<ul>
<li>比AOF的方式更加高效</li>
<li>适合大规模的数据恢复</li>
</ul>
</li>
<li>RDB缺点：<ul>
<li>如果在进行最后一次持久化的时候，服务器宕机了，那么最后一次持久化的数据可能会丢失。</li>
<li>当在生成dump.rdb文件时，fork进程的时候（开启另外一条线程），会占用一定的内存空间</li>
</ul>
</li>
</ul>
<p>触发RDB的机制？</p>
<ul>
<li>满足配置文件中save规则的情况下，会自动触发rdb，进行持久化</li>
<li>执行flushall命令时，会自动触发rdb，进行持久化</li>
<li>退出redis时，会自动触发rdb，进行持久化</li>
</ul>
</blockquote>
<p>AOF模式</p>
<blockquote>
<p>原理：将我们服务器运行期间内所有命令都记录下来，生成一个xxx.aof类型文件，相当于服务器中的history命令的效果，恢复的时候就把这个文件全部执行一边（一般我们不使用这种持久化方式）</p>
</blockquote>
<h3 id="Redis订阅"><a href="#Redis订阅" class="headerlink" title="Redis订阅"></a>Redis订阅</h3><blockquote>
<p>Redis订阅：是一种消息通信模式，发送者（pub）发送消息，订阅者（sub）接收消息。</p>
<p>==一个客户端可以订阅任意数量的频道（类似于一个微信号可以订阅关注多个微信公众号）==</p>
<p>使用场景：</p>
<ul>
<li>实时消息系统</li>
<li>实时聊天室（把频道当作聊天室，将消息回显给所有人即可）</li>
<li>微信公众号订阅，关注等功能</li>
<li>稍微复杂的场景我们就是使用MQ消息中间件，但是我们要知道，redis也可以做简单的功能。</li>
</ul>
</blockquote>
<p>订阅端：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE horse  # 订阅一个名称为horse的频道</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "horse"</span><br><span class="line">3) (integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待读取发送端推送的消息</span></span><br><span class="line">1) "message"  # 消息</span><br><span class="line">2) "horse"  # 那个频道的消息</span><br><span class="line">3) "hello world!"  # 消息的具体内容</span><br><span class="line"></span><br><span class="line">1) "message"</span><br><span class="line">2) "horse"</span><br><span class="line">3) "Are You Ok!"</span><br><span class="line"></span><br><span class="line">1) "message"</span><br><span class="line">2) "horse"</span><br><span class="line">3) "Yes, I am fine. And you?"</span><br></pre></td></tr></tbody></table></figure>
<p>发送端：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish horse <span class="string">"hello world!"</span>   <span class="comment"># 发布者发布消息到horse频道，只要订阅了这个频道，都会接收到这条消息</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; publish horse <span class="string">"Are You Ok!"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; publish horse <span class="string">"Yes, I am fine. And you?"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><blockquote>
<p>Redis主从复制：指将一台Redis服务器的数据，复制到其他Redis服务器，前者称为主节点（master/leader），后者称为从节点（slave/follower）。</p>
<p>主从复制特点：</p>
<ul>
<li>数据的复制是单向的，只能由主节点到从节点</li>
<li>主节点（master）以写为主；从节点（slave）以读为主</li>
<li>默认情况下，每台Redis服务器都可以是主节点（除非配置成集群）</li>
<li>一个主节点可以设置有多个从节点（或没有从节点），但是一个从节点只能有一个主节点。</li>
</ul>
<p>主从复制功能作用：</p>
<ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载。尤其是在写少读多的场景下，通过多个从节点的分摊负载，可以大大提高Redis服务器的并发量。</li>
<li>yichongerzhong高可用（集群）基石：除了上述功能之外，主从复制还是哨兵模式和集群能够实施的基础，因此说主从复制是Redis集群高可用的基础。</li>
</ol>
</blockquote>
<h5 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h5><blockquote>
<p>我们这里测试最简单的集群配置（一主二从）：只需要配置从库，不用配置主库。</p>
</blockquote>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication  <span class="comment"># 查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master   <span class="comment"># 角色：master(主机)</span></span><br><span class="line">connected_slaves:0  <span class="comment"># 连接的从机数量：0个（当前没有配置从机）</span></span><br><span class="line">master_replid:bff2254b54e54ecedf7033ce5bf168a12fb2eea3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></tbody></table></figure>
<p>==复制三个配置redis配置文件，分别命名为：redis6379.conf、redis6380.conf、redis6381.conf，修改如下所示的信息即可==</p>
<blockquote>
<p>主要配置信息：</p>
<ol>
<li>端口号</li>
<li>pid名称（和端口号保持一致）</li>
<li>log文件名字（和端口号保持一致即可，易于区分）</li>
<li>dump.rdb文件名称（和端口号保持一致即可，易于区分）</li>
</ol>
</blockquote>
<p>==修改完毕，启动3个redis服务器（现在还没有进行主从配置，所以每一台服务器都可以是主节点）==</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin redis]<span class="comment"># ps -ef | grep redis  # 查看3台redis服务器分别启动成功</span></span><br><span class="line">root      8787     1  0 14:18 ?        00:00:00 redis-server *:6379</span><br><span class="line">root      8834     1  0 14:19 ?        00:00:00 redis-server *:6380</span><br><span class="line">root      8879     1  1 14:20 ?        00:00:00 redis-server *:6381</span><br><span class="line">root      8891  8213  0 14:20 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>配置一主二从模式的简单集群：因为默认情况下，每一台Redis都可以是主节点，所以我们现在自需要配置两个从机即可。</p>
<p>规则：主机（reids6379.conf）,从机（redis6380.conf、redis6381.conf）</p>
</blockquote>
<p>==6380（从机）—&gt;命令配置==</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin redis]<span class="comment"># redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; info replication  <span class="comment"># 没有配置成为从机之前，角色是主机</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master  <span class="comment"># 角色：主机</span></span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:bfbd46ee72759ea74ff4c0623bdde2e02221db2b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379   <span class="comment"># 配置成为端口为6379Redis服务器的从机</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication  <span class="comment"># 再次查看：角色变更为从机</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave  <span class="comment"># 角色：从机</span></span><br><span class="line">master_host:127.0.0.1  <span class="comment"># 可以看到主机的xi'ni</span></span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:3ac67367ce4f1e01b042862263ec10f2ad7a5142</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br></pre></td></tr></tbody></table></figure>
<p>==6380（从机）—&gt;conf配置==</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">replicaof 127.0.0.1 6379 <span class="comment"># 配置连接的主机ip和端口</span></span><br><span class="line">masterauth &lt;主机密码&gt;  <span class="comment"># 如果主机有密码，则配置密码，否则直接注释掉此行即可</span></span><br></pre></td></tr></tbody></table></figure>
<p>==6381（从机）—&gt;命令版==</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin redis]<span class="comment"># redis-cli -p 6381</span></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:3ff3c95f9e7493afe286055612eca586344616c9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379  <span class="comment"># 配置成为端口为6379Redis服务器的从机</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication  <span class="comment"># 再次查看：角色变更为从机</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave  </span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:434</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:3ac67367ce4f1e01b042862263ec10f2ad7a5142</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:434</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:435</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></tbody></table></figure>
<p>==6381（从机）—&gt;conf配置==</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">replicaof 127.0.0.1 6379 <span class="comment"># 配置连接的主机ip和端口</span></span><br><span class="line">masterauth &lt;主机密码&gt;  <span class="comment"># 如果主机有密码，则配置密码，否则直接注释掉此行即可</span></span><br></pre></td></tr></tbody></table></figure>
<p>==6379（主机,无需配置）==</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication  <span class="comment"># 没有配置之之前：查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master   <span class="comment"># 角色：master(主机)</span></span><br><span class="line">connected_slaves:0  <span class="comment"># 连接的从机数量：0个（当前没有配置从机）</span></span><br><span class="line">master_replid:bff2254b54e54ecedf7033ce5bf168a12fb2eea3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6379&gt; info replication  <span class="comment"># 配置之后：拥有两台从机</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=560,lag=1  <span class="comment"># 第一台从机信息</span></span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=560,lag=0  <span class="comment"># 第二台从机信息</span></span><br><span class="line">master_replid:3ac67367ce4f1e01b042862263ec10f2ad7a5142</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:560</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:560</span><br></pre></td></tr></tbody></table></figure>
<p>==注意：真实的主从配置应该在配置文件中配置，配置的是永久的，而上面的配置是使用命令配置的，配置是暂时的==</p>
<blockquote>
<p>集群模式功能细节：</p>
<ul>
<li>主机可以写，从机不能写只能读。</li>
<li>主机中的所有信息和数据，都会被从机保存</li>
</ul>
</blockquote>
<p>6379主机写数据</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">==================================================6379===========================================</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3  <span class="comment"># 写数据</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br></pre></td></tr></tbody></table></figure>
<p>6380和6381从机中也可以读取到6379主机中写的数据，但是不能写入数据</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">==================================================6380===========================================</span><br><span class="line">127.0.0.1:6380&gt; keys *  <span class="comment"># 主机写之前：没有数据</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6380&gt; keys *  <span class="comment"># 主机写之后：有数据</span></span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k3"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6380&gt; mget k1 k2 k3  <span class="comment"># 读取数据</span></span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> k4 v4  <span class="comment"># 从机不能进行写数据</span></span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only replica.</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">==================================================6381===========================================</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; keys *</span></span><br><span class="line"><span class="string">(empty list or set)</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; keys *</span></span><br><span class="line"><span class="string">1) "k2"</span></span><br><span class="line"><span class="string">2) "k1"</span></span><br><span class="line"><span class="string">3) "k3"</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; mget k1 k2 k3</span></span><br><span class="line"><span class="string">1) "v1"</span></span><br><span class="line"><span class="string">2) "v2"</span></span><br><span class="line"><span class="string">3) "v3"</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; set k4 v4</span></span><br><span class="line"><span class="string">(error) READONLY You can'</span>t write against a <span class="built_in">read</span> only replica.</span><br><span class="line">127.0.0.1:6381&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>==简单测试==</p>
<blockquote>
<p>测试1：6379主机断开连接的影响？</p>
<ul>
<li>主机断开连接，从机仍然还在连接着主机，但是没有写的操作了，这个时候，如果主机重新启动，那么从机依旧可以直接获取到主机中写的信息。</li>
</ul>
<p>测试2：6380从机断开连接的影响？</p>
<ul>
<li>因为当前是使用命令行设置的主机和从机的关系，所以如果从机宕机了，再重启回来时，就是变回主机，丧失一切配置的效果。但是如果这时再次把6380配置为6379的从机，那么6379中存在的信息，在从机中也可以读取到。</li>
</ul>
</blockquote>
<p>==复制原理==</p>
<blockquote>
<ol>
<li>slave从机成功连接到master主机后会发送一个sync同步命令</li>
<li>master主机接收到命令后，会启动后台的存盘进程，同时收集所有接收到的用于修改的数据集的命令，在后台进程执行完毕之后，master将传送整个数据文件到slave从机，并完成一次完全同步</li>
</ol>
<p>概念：</p>
<ul>
<li>全量复制：slave服务在接收到数据文件后，将其存盘并加载到内存中</li>
<li>增量复制：master继续将新的所有收集到的修改命令依次传送给slave，完成同步</li>
</ul>
<p>==只要时slave从机重新连接master主机，就是执行一次完全同步（全量复制），主机中的数据在从机中一定可以找到。</p>
</blockquote>
<h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><blockquote>
<p>哨兵模式：当master主机宕机之后，slave会自动选取老大的模式。</p>
<p>原理：能够后台监控master主机是否故障，如果故障了，会自动根据投票数（投票算法）自动将slave自动将从机转换为主机。</p>
<p>规则：当master主机发生故障之后，再重新启动的话，只能归并到新选取的master主机之下（当作新主机的从机），这是哨兵模式的优秀规则。</p>
<p>优点：</p>
<ul>
<li>哨兵集群，主要基于Redis的主从复制模式，所有的主从复制配置优点，它全部都有</li>
<li>主从可以切换，故障可以转移，系统的可用性就会更好</li>
<li>哨兵模式就是主从模式的升级版，由手动到自动的升级，架构更加强壮</li>
</ul>
<p>缺点：</p>
<ul>
<li>Redis不容易在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li>
<li>哨兵模式的sentinel.conf配置文件中有很多选择，其实也非常麻烦（示例在下面…）</li>
</ul>
</blockquote>
<p>==配置哨兵（目前模式：一主二从,先配置一个哨兵（实际工作中应该最少配置3个哨兵））==</p>
<p>1.配置哨兵配置文件sentinel.conf</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 后面的数字1表示：配置多少个sentinel哨兵统一认为master主节点挂了，那么就另外选举新的主节点（也就是打算配置多少个哨兵进程，当前我们就配置了一个哨兵进程）</span></span><br><span class="line">sentinel monnitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></tbody></table></figure>
<p>2.启动哨兵进程</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@centos7-mabin redis]<span class="comment"># redis-sentinel sentinel.conf</span></span><br><span class="line">13710:X 14 Nov 2020 15:57:29.856 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 13710:X 14 Nov 2020 15:57:29.856 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=13710, just started</span></span><br><span class="line">13710:X 14 Nov 2020 15:57:29.856 <span class="comment"># Configuration loaded</span></span><br><span class="line">                _._</span><br><span class="line">           _.-``__ <span class="string">''</span>-._</span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 5.0.5 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._</span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 26379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 13710</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span></span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |</span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span></span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span></span><br><span class="line">          `-._        _.-<span class="string">'</span></span><br><span class="line"><span class="string">              `-.__.-'</span></span><br><span class="line"></span><br><span class="line">13710:X 14 Nov 2020 15:57:29.857 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">13710:X 14 Nov 2020 15:57:29.857 <span class="comment"># Sentinel ID is e7d079569b8b3a5faf573a234865a4641f213bd3</span></span><br><span class="line">13710:X 14 Nov 2020 15:57:29.857 <span class="comment"># +monitor master mymaster 127.0.0.1 6379 quorum 1</span></span><br><span class="line">13710:X 14 Nov 2020 15:57:29.857 <span class="comment"># +monitor master myMaster 127.0.0.1 6379 quorum 1</span></span><br><span class="line">.....</span><br></pre></td></tr></tbody></table></figure>
<p>3.断开6379master主机：测试哨兵是否会从两个slave从机中投票选举一个新主机</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown  <span class="comment"># 断开Redis服务器</span></span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@centos7-mabin redis]<span class="comment"># redis-server redis6379.conf</span></span><br><span class="line">[root@centos7-mabin redis]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; info replication  <span class="comment"># 重新连接查看：此时自己已经变为6381的从机</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave  <span class="comment"># 角色：从机</span></span><br><span class="line">master_host:127.0.0.1  </span><br><span class="line">master_port:6381   <span class="comment"># 所属主机：6381</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:54423</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:a7679ff06aaed5e47cf0b14d23360beb1a4b52a5</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:54423</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:53869</span><br><span class="line">repl_backlog_histlen:555</span><br></pre></td></tr></tbody></table></figure>
<p>4.查看6381状态：被选举为新master主机</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master  <span class="comment"># 角色：主机</span></span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=144485,lag=0   <span class="comment"># 从机6380</span></span><br><span class="line">slave1:ip=127.0.0.1,port=6379,state=online,offset=144485,lag=1   <span class="comment"># 从机6379</span></span><br><span class="line">master_replid:a7679ff06aaed5e47cf0b14d23360beb1a4b52a5</span><br><span class="line">master_replid2:3ac67367ce4f1e01b042862263ec10f2ad7a5142</span><br><span class="line">master_repl_offset:144485</span><br><span class="line">second_repl_offset:37186</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:435</span><br><span class="line">repl_backlog_histlen:144051</span><br><span class="line">127.0.0.1:6381&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>5.查看6380状态：从6379的从机变成了6381的从机</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; info replication  </span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave  <span class="comment"># 角色： 从机</span></span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6381   <span class="comment"># 所属主机：6381</span></span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:1</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:49024</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:a7679ff06aaed5e47cf0b14d23360beb1a4b52a5</span><br><span class="line">master_replid2:3ac67367ce4f1e01b042862263ec10f2ad7a5142</span><br><span class="line">master_repl_offset:49024</span><br><span class="line">second_repl_offset:37186</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:49024</span><br><span class="line">127.0.0.1:6380&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>==sentinel.conf配置文件详解==（一般是运维操作的）</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵模式默认端口（如果配置多个哨兵，则应该配置多个端口）</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否设置成为守护进程，默认为no</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件的名称</span></span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir <span class="string">"/tmp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键配置：</span></span><br><span class="line">  <span class="comment"># master-name: 可以自定义名称的主节点名字，只能由字母，数字，下划线等组成</span></span><br><span class="line">  <span class="comment"># quorum: 配置当有多少个哨兵统一认为master主节点故障了，那么此时客观上就认为此master节点真的故障了</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6381 1</span><br><span class="line"></span><br><span class="line">.....后面还有很多配操作，但是我们只需要关注上面的关键配置即可</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Redis缓存穿透"><a href="#Redis缓存穿透" class="headerlink" title="Redis缓存穿透"></a>Redis缓存穿透</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><blockquote>
<p>缓存穿透概念：大面积查询不到造成的</p>
<p>当用户想要查询一个数据，发现redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败。但是当用户很多的时候，缓存后没有命中（例：秒杀活动中同时有上万个请求，但是redis总没有查询到，上万个请求都转向Mysql数据库去请求），那么持久层数据库压力很大，很有可能出现宕机故障，这个时候就相当于出现缓存穿透。</p>
<p>解决方案：</p>
<ul>
<li>布隆过滤器<ul>
<li>布隆过滤器是一种数据结构，对所有可能查询的参数都已hash形式存储，在控制层先进性校验，不符合规则请求就丢弃，从而避免了对底层存储系统的查询压力（推荐使用）</li>
</ul>
</li>
<li>缓存空对象<ul>
<li>当存储层没有命中后，即使返回的是空对象也将其缓存起来，同时设置一个过期时间，之后再有请求访问这个数据将会从缓存总获取，从而一定程度上保护了后端存储系统。（不推荐使用）</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><blockquote>
<p>缓存击穿概念：大量请求集于一个点，在缓存失效的瞬间而造成的</p>
<p>这里需要注意和缓存穿透的区别，缓存击穿指的是某一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问（例：微博热搜，会有大量的请求去请求这个热点key），==当这个key在失效的瞬间，在这个失效的空档期，持续的大并发就会穿破缓存，==，直接请求数据库，造成缓存击穿，就像是在屏幕上砸开了一个洞的操作。</p>
<p>解决方案：</p>
<ul>
<li>设置热点数据永不过期（浪费空间）<ul>
<li>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题</li>
</ul>
</li>
<li>加互斥锁<ul>
<li>使用分布式锁，保证对于每个key同时只有一个线程能够去查询后端服务，其他线程没有获取分布式锁的权限，因此只需要等待即可，这样的话，对分布式锁的考验很大。</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><blockquote>
<p>缓存雪崩概念：某一时间段，缓存集中过期失效，获取Redis服务器宕机造成的</p>
<p>例如：双十一的某一批商品集中放在缓存中，设置1小时失效时间，那么一小时之后，如果再有大量对于此商品的查询请求，就会直接转向数据库，那么如果数据库扛不住这些压力，就有可能在成存储层挂掉的情况。这就是缓存雪崩。</p>
<p>比较致命的雪崩是：某个缓存服务器直接宕机或者断网了，这是数据库承受的压力无法想象，非常致命。</p>
<p>解决方案：</p>
<ul>
<li>Redis高可用<ul>
<li>搭建高可用的Redis集群（异地多活）</li>
</ul>
</li>
<li>限流降级<ul>
<li>在缓存失效后，通过加锁或者队列来控制数据库写缓存的线程数量。</li>
</ul>
</li>
<li>数据预热<ul>
<li>在正式部署之前，先把可能的数据预先访问一遍，将大部分被访问的数据先加载到缓存中，设置不同的key和不同的过期时间，让缓存失效的时间点尽量均匀。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><blockquote>
<p>需求：手动引入 布隆过滤器 模块到redis中（redis的4.x版本开始引入布隆过滤器）</p>
<p>步骤：</p>
<ul>
<li>下载资源：<a href="https://github.com/RedisBloom/RedisBloom/archive/v2.2.3.tar.gz">布隆过滤器2.2.3下载</a></li>
<li>在 redis.conf 中引入模块</li>
<li>重新启动redis</li>
</ul>
</blockquote>
<h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><h5 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h5><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -xzvf RedisBloom-2.2.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译（进入RedisBloom-2.2.3）</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看生成的文件</span></span><br><span class="line">[root@horse bloom]<span class="comment"># cd RedisBloom-2.2.3/</span></span><br><span class="line">[root@horse RedisBloom-2.2.3]<span class="comment"># ll</span></span><br><span class="line">total 380</span><br><span class="line">-rw-rw-r-- 1 root root    211 Jul  9  2020 changelog</span><br><span class="line">drwxrwxr-x 2 root root   4096 Jul 28 16:33 contrib</span><br><span class="line">-rw-rw-r-- 1 root root    405 Jul  9  2020 Dockerfile</span><br><span class="line">drwxrwxr-x 3 root root   4096 Jul  9  2020 docs</span><br><span class="line">-rw-rw-r-- 1 root root   5794 Jul  9  2020 LICENSE</span><br><span class="line">-rw-rw-r-- 1 root root   2634 Jul  9  2020 Makefile</span><br><span class="line">-rw-rw-r-- 1 root root   1005 Jul  9  2020 mkdocs.yml</span><br><span class="line">-rw-rw-r-- 1 root root    511 Jul  9  2020 ramp.yml</span><br><span class="line">-rw-rw-r-- 1 root root   3162 Jul  9  2020 README.md</span><br><span class="line">-rwxr-xr-x 1 root root 331824 Jul 28 16:33 redisbloom.so  <span class="comment"># 需要引入的文件</span></span><br><span class="line">drwxrwxr-x 2 root root   4096 Jul 28 16:33 rmutil</span><br><span class="line">drwxrwxr-x 2 root root   4096 Jul 28 16:33 src</span><br><span class="line">drwxrwxr-x 2 root root   4096 Jul  9  2020 tests</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="redis-conf配置"><a href="#redis-conf配置" class="headerlink" title="redis.conf配置"></a>redis.conf配置</h5><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在redis.conf 中引入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================加载外部模块====================</span></span><br><span class="line"><span class="comment"># 配置加载布隆过滤器（以绝对路径引入）</span></span><br><span class="line"></span><br><span class="line">loadmodule /usr/<span class="built_in">local</span>/redis/redis-6.2.1/bloom/RedisBloom-2.2.3/redisbloom.so</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="重启reids"><a href="#重启reids" class="headerlink" title="重启reids"></a>重启reids</h5><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment"># 查看redis的重启日志，成功加载配置模块</span></span><br><span class="line"> </span><br><span class="line">13744:C 28 Jul 2021 16:43:31.292 <span class="comment"># Redis version=6.2.1, bits=64, commit=00000000, modified=0, pid=13744, just started</span></span><br><span class="line">13744:C 28 Jul 2021 16:43:31.292 <span class="comment"># Configuration loaded</span></span><br><span class="line">13744:M 28 Jul 2021 16:43:31.293 * monotonic clock: POSIX clock_gettime</span><br><span class="line">13744:M 28 Jul 2021 16:43:31.293 * Running mode=standalone, port=6379.</span><br><span class="line">13744:M 28 Jul 2021 16:43:31.293 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">13744:M 28 Jul 2021 16:43:31.293 <span class="comment"># Server initialized</span></span><br><span class="line">13744:M 28 Jul 2021 16:43:31.293 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></span><br><span class="line"></span><br><span class="line">13744:M 28 Jul 2021 16:43:31.296 * Module <span class="string">'bf'</span> loaded from /usr/<span class="built_in">local</span>/redis/redis-6.2.1/bloom/RedisBloom-2.2.3/redisbloom.so  <span class="comment"># 日志显示：模块已加载</span></span><br><span class="line"></span><br><span class="line">13744:M 28 Jul 2021 16:43:31.313 * Loading RDB produced by version 6.2.1</span><br><span class="line">13744:M 28 Jul 2021 16:43:31.313 * RDB age 4822571 seconds</span><br><span class="line">13744:M 28 Jul 2021 16:43:31.313 * RDB memory usage when created 0.83 Mb</span><br><span class="line">13744:M 28 Jul 2021 16:43:31.313 * DB loaded from disk: 0.017 seconds</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
</div></blockquote>]]></content>
      <categories>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
        <tag>Docker</tag>
        <tag>MyBatis</tag>
        <tag>Nginx</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
</search>
